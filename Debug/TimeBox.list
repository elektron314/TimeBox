
TimeBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005108  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a0  080054a0  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054a8  080054a8  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054ac  080054ac  000154ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  080054b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200000e0  08005590  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08005590  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca10  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f28  00000000  00000000  0002cb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002f418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021692  00000000  00000000  0002fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba14  00000000  00000000  000513da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9e2e  00000000  00000000  0005cdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126c1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb8  00000000  00000000  00126c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005280 	.word	0x08005280

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	08005280 	.word	0x08005280

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2uiz>:
 80005f8:	004a      	lsls	r2, r1, #1
 80005fa:	d211      	bcs.n	8000620 <__aeabi_d2uiz+0x28>
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d211      	bcs.n	8000626 <__aeabi_d2uiz+0x2e>
 8000602:	d50d      	bpl.n	8000620 <__aeabi_d2uiz+0x28>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d40e      	bmi.n	800062c <__aeabi_d2uiz+0x34>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	fa23 f002 	lsr.w	r0, r3, r2
 800061e:	4770      	bx	lr
 8000620:	f04f 0000 	mov.w	r0, #0
 8000624:	4770      	bx	lr
 8000626:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800062a:	d102      	bne.n	8000632 <__aeabi_d2uiz+0x3a>
 800062c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000648:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <TurnHexIntoDec>:
/* USER CODE BEGIN 0 */

//Time is storing in format that being in Hex visually looks like the real time in decimals
//So this function translate this format into real decimal number of time digits
uint8_t TurnHexIntoDec(uint8_t hex)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
	return ((hex & 0x000F) + ((hex >> 4) & 0x000F)*10);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f003 030f 	and.w	r3, r3, #15
 8000940:	b2da      	uxtb	r2, r3
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	0089      	lsls	r1, r1, #2
 800094c:	440b      	add	r3, r1
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4413      	add	r3, r2
 8000954:	b2db      	uxtb	r3, r3
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <TurnDecIntoHex>:

uint8_t TurnDecIntoHex(uint8_t dec)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	return ((((uint8_t)(floor(dec/10))) << 4) + dec%10);
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4a11      	ldr	r2, [pc, #68]	; (80009b8 <TurnDecIntoHex+0x54>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	08db      	lsrs	r3, r3, #3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fdd2 	bl	8000524 <__aeabi_i2d>
 8000980:	4602      	mov	r2, r0
 8000982:	460b      	mov	r3, r1
 8000984:	4610      	mov	r0, r2
 8000986:	4619      	mov	r1, r3
 8000988:	f7ff fe36 	bl	80005f8 <__aeabi_d2uiz>
 800098c:	4603      	mov	r3, r0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	011b      	lsls	r3, r3, #4
 8000992:	b2d8      	uxtb	r0, r3
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <TurnDecIntoHex+0x54>)
 8000998:	fba3 1302 	umull	r1, r3, r3, r2
 800099c:	08d9      	lsrs	r1, r3, #3
 800099e:	460b      	mov	r3, r1
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	440b      	add	r3, r1
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4403      	add	r3, r0
 80009ac:	b2db      	uxtb	r3, r3
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	cccccccd 	.word	0xcccccccd

080009bc <HappyToggling>:

void HappyToggling(uint8_t longetivity)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	uint8_t TogglingDelay = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	73fb      	strb	r3, [r7, #15]
	for (TogglingDelay = 0; TogglingDelay < longetivity; TogglingDelay++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e00b      	b.n	80009e8 <HappyToggling+0x2c>
	{
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80009d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d4:	4809      	ldr	r0, [pc, #36]	; (80009fc <HappyToggling+0x40>)
 80009d6:	f001 fd4a 	bl	800246e <HAL_GPIO_TogglePin>
	  HAL_Delay(TogglingDelay);
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 f97f 	bl	8001ce0 <HAL_Delay>
	for (TogglingDelay = 0; TogglingDelay < longetivity; TogglingDelay++)
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	3301      	adds	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	7bfa      	ldrb	r2, [r7, #15]
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d3ef      	bcc.n	80009d0 <HappyToggling+0x14>
	}
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021400 	.word	0x40021400

08000a00 <SetTime>:

void SetTime(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	/** Initialize RTC and set the Time and Date*/
	sTime.Hours = 0x23;
 8000a06:	2323      	movs	r3, #35	; 0x23
 8000a08:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x25;
 8000a0a:	2325      	movs	r3, #37	; 0x25
 8000a0c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <SetTime+0x6c>)
 8000a22:	f002 fb7b 	bl	800311c <HAL_RTC_SetTime>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SetTime+0x30>
	{
		Error_Handler();
 8000a2c:	f000 fd7c 	bl	8001528 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000a30:	2304      	movs	r3, #4
 8000a32:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_FEBRUARY;
 8000a34:	2302      	movs	r3, #2
 8000a36:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x25;
 8000a38:	2325      	movs	r3, #37	; 0x25
 8000a3a:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x21;
 8000a3c:	2321      	movs	r3, #33	; 0x21
 8000a3e:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	2201      	movs	r2, #1
 8000a44:	4619      	mov	r1, r3
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <SetTime+0x6c>)
 8000a48:	f002 fc83 	bl	8003352 <HAL_RTC_SetDate>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SetTime+0x56>
	{
		Error_Handler();
 8000a52:	f000 fd69 	bl	8001528 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000a56:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <SetTime+0x6c>)
 8000a5e:	f003 f837 	bl	8003ad0 <HAL_RTCEx_BKUPWrite>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001f0 	.word	0x200001f0

08000a70 <SetAlarmFunc>:

void SetAlarmFunc(uint8_t SetInHours, uint8_t SetInMinutes, uint8_t SetInDate, uint8_t SetInSeconds)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b08d      	sub	sp, #52	; 0x34
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4604      	mov	r4, r0
 8000a78:	4608      	mov	r0, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4623      	mov	r3, r4
 8000a80:	71fb      	strb	r3, [r7, #7]
 8000a82:	4603      	mov	r3, r0
 8000a84:	71bb      	strb	r3, [r7, #6]
 8000a86:	460b      	mov	r3, r1
 8000a88:	717b      	strb	r3, [r7, #5]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	713b      	strb	r3, [r7, #4]
	RTC_AlarmTypeDef sAlarm;

	sAlarm.AlarmTime.Hours = TurnDecIntoHex(SetInHours);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff67 	bl	8000964 <TurnDecIntoHex>
 8000a96:	4603      	mov	r3, r0
 8000a98:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = TurnDecIntoHex(SetInMinutes);
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff61 	bl	8000964 <TurnDecIntoHex>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = TurnDecIntoHex(SetInSeconds);
 8000aa6:	793b      	ldrb	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5b 	bl	8000964 <TurnDecIntoHex>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = TurnDecIntoHex(SetInDate);
 8000aca:	797b      	ldrb	r3, [r7, #5]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff49 	bl	8000964 <TurnDecIntoHex>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8000ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <SetAlarmFunc+0x90>)
 8000ae8:	f002 fd2a 	bl	8003540 <HAL_RTC_SetAlarm_IT>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SetAlarmFunc+0x86>
	{
	Error_Handler();
 8000af2:	f000 fd19 	bl	8001528 <Error_Handler>
	}
}
 8000af6:	bf00      	nop
 8000af8:	3734      	adds	r7, #52	; 0x34
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd90      	pop	{r4, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200001f0 	.word	0x200001f0

08000b04 <GetTimeDate>:

void GetTimeDate(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af02      	add	r7, sp, #8
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4913      	ldr	r1, [pc, #76]	; (8000b5c <GetTimeDate+0x58>)
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <GetTimeDate+0x5c>)
 8000b10:	f002 fbc1 	bl	8003296 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8000b14:	2201      	movs	r2, #1
 8000b16:	4913      	ldr	r1, [pc, #76]	; (8000b64 <GetTimeDate+0x60>)
 8000b18:	4811      	ldr	r0, [pc, #68]	; (8000b60 <GetTimeDate+0x5c>)
 8000b1a:	f002 fcc1 	bl	80034a0 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	sprintf((char*)time,"%02x:%02x:%02x",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <GetTimeDate+0x58>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <GetTimeDate+0x58>)
 8000b26:	785b      	ldrb	r3, [r3, #1]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <GetTimeDate+0x58>)
 8000b2c:	789b      	ldrb	r3, [r3, #2]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	460b      	mov	r3, r1
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <GetTimeDate+0x64>)
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <GetTimeDate+0x68>)
 8000b36:	f003 fee7 	bl	8004908 <siprintf>

	/* Display date Format: yy-mm-dd */
	sprintf((char*)date,"%02x-%02x-%02x",gDate.Year, gDate.Month, gDate.Date);
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <GetTimeDate+0x60>)
 8000b3c:	78db      	ldrb	r3, [r3, #3]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <GetTimeDate+0x60>)
 8000b42:	785b      	ldrb	r3, [r3, #1]
 8000b44:	4619      	mov	r1, r3
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <GetTimeDate+0x60>)
 8000b48:	789b      	ldrb	r3, [r3, #2]
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <GetTimeDate+0x6c>)
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <GetTimeDate+0x70>)
 8000b52:	f003 fed9 	bl	8004908 <siprintf>
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000190 	.word	0x20000190
 8000b60:	200001f0 	.word	0x200001f0
 8000b64:	2000010c 	.word	0x2000010c
 8000b68:	08005298 	.word	0x08005298
 8000b6c:	20000230 	.word	0x20000230
 8000b70:	080052a8 	.word	0x080052a8
 8000b74:	20000248 	.word	0x20000248

08000b78 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	alarm = 1;
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000144 	.word	0x20000144

08000b98 <IsAlarmSetBeforeNow>:

uint8_t IsAlarmSetBeforeNow(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	GetTimeDate();
 8000b9c:	f7ff ffb2 	bl	8000b04 <GetTimeDate>
	HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba6:	4924      	ldr	r1, [pc, #144]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000ba8:	4824      	ldr	r0, [pc, #144]	; (8000c3c <IsAlarmSetBeforeNow+0xa4>)
 8000baa:	f002 fe01 	bl	80037b0 <HAL_RTC_GetAlarm>
	if (gAlarm.AlarmTime.Seconds < gDate.Month)
 8000bae:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000bb0:	789a      	ldrb	r2, [r3, #2]
 8000bb2:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <IsAlarmSetBeforeNow+0xa8>)
 8000bb4:	785b      	ldrb	r3, [r3, #1]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d201      	bcs.n	8000bbe <IsAlarmSetBeforeNow+0x26>
	{
		return 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e03a      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
	} else if (gAlarm.AlarmTime.Seconds > gDate.Month)
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000bc0:	789a      	ldrb	r2, [r3, #2]
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <IsAlarmSetBeforeNow+0xa8>)
 8000bc4:	785b      	ldrb	r3, [r3, #1]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d901      	bls.n	8000bce <IsAlarmSetBeforeNow+0x36>
	{
		return 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e032      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
	} else
	{
		if (gAlarm.AlarmDateWeekDay < gDate.Date)
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000bd0:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <IsAlarmSetBeforeNow+0xa8>)
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d201      	bcs.n	8000be0 <IsAlarmSetBeforeNow+0x48>
		{
			return 1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e029      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
		} else if (gAlarm.AlarmDateWeekDay > gDate.Date)
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000be2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <IsAlarmSetBeforeNow+0xa8>)
 8000be8:	789b      	ldrb	r3, [r3, #2]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d901      	bls.n	8000bf2 <IsAlarmSetBeforeNow+0x5a>
		{
			return 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e020      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
		} else
		{
			if (gAlarm.AlarmTime.Hours < gTime.Hours)
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <IsAlarmSetBeforeNow+0xac>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d201      	bcs.n	8000c02 <IsAlarmSetBeforeNow+0x6a>
			{
				return 1;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e018      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
			} else if (gAlarm.AlarmTime.Hours > gTime.Hours)
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <IsAlarmSetBeforeNow+0xac>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d901      	bls.n	8000c12 <IsAlarmSetBeforeNow+0x7a>
			{
				return 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e010      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
			} else
			{
				if (gAlarm.AlarmTime.Minutes < gTime.Minutes)
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000c14:	785a      	ldrb	r2, [r3, #1]
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <IsAlarmSetBeforeNow+0xac>)
 8000c18:	785b      	ldrb	r3, [r3, #1]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d201      	bcs.n	8000c22 <IsAlarmSetBeforeNow+0x8a>
				{
					return 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e008      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
				} else if (gAlarm.AlarmTime.Minutes > gTime.Minutes)
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000c24:	785a      	ldrb	r2, [r3, #1]
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <IsAlarmSetBeforeNow+0xac>)
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d901      	bls.n	8000c32 <IsAlarmSetBeforeNow+0x9a>
				{
					return 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
				} else
				{
					return 1;
 8000c32:	2301      	movs	r3, #1
				}
			}
		}
	}
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000011c 	.word	0x2000011c
 8000c3c:	200001f0 	.word	0x200001f0
 8000c40:	2000010c 	.word	0x2000010c
 8000c44:	20000190 	.word	0x20000190

08000c48 <IsNewAlarmMoreFresh>:

uint8_t IsNewAlarmMoreFresh(void)
{
 8000c48:	b598      	push	{r3, r4, r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
		HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c52:	4938      	ldr	r1, [pc, #224]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000c54:	4838      	ldr	r0, [pc, #224]	; (8000d38 <IsNewAlarmMoreFresh+0xf0>)
 8000c56:	f002 fdab 	bl	80037b0 <HAL_RTC_GetAlarm>
		if (gAlarm.AlarmTime.Seconds < TurnDecIntoHex(SetSeconds))
 8000c5a:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000c5c:	789c      	ldrb	r4, [r3, #2]
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <IsNewAlarmMoreFresh+0xf4>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fe7d 	bl	8000964 <TurnDecIntoHex>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	429c      	cmp	r4, r3
 8000c6e:	d201      	bcs.n	8000c74 <IsNewAlarmMoreFresh+0x2c>
		{
			return 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e05c      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
		} else if (gAlarm.AlarmTime.Seconds > TurnDecIntoHex(SetSeconds))
 8000c74:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000c76:	789c      	ldrb	r4, [r3, #2]
 8000c78:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <IsNewAlarmMoreFresh+0xf4>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fe70 	bl	8000964 <TurnDecIntoHex>
 8000c84:	4603      	mov	r3, r0
 8000c86:	429c      	cmp	r4, r3
 8000c88:	d901      	bls.n	8000c8e <IsNewAlarmMoreFresh+0x46>
		{
			return 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e04f      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
		} else
		{
			if (gAlarm.AlarmDateWeekDay < TurnDecIntoHex(SetDate))
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000c90:	f893 4020 	ldrb.w	r4, [r3, #32]
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <IsNewAlarmMoreFresh+0xf8>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fe62 	bl	8000964 <TurnDecIntoHex>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	d201      	bcs.n	8000caa <IsNewAlarmMoreFresh+0x62>
			{
				return 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e041      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
			} else if (gAlarm.AlarmDateWeekDay > TurnDecIntoHex(SetDate))
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000cac:	f893 4020 	ldrb.w	r4, [r3, #32]
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <IsNewAlarmMoreFresh+0xf8>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fe54 	bl	8000964 <TurnDecIntoHex>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	429c      	cmp	r4, r3
 8000cc0:	d901      	bls.n	8000cc6 <IsNewAlarmMoreFresh+0x7e>
			{
				return 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e033      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
			} else
			{
				if (gAlarm.AlarmTime.Hours < TurnDecIntoHex(SetHours))
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000cc8:	781c      	ldrb	r4, [r3, #0]
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <IsNewAlarmMoreFresh+0xfc>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe47 	bl	8000964 <TurnDecIntoHex>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	d201      	bcs.n	8000ce0 <IsNewAlarmMoreFresh+0x98>
				{
					return 1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e026      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
				} else if (gAlarm.AlarmTime.Hours > TurnDecIntoHex(SetHours))
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000ce2:	781c      	ldrb	r4, [r3, #0]
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <IsNewAlarmMoreFresh+0xfc>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fe3a 	bl	8000964 <TurnDecIntoHex>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	429c      	cmp	r4, r3
 8000cf4:	d901      	bls.n	8000cfa <IsNewAlarmMoreFresh+0xb2>
				{
					return 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e019      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
				} else
				{
					if (gAlarm.AlarmTime.Minutes < TurnDecIntoHex(SetMinutes))
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000cfc:	785c      	ldrb	r4, [r3, #1]
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <IsNewAlarmMoreFresh+0x100>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fe2d 	bl	8000964 <TurnDecIntoHex>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	d201      	bcs.n	8000d14 <IsNewAlarmMoreFresh+0xcc>
					{
						return 1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e00c      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
					} else if (gAlarm.AlarmTime.Minutes >= TurnDecIntoHex(SetMinutes))
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000d16:	785c      	ldrb	r4, [r3, #1]
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <IsNewAlarmMoreFresh+0x100>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fe20 	bl	8000964 <TurnDecIntoHex>
 8000d24:	4603      	mov	r3, r0
 8000d26:	429c      	cmp	r4, r3
 8000d28:	d301      	bcc.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
					{
						return 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e7ff      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
					}
				}
			}
		}
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd98      	pop	{r3, r4, r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000011c 	.word	0x2000011c
 8000d38:	200001f0 	.word	0x200001f0
 8000d3c:	2000018f 	.word	0x2000018f
 8000d40:	2000018e 	.word	0x2000018e
 8000d44:	20000258 	.word	0x20000258
 8000d48:	20000110 	.word	0x20000110

08000d4c <IsNewAlarmAfterNow>:

uint8_t IsNewAlarmAfterNow(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
		GetTimeDate();
 8000d50:	f7ff fed8 	bl	8000b04 <GetTimeDate>
		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000d54:	2201      	movs	r2, #1
 8000d56:	493d      	ldr	r1, [pc, #244]	; (8000e4c <IsNewAlarmAfterNow+0x100>)
 8000d58:	483d      	ldr	r0, [pc, #244]	; (8000e50 <IsNewAlarmAfterNow+0x104>)
 8000d5a:	f002 fa9c 	bl	8003296 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	493c      	ldr	r1, [pc, #240]	; (8000e54 <IsNewAlarmAfterNow+0x108>)
 8000d62:	483b      	ldr	r0, [pc, #236]	; (8000e50 <IsNewAlarmAfterNow+0x104>)
 8000d64:	f002 fb9c 	bl	80034a0 <HAL_RTC_GetDate>
		if (TurnDecIntoHex(SetSeconds) > gDate.Month)
 8000d68:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <IsNewAlarmAfterNow+0x10c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fdf8 	bl	8000964 <TurnDecIntoHex>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <IsNewAlarmAfterNow+0x108>)
 8000d7a:	785b      	ldrb	r3, [r3, #1]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d901      	bls.n	8000d84 <IsNewAlarmAfterNow+0x38>
		{
			return 1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e061      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
		} else if (TurnDecIntoHex(SetSeconds) < gDate.Month)
 8000d84:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <IsNewAlarmAfterNow+0x10c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fdea 	bl	8000964 <TurnDecIntoHex>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <IsNewAlarmAfterNow+0x108>)
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d201      	bcs.n	8000da0 <IsNewAlarmAfterNow+0x54>
		{
			return 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e053      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
		} else
		{
			if (TurnDecIntoHex(SetDate) > gDate.Date)
 8000da0:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <IsNewAlarmAfterNow+0x110>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fddc 	bl	8000964 <TurnDecIntoHex>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <IsNewAlarmAfterNow+0x108>)
 8000db2:	789b      	ldrb	r3, [r3, #2]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d901      	bls.n	8000dbc <IsNewAlarmAfterNow+0x70>
			{
				return 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e045      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
			} else if (TurnDecIntoHex(SetDate) < gDate.Date)
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <IsNewAlarmAfterNow+0x110>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fdce 	bl	8000964 <TurnDecIntoHex>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <IsNewAlarmAfterNow+0x108>)
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d201      	bcs.n	8000dd8 <IsNewAlarmAfterNow+0x8c>
			{
				return 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e037      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
			} else
			{
				if (TurnDecIntoHex(SetHours) > gTime.Hours)
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <IsNewAlarmAfterNow+0x114>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fdc0 	bl	8000964 <TurnDecIntoHex>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <IsNewAlarmAfterNow+0x100>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d901      	bls.n	8000df4 <IsNewAlarmAfterNow+0xa8>
				{
					return 1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e029      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
				} else if (TurnDecIntoHex(SetHours) < gTime.Hours)
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <IsNewAlarmAfterNow+0x114>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fdb2 	bl	8000964 <TurnDecIntoHex>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <IsNewAlarmAfterNow+0x100>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d201      	bcs.n	8000e10 <IsNewAlarmAfterNow+0xc4>
				{
					return 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e01b      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
				} else
				{
					if (TurnDecIntoHex(SetMinutes) > gTime.Minutes)
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <IsNewAlarmAfterNow+0x118>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fda4 	bl	8000964 <TurnDecIntoHex>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <IsNewAlarmAfterNow+0x100>)
 8000e22:	785b      	ldrb	r3, [r3, #1]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d901      	bls.n	8000e2c <IsNewAlarmAfterNow+0xe0>
					{
						return 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e00d      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
					} else if (TurnDecIntoHex(SetMinutes) <= gTime.Minutes)
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <IsNewAlarmAfterNow+0x118>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fd96 	bl	8000964 <TurnDecIntoHex>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <IsNewAlarmAfterNow+0x100>)
 8000e3e:	785b      	ldrb	r3, [r3, #1]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d801      	bhi.n	8000e48 <IsNewAlarmAfterNow+0xfc>
					{
						return 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e7ff      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
					}
				}
			}
		}
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000190 	.word	0x20000190
 8000e50:	200001f0 	.word	0x200001f0
 8000e54:	2000010c 	.word	0x2000010c
 8000e58:	2000018f 	.word	0x2000018f
 8000e5c:	2000018e 	.word	0x2000018e
 8000e60:	20000258 	.word	0x20000258
 8000e64:	20000110 	.word	0x20000110

08000e68 <Rewind5Sec>:

void Rewind5Sec(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
	if (K0isPressed)
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <Rewind5Sec+0x78>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d02f      	beq.n	8000ed6 <Rewind5Sec+0x6e>
	{
		RTC_TimeTypeDef gTime;

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4819      	ldr	r0, [pc, #100]	; (8000ee4 <Rewind5Sec+0x7c>)
 8000e7e:	f002 fa0a 	bl	8003296 <HAL_RTC_GetTime>
		gTime.Seconds = TurnDecIntoHex(TurnHexIntoDec(gTime.Seconds)-5);
 8000e82:	79bb      	ldrb	r3, [r7, #6]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fd53 	bl	8000930 <TurnHexIntoDec>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	3b05      	subs	r3, #5
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fd67 	bl	8000964 <TurnDecIntoHex>
 8000e96:	4603      	mov	r3, r0
 8000e98:	71bb      	strb	r3, [r7, #6]
		gTime.Hours = TurnDecIntoHex(TurnHexIntoDec(gTime.Hours)+0);
 8000e9a:	793b      	ldrb	r3, [r7, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fd47 	bl	8000930 <TurnHexIntoDec>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fd5d 	bl	8000964 <TurnDecIntoHex>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	713b      	strb	r3, [r7, #4]

		if (HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BCD) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <Rewind5Sec+0x7c>)
 8000eb6:	f002 f931 	bl	800311c <HAL_RTC_SetTime>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <Rewind5Sec+0x5c>
		{
		  Error_Handler();
 8000ec0:	f000 fb32 	bl	8001528 <Error_Handler>
		}

		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000ec4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <Rewind5Sec+0x7c>)
 8000ecc:	f002 fe00 	bl	8003ad0 <HAL_RTCEx_BKUPWrite>

		K0isPressed = 0;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <Rewind5Sec+0x78>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001ec 	.word	0x200001ec
 8000ee4:	200001f0 	.word	0x200001f0

08000ee8 <Forwardd5Sec>:

void Forwardd5Sec(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
	if (K1isPressed)
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <Forwardd5Sec+0x78>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d02f      	beq.n	8000f56 <Forwardd5Sec+0x6e>
	{
		RTC_TimeTypeDef gTime;

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4619      	mov	r1, r3
 8000efc:	4819      	ldr	r0, [pc, #100]	; (8000f64 <Forwardd5Sec+0x7c>)
 8000efe:	f002 f9ca 	bl	8003296 <HAL_RTC_GetTime>
		gTime.Seconds = TurnDecIntoHex(TurnHexIntoDec(gTime.Seconds)+5);
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fd13 	bl	8000930 <TurnHexIntoDec>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	3305      	adds	r3, #5
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fd27 	bl	8000964 <TurnDecIntoHex>
 8000f16:	4603      	mov	r3, r0
 8000f18:	71bb      	strb	r3, [r7, #6]
		gTime.Hours = TurnDecIntoHex(TurnHexIntoDec(gTime.Hours)+0);
 8000f1a:	793b      	ldrb	r3, [r7, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fd07 	bl	8000930 <TurnHexIntoDec>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fd1d 	bl	8000964 <TurnDecIntoHex>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	713b      	strb	r3, [r7, #4]

		if (HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2201      	movs	r2, #1
 8000f32:	4619      	mov	r1, r3
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <Forwardd5Sec+0x7c>)
 8000f36:	f002 f8f1 	bl	800311c <HAL_RTC_SetTime>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <Forwardd5Sec+0x5c>
		{
		  Error_Handler();
 8000f40:	f000 faf2 	bl	8001528 <Error_Handler>
		}

		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000f44:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <Forwardd5Sec+0x7c>)
 8000f4c:	f002 fdc0 	bl	8003ad0 <HAL_RTCEx_BKUPWrite>
		K1isPressed = 0;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <Forwardd5Sec+0x78>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	}
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200001ed 	.word	0x200001ed
 8000f64:	200001f0 	.word	0x200001f0

08000f68 <OpenTheDoor>:

void OpenTheDoor(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <OpenTheDoor+0x28>)
 8000f74:	f001 fa62 	bl	800243c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000f78:	20c8      	movs	r0, #200	; 0xc8
 8000f7a:	f000 feb1 	bl	8001ce0 <HAL_Delay>
	HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <OpenTheDoor+0x28>)
 8000f86:	f001 fa59 	bl	800243c <HAL_GPIO_WritePin>
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020400 	.word	0x40020400

08000f94 <ToDoOnAlarm>:

void ToDoOnAlarm(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	OpenTheDoor();
 8000f98:	f7ff ffe6 	bl	8000f68 <OpenTheDoor>
	HappyToggling(150);
 8000f9c:	2096      	movs	r0, #150	; 0x96
 8000f9e:	f7ff fd0d 	bl	80009bc <HappyToggling>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <DeleteAlarm>:

void DeleteAlarm(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
	SetAlarmFunc(0,0,1,1);
 8000faa:	2301      	movs	r3, #1
 8000fac:	2201      	movs	r2, #1
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fd5d 	bl	8000a70 <SetAlarmFunc>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc2:	f000 fe1b 	bl	8001bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f919 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fca:	f000 f9dd 	bl	8001388 <MX_GPIO_Init>
  MX_RTC_Init();
 8000fce:	f000 f98b 	bl	80012e8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000fd2:	f000 f9af 	bl	8001334 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4875      	ldr	r0, [pc, #468]	; (80011b0 <main+0x1f4>)
 8000fda:	f002 fd93 	bl	8003b04 <HAL_RTCEx_BKUPRead>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d001      	beq.n	8000fec <main+0x30>
  {
	  SetTime();
 8000fe8:	f7ff fd0a 	bl	8000a00 <SetTime>
  }

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000fec:	4b71      	ldr	r3, [pc, #452]	; (80011b4 <main+0x1f8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	4b70      	ldr	r3, [pc, #448]	; (80011b4 <main+0x1f8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0220 	orr.w	r2, r2, #32
 8000ffa:	60da      	str	r2, [r3, #12]

  if (IsAlarmSetBeforeNow())
 8000ffc:	f7ff fdcc 	bl	8000b98 <IsAlarmSetBeforeNow>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <main+0x4e>
  {
	  OpenTheDoor();
 8001006:	f7ff ffaf 	bl	8000f68 <OpenTheDoor>

//	!!
//	if I upload confifugartion from CubeMX Configurator I need to delete set time from MX_RTC_Init()!
//	!!

	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800100a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100e:	486a      	ldr	r0, [pc, #424]	; (80011b8 <main+0x1fc>)
 8001010:	f001 fa2d 	bl	800246e <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8001014:	20c8      	movs	r0, #200	; 0xc8
 8001016:	f000 fe63 	bl	8001ce0 <HAL_Delay>

	  if (SetAlarm)
 800101a:	4b68      	ldr	r3, [pc, #416]	; (80011bc <main+0x200>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d078      	beq.n	8001116 <main+0x15a>
	  {
		  if (IsNewAlarmMoreFresh())
 8001024:	f7ff fe10 	bl	8000c48 <IsNewAlarmMoreFresh>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d04d      	beq.n	80010ca <main+0x10e>
		  {
			  if (IsNewAlarmAfterNow())
 800102e:	f7ff fe8d 	bl	8000d4c <IsNewAlarmAfterNow>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d036      	beq.n	80010a6 <main+0xea>
			  {
				  sprintf(Message, "Set alarm to %02d:%02d of %02d.%02d\0",SetHours, SetMinutes, SetDate, SetSeconds);
 8001038:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <main+0x204>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4619      	mov	r1, r3
 8001040:	4b60      	ldr	r3, [pc, #384]	; (80011c4 <main+0x208>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4618      	mov	r0, r3
 8001048:	4b5f      	ldr	r3, [pc, #380]	; (80011c8 <main+0x20c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	4b5e      	ldr	r3, [pc, #376]	; (80011cc <main+0x210>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	495c      	ldr	r1, [pc, #368]	; (80011d0 <main+0x214>)
 8001060:	485c      	ldr	r0, [pc, #368]	; (80011d4 <main+0x218>)
 8001062:	f003 fc51 	bl	8004908 <siprintf>
				  HAL_UART_Transmit(&huart1, Message, strlen(Message), strlen(Message));
 8001066:	485b      	ldr	r0, [pc, #364]	; (80011d4 <main+0x218>)
 8001068:	f7ff f8b2 	bl	80001d0 <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	b29c      	uxth	r4, r3
 8001070:	4858      	ldr	r0, [pc, #352]	; (80011d4 <main+0x218>)
 8001072:	f7ff f8ad 	bl	80001d0 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	4622      	mov	r2, r4
 800107a:	4956      	ldr	r1, [pc, #344]	; (80011d4 <main+0x218>)
 800107c:	484d      	ldr	r0, [pc, #308]	; (80011b4 <main+0x1f8>)
 800107e:	f002 fdb0 	bl	8003be2 <HAL_UART_Transmit>
				  HappyToggling(100);
 8001082:	2064      	movs	r0, #100	; 0x64
 8001084:	f7ff fc9a 	bl	80009bc <HappyToggling>
//				  HAL_Delay(60000);
				  SetAlarmFunc(SetHours, SetMinutes, SetDate, SetSeconds);
 8001088:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <main+0x204>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2d8      	uxtb	r0, r3
 800108e:	4b4d      	ldr	r3, [pc, #308]	; (80011c4 <main+0x208>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2d9      	uxtb	r1, r3
 8001094:	4b4c      	ldr	r3, [pc, #304]	; (80011c8 <main+0x20c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <main+0x210>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f7ff fce6 	bl	8000a70 <SetAlarmFunc>
 80010a4:	e026      	b.n	80010f4 <main+0x138>
			  } else
			  {
				  HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 80010a6:	2301      	movs	r3, #1
 80010a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ac:	494a      	ldr	r1, [pc, #296]	; (80011d8 <main+0x21c>)
 80010ae:	4840      	ldr	r0, [pc, #256]	; (80011b0 <main+0x1f4>)
 80010b0:	f002 fb7e 	bl	80037b0 <HAL_RTC_GetAlarm>
//				  sprintf(AlarmIsAlreadyOn, "%s %02x:%02x of %02x.%02x", AlarmIsAlreadyOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
				  HAL_UART_Transmit(&huart1, AlarmExpired, strlen(AlarmExpired), 29);
 80010b4:	4849      	ldr	r0, [pc, #292]	; (80011dc <main+0x220>)
 80010b6:	f7ff f88b 	bl	80001d0 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b29a      	uxth	r2, r3
 80010be:	231d      	movs	r3, #29
 80010c0:	4946      	ldr	r1, [pc, #280]	; (80011dc <main+0x220>)
 80010c2:	483c      	ldr	r0, [pc, #240]	; (80011b4 <main+0x1f8>)
 80010c4:	f002 fd8d 	bl	8003be2 <HAL_UART_Transmit>
 80010c8:	e014      	b.n	80010f4 <main+0x138>
//				  HAL_UART_Transmit(&huart1, AlarmIsAlreadyOn, strlen(AlarmIsAlreadyOn), 35);
			  }
		  } else
			  sprintf(Message, "%s %02x:%02x of %02x.%02x\0", AlarmIsAlreadyOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
 80010ca:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <main+0x21c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <main+0x21c>)
 80010d2:	785b      	ldrb	r3, [r3, #1]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <main+0x21c>)
 80010d8:	789b      	ldrb	r3, [r3, #2]
 80010da:	4619      	mov	r1, r3
 80010dc:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <main+0x21c>)
 80010de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	9101      	str	r1, [sp, #4]
 80010e6:	9200      	str	r2, [sp, #0]
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a3d      	ldr	r2, [pc, #244]	; (80011e0 <main+0x224>)
 80010ec:	493d      	ldr	r1, [pc, #244]	; (80011e4 <main+0x228>)
 80010ee:	4839      	ldr	r0, [pc, #228]	; (80011d4 <main+0x218>)
 80010f0:	f003 fc0a 	bl	8004908 <siprintf>
//		  	  sprintf(Message2, "%s %02x:%02x of %02x.%02x\0", AlarmIsAlreadyOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
//		  	  sprintf(*Message3, "%s %02x:%02x of %02x.%02x\0", AlarmIsAlreadyOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
//		  	  sprintf(&Message4, "%s %02x:%02x of %02x.%02x\0", AlarmIsAlreadyOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
			  HAL_UART_Transmit(&huart1, Message, strlen(Message), strlen(Message));
 80010f4:	4837      	ldr	r0, [pc, #220]	; (80011d4 <main+0x218>)
 80010f6:	f7ff f86b 	bl	80001d0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29c      	uxth	r4, r3
 80010fe:	4835      	ldr	r0, [pc, #212]	; (80011d4 <main+0x218>)
 8001100:	f7ff f866 	bl	80001d0 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	4622      	mov	r2, r4
 8001108:	4932      	ldr	r1, [pc, #200]	; (80011d4 <main+0x218>)
 800110a:	482a      	ldr	r0, [pc, #168]	; (80011b4 <main+0x1f8>)
 800110c:	f002 fd69 	bl	8003be2 <HAL_UART_Transmit>
		  SetAlarm = 0;
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <main+0x200>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
	  }

	  GetTimeDate();
 8001116:	f7ff fcf5 	bl	8000b04 <GetTimeDate>

	  if (alarm)
 800111a:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <main+0x22c>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <main+0x170>
	  {
		  ToDoOnAlarm();
 8001122:	f7ff ff37 	bl	8000f94 <ToDoOnAlarm>
		  alarm = 0;
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <main+0x22c>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	  }

//	  1000 milliseconds is just a time, taken from nothing, during that RX interrupts will be disabled
	  NowTime = HAL_GetTick();
 800112c:	f000 fdcc 	bl	8001cc8 <HAL_GetTick>
 8001130:	4603      	mov	r3, r0
 8001132:	4a2e      	ldr	r2, [pc, #184]	; (80011ec <main+0x230>)
 8001134:	6013      	str	r3, [r2, #0]
//	  if (((IgnoringFlag == 1) || (NowTime - MessageTimer > 5000)) && ((NowTime - StartIgnoringTimer) > 1000))
	  if ((CharCounter >= 8) && (NowTime - MessageTimer > 5000))
 8001136:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <main+0x234>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b07      	cmp	r3, #7
 800113c:	d924      	bls.n	8001188 <main+0x1cc>
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <main+0x230>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <main+0x238>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f241 3288 	movw	r2, #5000	; 0x1388
 800114c:	4293      	cmp	r3, r2
 800114e:	d91b      	bls.n	8001188 <main+0x1cc>
//	  if (NowTime - StartIgnoringTimer > 1000)
	  {
		  CharCounter = 0;
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <main+0x234>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
//		  IgnoringFlag = 0;
		  __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <main+0x1f8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <main+0x1f8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <main+0x1f8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <main+0x1f8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0220 	orr.w	r2, r2, #32
 800117a:	60da      	str	r2, [r3, #12]
		  HappyToggling(30);
 800117c:	201e      	movs	r0, #30
 800117e:	f7ff fc1d 	bl	80009bc <HappyToggling>
		  MessageTimer = 0;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <main+0x238>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
	  }

	  Rewind5Sec();
 8001188:	f7ff fe6e 	bl	8000e68 <Rewind5Sec>
	  Forwardd5Sec();
 800118c:	f7ff feac 	bl	8000ee8 <Forwardd5Sec>
	  if (HAL_GPIO_ReadPin(MagnetDoor_GPIO_Port, MagnetDoor_Pin) == 0)
 8001190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001194:	4818      	ldr	r0, [pc, #96]	; (80011f8 <main+0x23c>)
 8001196:	f001 f939 	bl	800240c <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	f47f af34 	bne.w	800100a <main+0x4e>
	  {
		  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80011a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a6:	4804      	ldr	r0, [pc, #16]	; (80011b8 <main+0x1fc>)
 80011a8:	f001 f961 	bl	800246e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80011ac:	e72d      	b.n	800100a <main+0x4e>
 80011ae:	bf00      	nop
 80011b0:	200001f0 	.word	0x200001f0
 80011b4:	200001a4 	.word	0x200001a4
 80011b8:	40021400 	.word	0x40021400
 80011bc:	20000145 	.word	0x20000145
 80011c0:	20000258 	.word	0x20000258
 80011c4:	20000110 	.word	0x20000110
 80011c8:	2000018e 	.word	0x2000018e
 80011cc:	2000018f 	.word	0x2000018f
 80011d0:	080052b8 	.word	0x080052b8
 80011d4:	20000148 	.word	0x20000148
 80011d8:	2000011c 	.word	0x2000011c
 80011dc:	20000018 	.word	0x20000018
 80011e0:	20000000 	.word	0x20000000
 80011e4:	080052e0 	.word	0x080052e0
 80011e8:	20000144 	.word	0x20000144
 80011ec:	20000244 	.word	0x20000244
 80011f0:	20000239 	.word	0x20000239
 80011f4:	20000114 	.word	0x20000114
 80011f8:	40021800 	.word	0x40021800

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b098      	sub	sp, #96	; 0x60
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001206:	2230      	movs	r2, #48	; 0x30
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fb74 	bl	80048f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <SystemClock_Config+0xe4>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <SystemClock_Config+0xe4>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <SystemClock_Config+0xe4>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <SystemClock_Config+0xe8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <SystemClock_Config+0xe8>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <SystemClock_Config+0xe8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001266:	2306      	movs	r3, #6
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800126a:	2301      	movs	r3, #1
 800126c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126e:	2301      	movs	r3, #1
 8001270:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001272:	2310      	movs	r3, #16
 8001274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001276:	2300      	movs	r3, #0
 8001278:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800127e:	4618      	mov	r0, r3
 8001280:	f001 f934 	bl	80024ec <HAL_RCC_OscConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800128a:	f000 f94d 	bl	8001528 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	230f      	movs	r3, #15
 8001290:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 fb97 	bl	80029dc <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80012b4:	f000 f938 	bl	8001528 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012b8:	2302      	movs	r3, #2
 80012ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 fd84 	bl	8002dd4 <HAL_RCCEx_PeriphCLKConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80012d2:	f000 f929 	bl	8001528 <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3760      	adds	r7, #96	; 0x60
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_RTC_Init+0x44>)
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <MX_RTC_Init+0x48>)
 80012f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_RTC_Init+0x44>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_RTC_Init+0x44>)
 80012fa:	227f      	movs	r2, #127	; 0x7f
 80012fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_RTC_Init+0x44>)
 8001300:	22ff      	movs	r2, #255	; 0xff
 8001302:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_RTC_Init+0x44>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_RTC_Init+0x44>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_RTC_Init+0x44>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_RTC_Init+0x44>)
 8001318:	f001 fe3e 	bl	8002f98 <HAL_RTC_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001322:	f000 f901 	bl	8001528 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200001f0 	.word	0x200001f0
 8001330:	40002800 	.word	0x40002800

08001334 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_USART1_UART_Init+0x4c>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_USART1_UART_Init+0x50>)
 800133c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <MX_USART1_UART_Init+0x4c>)
 8001340:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_USART1_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_USART1_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_USART1_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_USART1_UART_Init+0x4c>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_USART1_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_USART1_UART_Init+0x4c>)
 800136c:	f002 fbec 	bl	8003b48 <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001376:	f000 f8d7 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200001a4 	.word	0x200001a4
 8001384:	40011000 	.word	0x40011000

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <MX_GPIO_Init+0x188>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a5a      	ldr	r2, [pc, #360]	; (8001510 <MX_GPIO_Init+0x188>)
 80013a8:	f043 0310 	orr.w	r3, r3, #16
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b58      	ldr	r3, [pc, #352]	; (8001510 <MX_GPIO_Init+0x188>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	4b54      	ldr	r3, [pc, #336]	; (8001510 <MX_GPIO_Init+0x188>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a53      	ldr	r2, [pc, #332]	; (8001510 <MX_GPIO_Init+0x188>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b51      	ldr	r3, [pc, #324]	; (8001510 <MX_GPIO_Init+0x188>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <MX_GPIO_Init+0x188>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a4c      	ldr	r2, [pc, #304]	; (8001510 <MX_GPIO_Init+0x188>)
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <MX_GPIO_Init+0x188>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b46      	ldr	r3, [pc, #280]	; (8001510 <MX_GPIO_Init+0x188>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a45      	ldr	r2, [pc, #276]	; (8001510 <MX_GPIO_Init+0x188>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b43      	ldr	r3, [pc, #268]	; (8001510 <MX_GPIO_Init+0x188>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <MX_GPIO_Init+0x188>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a3e      	ldr	r2, [pc, #248]	; (8001510 <MX_GPIO_Init+0x188>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <MX_GPIO_Init+0x188>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <MX_GPIO_Init+0x188>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a37      	ldr	r2, [pc, #220]	; (8001510 <MX_GPIO_Init+0x188>)
 8001434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b35      	ldr	r3, [pc, #212]	; (8001510 <MX_GPIO_Init+0x188>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <MX_GPIO_Init+0x188>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a30      	ldr	r2, [pc, #192]	; (8001510 <MX_GPIO_Init+0x188>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <MX_GPIO_Init+0x188>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001468:	482a      	ldr	r0, [pc, #168]	; (8001514 <MX_GPIO_Init+0x18c>)
 800146a:	f000 ffe7 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001474:	4828      	ldr	r0, [pc, #160]	; (8001518 <MX_GPIO_Init+0x190>)
 8001476:	f000 ffe1 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 800147a:	2318      	movs	r3, #24
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <MX_GPIO_Init+0x194>)
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	4824      	ldr	r0, [pc, #144]	; (8001520 <MX_GPIO_Init+0x198>)
 800148e:	f000 fe21 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8001492:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001498:	2311      	movs	r3, #17
 800149a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	481a      	ldr	r0, [pc, #104]	; (8001514 <MX_GPIO_Init+0x18c>)
 80014ac:	f000 fe12 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OpenDoor_Pin */
  GPIO_InitStruct.Pin = OpenDoor_Pin;
 80014b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014b6:	2311      	movs	r3, #17
 80014b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OpenDoor_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4619      	mov	r1, r3
 80014c8:	4813      	ldr	r0, [pc, #76]	; (8001518 <MX_GPIO_Init+0x190>)
 80014ca:	f000 fe03 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MagnetDoor_Pin */
  GPIO_InitStruct.Pin = MagnetDoor_Pin;
 80014ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d8:	2301      	movs	r3, #1
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MagnetDoor_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <MX_GPIO_Init+0x19c>)
 80014e4:	f000 fdf6 	bl	80020d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2102      	movs	r1, #2
 80014ec:	2009      	movs	r0, #9
 80014ee:	f000 fd1a 	bl	8001f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014f2:	2009      	movs	r0, #9
 80014f4:	f000 fd33 	bl	8001f5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2102      	movs	r1, #2
 80014fc:	200a      	movs	r0, #10
 80014fe:	f000 fd12 	bl	8001f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001502:	200a      	movs	r0, #10
 8001504:	f000 fd2b 	bl	8001f5e <HAL_NVIC_EnableIRQ>

}
 8001508:	bf00      	nop
 800150a:	3730      	adds	r7, #48	; 0x30
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	40021400 	.word	0x40021400
 8001518:	40020400 	.word	0x40020400
 800151c:	10110000 	.word	0x10110000
 8001520:	40021000 	.word	0x40021000
 8001524:	40021800 	.word	0x40021800

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_MspInit+0x4c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_MspInit+0x4c>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_MspInit+0x4c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_RTC_MspInit+0x30>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10a      	bne.n	80015ac <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_RTC_MspInit+0x34>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	2029      	movs	r0, #41	; 0x29
 80015a2:	f000 fcc0 	bl	8001f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80015a6:	2029      	movs	r0, #41	; 0x29
 80015a8:	f000 fcd9 	bl	8001f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40002800 	.word	0x40002800
 80015b8:	42470e3c 	.word	0x42470e3c

080015bc <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_RTC_MspDeInit+0x28>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d105      	bne.n	80015da <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_RTC_MspDeInit+0x2c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 80015d4:	2029      	movs	r0, #41	; 0x29
 80015d6:	f000 fcd0 	bl	8001f7a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40002800 	.word	0x40002800
 80015e8:	42470e3c 	.word	0x42470e3c

080015ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_UART_MspInit+0x94>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d134      	bne.n	8001678 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <HAL_UART_MspInit+0x98>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <HAL_UART_MspInit+0x98>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_UART_MspInit+0x98>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_UART_MspInit+0x98>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_UART_MspInit+0x98>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_UART_MspInit+0x98>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001646:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001658:	2307      	movs	r3, #7
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <HAL_UART_MspInit+0x9c>)
 8001664:	f000 fd36 	bl	80020d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2025      	movs	r0, #37	; 0x25
 800166e:	f000 fc5a 	bl	8001f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001672:	2025      	movs	r0, #37	; 0x25
 8001674:	f000 fc73 	bl	8001f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40011000 	.word	0x40011000
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d8:	f000 fae2 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

//	jitter solver
	if (HAL_GetTick() - JitterButtonK1 > 300)
 80016e4:	f000 faf0 	bl	8001cc8 <HAL_GetTick>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <EXTI3_IRQHandler+0x34>)
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	1a9b      	subs	r3, r3, r2
 80016f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016f4:	d908      	bls.n	8001708 <EXTI3_IRQHandler+0x28>
	{
		JitterButtonK1 = HAL_GetTick();
 80016f6:	f000 fae7 	bl	8001cc8 <HAL_GetTick>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <EXTI3_IRQHandler+0x34>)
 8001700:	701a      	strb	r2, [r3, #0]

//		here is our action on KEY1 button
		K1isPressed = 1;
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <EXTI3_IRQHandler+0x38>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001708:	2008      	movs	r0, #8
 800170a:	f000 fecb 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200000fd 	.word	0x200000fd
 8001718:	200001ed 	.word	0x200001ed

0800171c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

//	jitter solver
	if (HAL_GetTick() - JitterButtonK0 > 300)
 8001720:	f000 fad2 	bl	8001cc8 <HAL_GetTick>
 8001724:	4603      	mov	r3, r0
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <EXTI4_IRQHandler+0x34>)
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001730:	d908      	bls.n	8001744 <EXTI4_IRQHandler+0x28>
	{
		JitterButtonK0 = HAL_GetTick();
 8001732:	f000 fac9 	bl	8001cc8 <HAL_GetTick>
 8001736:	4603      	mov	r3, r0
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <EXTI4_IRQHandler+0x34>)
 800173c:	701a      	strb	r2, [r3, #0]

//		here is our action on KEY0 button
		K0isPressed = 1;
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <EXTI4_IRQHandler+0x38>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001744:	2010      	movs	r0, #16
 8001746:	f000 fead 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200000fc 	.word	0x200000fc
 8001754:	200001ec 	.word	0x200001ec

08001758 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	b08b      	sub	sp, #44	; 0x2c
 800175c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800175e:	488e      	ldr	r0, [pc, #568]	; (8001998 <USART1_IRQHandler+0x240>)
 8001760:	f002 fb74 	bl	8003e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  if (MessageTimer == 0)
 8001764:	4b8d      	ldr	r3, [pc, #564]	; (800199c <USART1_IRQHandler+0x244>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d104      	bne.n	8001776 <USART1_IRQHandler+0x1e>
	  MessageTimer = HAL_GetTick();
 800176c:	f000 faac 	bl	8001cc8 <HAL_GetTick>
 8001770:	4603      	mov	r3, r0
 8001772:	4a8a      	ldr	r2, [pc, #552]	; (800199c <USART1_IRQHandler+0x244>)
 8001774:	6013      	str	r3, [r2, #0]
//  IgnoringFlag = 1;
  HAL_UART_Receive(&huart1, RxData, 1, 10);
 8001776:	230a      	movs	r3, #10
 8001778:	2201      	movs	r2, #1
 800177a:	4989      	ldr	r1, [pc, #548]	; (80019a0 <USART1_IRQHandler+0x248>)
 800177c:	4886      	ldr	r0, [pc, #536]	; (8001998 <USART1_IRQHandler+0x240>)
 800177e:	f002 fac2 	bl	8003d06 <HAL_UART_Receive>
  Buffer[CharCounter] = *RxData;
 8001782:	4b88      	ldr	r3, [pc, #544]	; (80019a4 <USART1_IRQHandler+0x24c>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	4b85      	ldr	r3, [pc, #532]	; (80019a0 <USART1_IRQHandler+0x248>)
 800178a:	7819      	ldrb	r1, [r3, #0]
 800178c:	4b86      	ldr	r3, [pc, #536]	; (80019a8 <USART1_IRQHandler+0x250>)
 800178e:	5499      	strb	r1, [r3, r2]
  CharCounter++;
 8001790:	4b84      	ldr	r3, [pc, #528]	; (80019a4 <USART1_IRQHandler+0x24c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b82      	ldr	r3, [pc, #520]	; (80019a4 <USART1_IRQHandler+0x24c>)
 800179a:	701a      	strb	r2, [r3, #0]

  if (CharCounter == strlen(DelMessage))
 800179c:	4b81      	ldr	r3, [pc, #516]	; (80019a4 <USART1_IRQHandler+0x24c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461c      	mov	r4, r3
 80017a2:	4882      	ldr	r0, [pc, #520]	; (80019ac <USART1_IRQHandler+0x254>)
 80017a4:	f7fe fd14 	bl	80001d0 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	429c      	cmp	r4, r3
 80017ac:	d11c      	bne.n	80017e8 <USART1_IRQHandler+0x90>
    {
  //	  StartIgnoringTimer = HAL_GetTick();
  	  uint8_t loop;
  	  for (loop = 0; loop < CharCounter; loop++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	71fb      	strb	r3, [r7, #7]
 80017b2:	e012      	b.n	80017da <USART1_IRQHandler+0x82>
  	  {
  		  if (Buffer[loop] == DelMessage[loop])
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	4a7c      	ldr	r2, [pc, #496]	; (80019a8 <USART1_IRQHandler+0x250>)
 80017b8:	5cd2      	ldrb	r2, [r2, r3]
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	497b      	ldr	r1, [pc, #492]	; (80019ac <USART1_IRQHandler+0x254>)
 80017be:	5ccb      	ldrb	r3, [r1, r3]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d110      	bne.n	80017e6 <USART1_IRQHandler+0x8e>
  		  {
  			  if (loop == CharCounter-1)
 80017c4:	79fa      	ldrb	r2, [r7, #7]
 80017c6:	4b77      	ldr	r3, [pc, #476]	; (80019a4 <USART1_IRQHandler+0x24c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d101      	bne.n	80017d4 <USART1_IRQHandler+0x7c>
  			  {
//  				  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
  				  DeleteAlarm();
 80017d0:	f7ff fbe9 	bl	8000fa6 <DeleteAlarm>
  	  for (loop = 0; loop < CharCounter; loop++)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	3301      	adds	r3, #1
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	4b72      	ldr	r3, [pc, #456]	; (80019a4 <USART1_IRQHandler+0x24c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	79fa      	ldrb	r2, [r7, #7]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d3e7      	bcc.n	80017b4 <USART1_IRQHandler+0x5c>
 80017e4:	e000      	b.n	80017e8 <USART1_IRQHandler+0x90>
  			  }
  			  continue;
  		  }
  		  else
  			  break;
 80017e6:	bf00      	nop
  	  }
    }

  if (CharCounter == strlen(OpenMessage))
 80017e8:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <USART1_IRQHandler+0x24c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461c      	mov	r4, r3
 80017ee:	4870      	ldr	r0, [pc, #448]	; (80019b0 <USART1_IRQHandler+0x258>)
 80017f0:	f7fe fcee 	bl	80001d0 <strlen>
 80017f4:	4603      	mov	r3, r0
 80017f6:	429c      	cmp	r4, r3
 80017f8:	d15e      	bne.n	80018b8 <USART1_IRQHandler+0x160>
  {
//	  StartIgnoringTimer = HAL_GetTick();
	  uint8_t loop;
	  for (loop = 0; loop < CharCounter; loop++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	71bb      	strb	r3, [r7, #6]
 80017fe:	e054      	b.n	80018aa <USART1_IRQHandler+0x152>
	  {
		  if (Buffer[loop] == OpenMessage[loop])
 8001800:	79bb      	ldrb	r3, [r7, #6]
 8001802:	4a69      	ldr	r2, [pc, #420]	; (80019a8 <USART1_IRQHandler+0x250>)
 8001804:	5cd2      	ldrb	r2, [r2, r3]
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	4969      	ldr	r1, [pc, #420]	; (80019b0 <USART1_IRQHandler+0x258>)
 800180a:	5ccb      	ldrb	r3, [r1, r3]
 800180c:	429a      	cmp	r2, r3
 800180e:	d152      	bne.n	80018b6 <USART1_IRQHandler+0x15e>
		  {
			  if (loop == CharCounter-1)
 8001810:	79ba      	ldrb	r2, [r7, #6]
 8001812:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <USART1_IRQHandler+0x24c>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	3b01      	subs	r3, #1
 8001818:	429a      	cmp	r2, r3
 800181a:	d143      	bne.n	80018a4 <USART1_IRQHandler+0x14c>
			  {
//				  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
				  if (IsAlarmSetBeforeNow())
 800181c:	f7ff f9bc 	bl	8000b98 <IsAlarmSetBeforeNow>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d014      	beq.n	8001850 <USART1_IRQHandler+0xf8>
				  {
					  HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182c:	4861      	ldr	r0, [pc, #388]	; (80019b4 <USART1_IRQHandler+0x25c>)
 800182e:	f000 fe05 	bl	800243c <HAL_GPIO_WritePin>
					  HAL_UART_Transmit(&huart1, Buffer, CharCounter, 10);
 8001832:	4b5c      	ldr	r3, [pc, #368]	; (80019a4 <USART1_IRQHandler+0x24c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b29a      	uxth	r2, r3
 8001838:	230a      	movs	r3, #10
 800183a:	495b      	ldr	r1, [pc, #364]	; (80019a8 <USART1_IRQHandler+0x250>)
 800183c:	4856      	ldr	r0, [pc, #344]	; (8001998 <USART1_IRQHandler+0x240>)
 800183e:	f002 f9d0 	bl	8003be2 <HAL_UART_Transmit>
					  HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, SET);
 8001842:	2201      	movs	r2, #1
 8001844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001848:	485a      	ldr	r0, [pc, #360]	; (80019b4 <USART1_IRQHandler+0x25c>)
 800184a:	f000 fdf7 	bl	800243c <HAL_GPIO_WritePin>
 800184e:	e029      	b.n	80018a4 <USART1_IRQHandler+0x14c>
				  } else
				  {
					  HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 8001850:	2301      	movs	r3, #1
 8001852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001856:	4958      	ldr	r1, [pc, #352]	; (80019b8 <USART1_IRQHandler+0x260>)
 8001858:	4858      	ldr	r0, [pc, #352]	; (80019bc <USART1_IRQHandler+0x264>)
 800185a:	f001 ffa9 	bl	80037b0 <HAL_RTC_GetAlarm>
					  sprintf(Message, "%s %02x:%02x of %02x.%02x", AlarmNowIsOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
 800185e:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <USART1_IRQHandler+0x260>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	4b54      	ldr	r3, [pc, #336]	; (80019b8 <USART1_IRQHandler+0x260>)
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	461a      	mov	r2, r3
 800186a:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <USART1_IRQHandler+0x260>)
 800186c:	789b      	ldrb	r3, [r3, #2]
 800186e:	4619      	mov	r1, r3
 8001870:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <USART1_IRQHandler+0x260>)
 8001872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	9101      	str	r1, [sp, #4]
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	4603      	mov	r3, r0
 800187e:	4a50      	ldr	r2, [pc, #320]	; (80019c0 <USART1_IRQHandler+0x268>)
 8001880:	4950      	ldr	r1, [pc, #320]	; (80019c4 <USART1_IRQHandler+0x26c>)
 8001882:	4851      	ldr	r0, [pc, #324]	; (80019c8 <USART1_IRQHandler+0x270>)
 8001884:	f003 f840 	bl	8004908 <siprintf>
					  HAL_UART_Transmit(&huart1, Message, strlen(Message), strlen(Message));
 8001888:	484f      	ldr	r0, [pc, #316]	; (80019c8 <USART1_IRQHandler+0x270>)
 800188a:	f7fe fca1 	bl	80001d0 <strlen>
 800188e:	4603      	mov	r3, r0
 8001890:	b29c      	uxth	r4, r3
 8001892:	484d      	ldr	r0, [pc, #308]	; (80019c8 <USART1_IRQHandler+0x270>)
 8001894:	f7fe fc9c 	bl	80001d0 <strlen>
 8001898:	4603      	mov	r3, r0
 800189a:	4622      	mov	r2, r4
 800189c:	494a      	ldr	r1, [pc, #296]	; (80019c8 <USART1_IRQHandler+0x270>)
 800189e:	483e      	ldr	r0, [pc, #248]	; (8001998 <USART1_IRQHandler+0x240>)
 80018a0:	f002 f99f 	bl	8003be2 <HAL_UART_Transmit>
	  for (loop = 0; loop < CharCounter; loop++)
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	3301      	adds	r3, #1
 80018a8:	71bb      	strb	r3, [r7, #6]
 80018aa:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <USART1_IRQHandler+0x24c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	79ba      	ldrb	r2, [r7, #6]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3a5      	bcc.n	8001800 <USART1_IRQHandler+0xa8>
 80018b4:	e000      	b.n	80018b8 <USART1_IRQHandler+0x160>
				  }
			  }
			  continue;
		  }
		  else
			  break;
 80018b6:	bf00      	nop
	  }
  }

  if (CharCounter == strlen(GetAlarm))
 80018b8:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <USART1_IRQHandler+0x24c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461c      	mov	r4, r3
 80018be:	4843      	ldr	r0, [pc, #268]	; (80019cc <USART1_IRQHandler+0x274>)
 80018c0:	f7fe fc86 	bl	80001d0 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	429c      	cmp	r4, r3
 80018c8:	d15e      	bne.n	8001988 <USART1_IRQHandler+0x230>
  {
	  uint8_t loop;
	  for (loop = 0; loop < CharCounter; loop++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	717b      	strb	r3, [r7, #5]
 80018ce:	e054      	b.n	800197a <USART1_IRQHandler+0x222>
	  {
		  if (Buffer[loop] == GetAlarm[loop])
 80018d0:	797b      	ldrb	r3, [r7, #5]
 80018d2:	4a35      	ldr	r2, [pc, #212]	; (80019a8 <USART1_IRQHandler+0x250>)
 80018d4:	5cd2      	ldrb	r2, [r2, r3]
 80018d6:	797b      	ldrb	r3, [r7, #5]
 80018d8:	493c      	ldr	r1, [pc, #240]	; (80019cc <USART1_IRQHandler+0x274>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d152      	bne.n	8001986 <USART1_IRQHandler+0x22e>
		  {
			  if (loop == CharCounter-1)
 80018e0:	797a      	ldrb	r2, [r7, #5]
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <USART1_IRQHandler+0x24c>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d143      	bne.n	8001974 <USART1_IRQHandler+0x21c>
			  {
//				  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
				  HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 80018ec:	2301      	movs	r3, #1
 80018ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f2:	4931      	ldr	r1, [pc, #196]	; (80019b8 <USART1_IRQHandler+0x260>)
 80018f4:	4831      	ldr	r0, [pc, #196]	; (80019bc <USART1_IRQHandler+0x264>)
 80018f6:	f001 ff5b 	bl	80037b0 <HAL_RTC_GetAlarm>
				  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 80018fa:	2201      	movs	r2, #1
 80018fc:	4934      	ldr	r1, [pc, #208]	; (80019d0 <USART1_IRQHandler+0x278>)
 80018fe:	482f      	ldr	r0, [pc, #188]	; (80019bc <USART1_IRQHandler+0x264>)
 8001900:	f001 fcc9 	bl	8003296 <HAL_RTC_GetTime>
				  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8001904:	2201      	movs	r2, #1
 8001906:	4933      	ldr	r1, [pc, #204]	; (80019d4 <USART1_IRQHandler+0x27c>)
 8001908:	482c      	ldr	r0, [pc, #176]	; (80019bc <USART1_IRQHandler+0x264>)
 800190a:	f001 fdc9 	bl	80034a0 <HAL_RTC_GetDate>
				  sprintf(Message, "%s %02x:%02x of %02x.%02x. Time now: %02x:%02x %02x.%02x", AlarmNowIsOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay, gTime.Hours, gTime.Minutes, gDate.Month, gDate.Date);
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <USART1_IRQHandler+0x260>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	469c      	mov	ip, r3
 8001914:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <USART1_IRQHandler+0x260>)
 8001916:	785b      	ldrb	r3, [r3, #1]
 8001918:	461a      	mov	r2, r3
 800191a:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <USART1_IRQHandler+0x260>)
 800191c:	789b      	ldrb	r3, [r3, #2]
 800191e:	4619      	mov	r1, r3
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <USART1_IRQHandler+0x260>)
 8001922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001926:	4618      	mov	r0, r3
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <USART1_IRQHandler+0x278>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461c      	mov	r4, r3
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <USART1_IRQHandler+0x278>)
 8001930:	785b      	ldrb	r3, [r3, #1]
 8001932:	461d      	mov	r5, r3
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <USART1_IRQHandler+0x27c>)
 8001936:	785b      	ldrb	r3, [r3, #1]
 8001938:	461e      	mov	r6, r3
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <USART1_IRQHandler+0x27c>)
 800193c:	789b      	ldrb	r3, [r3, #2]
 800193e:	9306      	str	r3, [sp, #24]
 8001940:	9605      	str	r6, [sp, #20]
 8001942:	9504      	str	r5, [sp, #16]
 8001944:	9403      	str	r4, [sp, #12]
 8001946:	9002      	str	r0, [sp, #8]
 8001948:	9101      	str	r1, [sp, #4]
 800194a:	9200      	str	r2, [sp, #0]
 800194c:	4663      	mov	r3, ip
 800194e:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <USART1_IRQHandler+0x268>)
 8001950:	4921      	ldr	r1, [pc, #132]	; (80019d8 <USART1_IRQHandler+0x280>)
 8001952:	481d      	ldr	r0, [pc, #116]	; (80019c8 <USART1_IRQHandler+0x270>)
 8001954:	f002 ffd8 	bl	8004908 <siprintf>
				  HAL_UART_Transmit(&huart1, Message, strlen(Message), strlen(Message));
 8001958:	481b      	ldr	r0, [pc, #108]	; (80019c8 <USART1_IRQHandler+0x270>)
 800195a:	f7fe fc39 	bl	80001d0 <strlen>
 800195e:	4603      	mov	r3, r0
 8001960:	b29c      	uxth	r4, r3
 8001962:	4819      	ldr	r0, [pc, #100]	; (80019c8 <USART1_IRQHandler+0x270>)
 8001964:	f7fe fc34 	bl	80001d0 <strlen>
 8001968:	4603      	mov	r3, r0
 800196a:	4622      	mov	r2, r4
 800196c:	4916      	ldr	r1, [pc, #88]	; (80019c8 <USART1_IRQHandler+0x270>)
 800196e:	480a      	ldr	r0, [pc, #40]	; (8001998 <USART1_IRQHandler+0x240>)
 8001970:	f002 f937 	bl	8003be2 <HAL_UART_Transmit>
	  for (loop = 0; loop < CharCounter; loop++)
 8001974:	797b      	ldrb	r3, [r7, #5]
 8001976:	3301      	adds	r3, #1
 8001978:	717b      	strb	r3, [r7, #5]
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <USART1_IRQHandler+0x24c>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	797a      	ldrb	r2, [r7, #5]
 8001980:	429a      	cmp	r2, r3
 8001982:	d3a5      	bcc.n	80018d0 <USART1_IRQHandler+0x178>
 8001984:	e000      	b.n	8001988 <USART1_IRQHandler+0x230>
			  }
			  continue;
		  }
		  else
			  break;
 8001986:	bf00      	nop
	  }
  }

  if (CharCounter == 8)
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <USART1_IRQHandler+0x24c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b08      	cmp	r3, #8
 800198e:	f040 8097 	bne.w	8001ac0 <USART1_IRQHandler+0x368>
  {
	  uint8_t loop;
	  for (loop = 0; loop < CharCounter; loop++)
 8001992:	2300      	movs	r3, #0
 8001994:	713b      	strb	r3, [r7, #4]
 8001996:	e08c      	b.n	8001ab2 <USART1_IRQHandler+0x35a>
 8001998:	200001a4 	.word	0x200001a4
 800199c:	20000114 	.word	0x20000114
 80019a0:	20000268 	.word	0x20000268
 80019a4:	20000239 	.word	0x20000239
 80019a8:	20000240 	.word	0x20000240
 80019ac:	20000040 	.word	0x20000040
 80019b0:	20000038 	.word	0x20000038
 80019b4:	40020400 	.word	0x40020400
 80019b8:	2000011c 	.word	0x2000011c
 80019bc:	200001f0 	.word	0x200001f0
 80019c0:	20000054 	.word	0x20000054
 80019c4:	080052fc 	.word	0x080052fc
 80019c8:	20000148 	.word	0x20000148
 80019cc:	20000048 	.word	0x20000048
 80019d0:	20000190 	.word	0x20000190
 80019d4:	2000010c 	.word	0x2000010c
 80019d8:	08005318 	.word	0x08005318
	  {
		  if isdigit((uint8_t)Buffer[loop])
 80019dc:	793b      	ldrb	r3, [r7, #4]
 80019de:	4a3a      	ldr	r2, [pc, #232]	; (8001ac8 <USART1_IRQHandler+0x370>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	3301      	adds	r3, #1
 80019e4:	4a39      	ldr	r2, [pc, #228]	; (8001acc <USART1_IRQHandler+0x374>)
 80019e6:	4413      	add	r3, r2
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d065      	beq.n	8001abe <USART1_IRQHandler+0x366>
		  {
			  if (loop == CharCounter-1)
 80019f2:	793a      	ldrb	r2, [r7, #4]
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <USART1_IRQHandler+0x378>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d156      	bne.n	8001aac <USART1_IRQHandler+0x354>
			  {
				  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 80019fe:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <USART1_IRQHandler+0x37c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <USART1_IRQHandler+0x37c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0220 	bic.w	r2, r2, #32
 8001a0c:	60da      	str	r2, [r3, #12]

//				  check if all the received numbers are valid to set for alarm
				  Hstr[0] = (uint8_t)Buffer[0];
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <USART1_IRQHandler+0x370>)
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <USART1_IRQHandler+0x380>)
 8001a14:	701a      	strb	r2, [r3, #0]
				  Hstr[1] = (uint8_t)Buffer[1];
 8001a16:	4b2c      	ldr	r3, [pc, #176]	; (8001ac8 <USART1_IRQHandler+0x370>)
 8001a18:	785a      	ldrb	r2, [r3, #1]
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <USART1_IRQHandler+0x380>)
 8001a1c:	705a      	strb	r2, [r3, #1]
				  SetHours = atoi(Hstr);
 8001a1e:	482e      	ldr	r0, [pc, #184]	; (8001ad8 <USART1_IRQHandler+0x380>)
 8001a20:	f002 ff3c 	bl	800489c <atoi>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <USART1_IRQHandler+0x384>)
 8001a2a:	701a      	strb	r2, [r3, #0]
				  if ( (SetHours >= 0) && (SetHours <= 23) )
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <USART1_IRQHandler+0x384>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b17      	cmp	r3, #23
 8001a32:	d83b      	bhi.n	8001aac <USART1_IRQHandler+0x354>
				  {
					  Mstr[0] = (uint8_t)Buffer[2];
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <USART1_IRQHandler+0x370>)
 8001a36:	789a      	ldrb	r2, [r3, #2]
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <USART1_IRQHandler+0x388>)
 8001a3a:	701a      	strb	r2, [r3, #0]
					  Mstr[1] = (uint8_t)Buffer[3];
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <USART1_IRQHandler+0x370>)
 8001a3e:	78da      	ldrb	r2, [r3, #3]
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <USART1_IRQHandler+0x388>)
 8001a42:	705a      	strb	r2, [r3, #1]
					  SetMinutes = atoi(Mstr);
 8001a44:	4826      	ldr	r0, [pc, #152]	; (8001ae0 <USART1_IRQHandler+0x388>)
 8001a46:	f002 ff29 	bl	800489c <atoi>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <USART1_IRQHandler+0x38c>)
 8001a50:	701a      	strb	r2, [r3, #0]
					  if ( (SetMinutes >= 0) && (SetMinutes <= 59) )
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <USART1_IRQHandler+0x38c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b3b      	cmp	r3, #59	; 0x3b
 8001a58:	d828      	bhi.n	8001aac <USART1_IRQHandler+0x354>
					  {
						  Dstr[0] = (uint8_t)Buffer[6];
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <USART1_IRQHandler+0x370>)
 8001a5c:	799a      	ldrb	r2, [r3, #6]
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <USART1_IRQHandler+0x390>)
 8001a60:	701a      	strb	r2, [r3, #0]
						  Dstr[1] = (uint8_t)Buffer[7];
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <USART1_IRQHandler+0x370>)
 8001a64:	79da      	ldrb	r2, [r3, #7]
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <USART1_IRQHandler+0x390>)
 8001a68:	705a      	strb	r2, [r3, #1]
						  SetDate = atoi(Dstr);
 8001a6a:	481f      	ldr	r0, [pc, #124]	; (8001ae8 <USART1_IRQHandler+0x390>)
 8001a6c:	f002 ff16 	bl	800489c <atoi>
 8001a70:	4603      	mov	r3, r0
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <USART1_IRQHandler+0x394>)
 8001a76:	701a      	strb	r2, [r3, #0]
						  if ( (SetDate >= 1) && (SetDate <= 30) )
 8001a78:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <USART1_IRQHandler+0x394>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d015      	beq.n	8001aac <USART1_IRQHandler+0x354>
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <USART1_IRQHandler+0x394>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b1e      	cmp	r3, #30
 8001a86:	d811      	bhi.n	8001aac <USART1_IRQHandler+0x354>
						  {
							  Sstr[0] = (uint8_t)Buffer[4];
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <USART1_IRQHandler+0x370>)
 8001a8a:	791a      	ldrb	r2, [r3, #4]
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <USART1_IRQHandler+0x398>)
 8001a8e:	701a      	strb	r2, [r3, #0]
							  Sstr[1] = (uint8_t)Buffer[5];
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <USART1_IRQHandler+0x370>)
 8001a92:	795a      	ldrb	r2, [r3, #5]
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <USART1_IRQHandler+0x398>)
 8001a96:	705a      	strb	r2, [r3, #1]
							  SetSeconds = atoi(Sstr);
 8001a98:	4815      	ldr	r0, [pc, #84]	; (8001af0 <USART1_IRQHandler+0x398>)
 8001a9a:	f002 feff 	bl	800489c <atoi>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <USART1_IRQHandler+0x39c>)
 8001aa4:	701a      	strb	r2, [r3, #0]
							  SetAlarm = 1;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <USART1_IRQHandler+0x3a0>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
	  for (loop = 0; loop < CharCounter; loop++)
 8001aac:	793b      	ldrb	r3, [r7, #4]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	713b      	strb	r3, [r7, #4]
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <USART1_IRQHandler+0x378>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	793a      	ldrb	r2, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d38f      	bcc.n	80019dc <USART1_IRQHandler+0x284>
			  break;
	  }
  }

  /* USER CODE END USART1_IRQn 1 */
}
 8001abc:	e000      	b.n	8001ac0 <USART1_IRQHandler+0x368>
			  break;
 8001abe:	bf00      	nop
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac8:	20000240 	.word	0x20000240
 8001acc:	0800536c 	.word	0x0800536c
 8001ad0:	20000239 	.word	0x20000239
 8001ad4:	200001a4 	.word	0x200001a4
 8001ad8:	2000026c 	.word	0x2000026c
 8001adc:	20000258 	.word	0x20000258
 8001ae0:	20000264 	.word	0x20000264
 8001ae4:	20000110 	.word	0x20000110
 8001ae8:	20000260 	.word	0x20000260
 8001aec:	2000018e 	.word	0x2000018e
 8001af0:	2000025c 	.word	0x2000025c
 8001af4:	2000018f 	.word	0x2000018f
 8001af8:	20000145 	.word	0x20000145

08001afc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <RTC_Alarm_IRQHandler+0x10>)
 8001b02:	f001 fee5 	bl	80038d0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200001f0 	.word	0x200001f0

08001b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <_sbrk+0x5c>)
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <_sbrk+0x60>)
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <_sbrk+0x64>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <_sbrk+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d207      	bcs.n	8001b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b40:	f002 feb0 	bl	80048a4 <__errno>
 8001b44:	4603      	mov	r3, r0
 8001b46:	220c      	movs	r2, #12
 8001b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b4e:	e009      	b.n	8001b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <_sbrk+0x64>)
 8001b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20020000 	.word	0x20020000
 8001b70:	00000400 	.word	0x00000400
 8001b74:	20000100 	.word	0x20000100
 8001b78:	20000288 	.word	0x20000288

08001b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <SystemInit+0x28>)
 8001b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b86:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <SystemInit+0x28>)
 8001b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SystemInit+0x28>)
 8001b92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b96:	609a      	str	r2, [r3, #8]
#endif
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bae:	e003      	b.n	8001bb8 <LoopCopyDataInit>

08001bb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bb6:	3104      	adds	r1, #4

08001bb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bb8:	480b      	ldr	r0, [pc, #44]	; (8001be8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bc0:	d3f6      	bcc.n	8001bb0 <CopyDataInit>
  ldr  r2, =_sbss
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bc4:	e002      	b.n	8001bcc <LoopFillZerobss>

08001bc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bc8:	f842 3b04 	str.w	r3, [r2], #4

08001bcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bd0:	d3f9      	bcc.n	8001bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bd2:	f7ff ffd3 	bl	8001b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f002 fe6b 	bl	80048b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bda:	f7ff f9ef 	bl	8000fbc <main>
  bx  lr    
 8001bde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001be0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001be4:	080054b0 	.word	0x080054b0
  ldr  r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bec:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8001bf0:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8001bf4:	20000284 	.word	0x20000284

08001bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC_IRQHandler>
	...

08001bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <HAL_Init+0x40>)
 8001c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <HAL_Init+0x40>)
 8001c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_Init+0x40>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f973 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f000 f808 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fc80 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023c00 	.word	0x40023c00

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x54>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x58>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f999 	bl	8001f96 <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c7c:	f000 f953 	bl	8001f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <HAL_InitTick+0x5c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000070 	.word	0x20000070
 8001c98:	20000078 	.word	0x20000078
 8001c9c:	20000074 	.word	0x20000074

08001ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x20>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x24>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <HAL_IncTick+0x24>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000078 	.word	0x20000078
 8001cc4:	20000270 	.word	0x20000270

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_GetTick+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000270 	.word	0x20000270

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff ffee 	bl	8001cc8 <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf8:	d005      	beq.n	8001d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_Delay+0x44>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d06:	bf00      	nop
 8001d08:	f7ff ffde 	bl	8001cc8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d8f7      	bhi.n	8001d08 <HAL_Delay+0x28>
  {
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000078 	.word	0x20000078

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4907      	ldr	r1, [pc, #28]	; (8001dc4 <__NVIC_EnableIRQ+0x38>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db12      	blt.n	8001e00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	490a      	ldr	r1, [pc, #40]	; (8001e0c <__NVIC_DisableIRQ+0x44>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	3320      	adds	r3, #32
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001df4:	f3bf 8f4f 	dsb	sy
}
 8001df8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfa:	f3bf 8f6f 	isb	sy
}
 8001dfe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000e100 	.word	0xe000e100

08001e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	db0a      	blt.n	8001e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	490c      	ldr	r1, [pc, #48]	; (8001e5c <__NVIC_SetPriority+0x4c>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	0112      	lsls	r2, r2, #4
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	440b      	add	r3, r1
 8001e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e38:	e00a      	b.n	8001e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4908      	ldr	r1, [pc, #32]	; (8001e60 <__NVIC_SetPriority+0x50>)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	3b04      	subs	r3, #4
 8001e48:	0112      	lsls	r2, r2, #4
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	761a      	strb	r2, [r3, #24]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000e100 	.word	0xe000e100
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f1c3 0307 	rsb	r3, r3, #7
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	bf28      	it	cs
 8001e82:	2304      	movcs	r3, #4
 8001e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d902      	bls.n	8001e94 <NVIC_EncodePriority+0x30>
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3b03      	subs	r3, #3
 8001e92:	e000      	b.n	8001e96 <NVIC_EncodePriority+0x32>
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	43d9      	mvns	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	4313      	orrs	r3, r2
         );
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3724      	adds	r7, #36	; 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001edc:	d301      	bcc.n	8001ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <SysTick_Config+0x40>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eea:	210f      	movs	r1, #15
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef0:	f7ff ff8e 	bl	8001e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <SysTick_Config+0x40>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <SysTick_Config+0x40>)
 8001efc:	2207      	movs	r2, #7
 8001efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff05 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f38:	f7ff ff1a 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	f7ff ff8e 	bl	8001e64 <NVIC_EncodePriority>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff5d 	bl	8001e10 <__NVIC_SetPriority>
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff0d 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff1d 	bl	8001dc8 <__NVIC_DisableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff94 	bl	8001ecc <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff fe84 	bl	8001cc8 <HAL_GetTick>
 8001fc0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d008      	beq.n	8001fe0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e052      	b.n	8002086 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0216 	bic.w	r2, r2, #22
 8001fee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ffe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <HAL_DMA_Abort+0x62>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0208 	bic.w	r2, r2, #8
 800201e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002030:	e013      	b.n	800205a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002032:	f7ff fe49 	bl	8001cc8 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b05      	cmp	r3, #5
 800203e:	d90c      	bls.n	800205a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2203      	movs	r2, #3
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e015      	b.n	8002086 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e4      	bne.n	8002032 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	223f      	movs	r2, #63	; 0x3f
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d004      	beq.n	80020ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2280      	movs	r2, #128	; 0x80
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e00c      	b.n	80020c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2205      	movs	r2, #5
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	e16b      	b.n	80023c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	f040 815a 	bne.w	80023c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d005      	beq.n	8002126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002122:	2b02      	cmp	r3, #2
 8002124:	d130      	bne.n	8002188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2203      	movs	r2, #3
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0201 	and.w	r2, r3, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b03      	cmp	r3, #3
 8002192:	d017      	beq.n	80021c4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d123      	bne.n	8002218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	08da      	lsrs	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3208      	adds	r2, #8
 80021d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	08da      	lsrs	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3208      	adds	r2, #8
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0203 	and.w	r2, r3, #3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80b4 	beq.w	80023c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b60      	ldr	r3, [pc, #384]	; (80023e0 <HAL_GPIO_Init+0x30c>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a5f      	ldr	r2, [pc, #380]	; (80023e0 <HAL_GPIO_Init+0x30c>)
 8002264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b5d      	ldr	r3, [pc, #372]	; (80023e0 <HAL_GPIO_Init+0x30c>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002276:	4a5b      	ldr	r2, [pc, #364]	; (80023e4 <HAL_GPIO_Init+0x310>)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a52      	ldr	r2, [pc, #328]	; (80023e8 <HAL_GPIO_Init+0x314>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d02b      	beq.n	80022fa <HAL_GPIO_Init+0x226>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a51      	ldr	r2, [pc, #324]	; (80023ec <HAL_GPIO_Init+0x318>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d025      	beq.n	80022f6 <HAL_GPIO_Init+0x222>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a50      	ldr	r2, [pc, #320]	; (80023f0 <HAL_GPIO_Init+0x31c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01f      	beq.n	80022f2 <HAL_GPIO_Init+0x21e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4f      	ldr	r2, [pc, #316]	; (80023f4 <HAL_GPIO_Init+0x320>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d019      	beq.n	80022ee <HAL_GPIO_Init+0x21a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4e      	ldr	r2, [pc, #312]	; (80023f8 <HAL_GPIO_Init+0x324>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0x216>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4d      	ldr	r2, [pc, #308]	; (80023fc <HAL_GPIO_Init+0x328>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00d      	beq.n	80022e6 <HAL_GPIO_Init+0x212>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4c      	ldr	r2, [pc, #304]	; (8002400 <HAL_GPIO_Init+0x32c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x20e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_GPIO_Init+0x330>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_GPIO_Init+0x20a>
 80022da:	2307      	movs	r3, #7
 80022dc:	e00e      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022de:	2308      	movs	r3, #8
 80022e0:	e00c      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022e2:	2306      	movs	r3, #6
 80022e4:	e00a      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022e6:	2305      	movs	r3, #5
 80022e8:	e008      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022ee:	2303      	movs	r3, #3
 80022f0:	e004      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e002      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_GPIO_Init+0x228>
 80022fa:	2300      	movs	r3, #0
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	f002 0203 	and.w	r2, r2, #3
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	4093      	lsls	r3, r2
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800230c:	4935      	ldr	r1, [pc, #212]	; (80023e4 <HAL_GPIO_Init+0x310>)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800231a:	4b3b      	ldr	r3, [pc, #236]	; (8002408 <HAL_GPIO_Init+0x334>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800233e:	4a32      	ldr	r2, [pc, #200]	; (8002408 <HAL_GPIO_Init+0x334>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002344:	4b30      	ldr	r3, [pc, #192]	; (8002408 <HAL_GPIO_Init+0x334>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002368:	4a27      	ldr	r2, [pc, #156]	; (8002408 <HAL_GPIO_Init+0x334>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800236e:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_GPIO_Init+0x334>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002392:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <HAL_GPIO_Init+0x334>)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_GPIO_Init+0x334>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023bc:	4a12      	ldr	r2, [pc, #72]	; (8002408 <HAL_GPIO_Init+0x334>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3301      	adds	r3, #1
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b0f      	cmp	r3, #15
 80023cc:	f67f ae90 	bls.w	80020f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40013800 	.word	0x40013800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020400 	.word	0x40020400
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40021400 	.word	0x40021400
 8002400:	40021800 	.word	0x40021800
 8002404:	40021c00 	.word	0x40021c00
 8002408:	40013c00 	.word	0x40013c00

0800240c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	887b      	ldrh	r3, [r7, #2]
 800241e:	4013      	ands	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	e001      	b.n	800242e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002458:	e003      	b.n	8002462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	041a      	lsls	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002480:	887a      	ldrh	r2, [r7, #2]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4013      	ands	r3, r2
 8002486:	041a      	lsls	r2, r3, #16
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	43d9      	mvns	r1, r3
 800248c:	887b      	ldrh	r3, [r7, #2]
 800248e:	400b      	ands	r3, r1
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	619a      	str	r2, [r3, #24]
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d006      	beq.n	80024c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ba:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f806 	bl	80024d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e264      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d075      	beq.n	80025f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800250a:	4ba3      	ldr	r3, [pc, #652]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b04      	cmp	r3, #4
 8002514:	d00c      	beq.n	8002530 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002516:	4ba0      	ldr	r3, [pc, #640]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800251e:	2b08      	cmp	r3, #8
 8002520:	d112      	bne.n	8002548 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002522:	4b9d      	ldr	r3, [pc, #628]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800252e:	d10b      	bne.n	8002548 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	4b99      	ldr	r3, [pc, #612]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d05b      	beq.n	80025f4 <HAL_RCC_OscConfig+0x108>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d157      	bne.n	80025f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e23f      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002550:	d106      	bne.n	8002560 <HAL_RCC_OscConfig+0x74>
 8002552:	4b91      	ldr	r3, [pc, #580]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a90      	ldr	r2, [pc, #576]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e01d      	b.n	800259c <HAL_RCC_OscConfig+0xb0>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x98>
 800256a:	4b8b      	ldr	r3, [pc, #556]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a8a      	ldr	r2, [pc, #552]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b88      	ldr	r3, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a87      	ldr	r2, [pc, #540]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 800257c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0xb0>
 8002584:	4b84      	ldr	r3, [pc, #528]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a83      	ldr	r2, [pc, #524]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 800258a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b81      	ldr	r3, [pc, #516]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a80      	ldr	r2, [pc, #512]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff fb90 	bl	8001cc8 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ac:	f7ff fb8c 	bl	8001cc8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e204      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	4b76      	ldr	r3, [pc, #472]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0xc0>
 80025ca:	e014      	b.n	80025f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7ff fb7c 	bl	8001cc8 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d4:	f7ff fb78 	bl	8001cc8 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e1f0      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	4b6c      	ldr	r3, [pc, #432]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0xe8>
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d063      	beq.n	80026ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002602:	4b65      	ldr	r3, [pc, #404]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260e:	4b62      	ldr	r3, [pc, #392]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002616:	2b08      	cmp	r3, #8
 8002618:	d11c      	bne.n	8002654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261a:	4b5f      	ldr	r3, [pc, #380]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d116      	bne.n	8002654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	4b5c      	ldr	r3, [pc, #368]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_RCC_OscConfig+0x152>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e1c4      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263e:	4b56      	ldr	r3, [pc, #344]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4952      	ldr	r1, [pc, #328]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	e03a      	b.n	80026ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800265c:	4b4f      	ldr	r3, [pc, #316]	; (800279c <HAL_RCC_OscConfig+0x2b0>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7ff fb31 	bl	8001cc8 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266a:	f7ff fb2d 	bl	8001cc8 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1a5      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	4b46      	ldr	r3, [pc, #280]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	4b43      	ldr	r3, [pc, #268]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4940      	ldr	r1, [pc, #256]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]
 800269c:	e015      	b.n	80026ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269e:	4b3f      	ldr	r3, [pc, #252]	; (800279c <HAL_RCC_OscConfig+0x2b0>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7ff fb10 	bl	8001cc8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ac:	f7ff fb0c 	bl	8001cc8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e184      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	4b36      	ldr	r3, [pc, #216]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d030      	beq.n	8002738 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d016      	beq.n	800270c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026de:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <HAL_RCC_OscConfig+0x2b4>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7ff faf0 	bl	8001cc8 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ec:	f7ff faec 	bl	8001cc8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e164      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x200>
 800270a:	e015      	b.n	8002738 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270c:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_RCC_OscConfig+0x2b4>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002712:	f7ff fad9 	bl	8001cc8 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800271a:	f7ff fad5 	bl	8001cc8 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e14d      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 800272e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80a0 	beq.w	8002886 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002772:	2301      	movs	r3, #1
 8002774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_OscConfig+0x2b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d121      	bne.n	80027c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_RCC_OscConfig+0x2b8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <HAL_RCC_OscConfig+0x2b8>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278e:	f7ff fa9b 	bl	8001cc8 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	e011      	b.n	80027ba <HAL_RCC_OscConfig+0x2ce>
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	42470000 	.word	0x42470000
 80027a0:	42470e80 	.word	0x42470e80
 80027a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a8:	f7ff fa8e 	bl	8001cc8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e106      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ba:	4b85      	ldr	r3, [pc, #532]	; (80029d0 <HAL_RCC_OscConfig+0x4e4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d106      	bne.n	80027dc <HAL_RCC_OscConfig+0x2f0>
 80027ce:	4b81      	ldr	r3, [pc, #516]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	4a80      	ldr	r2, [pc, #512]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6713      	str	r3, [r2, #112]	; 0x70
 80027da:	e01c      	b.n	8002816 <HAL_RCC_OscConfig+0x32a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d10c      	bne.n	80027fe <HAL_RCC_OscConfig+0x312>
 80027e4:	4b7b      	ldr	r3, [pc, #492]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	4a7a      	ldr	r2, [pc, #488]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
 80027f0:	4b78      	ldr	r3, [pc, #480]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	4a77      	ldr	r2, [pc, #476]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6713      	str	r3, [r2, #112]	; 0x70
 80027fc:	e00b      	b.n	8002816 <HAL_RCC_OscConfig+0x32a>
 80027fe:	4b75      	ldr	r3, [pc, #468]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a74      	ldr	r2, [pc, #464]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
 800280a:	4b72      	ldr	r3, [pc, #456]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	4a71      	ldr	r2, [pc, #452]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d015      	beq.n	800284a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281e:	f7ff fa53 	bl	8001cc8 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7ff fa4f 	bl	8001cc8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e0c5      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283c:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ee      	beq.n	8002826 <HAL_RCC_OscConfig+0x33a>
 8002848:	e014      	b.n	8002874 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7ff fa3d 	bl	8001cc8 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7ff fa39 	bl	8001cc8 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e0af      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002868:	4b5a      	ldr	r3, [pc, #360]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ee      	bne.n	8002852 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d105      	bne.n	8002886 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287a:	4b56      	ldr	r3, [pc, #344]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a55      	ldr	r2, [pc, #340]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 8002880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 809b 	beq.w	80029c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002890:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	d05c      	beq.n	8002956 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d141      	bne.n	8002928 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a4:	4b4c      	ldr	r3, [pc, #304]	; (80029d8 <HAL_RCC_OscConfig+0x4ec>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7ff fa0d 	bl	8001cc8 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b2:	f7ff fa09 	bl	8001cc8 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e081      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c4:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	019b      	lsls	r3, r3, #6
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	3b01      	subs	r3, #1
 80028ea:	041b      	lsls	r3, r3, #16
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	061b      	lsls	r3, r3, #24
 80028f4:	4937      	ldr	r1, [pc, #220]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <HAL_RCC_OscConfig+0x4ec>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7ff f9e2 	bl	8001cc8 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002908:	f7ff f9de 	bl	8001cc8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e056      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291a:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x41c>
 8002926:	e04e      	b.n	80029c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_OscConfig+0x4ec>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7ff f9cb 	bl	8001cc8 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002936:	f7ff f9c7 	bl	8001cc8 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e03f      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0x44a>
 8002954:	e037      	b.n	80029c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e032      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <HAL_RCC_OscConfig+0x4e8>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d028      	beq.n	80029c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d121      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d11a      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002992:	4013      	ands	r3, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002998:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800299a:	4293      	cmp	r3, r2
 800299c:	d111      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	3b01      	subs	r3, #1
 80029ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40007000 	.word	0x40007000
 80029d4:	40023800 	.word	0x40023800
 80029d8:	42470060 	.word	0x42470060

080029dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0cc      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f0:	4b68      	ldr	r3, [pc, #416]	; (8002b94 <HAL_RCC_ClockConfig+0x1b8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d90c      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b65      	ldr	r3, [pc, #404]	; (8002b94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b63      	ldr	r3, [pc, #396]	; (8002b94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0b8      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a30:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a58      	ldr	r2, [pc, #352]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a48:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4a52      	ldr	r2, [pc, #328]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	494d      	ldr	r1, [pc, #308]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d044      	beq.n	8002afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d119      	bne.n	8002aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e07f      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d003      	beq.n	8002a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9a:	4b3f      	ldr	r3, [pc, #252]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e06f      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aaa:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e067      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aba:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f023 0203 	bic.w	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4934      	ldr	r1, [pc, #208]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002acc:	f7ff f8fc 	bl	8001cc8 <HAL_GetTick>
 8002ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad4:	f7ff f8f8 	bl	8001cc8 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e04f      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 020c 	and.w	r2, r3, #12
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d1eb      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <HAL_RCC_ClockConfig+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d20c      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e032      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4916      	ldr	r1, [pc, #88]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	490e      	ldr	r1, [pc, #56]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b62:	f000 f821 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	490a      	ldr	r1, [pc, #40]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f85c 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023c00 	.word	0x40023c00
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	08005354 	.word	0x08005354
 8002ba0:	20000070 	.word	0x20000070
 8002ba4:	20000074 	.word	0x20000074

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc0:	4b67      	ldr	r3, [pc, #412]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d00d      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	f200 80bd 	bhi.w	8002d4c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x34>
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bda:	e0b7      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4b61      	ldr	r3, [pc, #388]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bde:	60bb      	str	r3, [r7, #8]
       break;
 8002be0:	e0b7      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002be2:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002be4:	60bb      	str	r3, [r7, #8]
      break;
 8002be6:	e0b4      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be8:	4b5d      	ldr	r3, [pc, #372]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bf2:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d04d      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfe:	4b58      	ldr	r3, [pc, #352]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	461a      	mov	r2, r3
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c0e:	f04f 0100 	mov.w	r1, #0
 8002c12:	ea02 0800 	and.w	r8, r2, r0
 8002c16:	ea03 0901 	and.w	r9, r3, r1
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	014b      	lsls	r3, r1, #5
 8002c28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c2c:	0142      	lsls	r2, r0, #5
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	ebb0 0008 	subs.w	r0, r0, r8
 8002c36:	eb61 0109 	sbc.w	r1, r1, r9
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	018b      	lsls	r3, r1, #6
 8002c44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c48:	0182      	lsls	r2, r0, #6
 8002c4a:	1a12      	subs	r2, r2, r0
 8002c4c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c50:	f04f 0000 	mov.w	r0, #0
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	00d9      	lsls	r1, r3, #3
 8002c5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c5e:	00d0      	lsls	r0, r2, #3
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	eb12 0208 	adds.w	r2, r2, r8
 8002c68:	eb43 0309 	adc.w	r3, r3, r9
 8002c6c:	f04f 0000 	mov.w	r0, #0
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	0259      	lsls	r1, r3, #9
 8002c76:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c7a:	0250      	lsls	r0, r2, #9
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	f7fd fcd4 	bl	8000638 <__aeabi_uldivmod>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4613      	mov	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	e04a      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9a:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	ea02 0400 	and.w	r4, r2, r0
 8002cb2:	ea03 0501 	and.w	r5, r3, r1
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	4629      	mov	r1, r5
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	014b      	lsls	r3, r1, #5
 8002cc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cc8:	0142      	lsls	r2, r0, #5
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	1b00      	subs	r0, r0, r4
 8002cd0:	eb61 0105 	sbc.w	r1, r1, r5
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	018b      	lsls	r3, r1, #6
 8002cde:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ce2:	0182      	lsls	r2, r0, #6
 8002ce4:	1a12      	subs	r2, r2, r0
 8002ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cea:	f04f 0000 	mov.w	r0, #0
 8002cee:	f04f 0100 	mov.w	r1, #0
 8002cf2:	00d9      	lsls	r1, r3, #3
 8002cf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cf8:	00d0      	lsls	r0, r2, #3
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	1912      	adds	r2, r2, r4
 8002d00:	eb45 0303 	adc.w	r3, r5, r3
 8002d04:	f04f 0000 	mov.w	r0, #0
 8002d08:	f04f 0100 	mov.w	r1, #0
 8002d0c:	0299      	lsls	r1, r3, #10
 8002d0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d12:	0290      	lsls	r0, r2, #10
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	f7fd fc88 	bl	8000638 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	60bb      	str	r3, [r7, #8]
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d4e:	60bb      	str	r3, [r7, #8]
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	68bb      	ldr	r3, [r7, #8]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	00f42400 	.word	0x00f42400
 8002d68:	007a1200 	.word	0x007a1200

08002d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000070 	.word	0x20000070

08002d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d88:	f7ff fff0 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	0a9b      	lsrs	r3, r3, #10
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4903      	ldr	r1, [pc, #12]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9a:	5ccb      	ldrb	r3, [r1, r3]
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40023800 	.word	0x40023800
 8002da8:	08005364 	.word	0x08005364

08002dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002db0:	f7ff ffdc 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	0b5b      	lsrs	r3, r3, #13
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4903      	ldr	r1, [pc, #12]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	08005364 	.word	0x08005364

08002dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d035      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dfc:	4b62      	ldr	r3, [pc, #392]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e02:	f7fe ff61 	bl	8001cc8 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e0a:	f7fe ff5d 	bl	8001cc8 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0b0      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e1c:	4b5b      	ldr	r3, [pc, #364]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	019a      	lsls	r2, r3, #6
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	071b      	lsls	r3, r3, #28
 8002e34:	4955      	ldr	r1, [pc, #340]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e3c:	4b52      	ldr	r3, [pc, #328]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e42:	f7fe ff41 	bl	8001cc8 <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e4a:	f7fe ff3d 	bl	8001cc8 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e090      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e5c:	4b4b      	ldr	r3, [pc, #300]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8083 	beq.w	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	4b44      	ldr	r3, [pc, #272]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a43      	ldr	r2, [pc, #268]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e92:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a3e      	ldr	r2, [pc, #248]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e9e:	f7fe ff13 	bl	8001cc8 <HAL_GetTick>
 8002ea2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ea6:	f7fe ff0f 	bl	8001cc8 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e062      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002eb8:	4b35      	ldr	r3, [pc, #212]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ec4:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ecc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d02f      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d028      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eec:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef2:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ef8:	4a24      	ldr	r2, [pc, #144]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002efe:	4b23      	ldr	r3, [pc, #140]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d114      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe fedd 	bl	8001cc8 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe fed9 	bl	8001cc8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e02a      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ee      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f40:	d10d      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f56:	490d      	ldr	r1, [pc, #52]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]
 8002f5c:	e005      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f64:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f68:	6093      	str	r3, [r2, #8]
 8002f6a:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f76:	4905      	ldr	r1, [pc, #20]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	42470068 	.word	0x42470068
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40007000 	.word	0x40007000
 8002f94:	42470e40 	.word	0x42470e40

08002f98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0a4      	b.n	80030f4 <HAL_RTC_Init+0x15c>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7f5b      	ldrb	r3, [r3, #29]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d126      	bne.n	8003002 <HAL_RTC_Init+0x6a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a4f      	ldr	r2, [pc, #316]	; (80030fc <HAL_RTC_Init+0x164>)
 8002fbe:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a4f      	ldr	r2, [pc, #316]	; (8003100 <HAL_RTC_Init+0x168>)
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a4e      	ldr	r2, [pc, #312]	; (8003104 <HAL_RTC_Init+0x16c>)
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a4e      	ldr	r2, [pc, #312]	; (8003108 <HAL_RTC_Init+0x170>)
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a4d      	ldr	r2, [pc, #308]	; (800310c <HAL_RTC_Init+0x174>)
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a4d      	ldr	r2, [pc, #308]	; (8003110 <HAL_RTC_Init+0x178>)
 8002fdc:	635a      	str	r2, [r3, #52]	; 0x34

    if(hrtc->MspInitCallback == NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_RTC_Init+0x54>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a4a      	ldr	r2, [pc, #296]	; (8003114 <HAL_RTC_Init+0x17c>)
 8002fea:	639a      	str	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3

    if(hrtc->MspDeInitCallback == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <HAL_RTC_Init+0x6a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a46      	ldr	r2, [pc, #280]	; (8003118 <HAL_RTC_Init+0x180>)
 8003000:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2202      	movs	r2, #2
 8003006:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	22ca      	movs	r2, #202	; 0xca
 800300e:	625a      	str	r2, [r3, #36]	; 0x24
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2253      	movs	r2, #83	; 0x53
 8003016:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fcc9 	bl	80039b0 <RTC_EnterInitMode>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RTC_Init+0x9e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	22ff      	movs	r2, #255	; 0xff
 800302a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2204      	movs	r2, #4
 8003030:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e05e      	b.n	80030f4 <HAL_RTC_Init+0x15c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003048:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6899      	ldr	r1, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68d2      	ldr	r2, [r2, #12]
 8003070:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6919      	ldr	r1, [r3, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	041a      	lsls	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003094:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10e      	bne.n	80030c2 <HAL_RTC_Init+0x12a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fc5b 	bl	8003960 <HAL_RTC_WaitForSynchro>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_RTC_Init+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	22ff      	movs	r2, #255	; 0xff
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2204      	movs	r2, #4
 80030bc:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e018      	b.n	80030f4 <HAL_RTC_Init+0x15c>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699a      	ldr	r2, [r3, #24]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	22ff      	movs	r2, #255	; 0xff
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80030f2:	2300      	movs	r3, #0
  }
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	08000b79 	.word	0x08000b79
 8003100:	08003b35 	.word	0x08003b35
 8003104:	08003a81 	.word	0x08003a81
 8003108:	08003abd 	.word	0x08003abd
 800310c:	08003a95 	.word	0x08003a95
 8003110:	08003aa9 	.word	0x08003aa9
 8003114:	08001585 	.word	0x08001585
 8003118:	080015bd 	.word	0x080015bd

0800311c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800311c:	b590      	push	{r4, r7, lr}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	7f1b      	ldrb	r3, [r3, #28]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_RTC_SetTime+0x1c>
 8003134:	2302      	movs	r3, #2
 8003136:	e0aa      	b.n	800328e <HAL_RTC_SetTime+0x172>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2202      	movs	r2, #2
 8003142:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d126      	bne.n	8003198 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2200      	movs	r2, #0
 800315c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fc50 	bl	8003a08 <RTC_ByteToBcd2>
 8003168:	4603      	mov	r3, r0
 800316a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	785b      	ldrb	r3, [r3, #1]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fc49 	bl	8003a08 <RTC_ByteToBcd2>
 8003176:	4603      	mov	r3, r0
 8003178:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800317a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	789b      	ldrb	r3, [r3, #2]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fc41 	bl	8003a08 <RTC_ByteToBcd2>
 8003186:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003188:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	78db      	ldrb	r3, [r3, #3]
 8003190:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e018      	b.n	80031ca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2200      	movs	r2, #0
 80031aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	785b      	ldrb	r3, [r3, #1]
 80031b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80031b8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80031be:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	78db      	ldrb	r3, [r3, #3]
 80031c4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	22ca      	movs	r2, #202	; 0xca
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2253      	movs	r2, #83	; 0x53
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fbe8 	bl	80039b0 <RTC_EnterInitMode>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	22ff      	movs	r2, #255	; 0xff
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2204      	movs	r2, #4
 80031f2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e047      	b.n	800328e <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003208:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800320c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800321c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6899      	ldr	r1, [r3, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	431a      	orrs	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003244:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d111      	bne.n	8003278 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fb83 	bl	8003960 <HAL_RTC_WaitForSynchro>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	22ff      	movs	r2, #255	; 0xff
 8003266:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2204      	movs	r2, #4
 800326c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e00a      	b.n	800328e <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	22ff      	movs	r2, #255	; 0xff
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800328c:	2300      	movs	r3, #0
  }
}
 800328e:	4618      	mov	r0, r3
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd90      	pop	{r4, r7, pc}

08003296 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80032c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80032cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	0c1b      	lsrs	r3, r3, #16
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	b2da      	uxtb	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d11a      	bne.n	8003348 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fb94 	bl	8003a44 <RTC_Bcd2ToByte>
 800331c:	4603      	mov	r3, r0
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	785b      	ldrb	r3, [r3, #1]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fb8b 	bl	8003a44 <RTC_Bcd2ToByte>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	789b      	ldrb	r3, [r3, #2]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fb82 	bl	8003a44 <RTC_Bcd2ToByte>
 8003340:	4603      	mov	r3, r0
 8003342:	461a      	mov	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003352:	b590      	push	{r4, r7, lr}
 8003354:	b087      	sub	sp, #28
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	7f1b      	ldrb	r3, [r3, #28]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_RTC_SetDate+0x1c>
 800336a:	2302      	movs	r3, #2
 800336c:	e094      	b.n	8003498 <HAL_RTC_SetDate+0x146>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2202      	movs	r2, #2
 8003378:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10e      	bne.n	800339e <HAL_RTC_SetDate+0x4c>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	785b      	ldrb	r3, [r3, #1]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	785b      	ldrb	r3, [r3, #1]
 8003390:	f023 0310 	bic.w	r3, r3, #16
 8003394:	b2db      	uxtb	r3, r3
 8003396:	330a      	adds	r3, #10
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d11c      	bne.n	80033de <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	78db      	ldrb	r3, [r3, #3]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fb2d 	bl	8003a08 <RTC_ByteToBcd2>
 80033ae:	4603      	mov	r3, r0
 80033b0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	785b      	ldrb	r3, [r3, #1]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fb26 	bl	8003a08 <RTC_ByteToBcd2>
 80033bc:	4603      	mov	r3, r0
 80033be:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80033c0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	789b      	ldrb	r3, [r3, #2]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fb1e 	bl	8003a08 <RTC_ByteToBcd2>
 80033cc:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80033ce:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e00e      	b.n	80033fc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	78db      	ldrb	r3, [r3, #3]
 80033e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033ea:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80033f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	22ca      	movs	r2, #202	; 0xca
 8003402:	625a      	str	r2, [r3, #36]	; 0x24
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2253      	movs	r2, #83	; 0x53
 800340a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 facf 	bl	80039b0 <RTC_EnterInitMode>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	22ff      	movs	r2, #255	; 0xff
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2204      	movs	r2, #4
 8003424:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e033      	b.n	8003498 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800343a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800343e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800344e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	d111      	bne.n	8003482 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fa7e 	bl	8003960 <HAL_RTC_WaitForSynchro>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	22ff      	movs	r2, #255	; 0xff
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2204      	movs	r2, #4
 8003476:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e00a      	b.n	8003498 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	22ff      	movs	r2, #255	; 0xff
 8003488:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003496:	2300      	movs	r3, #0
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	bd90      	pop	{r4, r7, pc}

080034a0 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	0b5b      	lsrs	r3, r3, #13
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11a      	bne.n	8003534 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	78db      	ldrb	r3, [r3, #3]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fa9e 	bl	8003a44 <RTC_Bcd2ToByte>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	785b      	ldrb	r3, [r3, #1]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fa95 	bl	8003a44 <RTC_Bcd2ToByte>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	789b      	ldrb	r3, [r3, #2]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fa8c 	bl	8003a44 <RTC_Bcd2ToByte>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b089      	sub	sp, #36	; 0x24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8003554:	4b93      	ldr	r3, [pc, #588]	; (80037a4 <HAL_RTC_SetAlarm_IT+0x264>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a93      	ldr	r2, [pc, #588]	; (80037a8 <HAL_RTC_SetAlarm_IT+0x268>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	0adb      	lsrs	r3, r3, #11
 8003560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	7f1b      	ldrb	r3, [r3, #28]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_RTC_SetAlarm_IT+0x36>
 8003572:	2302      	movs	r3, #2
 8003574:	e111      	b.n	800379a <HAL_RTC_SetAlarm_IT+0x25a>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2202      	movs	r2, #2
 8003580:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d137      	bne.n	80035f8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d102      	bne.n	800359c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2200      	movs	r2, #0
 800359a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fa31 	bl	8003a08 <RTC_ByteToBcd2>
 80035a6:	4603      	mov	r3, r0
 80035a8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fa2a 	bl	8003a08 <RTC_ByteToBcd2>
 80035b4:	4603      	mov	r3, r0
 80035b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80035b8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	789b      	ldrb	r3, [r3, #2]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fa22 	bl	8003a08 <RTC_ByteToBcd2>
 80035c4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80035c6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	78db      	ldrb	r3, [r3, #3]
 80035ce:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80035d0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fa14 	bl	8003a08 <RTC_ByteToBcd2>
 80035e0:	4603      	mov	r3, r0
 80035e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80035e4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80035ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	e023      	b.n	8003640 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2200      	movs	r2, #0
 800360a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	785b      	ldrb	r3, [r3, #1]
 8003616:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003618:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800361e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	78db      	ldrb	r3, [r3, #3]
 8003624:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003626:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800362e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003630:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003636:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800363c:	4313      	orrs	r3, r2
 800363e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	22ca      	movs	r2, #202	; 0xca
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2253      	movs	r2, #83	; 0x53
 800365a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003664:	d141      	bne.n	80036ea <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003674:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003686:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	1e5a      	subs	r2, r3, #1
 800368c:	617a      	str	r2, [r7, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	22ff      	movs	r2, #255	; 0xff
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2203      	movs	r2, #3
 800369e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e077      	b.n	800379a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0e7      	beq.n	8003688 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	e040      	b.n	800376c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036f8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f462 7220 	orn	r2, r2, #640	; 0x280
 800370a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	1e5a      	subs	r2, r3, #1
 8003710:	617a      	str	r2, [r7, #20]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2203      	movs	r2, #3
 8003722:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e035      	b.n	800379a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0e7      	beq.n	800370c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800376a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <HAL_RTC_SetAlarm_IT+0x26c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <HAL_RTC_SetAlarm_IT+0x26c>)
 8003772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003776:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <HAL_RTC_SetAlarm_IT+0x26c>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a0b      	ldr	r2, [pc, #44]	; (80037ac <HAL_RTC_SetAlarm_IT+0x26c>)
 800377e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003782:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	22ff      	movs	r2, #255	; 0xff
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd90      	pop	{r4, r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000070 	.word	0x20000070
 80037a8:	10624dd3 	.word	0x10624dd3
 80037ac:	40013c00 	.word	0x40013c00

080037b0 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037cc:	d10e      	bne.n	80037ec <HAL_RTC_GetAlarm+0x3c>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	e00d      	b.n	8003808 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003806:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	0c1b      	lsrs	r3, r3, #16
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003812:	b2da      	uxtb	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003830:	b2da      	uxtb	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	0c1b      	lsrs	r3, r3, #16
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	0e1b      	lsrs	r3, r3, #24
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	615a      	str	r2, [r3, #20]

  if(Format == RTC_FORMAT_BIN)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d125      	bne.n	80038c4 <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f8e1 	bl	8003a44 <RTC_Bcd2ToByte>
 8003882:	4603      	mov	r3, r0
 8003884:	461a      	mov	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f8d8 	bl	8003a44 <RTC_Bcd2ToByte>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	789b      	ldrb	r3, [r3, #2]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f8cf 	bl	8003a44 <RTC_Bcd2ToByte>
 80038a6:	4603      	mov	r3, r0
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f8c5 	bl	8003a44 <RTC_Bcd2ToByte>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d013      	beq.n	800390e <HAL_RTC_AlarmIRQHandler+0x3e>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00c      	beq.n	800390e <HAL_RTC_AlarmIRQHandler+0x3e>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800390c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_RTC_AlarmIRQHandler+0x74>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00c      	beq.n	8003944 <HAL_RTC_AlarmIRQHandler+0x74>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003942:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RTC_AlarmIRQHandler+0x8c>)
 8003946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800394a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	775a      	strb	r2, [r3, #29]
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40013c00 	.word	0x40013c00

08003960 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800397a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800397c:	f7fe f9a4 	bl	8001cc8 <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003982:	e009      	b.n	8003998 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003984:	f7fe f9a0 	bl	8001cc8 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003992:	d901      	bls.n	8003998 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e007      	b.n	80039a8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ee      	beq.n	8003984 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d119      	bne.n	80039fe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fe f978 	bl	8001cc8 <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039da:	e009      	b.n	80039f0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80039dc:	f7fe f974 	bl	8001cc8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ea:	d901      	bls.n	80039f0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e007      	b.n	8003a00 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0ee      	beq.n	80039dc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003a16:	e005      	b.n	8003a24 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	3b0a      	subs	r3, #10
 8003a22:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	2b09      	cmp	r3, #9
 8003a28:	d8f6      	bhi.n	8003a18 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	b2db      	uxtb	r3, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	b2db      	uxtb	r3, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_TimeStampEventCallback could be implemented in the user file
  */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper1EventCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper2EventCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3350      	adds	r3, #80	; 0x50
 8003ae6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4413      	add	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	601a      	str	r2, [r3, #0]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3350      	adds	r3, #80	; 0x50
 8003b18:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4413      	add	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e03f      	b.n	8003bda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fd3c 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	; 0x24
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fcbd 	bl	800450c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b08a      	sub	sp, #40	; 0x28
 8003be6:	af02      	add	r7, sp, #8
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d17c      	bne.n	8003cfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_UART_Transmit+0x2c>
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e075      	b.n	8003cfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_UART_Transmit+0x3e>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e06e      	b.n	8003cfe <HAL_UART_Transmit+0x11c>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2221      	movs	r2, #33	; 0x21
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c36:	f7fe f847 	bl	8001cc8 <HAL_GetTick>
 8003c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	88fa      	ldrh	r2, [r7, #6]
 8003c46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c50:	d108      	bne.n	8003c64 <HAL_UART_Transmit+0x82>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d104      	bne.n	8003c64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	e003      	b.n	8003c6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c74:	e02a      	b.n	8003ccc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fab9 	bl	80041f8 <UART_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e036      	b.n	8003cfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10b      	bne.n	8003cae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	3302      	adds	r3, #2
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	e007      	b.n	8003cbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1cf      	bne.n	8003c76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2140      	movs	r1, #64	; 0x40
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fa89 	bl	80041f8 <UART_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e006      	b.n	8003cfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e000      	b.n	8003cfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
  }
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b08a      	sub	sp, #40	; 0x28
 8003d0a:	af02      	add	r7, sp, #8
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	f040 808c 	bne.w	8003e40 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_UART_Receive+0x2e>
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e084      	b.n	8003e42 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_UART_Receive+0x40>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e07d      	b.n	8003e42 <HAL_UART_Receive+0x13c>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2222      	movs	r2, #34	; 0x22
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d62:	f7fd ffb1 	bl	8001cc8 <HAL_GetTick>
 8003d66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	88fa      	ldrh	r2, [r7, #6]
 8003d6c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	88fa      	ldrh	r2, [r7, #6]
 8003d72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7c:	d108      	bne.n	8003d90 <HAL_UART_Receive+0x8a>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d104      	bne.n	8003d90 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	e003      	b.n	8003d98 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003da0:	e043      	b.n	8003e2a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	2120      	movs	r1, #32
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 fa23 	bl	80041f8 <UART_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e042      	b.n	8003e42 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	e01f      	b.n	8003e1c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de4:	d007      	beq.n	8003df6 <HAL_UART_Receive+0xf0>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <HAL_UART_Receive+0xfe>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e008      	b.n	8003e16 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1b6      	bne.n	8003da2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_UART_IRQHandler+0x52>
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 faa1 	bl	80043de <UART_Receive_IT>
      return;
 8003e9c:	e17c      	b.n	8004198 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80b1 	beq.w	8004008 <HAL_UART_IRQHandler+0x1bc>
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d105      	bne.n	8003ebc <HAL_UART_IRQHandler+0x70>
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80a6 	beq.w	8004008 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_UART_IRQHandler+0x90>
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	f043 0201 	orr.w	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_UART_IRQHandler+0xb0>
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f043 0202 	orr.w	r2, r3, #2
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_UART_IRQHandler+0xd0>
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f043 0204 	orr.w	r2, r3, #4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00f      	beq.n	8003f46 <HAL_UART_IRQHandler+0xfa>
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d104      	bne.n	8003f3a <HAL_UART_IRQHandler+0xee>
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f043 0208 	orr.w	r2, r3, #8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 811f 	beq.w	800418e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <HAL_UART_IRQHandler+0x11e>
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fa3a 	bl	80043de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b40      	cmp	r3, #64	; 0x40
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <HAL_UART_IRQHandler+0x146>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d031      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f97a 	bl	800428c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d123      	bne.n	8003fee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d013      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	4a77      	ldr	r2, [pc, #476]	; (80041a0 <HAL_UART_IRQHandler+0x354>)
 8003fc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe f85f 	bl	800208e <HAL_DMA_Abort_IT>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	e00e      	b.n	8004004 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8f0 	bl	80041cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	e00a      	b.n	8004004 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8ec 	bl	80041cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	e006      	b.n	8004004 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8e8 	bl	80041cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004002:	e0c4      	b.n	800418e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	bf00      	nop
    return;
 8004006:	e0c2      	b.n	800418e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	2b01      	cmp	r3, #1
 800400e:	f040 80a2 	bne.w	8004156 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 809c 	beq.w	8004156 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8096 	beq.w	8004156 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b40      	cmp	r3, #64	; 0x40
 800404c:	d14f      	bne.n	80040ee <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004058:	8a3b      	ldrh	r3, [r7, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 8099 	beq.w	8004192 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004064:	8a3a      	ldrh	r2, [r7, #16]
 8004066:	429a      	cmp	r2, r3
 8004068:	f080 8093 	bcs.w	8004192 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8a3a      	ldrh	r2, [r7, #16]
 8004070:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407c:	d02b      	beq.n	80040d6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800408c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ac:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0210 	bic.w	r2, r2, #16
 80040ca:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fd ff6c 	bl	8001fae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040de:	b29b      	uxth	r3, r3
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	4619      	mov	r1, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f87a 	bl	80041e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040ec:	e051      	b.n	8004192 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d047      	beq.n	8004196 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004106:	8a7b      	ldrh	r3, [r7, #18]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d044      	beq.n	8004196 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800411a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0210 	bic.w	r2, r2, #16
 8004148:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800414a:	8a7b      	ldrh	r3, [r7, #18]
 800414c:	4619      	mov	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f846 	bl	80041e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004154:	e01f      	b.n	8004196 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_UART_IRQHandler+0x326>
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8cf 	bl	800430e <UART_Transmit_IT>
    return;
 8004170:	e012      	b.n	8004198 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <HAL_UART_IRQHandler+0x34c>
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f911 	bl	80043ae <UART_EndTransmit_IT>
    return;
 800418c:	e004      	b.n	8004198 <HAL_UART_IRQHandler+0x34c>
    return;
 800418e:	bf00      	nop
 8004190:	e002      	b.n	8004198 <HAL_UART_IRQHandler+0x34c>
      return;
 8004192:	bf00      	nop
 8004194:	e000      	b.n	8004198 <HAL_UART_IRQHandler+0x34c>
      return;
 8004196:	bf00      	nop
  }
}
 8004198:	3728      	adds	r7, #40	; 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	080042e7 	.word	0x080042e7

080041a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004208:	e02c      	b.n	8004264 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004210:	d028      	beq.n	8004264 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d007      	beq.n	8004228 <UART_WaitOnFlagUntilTimeout+0x30>
 8004218:	f7fd fd56 	bl	8001cc8 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	429a      	cmp	r2, r3
 8004226:	d21d      	bcs.n	8004264 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004236:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e00f      	b.n	8004284 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	429a      	cmp	r2, r3
 8004272:	bf0c      	ite	eq
 8004274:	2301      	moveq	r3, #1
 8004276:	2300      	movne	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	429a      	cmp	r2, r3
 8004280:	d0c3      	beq.n	800420a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0210 	bic.w	r2, r2, #16
 80042ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7ff ff63 	bl	80041cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b21      	cmp	r3, #33	; 0x21
 8004320:	d13e      	bne.n	80043a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432a:	d114      	bne.n	8004356 <UART_Transmit_IT+0x48>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d110      	bne.n	8004356 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004348:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	1c9a      	adds	r2, r3, #2
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	621a      	str	r2, [r3, #32]
 8004354:	e008      	b.n	8004368 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	1c59      	adds	r1, r3, #1
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6211      	str	r1, [r2, #32]
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29b      	uxth	r3, r3
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	4619      	mov	r1, r3
 8004376:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10f      	bne.n	800439c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800438a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800439a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e000      	b.n	80043a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff fee8 	bl	80041a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b22      	cmp	r3, #34	; 0x22
 80043f0:	f040 8087 	bne.w	8004502 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fc:	d117      	bne.n	800442e <UART_Receive_IT+0x50>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d113      	bne.n	800442e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	b29b      	uxth	r3, r3
 8004418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441c:	b29a      	uxth	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	1c9a      	adds	r2, r3, #2
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	629a      	str	r2, [r3, #40]	; 0x28
 800442c:	e026      	b.n	800447c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004440:	d007      	beq.n	8004452 <UART_Receive_IT+0x74>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <UART_Receive_IT+0x82>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	e008      	b.n	8004472 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29b      	uxth	r3, r3
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4619      	mov	r1, r3
 800448a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800448c:	2b00      	cmp	r3, #0
 800448e:	d136      	bne.n	80044fe <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0220 	bic.w	r2, r2, #32
 800449e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d10e      	bne.n	80044ee <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0210 	bic.w	r2, r2, #16
 80044de:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff fe7a 	bl	80041e0 <HAL_UARTEx_RxEventCallback>
 80044ec:	e002      	b.n	80044f4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fe62 	bl	80041b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e002      	b.n	8004504 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e000      	b.n	8004504 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004502:	2302      	movs	r3, #2
  }
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800450c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004510:	b09f      	sub	sp, #124	; 0x7c
 8004512:	af00      	add	r7, sp, #0
 8004514:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004522:	68d9      	ldr	r1, [r3, #12]
 8004524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	ea40 0301 	orr.w	r3, r0, r1
 800452c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800452e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	431a      	orrs	r2, r3
 8004538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	431a      	orrs	r2, r3
 800453e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	4313      	orrs	r3, r2
 8004544:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004550:	f021 010c 	bic.w	r1, r1, #12
 8004554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800455a:	430b      	orrs	r3, r1
 800455c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800455e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	6999      	ldr	r1, [r3, #24]
 800456c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	ea40 0301 	orr.w	r3, r0, r1
 8004574:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4bc5      	ldr	r3, [pc, #788]	; (8004890 <UART_SetConfig+0x384>)
 800457c:	429a      	cmp	r2, r3
 800457e:	d004      	beq.n	800458a <UART_SetConfig+0x7e>
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4bc3      	ldr	r3, [pc, #780]	; (8004894 <UART_SetConfig+0x388>)
 8004586:	429a      	cmp	r2, r3
 8004588:	d103      	bne.n	8004592 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800458a:	f7fe fc0f 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 800458e:	6778      	str	r0, [r7, #116]	; 0x74
 8004590:	e002      	b.n	8004598 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004592:	f7fe fbf7 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 8004596:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a0:	f040 80b6 	bne.w	8004710 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a6:	461c      	mov	r4, r3
 80045a8:	f04f 0500 	mov.w	r5, #0
 80045ac:	4622      	mov	r2, r4
 80045ae:	462b      	mov	r3, r5
 80045b0:	1891      	adds	r1, r2, r2
 80045b2:	6439      	str	r1, [r7, #64]	; 0x40
 80045b4:	415b      	adcs	r3, r3
 80045b6:	647b      	str	r3, [r7, #68]	; 0x44
 80045b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045bc:	1912      	adds	r2, r2, r4
 80045be:	eb45 0303 	adc.w	r3, r5, r3
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f04f 0100 	mov.w	r1, #0
 80045ca:	00d9      	lsls	r1, r3, #3
 80045cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d0:	00d0      	lsls	r0, r2, #3
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	1911      	adds	r1, r2, r4
 80045d8:	6639      	str	r1, [r7, #96]	; 0x60
 80045da:	416b      	adcs	r3, r5
 80045dc:	667b      	str	r3, [r7, #100]	; 0x64
 80045de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	1891      	adds	r1, r2, r2
 80045ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80045ec:	415b      	adcs	r3, r3
 80045ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80045f8:	f7fc f81e 	bl	8000638 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4ba5      	ldr	r3, [pc, #660]	; (8004898 <UART_SetConfig+0x38c>)
 8004602:	fba3 2302 	umull	r2, r3, r3, r2
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	011e      	lsls	r6, r3, #4
 800460a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800460c:	461c      	mov	r4, r3
 800460e:	f04f 0500 	mov.w	r5, #0
 8004612:	4622      	mov	r2, r4
 8004614:	462b      	mov	r3, r5
 8004616:	1891      	adds	r1, r2, r2
 8004618:	6339      	str	r1, [r7, #48]	; 0x30
 800461a:	415b      	adcs	r3, r3
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
 800461e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004622:	1912      	adds	r2, r2, r4
 8004624:	eb45 0303 	adc.w	r3, r5, r3
 8004628:	f04f 0000 	mov.w	r0, #0
 800462c:	f04f 0100 	mov.w	r1, #0
 8004630:	00d9      	lsls	r1, r3, #3
 8004632:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004636:	00d0      	lsls	r0, r2, #3
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	1911      	adds	r1, r2, r4
 800463e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004640:	416b      	adcs	r3, r5
 8004642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	461a      	mov	r2, r3
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	1891      	adds	r1, r2, r2
 8004650:	62b9      	str	r1, [r7, #40]	; 0x28
 8004652:	415b      	adcs	r3, r3
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800465a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800465e:	f7fb ffeb 	bl	8000638 <__aeabi_uldivmod>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4b8c      	ldr	r3, [pc, #560]	; (8004898 <UART_SetConfig+0x38c>)
 8004668:	fba3 1302 	umull	r1, r3, r3, r2
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	2164      	movs	r1, #100	; 0x64
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	3332      	adds	r3, #50	; 0x32
 800467a:	4a87      	ldr	r2, [pc, #540]	; (8004898 <UART_SetConfig+0x38c>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004688:	441e      	add	r6, r3
 800468a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800468c:	4618      	mov	r0, r3
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	1894      	adds	r4, r2, r2
 8004698:	623c      	str	r4, [r7, #32]
 800469a:	415b      	adcs	r3, r3
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
 800469e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046a2:	1812      	adds	r2, r2, r0
 80046a4:	eb41 0303 	adc.w	r3, r1, r3
 80046a8:	f04f 0400 	mov.w	r4, #0
 80046ac:	f04f 0500 	mov.w	r5, #0
 80046b0:	00dd      	lsls	r5, r3, #3
 80046b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046b6:	00d4      	lsls	r4, r2, #3
 80046b8:	4622      	mov	r2, r4
 80046ba:	462b      	mov	r3, r5
 80046bc:	1814      	adds	r4, r2, r0
 80046be:	653c      	str	r4, [r7, #80]	; 0x50
 80046c0:	414b      	adcs	r3, r1
 80046c2:	657b      	str	r3, [r7, #84]	; 0x54
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	461a      	mov	r2, r3
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	1891      	adds	r1, r2, r2
 80046d0:	61b9      	str	r1, [r7, #24]
 80046d2:	415b      	adcs	r3, r3
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80046de:	f7fb ffab 	bl	8000638 <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4b6c      	ldr	r3, [pc, #432]	; (8004898 <UART_SetConfig+0x38c>)
 80046e8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	2164      	movs	r1, #100	; 0x64
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	3332      	adds	r3, #50	; 0x32
 80046fa:	4a67      	ldr	r2, [pc, #412]	; (8004898 <UART_SetConfig+0x38c>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f003 0207 	and.w	r2, r3, #7
 8004706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4432      	add	r2, r6
 800470c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800470e:	e0b9      	b.n	8004884 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004712:	461c      	mov	r4, r3
 8004714:	f04f 0500 	mov.w	r5, #0
 8004718:	4622      	mov	r2, r4
 800471a:	462b      	mov	r3, r5
 800471c:	1891      	adds	r1, r2, r2
 800471e:	6139      	str	r1, [r7, #16]
 8004720:	415b      	adcs	r3, r3
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004728:	1912      	adds	r2, r2, r4
 800472a:	eb45 0303 	adc.w	r3, r5, r3
 800472e:	f04f 0000 	mov.w	r0, #0
 8004732:	f04f 0100 	mov.w	r1, #0
 8004736:	00d9      	lsls	r1, r3, #3
 8004738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800473c:	00d0      	lsls	r0, r2, #3
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	eb12 0804 	adds.w	r8, r2, r4
 8004746:	eb43 0905 	adc.w	r9, r3, r5
 800474a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4618      	mov	r0, r3
 8004750:	f04f 0100 	mov.w	r1, #0
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	008b      	lsls	r3, r1, #2
 800475e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004762:	0082      	lsls	r2, r0, #2
 8004764:	4640      	mov	r0, r8
 8004766:	4649      	mov	r1, r9
 8004768:	f7fb ff66 	bl	8000638 <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4b49      	ldr	r3, [pc, #292]	; (8004898 <UART_SetConfig+0x38c>)
 8004772:	fba3 2302 	umull	r2, r3, r3, r2
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	011e      	lsls	r6, r3, #4
 800477a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800477c:	4618      	mov	r0, r3
 800477e:	f04f 0100 	mov.w	r1, #0
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	1894      	adds	r4, r2, r2
 8004788:	60bc      	str	r4, [r7, #8]
 800478a:	415b      	adcs	r3, r3
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004792:	1812      	adds	r2, r2, r0
 8004794:	eb41 0303 	adc.w	r3, r1, r3
 8004798:	f04f 0400 	mov.w	r4, #0
 800479c:	f04f 0500 	mov.w	r5, #0
 80047a0:	00dd      	lsls	r5, r3, #3
 80047a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047a6:	00d4      	lsls	r4, r2, #3
 80047a8:	4622      	mov	r2, r4
 80047aa:	462b      	mov	r3, r5
 80047ac:	1814      	adds	r4, r2, r0
 80047ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80047b0:	414b      	adcs	r3, r1
 80047b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f04f 0100 	mov.w	r1, #0
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	008b      	lsls	r3, r1, #2
 80047c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047cc:	0082      	lsls	r2, r0, #2
 80047ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80047d2:	f7fb ff31 	bl	8000638 <__aeabi_uldivmod>
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4b2f      	ldr	r3, [pc, #188]	; (8004898 <UART_SetConfig+0x38c>)
 80047dc:	fba3 1302 	umull	r1, r3, r3, r2
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	2164      	movs	r1, #100	; 0x64
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	3332      	adds	r3, #50	; 0x32
 80047ee:	4a2a      	ldr	r2, [pc, #168]	; (8004898 <UART_SetConfig+0x38c>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fa:	441e      	add	r6, r3
 80047fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047fe:	4618      	mov	r0, r3
 8004800:	f04f 0100 	mov.w	r1, #0
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	1894      	adds	r4, r2, r2
 800480a:	603c      	str	r4, [r7, #0]
 800480c:	415b      	adcs	r3, r3
 800480e:	607b      	str	r3, [r7, #4]
 8004810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004814:	1812      	adds	r2, r2, r0
 8004816:	eb41 0303 	adc.w	r3, r1, r3
 800481a:	f04f 0400 	mov.w	r4, #0
 800481e:	f04f 0500 	mov.w	r5, #0
 8004822:	00dd      	lsls	r5, r3, #3
 8004824:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004828:	00d4      	lsls	r4, r2, #3
 800482a:	4622      	mov	r2, r4
 800482c:	462b      	mov	r3, r5
 800482e:	eb12 0a00 	adds.w	sl, r2, r0
 8004832:	eb43 0b01 	adc.w	fp, r3, r1
 8004836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4618      	mov	r0, r3
 800483c:	f04f 0100 	mov.w	r1, #0
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	008b      	lsls	r3, r1, #2
 800484a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800484e:	0082      	lsls	r2, r0, #2
 8004850:	4650      	mov	r0, sl
 8004852:	4659      	mov	r1, fp
 8004854:	f7fb fef0 	bl	8000638 <__aeabi_uldivmod>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <UART_SetConfig+0x38c>)
 800485e:	fba3 1302 	umull	r1, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	2164      	movs	r1, #100	; 0x64
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	3332      	adds	r3, #50	; 0x32
 8004870:	4a09      	ldr	r2, [pc, #36]	; (8004898 <UART_SetConfig+0x38c>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	f003 020f 	and.w	r2, r3, #15
 800487c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4432      	add	r2, r6
 8004882:	609a      	str	r2, [r3, #8]
}
 8004884:	bf00      	nop
 8004886:	377c      	adds	r7, #124	; 0x7c
 8004888:	46bd      	mov	sp, r7
 800488a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488e:	bf00      	nop
 8004890:	40011000 	.word	0x40011000
 8004894:	40011400 	.word	0x40011400
 8004898:	51eb851f 	.word	0x51eb851f

0800489c <atoi>:
 800489c:	220a      	movs	r2, #10
 800489e:	2100      	movs	r1, #0
 80048a0:	f000 b8d6 	b.w	8004a50 <strtol>

080048a4 <__errno>:
 80048a4:	4b01      	ldr	r3, [pc, #4]	; (80048ac <__errno+0x8>)
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	2000007c 	.word	0x2000007c

080048b0 <__libc_init_array>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	4d0d      	ldr	r5, [pc, #52]	; (80048e8 <__libc_init_array+0x38>)
 80048b4:	4c0d      	ldr	r4, [pc, #52]	; (80048ec <__libc_init_array+0x3c>)
 80048b6:	1b64      	subs	r4, r4, r5
 80048b8:	10a4      	asrs	r4, r4, #2
 80048ba:	2600      	movs	r6, #0
 80048bc:	42a6      	cmp	r6, r4
 80048be:	d109      	bne.n	80048d4 <__libc_init_array+0x24>
 80048c0:	4d0b      	ldr	r5, [pc, #44]	; (80048f0 <__libc_init_array+0x40>)
 80048c2:	4c0c      	ldr	r4, [pc, #48]	; (80048f4 <__libc_init_array+0x44>)
 80048c4:	f000 fcdc 	bl	8005280 <_init>
 80048c8:	1b64      	subs	r4, r4, r5
 80048ca:	10a4      	asrs	r4, r4, #2
 80048cc:	2600      	movs	r6, #0
 80048ce:	42a6      	cmp	r6, r4
 80048d0:	d105      	bne.n	80048de <__libc_init_array+0x2e>
 80048d2:	bd70      	pop	{r4, r5, r6, pc}
 80048d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d8:	4798      	blx	r3
 80048da:	3601      	adds	r6, #1
 80048dc:	e7ee      	b.n	80048bc <__libc_init_array+0xc>
 80048de:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e2:	4798      	blx	r3
 80048e4:	3601      	adds	r6, #1
 80048e6:	e7f2      	b.n	80048ce <__libc_init_array+0x1e>
 80048e8:	080054a8 	.word	0x080054a8
 80048ec:	080054a8 	.word	0x080054a8
 80048f0:	080054a8 	.word	0x080054a8
 80048f4:	080054ac 	.word	0x080054ac

080048f8 <memset>:
 80048f8:	4402      	add	r2, r0
 80048fa:	4603      	mov	r3, r0
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d100      	bne.n	8004902 <memset+0xa>
 8004900:	4770      	bx	lr
 8004902:	f803 1b01 	strb.w	r1, [r3], #1
 8004906:	e7f9      	b.n	80048fc <memset+0x4>

08004908 <siprintf>:
 8004908:	b40e      	push	{r1, r2, r3}
 800490a:	b500      	push	{lr}
 800490c:	b09c      	sub	sp, #112	; 0x70
 800490e:	ab1d      	add	r3, sp, #116	; 0x74
 8004910:	9002      	str	r0, [sp, #8]
 8004912:	9006      	str	r0, [sp, #24]
 8004914:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004918:	4809      	ldr	r0, [pc, #36]	; (8004940 <siprintf+0x38>)
 800491a:	9107      	str	r1, [sp, #28]
 800491c:	9104      	str	r1, [sp, #16]
 800491e:	4909      	ldr	r1, [pc, #36]	; (8004944 <siprintf+0x3c>)
 8004920:	f853 2b04 	ldr.w	r2, [r3], #4
 8004924:	9105      	str	r1, [sp, #20]
 8004926:	6800      	ldr	r0, [r0, #0]
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	a902      	add	r1, sp, #8
 800492c:	f000 f8f6 	bl	8004b1c <_svfiprintf_r>
 8004930:	9b02      	ldr	r3, [sp, #8]
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	b01c      	add	sp, #112	; 0x70
 8004938:	f85d eb04 	ldr.w	lr, [sp], #4
 800493c:	b003      	add	sp, #12
 800493e:	4770      	bx	lr
 8004940:	2000007c 	.word	0x2000007c
 8004944:	ffff0208 	.word	0xffff0208

08004948 <_strtol_l.isra.0>:
 8004948:	2b01      	cmp	r3, #1
 800494a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800494e:	d001      	beq.n	8004954 <_strtol_l.isra.0+0xc>
 8004950:	2b24      	cmp	r3, #36	; 0x24
 8004952:	d906      	bls.n	8004962 <_strtol_l.isra.0+0x1a>
 8004954:	f7ff ffa6 	bl	80048a4 <__errno>
 8004958:	2316      	movs	r3, #22
 800495a:	6003      	str	r3, [r0, #0]
 800495c:	2000      	movs	r0, #0
 800495e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004962:	4f3a      	ldr	r7, [pc, #232]	; (8004a4c <_strtol_l.isra.0+0x104>)
 8004964:	468e      	mov	lr, r1
 8004966:	4676      	mov	r6, lr
 8004968:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800496c:	5de5      	ldrb	r5, [r4, r7]
 800496e:	f015 0508 	ands.w	r5, r5, #8
 8004972:	d1f8      	bne.n	8004966 <_strtol_l.isra.0+0x1e>
 8004974:	2c2d      	cmp	r4, #45	; 0x2d
 8004976:	d134      	bne.n	80049e2 <_strtol_l.isra.0+0x9a>
 8004978:	f89e 4000 	ldrb.w	r4, [lr]
 800497c:	f04f 0801 	mov.w	r8, #1
 8004980:	f106 0e02 	add.w	lr, r6, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d05c      	beq.n	8004a42 <_strtol_l.isra.0+0xfa>
 8004988:	2b10      	cmp	r3, #16
 800498a:	d10c      	bne.n	80049a6 <_strtol_l.isra.0+0x5e>
 800498c:	2c30      	cmp	r4, #48	; 0x30
 800498e:	d10a      	bne.n	80049a6 <_strtol_l.isra.0+0x5e>
 8004990:	f89e 4000 	ldrb.w	r4, [lr]
 8004994:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004998:	2c58      	cmp	r4, #88	; 0x58
 800499a:	d14d      	bne.n	8004a38 <_strtol_l.isra.0+0xf0>
 800499c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80049a0:	2310      	movs	r3, #16
 80049a2:	f10e 0e02 	add.w	lr, lr, #2
 80049a6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80049aa:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80049ae:	2600      	movs	r6, #0
 80049b0:	fbbc f9f3 	udiv	r9, ip, r3
 80049b4:	4635      	mov	r5, r6
 80049b6:	fb03 ca19 	mls	sl, r3, r9, ip
 80049ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80049be:	2f09      	cmp	r7, #9
 80049c0:	d818      	bhi.n	80049f4 <_strtol_l.isra.0+0xac>
 80049c2:	463c      	mov	r4, r7
 80049c4:	42a3      	cmp	r3, r4
 80049c6:	dd24      	ble.n	8004a12 <_strtol_l.isra.0+0xca>
 80049c8:	2e00      	cmp	r6, #0
 80049ca:	db1f      	blt.n	8004a0c <_strtol_l.isra.0+0xc4>
 80049cc:	45a9      	cmp	r9, r5
 80049ce:	d31d      	bcc.n	8004a0c <_strtol_l.isra.0+0xc4>
 80049d0:	d101      	bne.n	80049d6 <_strtol_l.isra.0+0x8e>
 80049d2:	45a2      	cmp	sl, r4
 80049d4:	db1a      	blt.n	8004a0c <_strtol_l.isra.0+0xc4>
 80049d6:	fb05 4503 	mla	r5, r5, r3, r4
 80049da:	2601      	movs	r6, #1
 80049dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80049e0:	e7eb      	b.n	80049ba <_strtol_l.isra.0+0x72>
 80049e2:	2c2b      	cmp	r4, #43	; 0x2b
 80049e4:	bf08      	it	eq
 80049e6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80049ea:	46a8      	mov	r8, r5
 80049ec:	bf08      	it	eq
 80049ee:	f106 0e02 	addeq.w	lr, r6, #2
 80049f2:	e7c7      	b.n	8004984 <_strtol_l.isra.0+0x3c>
 80049f4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80049f8:	2f19      	cmp	r7, #25
 80049fa:	d801      	bhi.n	8004a00 <_strtol_l.isra.0+0xb8>
 80049fc:	3c37      	subs	r4, #55	; 0x37
 80049fe:	e7e1      	b.n	80049c4 <_strtol_l.isra.0+0x7c>
 8004a00:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004a04:	2f19      	cmp	r7, #25
 8004a06:	d804      	bhi.n	8004a12 <_strtol_l.isra.0+0xca>
 8004a08:	3c57      	subs	r4, #87	; 0x57
 8004a0a:	e7db      	b.n	80049c4 <_strtol_l.isra.0+0x7c>
 8004a0c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004a10:	e7e4      	b.n	80049dc <_strtol_l.isra.0+0x94>
 8004a12:	2e00      	cmp	r6, #0
 8004a14:	da05      	bge.n	8004a22 <_strtol_l.isra.0+0xda>
 8004a16:	2322      	movs	r3, #34	; 0x22
 8004a18:	6003      	str	r3, [r0, #0]
 8004a1a:	4665      	mov	r5, ip
 8004a1c:	b942      	cbnz	r2, 8004a30 <_strtol_l.isra.0+0xe8>
 8004a1e:	4628      	mov	r0, r5
 8004a20:	e79d      	b.n	800495e <_strtol_l.isra.0+0x16>
 8004a22:	f1b8 0f00 	cmp.w	r8, #0
 8004a26:	d000      	beq.n	8004a2a <_strtol_l.isra.0+0xe2>
 8004a28:	426d      	negs	r5, r5
 8004a2a:	2a00      	cmp	r2, #0
 8004a2c:	d0f7      	beq.n	8004a1e <_strtol_l.isra.0+0xd6>
 8004a2e:	b10e      	cbz	r6, 8004a34 <_strtol_l.isra.0+0xec>
 8004a30:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8004a34:	6011      	str	r1, [r2, #0]
 8004a36:	e7f2      	b.n	8004a1e <_strtol_l.isra.0+0xd6>
 8004a38:	2430      	movs	r4, #48	; 0x30
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1b3      	bne.n	80049a6 <_strtol_l.isra.0+0x5e>
 8004a3e:	2308      	movs	r3, #8
 8004a40:	e7b1      	b.n	80049a6 <_strtol_l.isra.0+0x5e>
 8004a42:	2c30      	cmp	r4, #48	; 0x30
 8004a44:	d0a4      	beq.n	8004990 <_strtol_l.isra.0+0x48>
 8004a46:	230a      	movs	r3, #10
 8004a48:	e7ad      	b.n	80049a6 <_strtol_l.isra.0+0x5e>
 8004a4a:	bf00      	nop
 8004a4c:	0800536d 	.word	0x0800536d

08004a50 <strtol>:
 8004a50:	4613      	mov	r3, r2
 8004a52:	460a      	mov	r2, r1
 8004a54:	4601      	mov	r1, r0
 8004a56:	4802      	ldr	r0, [pc, #8]	; (8004a60 <strtol+0x10>)
 8004a58:	6800      	ldr	r0, [r0, #0]
 8004a5a:	f7ff bf75 	b.w	8004948 <_strtol_l.isra.0>
 8004a5e:	bf00      	nop
 8004a60:	2000007c 	.word	0x2000007c

08004a64 <__ssputs_r>:
 8004a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	688e      	ldr	r6, [r1, #8]
 8004a6a:	429e      	cmp	r6, r3
 8004a6c:	4682      	mov	sl, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	4690      	mov	r8, r2
 8004a72:	461f      	mov	r7, r3
 8004a74:	d838      	bhi.n	8004ae8 <__ssputs_r+0x84>
 8004a76:	898a      	ldrh	r2, [r1, #12]
 8004a78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a7c:	d032      	beq.n	8004ae4 <__ssputs_r+0x80>
 8004a7e:	6825      	ldr	r5, [r4, #0]
 8004a80:	6909      	ldr	r1, [r1, #16]
 8004a82:	eba5 0901 	sub.w	r9, r5, r1
 8004a86:	6965      	ldr	r5, [r4, #20]
 8004a88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a90:	3301      	adds	r3, #1
 8004a92:	444b      	add	r3, r9
 8004a94:	106d      	asrs	r5, r5, #1
 8004a96:	429d      	cmp	r5, r3
 8004a98:	bf38      	it	cc
 8004a9a:	461d      	movcc	r5, r3
 8004a9c:	0553      	lsls	r3, r2, #21
 8004a9e:	d531      	bpl.n	8004b04 <__ssputs_r+0xa0>
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	f000 fb47 	bl	8005134 <_malloc_r>
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	b950      	cbnz	r0, 8004ac0 <__ssputs_r+0x5c>
 8004aaa:	230c      	movs	r3, #12
 8004aac:	f8ca 3000 	str.w	r3, [sl]
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab6:	81a3      	strh	r3, [r4, #12]
 8004ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac0:	6921      	ldr	r1, [r4, #16]
 8004ac2:	464a      	mov	r2, r9
 8004ac4:	f000 fabe 	bl	8005044 <memcpy>
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad2:	81a3      	strh	r3, [r4, #12]
 8004ad4:	6126      	str	r6, [r4, #16]
 8004ad6:	6165      	str	r5, [r4, #20]
 8004ad8:	444e      	add	r6, r9
 8004ada:	eba5 0509 	sub.w	r5, r5, r9
 8004ade:	6026      	str	r6, [r4, #0]
 8004ae0:	60a5      	str	r5, [r4, #8]
 8004ae2:	463e      	mov	r6, r7
 8004ae4:	42be      	cmp	r6, r7
 8004ae6:	d900      	bls.n	8004aea <__ssputs_r+0x86>
 8004ae8:	463e      	mov	r6, r7
 8004aea:	4632      	mov	r2, r6
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	4641      	mov	r1, r8
 8004af0:	f000 fab6 	bl	8005060 <memmove>
 8004af4:	68a3      	ldr	r3, [r4, #8]
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	1b9b      	subs	r3, r3, r6
 8004afa:	4432      	add	r2, r6
 8004afc:	60a3      	str	r3, [r4, #8]
 8004afe:	6022      	str	r2, [r4, #0]
 8004b00:	2000      	movs	r0, #0
 8004b02:	e7db      	b.n	8004abc <__ssputs_r+0x58>
 8004b04:	462a      	mov	r2, r5
 8004b06:	f000 fb6f 	bl	80051e8 <_realloc_r>
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d1e1      	bne.n	8004ad4 <__ssputs_r+0x70>
 8004b10:	6921      	ldr	r1, [r4, #16]
 8004b12:	4650      	mov	r0, sl
 8004b14:	f000 fabe 	bl	8005094 <_free_r>
 8004b18:	e7c7      	b.n	8004aaa <__ssputs_r+0x46>
	...

08004b1c <_svfiprintf_r>:
 8004b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b20:	4698      	mov	r8, r3
 8004b22:	898b      	ldrh	r3, [r1, #12]
 8004b24:	061b      	lsls	r3, r3, #24
 8004b26:	b09d      	sub	sp, #116	; 0x74
 8004b28:	4607      	mov	r7, r0
 8004b2a:	460d      	mov	r5, r1
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	d50e      	bpl.n	8004b4e <_svfiprintf_r+0x32>
 8004b30:	690b      	ldr	r3, [r1, #16]
 8004b32:	b963      	cbnz	r3, 8004b4e <_svfiprintf_r+0x32>
 8004b34:	2140      	movs	r1, #64	; 0x40
 8004b36:	f000 fafd 	bl	8005134 <_malloc_r>
 8004b3a:	6028      	str	r0, [r5, #0]
 8004b3c:	6128      	str	r0, [r5, #16]
 8004b3e:	b920      	cbnz	r0, 8004b4a <_svfiprintf_r+0x2e>
 8004b40:	230c      	movs	r3, #12
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b48:	e0d1      	b.n	8004cee <_svfiprintf_r+0x1d2>
 8004b4a:	2340      	movs	r3, #64	; 0x40
 8004b4c:	616b      	str	r3, [r5, #20]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	9309      	str	r3, [sp, #36]	; 0x24
 8004b52:	2320      	movs	r3, #32
 8004b54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b58:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b5c:	2330      	movs	r3, #48	; 0x30
 8004b5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d08 <_svfiprintf_r+0x1ec>
 8004b62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b66:	f04f 0901 	mov.w	r9, #1
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	469a      	mov	sl, r3
 8004b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b72:	b10a      	cbz	r2, 8004b78 <_svfiprintf_r+0x5c>
 8004b74:	2a25      	cmp	r2, #37	; 0x25
 8004b76:	d1f9      	bne.n	8004b6c <_svfiprintf_r+0x50>
 8004b78:	ebba 0b04 	subs.w	fp, sl, r4
 8004b7c:	d00b      	beq.n	8004b96 <_svfiprintf_r+0x7a>
 8004b7e:	465b      	mov	r3, fp
 8004b80:	4622      	mov	r2, r4
 8004b82:	4629      	mov	r1, r5
 8004b84:	4638      	mov	r0, r7
 8004b86:	f7ff ff6d 	bl	8004a64 <__ssputs_r>
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	f000 80aa 	beq.w	8004ce4 <_svfiprintf_r+0x1c8>
 8004b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b92:	445a      	add	r2, fp
 8004b94:	9209      	str	r2, [sp, #36]	; 0x24
 8004b96:	f89a 3000 	ldrb.w	r3, [sl]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 80a2 	beq.w	8004ce4 <_svfiprintf_r+0x1c8>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004baa:	f10a 0a01 	add.w	sl, sl, #1
 8004bae:	9304      	str	r3, [sp, #16]
 8004bb0:	9307      	str	r3, [sp, #28]
 8004bb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bb6:	931a      	str	r3, [sp, #104]	; 0x68
 8004bb8:	4654      	mov	r4, sl
 8004bba:	2205      	movs	r2, #5
 8004bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc0:	4851      	ldr	r0, [pc, #324]	; (8004d08 <_svfiprintf_r+0x1ec>)
 8004bc2:	f7fb fb0d 	bl	80001e0 <memchr>
 8004bc6:	9a04      	ldr	r2, [sp, #16]
 8004bc8:	b9d8      	cbnz	r0, 8004c02 <_svfiprintf_r+0xe6>
 8004bca:	06d0      	lsls	r0, r2, #27
 8004bcc:	bf44      	itt	mi
 8004bce:	2320      	movmi	r3, #32
 8004bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bd4:	0711      	lsls	r1, r2, #28
 8004bd6:	bf44      	itt	mi
 8004bd8:	232b      	movmi	r3, #43	; 0x2b
 8004bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bde:	f89a 3000 	ldrb.w	r3, [sl]
 8004be2:	2b2a      	cmp	r3, #42	; 0x2a
 8004be4:	d015      	beq.n	8004c12 <_svfiprintf_r+0xf6>
 8004be6:	9a07      	ldr	r2, [sp, #28]
 8004be8:	4654      	mov	r4, sl
 8004bea:	2000      	movs	r0, #0
 8004bec:	f04f 0c0a 	mov.w	ip, #10
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bf6:	3b30      	subs	r3, #48	; 0x30
 8004bf8:	2b09      	cmp	r3, #9
 8004bfa:	d94e      	bls.n	8004c9a <_svfiprintf_r+0x17e>
 8004bfc:	b1b0      	cbz	r0, 8004c2c <_svfiprintf_r+0x110>
 8004bfe:	9207      	str	r2, [sp, #28]
 8004c00:	e014      	b.n	8004c2c <_svfiprintf_r+0x110>
 8004c02:	eba0 0308 	sub.w	r3, r0, r8
 8004c06:	fa09 f303 	lsl.w	r3, r9, r3
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	9304      	str	r3, [sp, #16]
 8004c0e:	46a2      	mov	sl, r4
 8004c10:	e7d2      	b.n	8004bb8 <_svfiprintf_r+0x9c>
 8004c12:	9b03      	ldr	r3, [sp, #12]
 8004c14:	1d19      	adds	r1, r3, #4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	9103      	str	r1, [sp, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bfbb      	ittet	lt
 8004c1e:	425b      	neglt	r3, r3
 8004c20:	f042 0202 	orrlt.w	r2, r2, #2
 8004c24:	9307      	strge	r3, [sp, #28]
 8004c26:	9307      	strlt	r3, [sp, #28]
 8004c28:	bfb8      	it	lt
 8004c2a:	9204      	strlt	r2, [sp, #16]
 8004c2c:	7823      	ldrb	r3, [r4, #0]
 8004c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c30:	d10c      	bne.n	8004c4c <_svfiprintf_r+0x130>
 8004c32:	7863      	ldrb	r3, [r4, #1]
 8004c34:	2b2a      	cmp	r3, #42	; 0x2a
 8004c36:	d135      	bne.n	8004ca4 <_svfiprintf_r+0x188>
 8004c38:	9b03      	ldr	r3, [sp, #12]
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	9203      	str	r2, [sp, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bfb8      	it	lt
 8004c44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c48:	3402      	adds	r4, #2
 8004c4a:	9305      	str	r3, [sp, #20]
 8004c4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d18 <_svfiprintf_r+0x1fc>
 8004c50:	7821      	ldrb	r1, [r4, #0]
 8004c52:	2203      	movs	r2, #3
 8004c54:	4650      	mov	r0, sl
 8004c56:	f7fb fac3 	bl	80001e0 <memchr>
 8004c5a:	b140      	cbz	r0, 8004c6e <_svfiprintf_r+0x152>
 8004c5c:	2340      	movs	r3, #64	; 0x40
 8004c5e:	eba0 000a 	sub.w	r0, r0, sl
 8004c62:	fa03 f000 	lsl.w	r0, r3, r0
 8004c66:	9b04      	ldr	r3, [sp, #16]
 8004c68:	4303      	orrs	r3, r0
 8004c6a:	3401      	adds	r4, #1
 8004c6c:	9304      	str	r3, [sp, #16]
 8004c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c72:	4826      	ldr	r0, [pc, #152]	; (8004d0c <_svfiprintf_r+0x1f0>)
 8004c74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c78:	2206      	movs	r2, #6
 8004c7a:	f7fb fab1 	bl	80001e0 <memchr>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d038      	beq.n	8004cf4 <_svfiprintf_r+0x1d8>
 8004c82:	4b23      	ldr	r3, [pc, #140]	; (8004d10 <_svfiprintf_r+0x1f4>)
 8004c84:	bb1b      	cbnz	r3, 8004cce <_svfiprintf_r+0x1b2>
 8004c86:	9b03      	ldr	r3, [sp, #12]
 8004c88:	3307      	adds	r3, #7
 8004c8a:	f023 0307 	bic.w	r3, r3, #7
 8004c8e:	3308      	adds	r3, #8
 8004c90:	9303      	str	r3, [sp, #12]
 8004c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c94:	4433      	add	r3, r6
 8004c96:	9309      	str	r3, [sp, #36]	; 0x24
 8004c98:	e767      	b.n	8004b6a <_svfiprintf_r+0x4e>
 8004c9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	e7a5      	b.n	8004bf0 <_svfiprintf_r+0xd4>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	3401      	adds	r4, #1
 8004ca8:	9305      	str	r3, [sp, #20]
 8004caa:	4619      	mov	r1, r3
 8004cac:	f04f 0c0a 	mov.w	ip, #10
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cb6:	3a30      	subs	r2, #48	; 0x30
 8004cb8:	2a09      	cmp	r2, #9
 8004cba:	d903      	bls.n	8004cc4 <_svfiprintf_r+0x1a8>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0c5      	beq.n	8004c4c <_svfiprintf_r+0x130>
 8004cc0:	9105      	str	r1, [sp, #20]
 8004cc2:	e7c3      	b.n	8004c4c <_svfiprintf_r+0x130>
 8004cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cc8:	4604      	mov	r4, r0
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e7f0      	b.n	8004cb0 <_svfiprintf_r+0x194>
 8004cce:	ab03      	add	r3, sp, #12
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	462a      	mov	r2, r5
 8004cd4:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <_svfiprintf_r+0x1f8>)
 8004cd6:	a904      	add	r1, sp, #16
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f3af 8000 	nop.w
 8004cde:	1c42      	adds	r2, r0, #1
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	d1d6      	bne.n	8004c92 <_svfiprintf_r+0x176>
 8004ce4:	89ab      	ldrh	r3, [r5, #12]
 8004ce6:	065b      	lsls	r3, r3, #25
 8004ce8:	f53f af2c 	bmi.w	8004b44 <_svfiprintf_r+0x28>
 8004cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cee:	b01d      	add	sp, #116	; 0x74
 8004cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf4:	ab03      	add	r3, sp, #12
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	462a      	mov	r2, r5
 8004cfa:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <_svfiprintf_r+0x1f8>)
 8004cfc:	a904      	add	r1, sp, #16
 8004cfe:	4638      	mov	r0, r7
 8004d00:	f000 f87a 	bl	8004df8 <_printf_i>
 8004d04:	e7eb      	b.n	8004cde <_svfiprintf_r+0x1c2>
 8004d06:	bf00      	nop
 8004d08:	0800546d 	.word	0x0800546d
 8004d0c:	08005477 	.word	0x08005477
 8004d10:	00000000 	.word	0x00000000
 8004d14:	08004a65 	.word	0x08004a65
 8004d18:	08005473 	.word	0x08005473

08004d1c <_printf_common>:
 8004d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d20:	4616      	mov	r6, r2
 8004d22:	4699      	mov	r9, r3
 8004d24:	688a      	ldr	r2, [r1, #8]
 8004d26:	690b      	ldr	r3, [r1, #16]
 8004d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	bfb8      	it	lt
 8004d30:	4613      	movlt	r3, r2
 8004d32:	6033      	str	r3, [r6, #0]
 8004d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d38:	4607      	mov	r7, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	b10a      	cbz	r2, 8004d42 <_printf_common+0x26>
 8004d3e:	3301      	adds	r3, #1
 8004d40:	6033      	str	r3, [r6, #0]
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	0699      	lsls	r1, r3, #26
 8004d46:	bf42      	ittt	mi
 8004d48:	6833      	ldrmi	r3, [r6, #0]
 8004d4a:	3302      	addmi	r3, #2
 8004d4c:	6033      	strmi	r3, [r6, #0]
 8004d4e:	6825      	ldr	r5, [r4, #0]
 8004d50:	f015 0506 	ands.w	r5, r5, #6
 8004d54:	d106      	bne.n	8004d64 <_printf_common+0x48>
 8004d56:	f104 0a19 	add.w	sl, r4, #25
 8004d5a:	68e3      	ldr	r3, [r4, #12]
 8004d5c:	6832      	ldr	r2, [r6, #0]
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	42ab      	cmp	r3, r5
 8004d62:	dc26      	bgt.n	8004db2 <_printf_common+0x96>
 8004d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d68:	1e13      	subs	r3, r2, #0
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	bf18      	it	ne
 8004d6e:	2301      	movne	r3, #1
 8004d70:	0692      	lsls	r2, r2, #26
 8004d72:	d42b      	bmi.n	8004dcc <_printf_common+0xb0>
 8004d74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d78:	4649      	mov	r1, r9
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	47c0      	blx	r8
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d01e      	beq.n	8004dc0 <_printf_common+0xa4>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	68e5      	ldr	r5, [r4, #12]
 8004d86:	6832      	ldr	r2, [r6, #0]
 8004d88:	f003 0306 	and.w	r3, r3, #6
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	bf08      	it	eq
 8004d90:	1aad      	subeq	r5, r5, r2
 8004d92:	68a3      	ldr	r3, [r4, #8]
 8004d94:	6922      	ldr	r2, [r4, #16]
 8004d96:	bf0c      	ite	eq
 8004d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d9c:	2500      	movne	r5, #0
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	bfc4      	itt	gt
 8004da2:	1a9b      	subgt	r3, r3, r2
 8004da4:	18ed      	addgt	r5, r5, r3
 8004da6:	2600      	movs	r6, #0
 8004da8:	341a      	adds	r4, #26
 8004daa:	42b5      	cmp	r5, r6
 8004dac:	d11a      	bne.n	8004de4 <_printf_common+0xc8>
 8004dae:	2000      	movs	r0, #0
 8004db0:	e008      	b.n	8004dc4 <_printf_common+0xa8>
 8004db2:	2301      	movs	r3, #1
 8004db4:	4652      	mov	r2, sl
 8004db6:	4649      	mov	r1, r9
 8004db8:	4638      	mov	r0, r7
 8004dba:	47c0      	blx	r8
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d103      	bne.n	8004dc8 <_printf_common+0xac>
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc8:	3501      	adds	r5, #1
 8004dca:	e7c6      	b.n	8004d5a <_printf_common+0x3e>
 8004dcc:	18e1      	adds	r1, r4, r3
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	2030      	movs	r0, #48	; 0x30
 8004dd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dd6:	4422      	add	r2, r4
 8004dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004de0:	3302      	adds	r3, #2
 8004de2:	e7c7      	b.n	8004d74 <_printf_common+0x58>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4622      	mov	r2, r4
 8004de8:	4649      	mov	r1, r9
 8004dea:	4638      	mov	r0, r7
 8004dec:	47c0      	blx	r8
 8004dee:	3001      	adds	r0, #1
 8004df0:	d0e6      	beq.n	8004dc0 <_printf_common+0xa4>
 8004df2:	3601      	adds	r6, #1
 8004df4:	e7d9      	b.n	8004daa <_printf_common+0x8e>
	...

08004df8 <_printf_i>:
 8004df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	4691      	mov	r9, r2
 8004e00:	7e27      	ldrb	r7, [r4, #24]
 8004e02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e04:	2f78      	cmp	r7, #120	; 0x78
 8004e06:	4680      	mov	r8, r0
 8004e08:	469a      	mov	sl, r3
 8004e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e0e:	d807      	bhi.n	8004e20 <_printf_i+0x28>
 8004e10:	2f62      	cmp	r7, #98	; 0x62
 8004e12:	d80a      	bhi.n	8004e2a <_printf_i+0x32>
 8004e14:	2f00      	cmp	r7, #0
 8004e16:	f000 80d8 	beq.w	8004fca <_printf_i+0x1d2>
 8004e1a:	2f58      	cmp	r7, #88	; 0x58
 8004e1c:	f000 80a3 	beq.w	8004f66 <_printf_i+0x16e>
 8004e20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e28:	e03a      	b.n	8004ea0 <_printf_i+0xa8>
 8004e2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e2e:	2b15      	cmp	r3, #21
 8004e30:	d8f6      	bhi.n	8004e20 <_printf_i+0x28>
 8004e32:	a001      	add	r0, pc, #4	; (adr r0, 8004e38 <_printf_i+0x40>)
 8004e34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e38:	08004e91 	.word	0x08004e91
 8004e3c:	08004ea5 	.word	0x08004ea5
 8004e40:	08004e21 	.word	0x08004e21
 8004e44:	08004e21 	.word	0x08004e21
 8004e48:	08004e21 	.word	0x08004e21
 8004e4c:	08004e21 	.word	0x08004e21
 8004e50:	08004ea5 	.word	0x08004ea5
 8004e54:	08004e21 	.word	0x08004e21
 8004e58:	08004e21 	.word	0x08004e21
 8004e5c:	08004e21 	.word	0x08004e21
 8004e60:	08004e21 	.word	0x08004e21
 8004e64:	08004fb1 	.word	0x08004fb1
 8004e68:	08004ed5 	.word	0x08004ed5
 8004e6c:	08004f93 	.word	0x08004f93
 8004e70:	08004e21 	.word	0x08004e21
 8004e74:	08004e21 	.word	0x08004e21
 8004e78:	08004fd3 	.word	0x08004fd3
 8004e7c:	08004e21 	.word	0x08004e21
 8004e80:	08004ed5 	.word	0x08004ed5
 8004e84:	08004e21 	.word	0x08004e21
 8004e88:	08004e21 	.word	0x08004e21
 8004e8c:	08004f9b 	.word	0x08004f9b
 8004e90:	680b      	ldr	r3, [r1, #0]
 8004e92:	1d1a      	adds	r2, r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	600a      	str	r2, [r1, #0]
 8004e98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0a3      	b.n	8004fec <_printf_i+0x1f4>
 8004ea4:	6825      	ldr	r5, [r4, #0]
 8004ea6:	6808      	ldr	r0, [r1, #0]
 8004ea8:	062e      	lsls	r6, r5, #24
 8004eaa:	f100 0304 	add.w	r3, r0, #4
 8004eae:	d50a      	bpl.n	8004ec6 <_printf_i+0xce>
 8004eb0:	6805      	ldr	r5, [r0, #0]
 8004eb2:	600b      	str	r3, [r1, #0]
 8004eb4:	2d00      	cmp	r5, #0
 8004eb6:	da03      	bge.n	8004ec0 <_printf_i+0xc8>
 8004eb8:	232d      	movs	r3, #45	; 0x2d
 8004eba:	426d      	negs	r5, r5
 8004ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec0:	485e      	ldr	r0, [pc, #376]	; (800503c <_printf_i+0x244>)
 8004ec2:	230a      	movs	r3, #10
 8004ec4:	e019      	b.n	8004efa <_printf_i+0x102>
 8004ec6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004eca:	6805      	ldr	r5, [r0, #0]
 8004ecc:	600b      	str	r3, [r1, #0]
 8004ece:	bf18      	it	ne
 8004ed0:	b22d      	sxthne	r5, r5
 8004ed2:	e7ef      	b.n	8004eb4 <_printf_i+0xbc>
 8004ed4:	680b      	ldr	r3, [r1, #0]
 8004ed6:	6825      	ldr	r5, [r4, #0]
 8004ed8:	1d18      	adds	r0, r3, #4
 8004eda:	6008      	str	r0, [r1, #0]
 8004edc:	0628      	lsls	r0, r5, #24
 8004ede:	d501      	bpl.n	8004ee4 <_printf_i+0xec>
 8004ee0:	681d      	ldr	r5, [r3, #0]
 8004ee2:	e002      	b.n	8004eea <_printf_i+0xf2>
 8004ee4:	0669      	lsls	r1, r5, #25
 8004ee6:	d5fb      	bpl.n	8004ee0 <_printf_i+0xe8>
 8004ee8:	881d      	ldrh	r5, [r3, #0]
 8004eea:	4854      	ldr	r0, [pc, #336]	; (800503c <_printf_i+0x244>)
 8004eec:	2f6f      	cmp	r7, #111	; 0x6f
 8004eee:	bf0c      	ite	eq
 8004ef0:	2308      	moveq	r3, #8
 8004ef2:	230a      	movne	r3, #10
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004efa:	6866      	ldr	r6, [r4, #4]
 8004efc:	60a6      	str	r6, [r4, #8]
 8004efe:	2e00      	cmp	r6, #0
 8004f00:	bfa2      	ittt	ge
 8004f02:	6821      	ldrge	r1, [r4, #0]
 8004f04:	f021 0104 	bicge.w	r1, r1, #4
 8004f08:	6021      	strge	r1, [r4, #0]
 8004f0a:	b90d      	cbnz	r5, 8004f10 <_printf_i+0x118>
 8004f0c:	2e00      	cmp	r6, #0
 8004f0e:	d04d      	beq.n	8004fac <_printf_i+0x1b4>
 8004f10:	4616      	mov	r6, r2
 8004f12:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f16:	fb03 5711 	mls	r7, r3, r1, r5
 8004f1a:	5dc7      	ldrb	r7, [r0, r7]
 8004f1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f20:	462f      	mov	r7, r5
 8004f22:	42bb      	cmp	r3, r7
 8004f24:	460d      	mov	r5, r1
 8004f26:	d9f4      	bls.n	8004f12 <_printf_i+0x11a>
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d10b      	bne.n	8004f44 <_printf_i+0x14c>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	07df      	lsls	r7, r3, #31
 8004f30:	d508      	bpl.n	8004f44 <_printf_i+0x14c>
 8004f32:	6923      	ldr	r3, [r4, #16]
 8004f34:	6861      	ldr	r1, [r4, #4]
 8004f36:	4299      	cmp	r1, r3
 8004f38:	bfde      	ittt	le
 8004f3a:	2330      	movle	r3, #48	; 0x30
 8004f3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f40:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004f44:	1b92      	subs	r2, r2, r6
 8004f46:	6122      	str	r2, [r4, #16]
 8004f48:	f8cd a000 	str.w	sl, [sp]
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	aa03      	add	r2, sp, #12
 8004f50:	4621      	mov	r1, r4
 8004f52:	4640      	mov	r0, r8
 8004f54:	f7ff fee2 	bl	8004d1c <_printf_common>
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d14c      	bne.n	8004ff6 <_printf_i+0x1fe>
 8004f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f60:	b004      	add	sp, #16
 8004f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f66:	4835      	ldr	r0, [pc, #212]	; (800503c <_printf_i+0x244>)
 8004f68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	680e      	ldr	r6, [r1, #0]
 8004f70:	061f      	lsls	r7, r3, #24
 8004f72:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f76:	600e      	str	r6, [r1, #0]
 8004f78:	d514      	bpl.n	8004fa4 <_printf_i+0x1ac>
 8004f7a:	07d9      	lsls	r1, r3, #31
 8004f7c:	bf44      	itt	mi
 8004f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f82:	6023      	strmi	r3, [r4, #0]
 8004f84:	b91d      	cbnz	r5, 8004f8e <_printf_i+0x196>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	f023 0320 	bic.w	r3, r3, #32
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	2310      	movs	r3, #16
 8004f90:	e7b0      	b.n	8004ef4 <_printf_i+0xfc>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	f043 0320 	orr.w	r3, r3, #32
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	2378      	movs	r3, #120	; 0x78
 8004f9c:	4828      	ldr	r0, [pc, #160]	; (8005040 <_printf_i+0x248>)
 8004f9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fa2:	e7e3      	b.n	8004f6c <_printf_i+0x174>
 8004fa4:	065e      	lsls	r6, r3, #25
 8004fa6:	bf48      	it	mi
 8004fa8:	b2ad      	uxthmi	r5, r5
 8004faa:	e7e6      	b.n	8004f7a <_printf_i+0x182>
 8004fac:	4616      	mov	r6, r2
 8004fae:	e7bb      	b.n	8004f28 <_printf_i+0x130>
 8004fb0:	680b      	ldr	r3, [r1, #0]
 8004fb2:	6826      	ldr	r6, [r4, #0]
 8004fb4:	6960      	ldr	r0, [r4, #20]
 8004fb6:	1d1d      	adds	r5, r3, #4
 8004fb8:	600d      	str	r5, [r1, #0]
 8004fba:	0635      	lsls	r5, r6, #24
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	d501      	bpl.n	8004fc4 <_printf_i+0x1cc>
 8004fc0:	6018      	str	r0, [r3, #0]
 8004fc2:	e002      	b.n	8004fca <_printf_i+0x1d2>
 8004fc4:	0671      	lsls	r1, r6, #25
 8004fc6:	d5fb      	bpl.n	8004fc0 <_printf_i+0x1c8>
 8004fc8:	8018      	strh	r0, [r3, #0]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6123      	str	r3, [r4, #16]
 8004fce:	4616      	mov	r6, r2
 8004fd0:	e7ba      	b.n	8004f48 <_printf_i+0x150>
 8004fd2:	680b      	ldr	r3, [r1, #0]
 8004fd4:	1d1a      	adds	r2, r3, #4
 8004fd6:	600a      	str	r2, [r1, #0]
 8004fd8:	681e      	ldr	r6, [r3, #0]
 8004fda:	6862      	ldr	r2, [r4, #4]
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f7fb f8fe 	bl	80001e0 <memchr>
 8004fe4:	b108      	cbz	r0, 8004fea <_printf_i+0x1f2>
 8004fe6:	1b80      	subs	r0, r0, r6
 8004fe8:	6060      	str	r0, [r4, #4]
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	6123      	str	r3, [r4, #16]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff4:	e7a8      	b.n	8004f48 <_printf_i+0x150>
 8004ff6:	6923      	ldr	r3, [r4, #16]
 8004ff8:	4632      	mov	r2, r6
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	47d0      	blx	sl
 8005000:	3001      	adds	r0, #1
 8005002:	d0ab      	beq.n	8004f5c <_printf_i+0x164>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	079b      	lsls	r3, r3, #30
 8005008:	d413      	bmi.n	8005032 <_printf_i+0x23a>
 800500a:	68e0      	ldr	r0, [r4, #12]
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	4298      	cmp	r0, r3
 8005010:	bfb8      	it	lt
 8005012:	4618      	movlt	r0, r3
 8005014:	e7a4      	b.n	8004f60 <_printf_i+0x168>
 8005016:	2301      	movs	r3, #1
 8005018:	4632      	mov	r2, r6
 800501a:	4649      	mov	r1, r9
 800501c:	4640      	mov	r0, r8
 800501e:	47d0      	blx	sl
 8005020:	3001      	adds	r0, #1
 8005022:	d09b      	beq.n	8004f5c <_printf_i+0x164>
 8005024:	3501      	adds	r5, #1
 8005026:	68e3      	ldr	r3, [r4, #12]
 8005028:	9903      	ldr	r1, [sp, #12]
 800502a:	1a5b      	subs	r3, r3, r1
 800502c:	42ab      	cmp	r3, r5
 800502e:	dcf2      	bgt.n	8005016 <_printf_i+0x21e>
 8005030:	e7eb      	b.n	800500a <_printf_i+0x212>
 8005032:	2500      	movs	r5, #0
 8005034:	f104 0619 	add.w	r6, r4, #25
 8005038:	e7f5      	b.n	8005026 <_printf_i+0x22e>
 800503a:	bf00      	nop
 800503c:	0800547e 	.word	0x0800547e
 8005040:	0800548f 	.word	0x0800548f

08005044 <memcpy>:
 8005044:	440a      	add	r2, r1
 8005046:	4291      	cmp	r1, r2
 8005048:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800504c:	d100      	bne.n	8005050 <memcpy+0xc>
 800504e:	4770      	bx	lr
 8005050:	b510      	push	{r4, lr}
 8005052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800505a:	4291      	cmp	r1, r2
 800505c:	d1f9      	bne.n	8005052 <memcpy+0xe>
 800505e:	bd10      	pop	{r4, pc}

08005060 <memmove>:
 8005060:	4288      	cmp	r0, r1
 8005062:	b510      	push	{r4, lr}
 8005064:	eb01 0402 	add.w	r4, r1, r2
 8005068:	d902      	bls.n	8005070 <memmove+0x10>
 800506a:	4284      	cmp	r4, r0
 800506c:	4623      	mov	r3, r4
 800506e:	d807      	bhi.n	8005080 <memmove+0x20>
 8005070:	1e43      	subs	r3, r0, #1
 8005072:	42a1      	cmp	r1, r4
 8005074:	d008      	beq.n	8005088 <memmove+0x28>
 8005076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800507a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800507e:	e7f8      	b.n	8005072 <memmove+0x12>
 8005080:	4402      	add	r2, r0
 8005082:	4601      	mov	r1, r0
 8005084:	428a      	cmp	r2, r1
 8005086:	d100      	bne.n	800508a <memmove+0x2a>
 8005088:	bd10      	pop	{r4, pc}
 800508a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800508e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005092:	e7f7      	b.n	8005084 <memmove+0x24>

08005094 <_free_r>:
 8005094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005096:	2900      	cmp	r1, #0
 8005098:	d048      	beq.n	800512c <_free_r+0x98>
 800509a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800509e:	9001      	str	r0, [sp, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f1a1 0404 	sub.w	r4, r1, #4
 80050a6:	bfb8      	it	lt
 80050a8:	18e4      	addlt	r4, r4, r3
 80050aa:	f000 f8d3 	bl	8005254 <__malloc_lock>
 80050ae:	4a20      	ldr	r2, [pc, #128]	; (8005130 <_free_r+0x9c>)
 80050b0:	9801      	ldr	r0, [sp, #4]
 80050b2:	6813      	ldr	r3, [r2, #0]
 80050b4:	4615      	mov	r5, r2
 80050b6:	b933      	cbnz	r3, 80050c6 <_free_r+0x32>
 80050b8:	6063      	str	r3, [r4, #4]
 80050ba:	6014      	str	r4, [r2, #0]
 80050bc:	b003      	add	sp, #12
 80050be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c2:	f000 b8cd 	b.w	8005260 <__malloc_unlock>
 80050c6:	42a3      	cmp	r3, r4
 80050c8:	d90b      	bls.n	80050e2 <_free_r+0x4e>
 80050ca:	6821      	ldr	r1, [r4, #0]
 80050cc:	1862      	adds	r2, r4, r1
 80050ce:	4293      	cmp	r3, r2
 80050d0:	bf04      	itt	eq
 80050d2:	681a      	ldreq	r2, [r3, #0]
 80050d4:	685b      	ldreq	r3, [r3, #4]
 80050d6:	6063      	str	r3, [r4, #4]
 80050d8:	bf04      	itt	eq
 80050da:	1852      	addeq	r2, r2, r1
 80050dc:	6022      	streq	r2, [r4, #0]
 80050de:	602c      	str	r4, [r5, #0]
 80050e0:	e7ec      	b.n	80050bc <_free_r+0x28>
 80050e2:	461a      	mov	r2, r3
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	b10b      	cbz	r3, 80050ec <_free_r+0x58>
 80050e8:	42a3      	cmp	r3, r4
 80050ea:	d9fa      	bls.n	80050e2 <_free_r+0x4e>
 80050ec:	6811      	ldr	r1, [r2, #0]
 80050ee:	1855      	adds	r5, r2, r1
 80050f0:	42a5      	cmp	r5, r4
 80050f2:	d10b      	bne.n	800510c <_free_r+0x78>
 80050f4:	6824      	ldr	r4, [r4, #0]
 80050f6:	4421      	add	r1, r4
 80050f8:	1854      	adds	r4, r2, r1
 80050fa:	42a3      	cmp	r3, r4
 80050fc:	6011      	str	r1, [r2, #0]
 80050fe:	d1dd      	bne.n	80050bc <_free_r+0x28>
 8005100:	681c      	ldr	r4, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	6053      	str	r3, [r2, #4]
 8005106:	4421      	add	r1, r4
 8005108:	6011      	str	r1, [r2, #0]
 800510a:	e7d7      	b.n	80050bc <_free_r+0x28>
 800510c:	d902      	bls.n	8005114 <_free_r+0x80>
 800510e:	230c      	movs	r3, #12
 8005110:	6003      	str	r3, [r0, #0]
 8005112:	e7d3      	b.n	80050bc <_free_r+0x28>
 8005114:	6825      	ldr	r5, [r4, #0]
 8005116:	1961      	adds	r1, r4, r5
 8005118:	428b      	cmp	r3, r1
 800511a:	bf04      	itt	eq
 800511c:	6819      	ldreq	r1, [r3, #0]
 800511e:	685b      	ldreq	r3, [r3, #4]
 8005120:	6063      	str	r3, [r4, #4]
 8005122:	bf04      	itt	eq
 8005124:	1949      	addeq	r1, r1, r5
 8005126:	6021      	streq	r1, [r4, #0]
 8005128:	6054      	str	r4, [r2, #4]
 800512a:	e7c7      	b.n	80050bc <_free_r+0x28>
 800512c:	b003      	add	sp, #12
 800512e:	bd30      	pop	{r4, r5, pc}
 8005130:	20000104 	.word	0x20000104

08005134 <_malloc_r>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	1ccd      	adds	r5, r1, #3
 8005138:	f025 0503 	bic.w	r5, r5, #3
 800513c:	3508      	adds	r5, #8
 800513e:	2d0c      	cmp	r5, #12
 8005140:	bf38      	it	cc
 8005142:	250c      	movcc	r5, #12
 8005144:	2d00      	cmp	r5, #0
 8005146:	4606      	mov	r6, r0
 8005148:	db01      	blt.n	800514e <_malloc_r+0x1a>
 800514a:	42a9      	cmp	r1, r5
 800514c:	d903      	bls.n	8005156 <_malloc_r+0x22>
 800514e:	230c      	movs	r3, #12
 8005150:	6033      	str	r3, [r6, #0]
 8005152:	2000      	movs	r0, #0
 8005154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005156:	f000 f87d 	bl	8005254 <__malloc_lock>
 800515a:	4921      	ldr	r1, [pc, #132]	; (80051e0 <_malloc_r+0xac>)
 800515c:	680a      	ldr	r2, [r1, #0]
 800515e:	4614      	mov	r4, r2
 8005160:	b99c      	cbnz	r4, 800518a <_malloc_r+0x56>
 8005162:	4f20      	ldr	r7, [pc, #128]	; (80051e4 <_malloc_r+0xb0>)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	b923      	cbnz	r3, 8005172 <_malloc_r+0x3e>
 8005168:	4621      	mov	r1, r4
 800516a:	4630      	mov	r0, r6
 800516c:	f000 f862 	bl	8005234 <_sbrk_r>
 8005170:	6038      	str	r0, [r7, #0]
 8005172:	4629      	mov	r1, r5
 8005174:	4630      	mov	r0, r6
 8005176:	f000 f85d 	bl	8005234 <_sbrk_r>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	d123      	bne.n	80051c6 <_malloc_r+0x92>
 800517e:	230c      	movs	r3, #12
 8005180:	6033      	str	r3, [r6, #0]
 8005182:	4630      	mov	r0, r6
 8005184:	f000 f86c 	bl	8005260 <__malloc_unlock>
 8005188:	e7e3      	b.n	8005152 <_malloc_r+0x1e>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	1b5b      	subs	r3, r3, r5
 800518e:	d417      	bmi.n	80051c0 <_malloc_r+0x8c>
 8005190:	2b0b      	cmp	r3, #11
 8005192:	d903      	bls.n	800519c <_malloc_r+0x68>
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	441c      	add	r4, r3
 8005198:	6025      	str	r5, [r4, #0]
 800519a:	e004      	b.n	80051a6 <_malloc_r+0x72>
 800519c:	6863      	ldr	r3, [r4, #4]
 800519e:	42a2      	cmp	r2, r4
 80051a0:	bf0c      	ite	eq
 80051a2:	600b      	streq	r3, [r1, #0]
 80051a4:	6053      	strne	r3, [r2, #4]
 80051a6:	4630      	mov	r0, r6
 80051a8:	f000 f85a 	bl	8005260 <__malloc_unlock>
 80051ac:	f104 000b 	add.w	r0, r4, #11
 80051b0:	1d23      	adds	r3, r4, #4
 80051b2:	f020 0007 	bic.w	r0, r0, #7
 80051b6:	1ac2      	subs	r2, r0, r3
 80051b8:	d0cc      	beq.n	8005154 <_malloc_r+0x20>
 80051ba:	1a1b      	subs	r3, r3, r0
 80051bc:	50a3      	str	r3, [r4, r2]
 80051be:	e7c9      	b.n	8005154 <_malloc_r+0x20>
 80051c0:	4622      	mov	r2, r4
 80051c2:	6864      	ldr	r4, [r4, #4]
 80051c4:	e7cc      	b.n	8005160 <_malloc_r+0x2c>
 80051c6:	1cc4      	adds	r4, r0, #3
 80051c8:	f024 0403 	bic.w	r4, r4, #3
 80051cc:	42a0      	cmp	r0, r4
 80051ce:	d0e3      	beq.n	8005198 <_malloc_r+0x64>
 80051d0:	1a21      	subs	r1, r4, r0
 80051d2:	4630      	mov	r0, r6
 80051d4:	f000 f82e 	bl	8005234 <_sbrk_r>
 80051d8:	3001      	adds	r0, #1
 80051da:	d1dd      	bne.n	8005198 <_malloc_r+0x64>
 80051dc:	e7cf      	b.n	800517e <_malloc_r+0x4a>
 80051de:	bf00      	nop
 80051e0:	20000104 	.word	0x20000104
 80051e4:	20000108 	.word	0x20000108

080051e8 <_realloc_r>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	4607      	mov	r7, r0
 80051ec:	4614      	mov	r4, r2
 80051ee:	460e      	mov	r6, r1
 80051f0:	b921      	cbnz	r1, 80051fc <_realloc_r+0x14>
 80051f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051f6:	4611      	mov	r1, r2
 80051f8:	f7ff bf9c 	b.w	8005134 <_malloc_r>
 80051fc:	b922      	cbnz	r2, 8005208 <_realloc_r+0x20>
 80051fe:	f7ff ff49 	bl	8005094 <_free_r>
 8005202:	4625      	mov	r5, r4
 8005204:	4628      	mov	r0, r5
 8005206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005208:	f000 f830 	bl	800526c <_malloc_usable_size_r>
 800520c:	42a0      	cmp	r0, r4
 800520e:	d20f      	bcs.n	8005230 <_realloc_r+0x48>
 8005210:	4621      	mov	r1, r4
 8005212:	4638      	mov	r0, r7
 8005214:	f7ff ff8e 	bl	8005134 <_malloc_r>
 8005218:	4605      	mov	r5, r0
 800521a:	2800      	cmp	r0, #0
 800521c:	d0f2      	beq.n	8005204 <_realloc_r+0x1c>
 800521e:	4631      	mov	r1, r6
 8005220:	4622      	mov	r2, r4
 8005222:	f7ff ff0f 	bl	8005044 <memcpy>
 8005226:	4631      	mov	r1, r6
 8005228:	4638      	mov	r0, r7
 800522a:	f7ff ff33 	bl	8005094 <_free_r>
 800522e:	e7e9      	b.n	8005204 <_realloc_r+0x1c>
 8005230:	4635      	mov	r5, r6
 8005232:	e7e7      	b.n	8005204 <_realloc_r+0x1c>

08005234 <_sbrk_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d06      	ldr	r5, [pc, #24]	; (8005250 <_sbrk_r+0x1c>)
 8005238:	2300      	movs	r3, #0
 800523a:	4604      	mov	r4, r0
 800523c:	4608      	mov	r0, r1
 800523e:	602b      	str	r3, [r5, #0]
 8005240:	f7fc fc66 	bl	8001b10 <_sbrk>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_sbrk_r+0x1a>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	b103      	cbz	r3, 800524e <_sbrk_r+0x1a>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	20000274 	.word	0x20000274

08005254 <__malloc_lock>:
 8005254:	4801      	ldr	r0, [pc, #4]	; (800525c <__malloc_lock+0x8>)
 8005256:	f000 b811 	b.w	800527c <__retarget_lock_acquire_recursive>
 800525a:	bf00      	nop
 800525c:	2000027c 	.word	0x2000027c

08005260 <__malloc_unlock>:
 8005260:	4801      	ldr	r0, [pc, #4]	; (8005268 <__malloc_unlock+0x8>)
 8005262:	f000 b80c 	b.w	800527e <__retarget_lock_release_recursive>
 8005266:	bf00      	nop
 8005268:	2000027c 	.word	0x2000027c

0800526c <_malloc_usable_size_r>:
 800526c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005270:	1f18      	subs	r0, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	bfbc      	itt	lt
 8005276:	580b      	ldrlt	r3, [r1, r0]
 8005278:	18c0      	addlt	r0, r0, r3
 800527a:	4770      	bx	lr

0800527c <__retarget_lock_acquire_recursive>:
 800527c:	4770      	bx	lr

0800527e <__retarget_lock_release_recursive>:
 800527e:	4770      	bx	lr

08005280 <_init>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	bf00      	nop
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr

0800528c <_fini>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	bf00      	nop
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr
