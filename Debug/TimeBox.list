
TimeBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008130  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800836c  0800836c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800836c  0800836c  0001836c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008374  08008374  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008374  08008374  00018374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008378  08008378  00018378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800837c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001978  200001e4  08008560  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b5c  08008560  00021b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157f0  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031f4  00000000  00000000  00035a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  00038bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  000399b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f5a  00000000  00000000  0003a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed6e  00000000  00000000  0005e54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca577  00000000  00000000  0006d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013782f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae8  00000000  00000000  001378ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082a8 	.word	0x080082a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080082a8 	.word	0x080082a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000638:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800063c:	f000 b972 	b.w	8000924 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9e08      	ldr	r6, [sp, #32]
 800065e:	4604      	mov	r4, r0
 8000660:	4688      	mov	r8, r1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d14b      	bne.n	80006fe <__udivmoddi4+0xa6>
 8000666:	428a      	cmp	r2, r1
 8000668:	4615      	mov	r5, r2
 800066a:	d967      	bls.n	800073c <__udivmoddi4+0xe4>
 800066c:	fab2 f282 	clz	r2, r2
 8000670:	b14a      	cbz	r2, 8000686 <__udivmoddi4+0x2e>
 8000672:	f1c2 0720 	rsb	r7, r2, #32
 8000676:	fa01 f302 	lsl.w	r3, r1, r2
 800067a:	fa20 f707 	lsr.w	r7, r0, r7
 800067e:	4095      	lsls	r5, r2
 8000680:	ea47 0803 	orr.w	r8, r7, r3
 8000684:	4094      	lsls	r4, r2
 8000686:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800068a:	0c23      	lsrs	r3, r4, #16
 800068c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000690:	fa1f fc85 	uxth.w	ip, r5
 8000694:	fb0e 8817 	mls	r8, lr, r7, r8
 8000698:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800069c:	fb07 f10c 	mul.w	r1, r7, ip
 80006a0:	4299      	cmp	r1, r3
 80006a2:	d909      	bls.n	80006b8 <__udivmoddi4+0x60>
 80006a4:	18eb      	adds	r3, r5, r3
 80006a6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80006aa:	f080 811b 	bcs.w	80008e4 <__udivmoddi4+0x28c>
 80006ae:	4299      	cmp	r1, r3
 80006b0:	f240 8118 	bls.w	80008e4 <__udivmoddi4+0x28c>
 80006b4:	3f02      	subs	r7, #2
 80006b6:	442b      	add	r3, r5
 80006b8:	1a5b      	subs	r3, r3, r1
 80006ba:	b2a4      	uxth	r4, r4
 80006bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006cc:	45a4      	cmp	ip, r4
 80006ce:	d909      	bls.n	80006e4 <__udivmoddi4+0x8c>
 80006d0:	192c      	adds	r4, r5, r4
 80006d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006d6:	f080 8107 	bcs.w	80008e8 <__udivmoddi4+0x290>
 80006da:	45a4      	cmp	ip, r4
 80006dc:	f240 8104 	bls.w	80008e8 <__udivmoddi4+0x290>
 80006e0:	3802      	subs	r0, #2
 80006e2:	442c      	add	r4, r5
 80006e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006e8:	eba4 040c 	sub.w	r4, r4, ip
 80006ec:	2700      	movs	r7, #0
 80006ee:	b11e      	cbz	r6, 80006f8 <__udivmoddi4+0xa0>
 80006f0:	40d4      	lsrs	r4, r2
 80006f2:	2300      	movs	r3, #0
 80006f4:	e9c6 4300 	strd	r4, r3, [r6]
 80006f8:	4639      	mov	r1, r7
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d909      	bls.n	8000716 <__udivmoddi4+0xbe>
 8000702:	2e00      	cmp	r6, #0
 8000704:	f000 80eb 	beq.w	80008de <__udivmoddi4+0x286>
 8000708:	2700      	movs	r7, #0
 800070a:	e9c6 0100 	strd	r0, r1, [r6]
 800070e:	4638      	mov	r0, r7
 8000710:	4639      	mov	r1, r7
 8000712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000716:	fab3 f783 	clz	r7, r3
 800071a:	2f00      	cmp	r7, #0
 800071c:	d147      	bne.n	80007ae <__udivmoddi4+0x156>
 800071e:	428b      	cmp	r3, r1
 8000720:	d302      	bcc.n	8000728 <__udivmoddi4+0xd0>
 8000722:	4282      	cmp	r2, r0
 8000724:	f200 80fa 	bhi.w	800091c <__udivmoddi4+0x2c4>
 8000728:	1a84      	subs	r4, r0, r2
 800072a:	eb61 0303 	sbc.w	r3, r1, r3
 800072e:	2001      	movs	r0, #1
 8000730:	4698      	mov	r8, r3
 8000732:	2e00      	cmp	r6, #0
 8000734:	d0e0      	beq.n	80006f8 <__udivmoddi4+0xa0>
 8000736:	e9c6 4800 	strd	r4, r8, [r6]
 800073a:	e7dd      	b.n	80006f8 <__udivmoddi4+0xa0>
 800073c:	b902      	cbnz	r2, 8000740 <__udivmoddi4+0xe8>
 800073e:	deff      	udf	#255	; 0xff
 8000740:	fab2 f282 	clz	r2, r2
 8000744:	2a00      	cmp	r2, #0
 8000746:	f040 808f 	bne.w	8000868 <__udivmoddi4+0x210>
 800074a:	1b49      	subs	r1, r1, r5
 800074c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000750:	fa1f f885 	uxth.w	r8, r5
 8000754:	2701      	movs	r7, #1
 8000756:	fbb1 fcfe 	udiv	ip, r1, lr
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000760:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000764:	fb08 f10c 	mul.w	r1, r8, ip
 8000768:	4299      	cmp	r1, r3
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x124>
 800076c:	18eb      	adds	r3, r5, r3
 800076e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x122>
 8000774:	4299      	cmp	r1, r3
 8000776:	f200 80cd 	bhi.w	8000914 <__udivmoddi4+0x2bc>
 800077a:	4684      	mov	ip, r0
 800077c:	1a59      	subs	r1, r3, r1
 800077e:	b2a3      	uxth	r3, r4
 8000780:	fbb1 f0fe 	udiv	r0, r1, lr
 8000784:	fb0e 1410 	mls	r4, lr, r0, r1
 8000788:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800078c:	fb08 f800 	mul.w	r8, r8, r0
 8000790:	45a0      	cmp	r8, r4
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x14c>
 8000794:	192c      	adds	r4, r5, r4
 8000796:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x14a>
 800079c:	45a0      	cmp	r8, r4
 800079e:	f200 80b6 	bhi.w	800090e <__udivmoddi4+0x2b6>
 80007a2:	4618      	mov	r0, r3
 80007a4:	eba4 0408 	sub.w	r4, r4, r8
 80007a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007ac:	e79f      	b.n	80006ee <__udivmoddi4+0x96>
 80007ae:	f1c7 0c20 	rsb	ip, r7, #32
 80007b2:	40bb      	lsls	r3, r7
 80007b4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007b8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007bc:	fa01 f407 	lsl.w	r4, r1, r7
 80007c0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007c4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007c8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007cc:	4325      	orrs	r5, r4
 80007ce:	fbb3 f9f8 	udiv	r9, r3, r8
 80007d2:	0c2c      	lsrs	r4, r5, #16
 80007d4:	fb08 3319 	mls	r3, r8, r9, r3
 80007d8:	fa1f fa8e 	uxth.w	sl, lr
 80007dc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007e0:	fb09 f40a 	mul.w	r4, r9, sl
 80007e4:	429c      	cmp	r4, r3
 80007e6:	fa02 f207 	lsl.w	r2, r2, r7
 80007ea:	fa00 f107 	lsl.w	r1, r0, r7
 80007ee:	d90b      	bls.n	8000808 <__udivmoddi4+0x1b0>
 80007f0:	eb1e 0303 	adds.w	r3, lr, r3
 80007f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80007f8:	f080 8087 	bcs.w	800090a <__udivmoddi4+0x2b2>
 80007fc:	429c      	cmp	r4, r3
 80007fe:	f240 8084 	bls.w	800090a <__udivmoddi4+0x2b2>
 8000802:	f1a9 0902 	sub.w	r9, r9, #2
 8000806:	4473      	add	r3, lr
 8000808:	1b1b      	subs	r3, r3, r4
 800080a:	b2ad      	uxth	r5, r5
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000818:	fb00 fa0a 	mul.w	sl, r0, sl
 800081c:	45a2      	cmp	sl, r4
 800081e:	d908      	bls.n	8000832 <__udivmoddi4+0x1da>
 8000820:	eb1e 0404 	adds.w	r4, lr, r4
 8000824:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000828:	d26b      	bcs.n	8000902 <__udivmoddi4+0x2aa>
 800082a:	45a2      	cmp	sl, r4
 800082c:	d969      	bls.n	8000902 <__udivmoddi4+0x2aa>
 800082e:	3802      	subs	r0, #2
 8000830:	4474      	add	r4, lr
 8000832:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000836:	fba0 8902 	umull	r8, r9, r0, r2
 800083a:	eba4 040a 	sub.w	r4, r4, sl
 800083e:	454c      	cmp	r4, r9
 8000840:	46c2      	mov	sl, r8
 8000842:	464b      	mov	r3, r9
 8000844:	d354      	bcc.n	80008f0 <__udivmoddi4+0x298>
 8000846:	d051      	beq.n	80008ec <__udivmoddi4+0x294>
 8000848:	2e00      	cmp	r6, #0
 800084a:	d069      	beq.n	8000920 <__udivmoddi4+0x2c8>
 800084c:	ebb1 050a 	subs.w	r5, r1, sl
 8000850:	eb64 0403 	sbc.w	r4, r4, r3
 8000854:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000858:	40fd      	lsrs	r5, r7
 800085a:	40fc      	lsrs	r4, r7
 800085c:	ea4c 0505 	orr.w	r5, ip, r5
 8000860:	e9c6 5400 	strd	r5, r4, [r6]
 8000864:	2700      	movs	r7, #0
 8000866:	e747      	b.n	80006f8 <__udivmoddi4+0xa0>
 8000868:	f1c2 0320 	rsb	r3, r2, #32
 800086c:	fa20 f703 	lsr.w	r7, r0, r3
 8000870:	4095      	lsls	r5, r2
 8000872:	fa01 f002 	lsl.w	r0, r1, r2
 8000876:	fa21 f303 	lsr.w	r3, r1, r3
 800087a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800087e:	4338      	orrs	r0, r7
 8000880:	0c01      	lsrs	r1, r0, #16
 8000882:	fbb3 f7fe 	udiv	r7, r3, lr
 8000886:	fa1f f885 	uxth.w	r8, r5
 800088a:	fb0e 3317 	mls	r3, lr, r7, r3
 800088e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000892:	fb07 f308 	mul.w	r3, r7, r8
 8000896:	428b      	cmp	r3, r1
 8000898:	fa04 f402 	lsl.w	r4, r4, r2
 800089c:	d907      	bls.n	80008ae <__udivmoddi4+0x256>
 800089e:	1869      	adds	r1, r5, r1
 80008a0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80008a4:	d22f      	bcs.n	8000906 <__udivmoddi4+0x2ae>
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d92d      	bls.n	8000906 <__udivmoddi4+0x2ae>
 80008aa:	3f02      	subs	r7, #2
 80008ac:	4429      	add	r1, r5
 80008ae:	1acb      	subs	r3, r1, r3
 80008b0:	b281      	uxth	r1, r0
 80008b2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008b6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008be:	fb00 f308 	mul.w	r3, r0, r8
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d907      	bls.n	80008d6 <__udivmoddi4+0x27e>
 80008c6:	1869      	adds	r1, r5, r1
 80008c8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80008cc:	d217      	bcs.n	80008fe <__udivmoddi4+0x2a6>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d915      	bls.n	80008fe <__udivmoddi4+0x2a6>
 80008d2:	3802      	subs	r0, #2
 80008d4:	4429      	add	r1, r5
 80008d6:	1ac9      	subs	r1, r1, r3
 80008d8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008dc:	e73b      	b.n	8000756 <__udivmoddi4+0xfe>
 80008de:	4637      	mov	r7, r6
 80008e0:	4630      	mov	r0, r6
 80008e2:	e709      	b.n	80006f8 <__udivmoddi4+0xa0>
 80008e4:	4607      	mov	r7, r0
 80008e6:	e6e7      	b.n	80006b8 <__udivmoddi4+0x60>
 80008e8:	4618      	mov	r0, r3
 80008ea:	e6fb      	b.n	80006e4 <__udivmoddi4+0x8c>
 80008ec:	4541      	cmp	r1, r8
 80008ee:	d2ab      	bcs.n	8000848 <__udivmoddi4+0x1f0>
 80008f0:	ebb8 0a02 	subs.w	sl, r8, r2
 80008f4:	eb69 020e 	sbc.w	r2, r9, lr
 80008f8:	3801      	subs	r0, #1
 80008fa:	4613      	mov	r3, r2
 80008fc:	e7a4      	b.n	8000848 <__udivmoddi4+0x1f0>
 80008fe:	4660      	mov	r0, ip
 8000900:	e7e9      	b.n	80008d6 <__udivmoddi4+0x27e>
 8000902:	4618      	mov	r0, r3
 8000904:	e795      	b.n	8000832 <__udivmoddi4+0x1da>
 8000906:	4667      	mov	r7, ip
 8000908:	e7d1      	b.n	80008ae <__udivmoddi4+0x256>
 800090a:	4681      	mov	r9, r0
 800090c:	e77c      	b.n	8000808 <__udivmoddi4+0x1b0>
 800090e:	3802      	subs	r0, #2
 8000910:	442c      	add	r4, r5
 8000912:	e747      	b.n	80007a4 <__udivmoddi4+0x14c>
 8000914:	f1ac 0c02 	sub.w	ip, ip, #2
 8000918:	442b      	add	r3, r5
 800091a:	e72f      	b.n	800077c <__udivmoddi4+0x124>
 800091c:	4638      	mov	r0, r7
 800091e:	e708      	b.n	8000732 <__udivmoddi4+0xda>
 8000920:	4637      	mov	r7, r6
 8000922:	e6e9      	b.n	80006f8 <__udivmoddi4+0xa0>

08000924 <__aeabi_idiv0>:
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <TurnHexIntoDec>:
/* USER CODE BEGIN 0 */

//Time is storing in format that being in Hex visually looks like the real time in Dec
//So this function translate this format into real Dec number of time digits
uint8_t TurnHexIntoDec(uint8_t hex)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	return ((hex & 0x000F) + ((hex >> 4) & 0x000F)*10);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	f003 030f 	and.w	r3, r3, #15
 8000938:	b2da      	uxtb	r2, r3
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	091b      	lsrs	r3, r3, #4
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4619      	mov	r1, r3
 8000942:	0089      	lsls	r1, r1, #2
 8000944:	440b      	add	r3, r1
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4413      	add	r3, r2
 800094c:	b2db      	uxtb	r3, r3
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <TurnDecIntoHex>:

uint8_t TurnDecIntoHex(uint8_t dec)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
	return ((((uint8_t)(floor(dec/10))) << 4) + dec%10);
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <TurnDecIntoHex+0x54>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fdce 	bl	8000514 <__aeabi_i2d>
 8000978:	4603      	mov	r3, r0
 800097a:	460c      	mov	r4, r1
 800097c:	4618      	mov	r0, r3
 800097e:	4621      	mov	r1, r4
 8000980:	f7ff fe32 	bl	80005e8 <__aeabi_d2uiz>
 8000984:	4603      	mov	r3, r0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	b2d8      	uxtb	r0, r3
 800098c:	79fa      	ldrb	r2, [r7, #7]
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <TurnDecIntoHex+0x54>)
 8000990:	fba3 1302 	umull	r1, r3, r3, r2
 8000994:	08d9      	lsrs	r1, r3, #3
 8000996:	460b      	mov	r3, r1
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	440b      	add	r3, r1
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4403      	add	r3, r0
 80009a4:	b2db      	uxtb	r3, r3
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	bf00      	nop
 80009b0:	cccccccd 	.word	0xcccccccd

080009b4 <SetTime>:

void SetTime(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	/** Initialize RTC and set the Time and Date*/
	sTime.Hours = 0x1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x23;
 80009be:	2323      	movs	r3, #35	; 0x23
 80009c0:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2201      	movs	r2, #1
 80009d2:	4619      	mov	r1, r3
 80009d4:	4812      	ldr	r0, [pc, #72]	; (8000a20 <SetTime+0x6c>)
 80009d6:	f002 ff2d 	bl	8003834 <HAL_RTC_SetTime>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SetTime+0x30>
	{
	Error_Handler();
 80009e0:	f000 fa6c 	bl	8000ebc <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80009e4:	2305      	movs	r3, #5
 80009e6:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_FEBRUARY;
 80009e8:	2302      	movs	r3, #2
 80009ea:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x19;
 80009ec:	2319      	movs	r3, #25
 80009ee:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x21;
 80009f0:	2321      	movs	r3, #33	; 0x21
 80009f2:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	2201      	movs	r2, #1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4809      	ldr	r0, [pc, #36]	; (8000a20 <SetTime+0x6c>)
 80009fc:	f003 f835 	bl	8003a6a <HAL_RTC_SetDate>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SetTime+0x56>
	{
	Error_Handler();
 8000a06:	f000 fa59 	bl	8000ebc <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000a0a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <SetTime+0x6c>)
 8000a12:	f003 fbe9 	bl	80041e8 <HAL_RTCEx_BKUPWrite>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000220 	.word	0x20000220

08000a24 <SetAlarm>:

void SetAlarm(uint8_t SetInHours, uint8_t SetInMinutes)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	460a      	mov	r2, r1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	71bb      	strb	r3, [r7, #6]
	RTC_AlarmTypeDef sAlarm;

	sAlarm.AlarmTime.Hours = TurnDecIntoHex(SetInHours);
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff90 	bl	800095c <TurnDecIntoHex>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = TurnDecIntoHex(SetInMinutes);
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff8a 	bl	800095c <TurnDecIntoHex>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = 0x0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x20;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8000a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <SetAlarm+0x70>)
 8000a7e:	f003 f8eb 	bl	8003c58 <HAL_RTC_SetAlarm_IT>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SetAlarm+0x68>
	{
	Error_Handler();
 8000a88:	f000 fa18 	bl	8000ebc <Error_Handler>
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000220 	.word	0x20000220

08000a98 <GetTimeDate>:

void GetTimeDate (void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af02      	add	r7, sp, #8
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4812      	ldr	r0, [pc, #72]	; (8000af0 <GetTimeDate+0x58>)
 8000aa6:	f002 ff82 	bl	80039ae <HAL_RTC_GetTime>
	/* Get the RTC Curret Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480f      	ldr	r0, [pc, #60]	; (8000af0 <GetTimeDate+0x58>)
 8000ab4:	f003 f880 	bl	8003bb8 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	sprintf((char*)time,"%02x:%02x:%02x",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000ab8:	783b      	ldrb	r3, [r7, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	787b      	ldrb	r3, [r7, #1]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	78bb      	ldrb	r3, [r7, #2]
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	490b      	ldr	r1, [pc, #44]	; (8000af4 <GetTimeDate+0x5c>)
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <GetTimeDate+0x60>)
 8000aca:	f007 f89f 	bl	8007c0c <siprintf>

	/* Display date Format: yy-mm-dd */
	sprintf((char*)date,"%02x-%02x-%02x",2000+gDate.Year, gDate.Month, gDate.Date);
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000ad4:	7d7b      	ldrb	r3, [r7, #21]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	7dbb      	ldrb	r3, [r7, #22]
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	460b      	mov	r3, r1
 8000ade:	4907      	ldr	r1, [pc, #28]	; (8000afc <GetTimeDate+0x64>)
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <GetTimeDate+0x68>)
 8000ae2:	f007 f893 	bl	8007c0c <siprintf>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000220 	.word	0x20000220
 8000af4:	080082c0 	.word	0x080082c0
 8000af8:	20000264 	.word	0x20000264
 8000afc:	080082d0 	.word	0x080082d0
 8000b00:	20000270 	.word	0x20000270

08000b04 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	alarm = 1;
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000200 	.word	0x20000200

08000b24 <ToDoOnAlarm>:

void ToDoOnAlarm (void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <ToDoOnAlarm+0x18>)
 8000b2e:	f000 fee2 	bl	80018f6 <HAL_GPIO_TogglePin>
	Alarmed = 1;
 8000b32:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <ToDoOnAlarm+0x1c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021400 	.word	0x40021400
 8000b40:	20000201 	.word	0x20000201

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4a:	f000 fb4b 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4e:	f000 f881 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b52:	f000 f925 	bl	8000da0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000b56:	f000 f8fd 	bl	8000d54 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000b5a:	f006 fa83 	bl	8007064 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	482f      	ldr	r0, [pc, #188]	; (8000c20 <main+0xdc>)
 8000b62:	f003 fb5b 	bl	800421c <HAL_RTCEx_BKUPRead>
 8000b66:	4602      	mov	r2, r0
 8000b68:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d001      	beq.n	8000b74 <main+0x30>
  {
	  SetTime();
 8000b70:	f7ff ff20 	bl	80009b4 <SetTime>

//	!!
//	  if I upload conf. from Cubemxconfigurator I need to delete set time from MX_RTC_Init()!
//	  !!

	  if (SetTheAlarm)
 8000b74:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <main+0xe0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d019      	beq.n	8000bb2 <main+0x6e>
	  {
		  SetAlarm(SetHours, SetMinutes);
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <main+0xe4>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <main+0xe8>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4610      	mov	r0, r2
 8000b8e:	f7ff ff49 	bl	8000a24 <SetAlarm>
		  ShowMeHours = SetHours;
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <main+0xe4>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <main+0xec>)
 8000b9a:	701a      	strb	r2, [r3, #0]
		  ShowMeMin = SetMinutes;
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <main+0xe8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <main+0xf0>)
 8000ba4:	701a      	strb	r2, [r3, #0]
		  AlarmSet = 1;
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <main+0xf4>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
		  SetTheAlarm = 0;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <main+0xe0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
	  }

	  GetTimeDate();
 8000bb2:	f7ff ff71 	bl	8000a98 <GetTimeDate>

	  if (Toggle)
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <main+0xf8>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d021      	beq.n	8000c04 <main+0xc0>
	  {
		  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc4:	481e      	ldr	r0, [pc, #120]	; (8000c40 <main+0xfc>)
 8000bc6:	f000 fe96 	bl	80018f6 <HAL_GPIO_TogglePin>
		  Toggle = 0;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <main+0xf8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
		  Alarmed = 0;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <main+0x100>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
		  HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 8000bd6:	4639      	mov	r1, r7
 8000bd8:	2301      	movs	r3, #1
 8000bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bde:	4810      	ldr	r0, [pc, #64]	; (8000c20 <main+0xdc>)
 8000be0:	f003 f972 	bl	8003ec8 <HAL_RTC_GetAlarm>
		  GetHours = TurnHexIntoDec(gAlarm.AlarmTime.Hours);
 8000be4:	783b      	ldrb	r3, [r7, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fe9e 	bl	8000928 <TurnHexIntoDec>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <main+0x104>)
 8000bf2:	701a      	strb	r2, [r3, #0]
		  GetMinutes = TurnHexIntoDec(gAlarm.AlarmTime.Minutes);
 8000bf4:	787b      	ldrb	r3, [r7, #1]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fe96 	bl	8000928 <TurnHexIntoDec>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <main+0x108>)
 8000c02:	701a      	strb	r2, [r3, #0]
	  }

	  if (alarm)
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <main+0x10c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0b3      	beq.n	8000b74 <main+0x30>
	  {
		  ToDoOnAlarm();
 8000c0c:	f7ff ff8a 	bl	8000b24 <ToDoOnAlarm>
		  alarm = 0;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <main+0x10c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
		  AlarmSet = 0;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <main+0xf4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
	  if (SetTheAlarm)
 8000c1c:	e7aa      	b.n	8000b74 <main+0x30>
 8000c1e:	bf00      	nop
 8000c20:	20000220 	.word	0x20000220
 8000c24:	20000203 	.word	0x20000203
 8000c28:	2000027b 	.word	0x2000027b
 8000c2c:	20000204 	.word	0x20000204
 8000c30:	20000260 	.word	0x20000260
 8000c34:	2000021c 	.word	0x2000021c
 8000c38:	20000205 	.word	0x20000205
 8000c3c:	20000202 	.word	0x20000202
 8000c40:	40021400 	.word	0x40021400
 8000c44:	20000201 	.word	0x20000201
 8000c48:	2000027a 	.word	0x2000027a
 8000c4c:	20000206 	.word	0x20000206
 8000c50:	20000200 	.word	0x20000200

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b098      	sub	sp, #96	; 0x60
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c5e:	2230      	movs	r2, #48	; 0x30
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f006 ff12 	bl	8007a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <SystemClock_Config+0xf8>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <SystemClock_Config+0xf8>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <SystemClock_Config+0xf8>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <SystemClock_Config+0xfc>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a29      	ldr	r2, [pc, #164]	; (8000d50 <SystemClock_Config+0xfc>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <SystemClock_Config+0xfc>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000cbe:	2306      	movs	r3, #6
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000cda:	233c      	movs	r3, #60	; 0x3c
 8000cdc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 ffc4 	bl	8002c78 <HAL_RCC_OscConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cf6:	f000 f8e1 	bl	8000ebc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fa1f 	bl	8003158 <HAL_RCC_ClockConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000d20:	f000 f8cc 	bl	8000ebc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d24:	2302      	movs	r3, #2
 8000d26:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 fbda 	bl	80034ec <HAL_RCCEx_PeriphCLKConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d3e:	f000 f8bd 	bl	8000ebc <Error_Handler>
  }
}
 8000d42:	bf00      	nop
 8000d44:	3760      	adds	r7, #96	; 0x60
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000

08000d54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_RTC_Init+0x44>)
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <MX_RTC_Init+0x48>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_RTC_Init+0x44>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_RTC_Init+0x44>)
 8000d66:	227f      	movs	r2, #127	; 0x7f
 8000d68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_RTC_Init+0x44>)
 8000d6c:	22ff      	movs	r2, #255	; 0xff
 8000d6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_RTC_Init+0x44>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_RTC_Init+0x44>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_RTC_Init+0x44>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_RTC_Init+0x44>)
 8000d84:	f002 fc94 	bl	80036b0 <HAL_RTC_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000d8e:	f000 f895 	bl	8000ebc <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000220 	.word	0x20000220
 8000d9c:	40002800 	.word	0x40002800

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a3b      	ldr	r2, [pc, #236]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b35      	ldr	r3, [pc, #212]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a34      	ldr	r2, [pc, #208]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a2d      	ldr	r2, [pc, #180]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000df8:	f043 0320 	orr.w	r3, r3, #32
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0320 	and.w	r3, r3, #32
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a26      	ldr	r2, [pc, #152]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b24      	ldr	r3, [pc, #144]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000e48:	4819      	ldr	r0, [pc, #100]	; (8000eb0 <MX_GPIO_Init+0x110>)
 8000e4a:	f000 fd3b 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8000e4e:	2318      	movs	r3, #24
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_GPIO_Init+0x114>)
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000e62:	f000 fb95 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000e66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e6c:	2311      	movs	r3, #17
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_GPIO_Init+0x110>)
 8000e80:	f000 fb86 	bl	8001590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2102      	movs	r1, #2
 8000e88:	2009      	movs	r0, #9
 8000e8a:	f000 fb3c 	bl	8001506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e8e:	2009      	movs	r0, #9
 8000e90:	f000 fb55 	bl	800153e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2102      	movs	r1, #2
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f000 fb34 	bl	8001506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f000 fb4d 	bl	800153e <HAL_NVIC_EnableIRQ>

}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	; 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40021400 	.word	0x40021400
 8000eb4:	10110000 	.word	0x10110000
 8000eb8:	40021000 	.word	0x40021000

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <Error_Handler+0x6>

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_MspInit+0x4c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x4c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800

08000f14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_RTC_MspInit+0x30>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10a      	bne.n	8000f3c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_RTC_MspInit+0x34>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2029      	movs	r0, #41	; 0x29
 8000f32:	f000 fae8 	bl	8001506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000f36:	2029      	movs	r0, #41	; 0x29
 8000f38:	f000 fb01 	bl	800153e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40002800 	.word	0x40002800
 8000f48:	42470e3c 	.word	0x42470e3c

08000f4c <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_RTC_MspDeInit+0x28>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d105      	bne.n	8000f6a <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_RTC_MspDeInit+0x2c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8000f64:	2029      	movs	r0, #41	; 0x29
 8000f66:	f000 faf8 	bl	800155a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40002800 	.word	0x40002800
 8000f78:	42470e3c 	.word	0x42470e3c

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f000 f95e 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	if (HAL_GetTick() - JitterButtonK0 > 300)
 8000fd6:	f000 f96b 	bl	80012b0 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <EXTI3_IRQHandler+0x78>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fe6:	d927      	bls.n	8001038 <EXTI3_IRQHandler+0x68>
	{
		JitterButtonK0 = HAL_GetTick();
 8000fe8:	f000 f962 	bl	80012b0 <HAL_GetTick>
 8000fec:	4603      	mov	r3, r0
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <EXTI3_IRQHandler+0x78>)
 8000ff2:	701a      	strb	r2, [r3, #0]

//		here is our action on KEY1 button
		RTC_TimeTypeDef gTime;
		RTC_TimeTypeDef sTime;

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4813      	ldr	r0, [pc, #76]	; (800104c <EXTI3_IRQHandler+0x7c>)
 8000ffe:	f002 fcd6 	bl	80039ae <HAL_RTC_GetTime>
		sTime.Hours = gTime.Hours;
 8001002:	7d3b      	ldrb	r3, [r7, #20]
 8001004:	703b      	strb	r3, [r7, #0]
		sTime.Minutes = gTime.Minutes;
 8001006:	7d7b      	ldrb	r3, [r7, #21]
 8001008:	707b      	strb	r3, [r7, #1]
		sTime.Seconds = TurnDecIntoHex(TurnHexIntoDec(gTime.Seconds)-7);
 800100a:	7dbb      	ldrb	r3, [r7, #22]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fc8b 	bl	8000928 <TurnHexIntoDec>
 8001012:	4603      	mov	r3, r0
 8001014:	3b07      	subs	r3, #7
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fc9f 	bl	800095c <TurnDecIntoHex>
 800101e:	4603      	mov	r3, r0
 8001020:	70bb      	strb	r3, [r7, #2]

		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <EXTI3_IRQHandler+0x7c>)
 800102a:	f002 fc03 	bl	8003834 <HAL_RTC_SetTime>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <EXTI3_IRQHandler+0x68>
		{
		  Error_Handler();
 8001034:	f7ff ff42 	bl	8000ebc <Error_Handler>
//		HAL_Delay(1000);
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001038:	2008      	movs	r0, #8
 800103a:	f000 fc77 	bl	800192c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000207 	.word	0x20000207
 800104c:	20000220 	.word	0x20000220

08001050 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	if (HAL_GetTick() - JitterButtonK1 > 300)
 8001056:	f000 f92b 	bl	80012b0 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <EXTI4_IRQHandler+0x78>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001066:	d927      	bls.n	80010b8 <EXTI4_IRQHandler+0x68>
	{
		JitterButtonK1 = HAL_GetTick();
 8001068:	f000 f922 	bl	80012b0 <HAL_GetTick>
 800106c:	4603      	mov	r3, r0
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <EXTI4_IRQHandler+0x78>)
 8001072:	701a      	strb	r2, [r3, #0]

//		here is our action on KEY1 button
		RTC_TimeTypeDef gTime;
		RTC_TimeTypeDef sTime;

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2201      	movs	r2, #1
 800107a:	4619      	mov	r1, r3
 800107c:	4813      	ldr	r0, [pc, #76]	; (80010cc <EXTI4_IRQHandler+0x7c>)
 800107e:	f002 fc96 	bl	80039ae <HAL_RTC_GetTime>
		sTime.Hours = gTime.Hours;
 8001082:	7d3b      	ldrb	r3, [r7, #20]
 8001084:	703b      	strb	r3, [r7, #0]
		sTime.Minutes = gTime.Minutes;
 8001086:	7d7b      	ldrb	r3, [r7, #21]
 8001088:	707b      	strb	r3, [r7, #1]
		sTime.Seconds = TurnDecIntoHex(TurnHexIntoDec(gTime.Seconds)+3);
 800108a:	7dbb      	ldrb	r3, [r7, #22]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fc4b 	bl	8000928 <TurnHexIntoDec>
 8001092:	4603      	mov	r3, r0
 8001094:	3303      	adds	r3, #3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fc5f 	bl	800095c <TurnDecIntoHex>
 800109e:	4603      	mov	r3, r0
 80010a0:	70bb      	strb	r3, [r7, #2]

		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	2201      	movs	r2, #1
 80010a6:	4619      	mov	r1, r3
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <EXTI4_IRQHandler+0x7c>)
 80010aa:	f002 fbc3 	bl	8003834 <HAL_RTC_SetTime>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <EXTI4_IRQHandler+0x68>
		{
		  Error_Handler();
 80010b4:	f7ff ff02 	bl	8000ebc <Error_Handler>
//		HAL_Delay(1000);
//		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
	}

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80010b8:	2010      	movs	r0, #16
 80010ba:	f000 fc37 	bl	800192c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000208 	.word	0x20000208
 80010cc:	20000220 	.word	0x20000220

080010d0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <RTC_Alarm_IRQHandler+0x10>)
 80010d6:	f002 ff87 	bl	8003fe8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000220 	.word	0x20000220

080010e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <OTG_FS_IRQHandler+0x10>)
 80010ea:	f000 fd92 	bl	8001c12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20001750 	.word	0x20001750

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	; (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f006 fc76 	bl	8007a18 <__errno>
 800112c:	4602      	mov	r2, r0
 800112e:	230c      	movs	r3, #12
 8001130:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20020000 	.word	0x20020000
 8001158:	00000400 	.word	0x00000400
 800115c:	2000020c 	.word	0x2000020c
 8001160:	20001b60 	.word	0x20001b60

08001164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <SystemInit+0x28>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116e:	4a07      	ldr	r2, [pc, #28]	; (800118c <SystemInit+0x28>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <SystemInit+0x28>)
 800117a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800117e:	609a      	str	r2, [r3, #8]
#endif
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001194:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001196:	e003      	b.n	80011a0 <LoopCopyDataInit>

08001198 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800119a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800119c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800119e:	3104      	adds	r1, #4

080011a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011a0:	480b      	ldr	r0, [pc, #44]	; (80011d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011a8:	d3f6      	bcc.n	8001198 <CopyDataInit>
  ldr  r2, =_sbss
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011ac:	e002      	b.n	80011b4 <LoopFillZerobss>

080011ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011b0:	f842 3b04 	str.w	r3, [r2], #4

080011b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011b8:	d3f9      	bcc.n	80011ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ba:	f7ff ffd3 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011be:	f006 fc31 	bl	8007a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c2:	f7ff fcbf 	bl	8000b44 <main>
  bx  lr    
 80011c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011cc:	0800837c 	.word	0x0800837c
  ldr  r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011d4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80011d8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80011dc:	20001b5c 	.word	0x20001b5c

080011e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <ADC_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <HAL_Init+0x40>)
 80011ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_Init+0x40>)
 80011fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_Init+0x40>)
 8001206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 f96f 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	2000      	movs	r0, #0
 8001214:	f000 f808 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff fe54 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023c00 	.word	0x40023c00

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x54>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x58>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f995 	bl	8001576 <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001264:	f000 f94f 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_InitTick+0x5c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000000 	.word	0x20000000
 8001280:	20000008 	.word	0x20000008
 8001284:	20000004 	.word	0x20000004

08001288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x20>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x24>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_IncTick+0x24>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000008 	.word	0x20000008
 80012ac:	2000027c 	.word	0x2000027c

080012b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <HAL_GetTick+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	2000027c 	.word	0x2000027c

080012c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff ffee 	bl	80012b0 <HAL_GetTick>
 80012d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012e0:	d005      	beq.n	80012ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_Delay+0x40>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ee:	bf00      	nop
 80012f0:	f7ff ffde 	bl	80012b0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f7      	bhi.n	80012f0 <HAL_Delay+0x28>
  {
  }
}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000008 	.word	0x20000008

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db10      	blt.n	80013e0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4909      	ldr	r1, [pc, #36]	; (80013ec <__NVIC_DisableIRQ+0x40>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	3320      	adds	r3, #32
 80013d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013dc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff07 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff1c 	bl	8001354 <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff8e 	bl	8001444 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff0f 	bl	8001370 <__NVIC_EnableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff1f 	bl	80013ac <__NVIC_DisableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ff94 	bl	80014ac <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	e16b      	b.n	8001884 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f040 815a 	bne.w	800187e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d00b      	beq.n	80015ea <HAL_GPIO_Init+0x5a>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015de:	2b11      	cmp	r3, #17
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b12      	cmp	r3, #18
 80015e8:	d130      	bne.n	800164c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001620:	2201      	movs	r2, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 0201 	and.w	r2, r3, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0xfc>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b12      	cmp	r3, #18
 800168a:	d123      	bne.n	80016d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	08da      	lsrs	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3208      	adds	r2, #8
 8001694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	69b9      	ldr	r1, [r7, #24]
 80016d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0203 	and.w	r2, r3, #3
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80b4 	beq.w	800187e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_GPIO_Init+0x308>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a5e      	ldr	r2, [pc, #376]	; (8001898 <HAL_GPIO_Init+0x308>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b5c      	ldr	r3, [pc, #368]	; (8001898 <HAL_GPIO_Init+0x308>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001732:	4a5a      	ldr	r2, [pc, #360]	; (800189c <HAL_GPIO_Init+0x30c>)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3302      	adds	r3, #2
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	220f      	movs	r2, #15
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a51      	ldr	r2, [pc, #324]	; (80018a0 <HAL_GPIO_Init+0x310>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d02b      	beq.n	80017b6 <HAL_GPIO_Init+0x226>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a50      	ldr	r2, [pc, #320]	; (80018a4 <HAL_GPIO_Init+0x314>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d025      	beq.n	80017b2 <HAL_GPIO_Init+0x222>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4f      	ldr	r2, [pc, #316]	; (80018a8 <HAL_GPIO_Init+0x318>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01f      	beq.n	80017ae <HAL_GPIO_Init+0x21e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4e      	ldr	r2, [pc, #312]	; (80018ac <HAL_GPIO_Init+0x31c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x21a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4d      	ldr	r2, [pc, #308]	; (80018b0 <HAL_GPIO_Init+0x320>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x216>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4c      	ldr	r2, [pc, #304]	; (80018b4 <HAL_GPIO_Init+0x324>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x212>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4b      	ldr	r2, [pc, #300]	; (80018b8 <HAL_GPIO_Init+0x328>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x20e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <HAL_GPIO_Init+0x32c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x20a>
 8001796:	2307      	movs	r3, #7
 8001798:	e00e      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 800179a:	2308      	movs	r3, #8
 800179c:	e00c      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 800179e:	2306      	movs	r3, #6
 80017a0:	e00a      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017a2:	2305      	movs	r3, #5
 80017a4:	e008      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017b6:	2300      	movs	r3, #0
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c8:	4934      	ldr	r1, [pc, #208]	; (800189c <HAL_GPIO_Init+0x30c>)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d6:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <HAL_GPIO_Init+0x330>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017fa:	4a31      	ldr	r2, [pc, #196]	; (80018c0 <HAL_GPIO_Init+0x330>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001800:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <HAL_GPIO_Init+0x330>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001824:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <HAL_GPIO_Init+0x330>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <HAL_GPIO_Init+0x330>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800184e:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <HAL_GPIO_Init+0x330>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <HAL_GPIO_Init+0x330>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001878:	4a11      	ldr	r2, [pc, #68]	; (80018c0 <HAL_GPIO_Init+0x330>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3301      	adds	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	f67f ae90 	bls.w	80015ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800188c:	bf00      	nop
 800188e:	3724      	adds	r7, #36	; 0x24
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40023800 	.word	0x40023800
 800189c:	40013800 	.word	0x40013800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40021800 	.word	0x40021800
 80018bc:	40021c00 	.word	0x40021c00
 80018c0:	40013c00 	.word	0x40013c00

080018c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e0:	e003      	b.n	80018ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	041a      	lsls	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	619a      	str	r2, [r3, #24]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	887b      	ldrh	r3, [r7, #2]
 8001908:	401a      	ands	r2, r3
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	429a      	cmp	r2, r3
 800190e:	d104      	bne.n	800191a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	041a      	lsls	r2, r3, #16
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001918:	e002      	b.n	8001920 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f806 	bl	800195c <HAL_GPIO_EXTI_Callback>
  }
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40013c00 	.word	0x40013c00

0800195c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001974:	b08f      	sub	sp, #60	; 0x3c
 8001976:	af0a      	add	r7, sp, #40	; 0x28
 8001978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e10f      	b.n	8001ba4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f005 fd3e 	bl	8007420 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2203      	movs	r2, #3
 80019a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fd61 	bl	800448a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	687e      	ldr	r6, [r7, #4]
 80019d0:	466d      	mov	r5, sp
 80019d2:	f106 0410 	add.w	r4, r6, #16
 80019d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80019e6:	1d33      	adds	r3, r6, #4
 80019e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ea:	6838      	ldr	r0, [r7, #0]
 80019ec:	f002 fc38 	bl	8004260 <USB_CoreInit>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2202      	movs	r2, #2
 80019fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0d0      	b.n	8001ba4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fd4f 	bl	80044ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]
 8001a12:	e04a      	b.n	8001aaa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	333d      	adds	r3, #61	; 0x3d
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	333c      	adds	r3, #60	; 0x3c
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	b298      	uxth	r0, r3
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3342      	adds	r3, #66	; 0x42
 8001a50:	4602      	mov	r2, r0
 8001a52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	333f      	adds	r3, #63	; 0x3f
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	3344      	adds	r3, #68	; 0x44
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	1a9b      	subs	r3, r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	3348      	adds	r3, #72	; 0x48
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3350      	adds	r3, #80	; 0x50
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3af      	bcc.n	8001a14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	e044      	b.n	8001b44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	1a9b      	subs	r3, r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	3301      	adds	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d3b5      	bcc.n	8001aba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	687e      	ldr	r6, [r7, #4]
 8001b56:	466d      	mov	r5, sp
 8001b58:	f106 0410 	add.w	r4, r6, #16
 8001b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b68:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b6c:	1d33      	adds	r3, r6, #4
 8001b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b70:	6838      	ldr	r0, [r7, #0]
 8001b72:	f002 fcc5 	bl	8004500 <USB_DevInit>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e00d      	b.n	8001ba4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fd0d 	bl	80055bc <USB_DevDisconnect>

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_PCD_Start+0x1c>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e020      	b.n	8001c0a <HAL_PCD_Start+0x5e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d109      	bne.n	8001bec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d005      	beq.n	8001bec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 fc39 	bl	8004468 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 fcbd 	bl	800557a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c12:	b590      	push	{r4, r7, lr}
 8001c14:	b08d      	sub	sp, #52	; 0x34
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fd7b 	bl	8005724 <USB_GetMode>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 839d 	bne.w	8002370 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fcdf 	bl	80055fe <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8393 	beq.w	800236e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fcd6 	bl	80055fe <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d107      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f002 0202 	and.w	r2, r2, #2
 8001c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fcc4 	bl	80055fe <USB_ReadInterrupts>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d161      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0210 	bic.w	r2, r2, #16
 8001c8e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f003 020f 	and.w	r2, r3, #15
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	3304      	adds	r3, #4
 8001cae:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	0c5b      	lsrs	r3, r3, #17
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d124      	bne.n	8001d06 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d035      	beq.n	8001d34 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	6a38      	ldr	r0, [r7, #32]
 8001cdc:	f003 fb2a 	bl	8005334 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cec:	441a      	add	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cfe:	441a      	add	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	619a      	str	r2, [r3, #24]
 8001d04:	e016      	b.n	8001d34 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	0c5b      	lsrs	r3, r3, #17
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d110      	bne.n	8001d34 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d18:	2208      	movs	r2, #8
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6a38      	ldr	r0, [r7, #32]
 8001d1e:	f003 fb09 	bl	8005334 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	699a      	ldr	r2, [r3, #24]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d2e:	441a      	add	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0210 	orr.w	r2, r2, #16
 8001d42:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fc58 	bl	80055fe <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d58:	d16e      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fc5e 	bl	8005624 <USB_ReadDevAllOutEpInterrupt>
 8001d68:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d6a:	e062      	b.n	8001e32 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d057      	beq.n	8001e26 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 fc83 	bl	800568c <USB_ReadDevOutEPInterrupt>
 8001d86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00c      	beq.n	8001dac <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2301      	movs	r3, #1
 8001da2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fdb0 	bl	800290c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 feaa 	bl	8002b24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de6:	461a      	mov	r2, r3
 8001de8:	2310      	movs	r3, #16
 8001dea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e02:	461a      	mov	r2, r3
 8001e04:	2320      	movs	r3, #32
 8001e06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d009      	beq.n	8001e26 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e24:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	3301      	adds	r3, #1
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d199      	bne.n	8001d6c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 fbde 	bl	80055fe <USB_ReadInterrupts>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e4c:	f040 80c0 	bne.w	8001fd0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fbff 	bl	8005658 <USB_ReadDevAllInEpInterrupt>
 8001e5a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e60:	e0b2      	b.n	8001fc8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80a7 	beq.w	8001fbc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fc25 	bl	80056c8 <USB_ReadDevInEPInterrupt>
 8001e7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d057      	beq.n	8001f3a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	2201      	movs	r2, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69f9      	ldr	r1, [r7, #28]
 8001ea6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001eaa:	4013      	ands	r3, r2
 8001eac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d132      	bne.n	8001f2e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3348      	adds	r3, #72	; 0x48
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4403      	add	r3, r0
 8001ee8:	3344      	adds	r3, #68	; 0x44
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4419      	add	r1, r3
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4403      	add	r3, r0
 8001efc:	3348      	adds	r3, #72	; 0x48
 8001efe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d113      	bne.n	8001f2e <HAL_PCD_IRQHandler+0x31c>
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	3350      	adds	r3, #80	; 0x50
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d108      	bne.n	8001f2e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f26:	461a      	mov	r2, r3
 8001f28:	2101      	movs	r1, #1
 8001f2a:	f003 fc2d 	bl	8005788 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f005 faf4 	bl	8007522 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f50:	461a      	mov	r2, r3
 8001f52:	2308      	movs	r3, #8
 8001f54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	2310      	movs	r3, #16
 8001f70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2340      	movs	r3, #64	; 0x40
 8001f8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fc1b 	bl	80027f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f47f af49 	bne.w	8001e62 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 fb12 	bl	80055fe <USB_ReadInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fe4:	d122      	bne.n	800202c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002000:	2b01      	cmp	r3, #1
 8002002:	d108      	bne.n	8002016 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800200c:	2100      	movs	r1, #0
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fe26 	bl	8002c60 <HAL_PCDEx_LPM_Callback>
 8002014:	e002      	b.n	800201c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f005 fafa 	bl	8007610 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800202a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f003 fae4 	bl	80055fe <USB_ReadInterrupts>
 8002036:	4603      	mov	r3, r0
 8002038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800203c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002040:	d112      	bne.n	8002068 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d102      	bne.n	8002058 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f005 fab6 	bl	80075c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002066:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f003 fac6 	bl	80055fe <USB_ReadInterrupts>
 8002072:	4603      	mov	r3, r0
 8002074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800207c:	f040 80c7 	bne.w	800220e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2110      	movs	r1, #16
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fb94 	bl	80047c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a4:	e056      	b.n	8002154 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020b2:	461a      	mov	r2, r3
 80020b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ca:	0151      	lsls	r1, r2, #5
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	440a      	add	r2, r1
 80020d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020d8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ea:	0151      	lsls	r1, r2, #5
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	440a      	add	r2, r1
 80020f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	4413      	add	r3, r2
 8002102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002106:	461a      	mov	r2, r3
 8002108:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800210c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	4413      	add	r3, r2
 8002116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800211e:	0151      	lsls	r1, r2, #5
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	440a      	add	r2, r1
 8002124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002128:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800212c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	4413      	add	r3, r2
 8002136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800213e:	0151      	lsls	r1, r2, #5
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	440a      	add	r2, r1
 8002144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002148:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800214c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	3301      	adds	r3, #1
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800215a:	429a      	cmp	r2, r3
 800215c:	d3a3      	bcc.n	80020a6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800216c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002170:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	2b00      	cmp	r3, #0
 8002178:	d016      	beq.n	80021a8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800218a:	f043 030b 	orr.w	r3, r3, #11
 800218e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021a0:	f043 030b 	orr.w	r3, r3, #11
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	e015      	b.n	80021d4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021ba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80021be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ce:	f043 030b 	orr.w	r3, r3, #11
 80021d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80021e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021f8:	461a      	mov	r2, r3
 80021fa:	f003 fac5 	bl	8005788 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800220c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f003 f9f3 	bl	80055fe <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800221e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002222:	d124      	bne.n	800226e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fa89 	bl	8005740 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f002 fb29 	bl	800488a <USB_GetDevSpeed>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681c      	ldr	r4, [r3, #0]
 8002244:	f001 f946 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 8002248:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	4620      	mov	r0, r4
 8002254:	f002 f866 	bl	8004324 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f005 f98a 	bl	8007572 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800226c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f003 f9c3 	bl	80055fe <USB_ReadInterrupts>
 8002278:	4603      	mov	r3, r0
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b08      	cmp	r3, #8
 8002280:	d10a      	bne.n	8002298 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f005 f967 	bl	8007556 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f002 0208 	and.w	r2, r2, #8
 8002296:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f003 f9ae 	bl	80055fe <USB_ReadInterrupts>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ac:	d10f      	bne.n	80022ce <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	4619      	mov	r1, r3
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f005 f9c9 	bl	8007650 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 f993 	bl	80055fe <USB_ReadInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022e2:	d10f      	bne.n	8002304 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	4619      	mov	r1, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f005 f99c 	bl	800762c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f003 f978 	bl	80055fe <USB_ReadInterrupts>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002318:	d10a      	bne.n	8002330 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f005 f9aa 	bl	8007674 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800232e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f003 f962 	bl	80055fe <USB_ReadInterrupts>
 800233a:	4603      	mov	r3, r0
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b04      	cmp	r3, #4
 8002342:	d115      	bne.n	8002370 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f005 f99a 	bl	8007690 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	430a      	orrs	r2, r1
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	e000      	b.n	8002370 <HAL_PCD_IRQHandler+0x75e>
      return;
 800236e:	bf00      	nop
    }
  }
}
 8002370:	3734      	adds	r7, #52	; 0x34
 8002372:	46bd      	mov	sp, r7
 8002374:	bd90      	pop	{r4, r7, pc}

08002376 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_PCD_SetAddress+0x1a>
 800238c:	2302      	movs	r3, #2
 800238e:	e013      	b.n	80023b8 <HAL_PCD_SetAddress+0x42>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 f8c0 	bl	800552e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	4603      	mov	r3, r0
 80023d0:	70fb      	strb	r3, [r7, #3]
 80023d2:	460b      	mov	r3, r1
 80023d4:	803b      	strh	r3, [r7, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	da0f      	bge.n	8002406 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	f003 020f 	and.w	r2, r3, #15
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	3338      	adds	r3, #56	; 0x38
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	3304      	adds	r3, #4
 80023fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	705a      	strb	r2, [r3, #1]
 8002404:	e00f      	b.n	8002426 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 020f 	and.w	r2, r3, #15
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4413      	add	r3, r2
 800241c:	3304      	adds	r3, #4
 800241e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002432:	883a      	ldrh	r2, [r7, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	78ba      	ldrb	r2, [r7, #2]
 800243c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	785b      	ldrb	r3, [r3, #1]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002450:	78bb      	ldrb	r3, [r7, #2]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d102      	bne.n	800245c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_PCD_EP_Open+0xaa>
 8002466:	2302      	movs	r3, #2
 8002468:	e00e      	b.n	8002488 <HAL_PCD_EP_Open+0xc8>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68f9      	ldr	r1, [r7, #12]
 8002478:	4618      	mov	r0, r3
 800247a:	f002 fa2b 	bl	80048d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002486:	7afb      	ldrb	r3, [r7, #11]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800249c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da0f      	bge.n	80024c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 020f 	and.w	r2, r3, #15
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	3338      	adds	r3, #56	; 0x38
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	3304      	adds	r3, #4
 80024ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2201      	movs	r2, #1
 80024c0:	705a      	strb	r2, [r3, #1]
 80024c2:	e00f      	b.n	80024e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	f003 020f 	and.w	r2, r3, #15
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	3304      	adds	r3, #4
 80024dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_PCD_EP_Close+0x6e>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e00e      	b.n	800251c <HAL_PCD_EP_Close+0x8c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68f9      	ldr	r1, [r7, #12]
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fa69 	bl	80049e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	460b      	mov	r3, r1
 8002532:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002534:	7afb      	ldrb	r3, [r7, #11]
 8002536:	f003 020f 	and.w	r2, r3, #15
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4413      	add	r3, r2
 800254a:	3304      	adds	r3, #4
 800254c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2200      	movs	r2, #0
 8002564:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002566:	7afb      	ldrb	r3, [r7, #11]
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	b2da      	uxtb	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d102      	bne.n	8002580 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002580:	7afb      	ldrb	r3, [r7, #11]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	6979      	ldr	r1, [r7, #20]
 8002598:	f002 fd44 	bl	8005024 <USB_EP0StartXfer>
 800259c:	e008      	b.n	80025b0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	6979      	ldr	r1, [r7, #20]
 80025ac:	f002 faf6 	bl	8004b9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	f003 020f 	and.w	r2, r3, #15
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025dc:	681b      	ldr	r3, [r3, #0]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	460b      	mov	r3, r1
 80025f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fa:	7afb      	ldrb	r3, [r7, #11]
 80025fc:	f003 020f 	and.w	r2, r3, #15
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	3338      	adds	r3, #56	; 0x38
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	3304      	adds	r3, #4
 8002610:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2201      	movs	r2, #1
 8002628:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800262a:	7afb      	ldrb	r3, [r7, #11]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	b2da      	uxtb	r2, r3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d102      	bne.n	8002644 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002644:	7afb      	ldrb	r3, [r7, #11]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	6979      	ldr	r1, [r7, #20]
 800265c:	f002 fce2 	bl	8005024 <USB_EP0StartXfer>
 8002660:	e008      	b.n	8002674 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	6979      	ldr	r1, [r7, #20]
 8002670:	f002 fa94 	bl	8004b9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	f003 020f 	and.w	r2, r3, #15
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	d901      	bls.n	800269c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e050      	b.n	800273e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800269c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	da0f      	bge.n	80026c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f003 020f 	and.w	r2, r3, #15
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	3338      	adds	r3, #56	; 0x38
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	3304      	adds	r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	705a      	strb	r2, [r3, #1]
 80026c2:	e00d      	b.n	80026e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	3304      	adds	r3, #4
 80026d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_PCD_EP_SetStall+0x82>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e01e      	b.n	800273e <HAL_PCD_EP_SetStall+0xc0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68f9      	ldr	r1, [r7, #12]
 800270e:	4618      	mov	r0, r3
 8002710:	f002 fe39 	bl	8005386 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10a      	bne.n	8002734 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	b2d9      	uxtb	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800272e:	461a      	mov	r2, r3
 8002730:	f003 f82a 	bl	8005788 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	f003 020f 	and.w	r2, r3, #15
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	429a      	cmp	r2, r3
 800275e:	d901      	bls.n	8002764 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e042      	b.n	80027ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002768:	2b00      	cmp	r3, #0
 800276a:	da0f      	bge.n	800278c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f003 020f 	and.w	r2, r3, #15
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	3338      	adds	r3, #56	; 0x38
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	3304      	adds	r3, #4
 8002782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	705a      	strb	r2, [r3, #1]
 800278a:	e00f      	b.n	80027ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	3304      	adds	r3, #4
 80027a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_PCD_EP_ClrStall+0x86>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e00e      	b.n	80027ea <HAL_PCD_EP_ClrStall+0xa4>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68f9      	ldr	r1, [r7, #12]
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 fe41 	bl	8005462 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b08a      	sub	sp, #40	; 0x28
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	3338      	adds	r3, #56	; 0x38
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	3304      	adds	r3, #4
 8002818:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	429a      	cmp	r2, r3
 8002824:	d901      	bls.n	800282a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e06c      	b.n	8002904 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	429a      	cmp	r2, r3
 800283e:	d902      	bls.n	8002846 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3303      	adds	r3, #3
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800284e:	e02b      	b.n	80028a8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	429a      	cmp	r2, r3
 8002864:	d902      	bls.n	800286c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	3303      	adds	r3, #3
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	68d9      	ldr	r1, [r3, #12]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002884:	b2db      	uxtb	r3, r3
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	4603      	mov	r3, r0
 800288a:	6978      	ldr	r0, [r7, #20]
 800288c:	f002 fd1d 	bl	80052ca <USB_WritePacket>

    ep->xfer_buff  += len;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	441a      	add	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	441a      	add	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d809      	bhi.n	80028d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d203      	bcs.n	80028d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1be      	bne.n	8002850 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d811      	bhi.n	8002902 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	2201      	movs	r2, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	6939      	ldr	r1, [r7, #16]
 80028fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028fe:	4013      	ands	r3, r2
 8002900:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	333c      	adds	r3, #60	; 0x3c
 8002924:	3304      	adds	r3, #4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b01      	cmp	r3, #1
 8002940:	f040 80a0 	bne.w	8002a84 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d015      	beq.n	800297a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4a72      	ldr	r2, [pc, #456]	; (8002b1c <PCD_EP_OutXfrComplete_int+0x210>)
 8002952:	4293      	cmp	r3, r2
 8002954:	f240 80dd 	bls.w	8002b12 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80d7 	beq.w	8002b12 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002970:	461a      	mov	r2, r3
 8002972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002976:	6093      	str	r3, [r2, #8]
 8002978:	e0cb      	b.n	8002b12 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002990:	461a      	mov	r2, r3
 8002992:	2320      	movs	r3, #32
 8002994:	6093      	str	r3, [r2, #8]
 8002996:	e0bc      	b.n	8002b12 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 80b7 	bne.w	8002b12 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a5d      	ldr	r2, [pc, #372]	; (8002b1c <PCD_EP_OutXfrComplete_int+0x210>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d90f      	bls.n	80029cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c2:	461a      	mov	r2, r3
 80029c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029c8:	6093      	str	r3, [r2, #8]
 80029ca:	e0a2      	b.n	8002b12 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	0159      	lsls	r1, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	440b      	add	r3, r1
 80029e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80029f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4403      	add	r3, r0
 8002a02:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a06:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4403      	add	r3, r0
 8002a2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4419      	add	r1, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4403      	add	r3, r0
 8002a40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a44:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d114      	bne.n	8002a76 <PCD_EP_OutXfrComplete_int+0x16a>
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d108      	bne.n	8002a76 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2101      	movs	r1, #1
 8002a72:	f002 fe89 	bl	8005788 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f004 fd35 	bl	80074ec <HAL_PCD_DataOutStageCallback>
 8002a82:	e046      	b.n	8002b12 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <PCD_EP_OutXfrComplete_int+0x214>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d124      	bne.n	8002ad6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aa8:	6093      	str	r3, [r2, #8]
 8002aaa:	e032      	b.n	8002b12 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f004 fd0c 	bl	80074ec <HAL_PCD_DataOutStageCallback>
 8002ad4:	e01d      	b.n	8002b12 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d114      	bne.n	8002b06 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d108      	bne.n	8002b06 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002afe:	461a      	mov	r2, r3
 8002b00:	2100      	movs	r1, #0
 8002b02:	f002 fe41 	bl	8005788 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f004 fced 	bl	80074ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	4f54300a 	.word	0x4f54300a
 8002b20:	4f54310a 	.word	0x4f54310a

08002b24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	333c      	adds	r3, #60	; 0x3c
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <PCD_EP_OutSetupPacket_int+0x88>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d90e      	bls.n	8002b78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d009      	beq.n	8002b78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b70:	461a      	mov	r2, r3
 8002b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f004 fca5 	bl	80074c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <PCD_EP_OutSetupPacket_int+0x88>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d90c      	bls.n	8002ba0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d108      	bne.n	8002ba0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	f002 fdf4 	bl	8005788 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	4f54300a 	.word	0x4f54300a

08002bb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d107      	bne.n	8002bde <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bce:	883b      	ldrh	r3, [r7, #0]
 8002bd0:	0419      	lsls	r1, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
 8002bdc:	e028      	b.n	8002c30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	4413      	add	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	e00d      	b.n	8002c0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	3340      	adds	r3, #64	; 0x40
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0c1b      	lsrs	r3, r3, #16
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4413      	add	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d3ec      	bcc.n	8002bf2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c18:	883b      	ldrh	r3, [r7, #0]
 8002c1a:	0418      	lsls	r0, r3, #16
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6819      	ldr	r1, [r3, #0]
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	4302      	orrs	r2, r0
 8002c28:	3340      	adds	r3, #64	; 0x40
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e25b      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d075      	beq.n	8002d82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c96:	4ba3      	ldr	r3, [pc, #652]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d00c      	beq.n	8002cbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca2:	4ba0      	ldr	r3, [pc, #640]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d112      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cae:	4b9d      	ldr	r3, [pc, #628]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cba:	d10b      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbc:	4b99      	ldr	r3, [pc, #612]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d05b      	beq.n	8002d80 <HAL_RCC_OscConfig+0x108>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d157      	bne.n	8002d80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e236      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cdc:	d106      	bne.n	8002cec <HAL_RCC_OscConfig+0x74>
 8002cde:	4b91      	ldr	r3, [pc, #580]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a90      	ldr	r2, [pc, #576]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e01d      	b.n	8002d28 <HAL_RCC_OscConfig+0xb0>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x98>
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a8a      	ldr	r2, [pc, #552]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b88      	ldr	r3, [pc, #544]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a87      	ldr	r2, [pc, #540]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_OscConfig+0xb0>
 8002d10:	4b84      	ldr	r3, [pc, #528]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a83      	ldr	r2, [pc, #524]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	4b81      	ldr	r3, [pc, #516]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a80      	ldr	r2, [pc, #512]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe fabe 	bl	80012b0 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d38:	f7fe faba 	bl	80012b0 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e1fb      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b76      	ldr	r3, [pc, #472]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0xc0>
 8002d56:	e014      	b.n	8002d82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fe faaa 	bl	80012b0 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe faa6 	bl	80012b0 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e1e7      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	4b6c      	ldr	r3, [pc, #432]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0xe8>
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d063      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d8e:	4b65      	ldr	r3, [pc, #404]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9a:	4b62      	ldr	r3, [pc, #392]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d11c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da6:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d116      	bne.n	8002de0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db2:	4b5c      	ldr	r3, [pc, #368]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_RCC_OscConfig+0x152>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e1bb      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dca:	4b56      	ldr	r3, [pc, #344]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4952      	ldr	r1, [pc, #328]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	e03a      	b.n	8002e56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de8:	4b4f      	ldr	r3, [pc, #316]	; (8002f28 <HAL_RCC_OscConfig+0x2b0>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7fe fa5f 	bl	80012b0 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df6:	f7fe fa5b 	bl	80012b0 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e19c      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4940      	ldr	r1, [pc, #256]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
 8002e28:	e015      	b.n	8002e56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2a:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <HAL_RCC_OscConfig+0x2b0>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe fa3e 	bl	80012b0 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e38:	f7fe fa3a 	bl	80012b0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e17b      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d030      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6a:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <HAL_RCC_OscConfig+0x2b4>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fe fa1e 	bl	80012b0 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fe fa1a 	bl	80012b0 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e15b      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x200>
 8002e96:	e015      	b.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e98:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <HAL_RCC_OscConfig+0x2b4>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fa07 	bl	80012b0 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea6:	f7fe fa03 	bl	80012b0 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e144      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a0 	beq.w	8003012 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10f      	bne.n	8002f02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efe:	2301      	movs	r3, #1
 8002f00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x2b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d121      	bne.n	8002f52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <HAL_RCC_OscConfig+0x2b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a07      	ldr	r2, [pc, #28]	; (8002f30 <HAL_RCC_OscConfig+0x2b8>)
 8002f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe f9c9 	bl	80012b0 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f20:	e011      	b.n	8002f46 <HAL_RCC_OscConfig+0x2ce>
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	42470000 	.word	0x42470000
 8002f2c:	42470e80 	.word	0x42470e80
 8002f30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f34:	f7fe f9bc 	bl	80012b0 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0fd      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b81      	ldr	r3, [pc, #516]	; (800314c <HAL_RCC_OscConfig+0x4d4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d106      	bne.n	8002f68 <HAL_RCC_OscConfig+0x2f0>
 8002f5a:	4b7d      	ldr	r3, [pc, #500]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a7c      	ldr	r2, [pc, #496]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
 8002f66:	e01c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x32a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b05      	cmp	r3, #5
 8002f6e:	d10c      	bne.n	8002f8a <HAL_RCC_OscConfig+0x312>
 8002f70:	4b77      	ldr	r3, [pc, #476]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	4a76      	ldr	r2, [pc, #472]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f76:	f043 0304 	orr.w	r3, r3, #4
 8002f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7c:	4b74      	ldr	r3, [pc, #464]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a73      	ldr	r2, [pc, #460]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
 8002f88:	e00b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x32a>
 8002f8a:	4b71      	ldr	r3, [pc, #452]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a70      	ldr	r2, [pc, #448]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
 8002f96:	4b6e      	ldr	r3, [pc, #440]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	4a6d      	ldr	r2, [pc, #436]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002f9c:	f023 0304 	bic.w	r3, r3, #4
 8002fa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d015      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fe f981 	bl	80012b0 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe f97d 	bl	80012b0 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e0bc      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	4b61      	ldr	r3, [pc, #388]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ee      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x33a>
 8002fd4:	e014      	b.n	8003000 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7fe f96b 	bl	80012b0 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7fe f967 	bl	80012b0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0a6      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff4:	4b56      	ldr	r3, [pc, #344]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ee      	bne.n	8002fde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d105      	bne.n	8003012 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003006:	4b52      	ldr	r3, [pc, #328]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	4a51      	ldr	r2, [pc, #324]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 800300c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003010:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8092 	beq.w	8003140 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800301c:	4b4c      	ldr	r3, [pc, #304]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b08      	cmp	r3, #8
 8003026:	d05c      	beq.n	80030e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d141      	bne.n	80030b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003030:	4b48      	ldr	r3, [pc, #288]	; (8003154 <HAL_RCC_OscConfig+0x4dc>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe f93b 	bl	80012b0 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe f937 	bl	80012b0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e078      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	019b      	lsls	r3, r3, #6
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	061b      	lsls	r3, r3, #24
 8003080:	4933      	ldr	r1, [pc, #204]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003086:	4b33      	ldr	r3, [pc, #204]	; (8003154 <HAL_RCC_OscConfig+0x4dc>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fe f910 	bl	80012b0 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003094:	f7fe f90c 	bl	80012b0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e04d      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x41c>
 80030b2:	e045      	b.n	8003140 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_RCC_OscConfig+0x4dc>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ba:	f7fe f8f9 	bl	80012b0 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe f8f5 	bl	80012b0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e036      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d4:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f0      	bne.n	80030c2 <HAL_RCC_OscConfig+0x44a>
 80030e0:	e02e      	b.n	8003140 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e029      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <HAL_RCC_OscConfig+0x4d8>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d11c      	bne.n	800313c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d115      	bne.n	800313c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003116:	4013      	ands	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800311c:	4293      	cmp	r3, r2
 800311e:	d10d      	bne.n	800313c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d106      	bne.n	800313c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40007000 	.word	0x40007000
 8003150:	40023800 	.word	0x40023800
 8003154:	42470060 	.word	0x42470060

08003158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0cc      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b68      	ldr	r3, [pc, #416]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d90c      	bls.n	8003194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b65      	ldr	r3, [pc, #404]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0b8      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ac:	4b59      	ldr	r3, [pc, #356]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a58      	ldr	r2, [pc, #352]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c4:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a52      	ldr	r2, [pc, #328]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d0:	4b50      	ldr	r3, [pc, #320]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	494d      	ldr	r1, [pc, #308]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d044      	beq.n	8003278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d119      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d003      	beq.n	8003216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003212:	2b03      	cmp	r3, #3
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003216:	4b3f      	ldr	r3, [pc, #252]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e06f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003226:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e067      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003236:	4b37      	ldr	r3, [pc, #220]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 0203 	bic.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4934      	ldr	r1, [pc, #208]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003248:	f7fe f832 	bl	80012b0 <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	e00a      	b.n	8003266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7fe f82e 	bl	80012b0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e04f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 020c 	and.w	r2, r3, #12
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	429a      	cmp	r2, r3
 8003276:	d1eb      	bne.n	8003250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d20c      	bcs.n	80032a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e032      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4916      	ldr	r1, [pc, #88]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	490e      	ldr	r1, [pc, #56]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032de:	f000 f821 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 80032e2:	4601      	mov	r1, r0
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	5cd3      	ldrb	r3, [r2, r3]
 80032f2:	fa21 f303 	lsr.w	r3, r1, r3
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd ff92 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023c00 	.word	0x40023c00
 8003314:	40023800 	.word	0x40023800
 8003318:	08008328 	.word	0x08008328
 800331c:	20000000 	.word	0x20000000
 8003320:	20000004 	.word	0x20000004

08003324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	2300      	movs	r3, #0
 8003334:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800333a:	4b63      	ldr	r3, [pc, #396]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b04      	cmp	r3, #4
 8003344:	d007      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x32>
 8003346:	2b08      	cmp	r3, #8
 8003348:	d008      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x38>
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 80b4 	bne.w	80034b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b5e      	ldr	r3, [pc, #376]	; (80034cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003352:	60bb      	str	r3, [r7, #8]
       break;
 8003354:	e0b3      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003356:	4b5e      	ldr	r3, [pc, #376]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003358:	60bb      	str	r3, [r7, #8]
      break;
 800335a:	e0b0      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800335c:	4b5a      	ldr	r3, [pc, #360]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003364:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003366:	4b58      	ldr	r3, [pc, #352]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d04a      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003372:	4b55      	ldr	r3, [pc, #340]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	f04f 0400 	mov.w	r4, #0
 800337c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	ea03 0501 	and.w	r5, r3, r1
 8003388:	ea04 0602 	and.w	r6, r4, r2
 800338c:	4629      	mov	r1, r5
 800338e:	4632      	mov	r2, r6
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	f04f 0400 	mov.w	r4, #0
 8003398:	0154      	lsls	r4, r2, #5
 800339a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800339e:	014b      	lsls	r3, r1, #5
 80033a0:	4619      	mov	r1, r3
 80033a2:	4622      	mov	r2, r4
 80033a4:	1b49      	subs	r1, r1, r5
 80033a6:	eb62 0206 	sbc.w	r2, r2, r6
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	f04f 0400 	mov.w	r4, #0
 80033b2:	0194      	lsls	r4, r2, #6
 80033b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033b8:	018b      	lsls	r3, r1, #6
 80033ba:	1a5b      	subs	r3, r3, r1
 80033bc:	eb64 0402 	sbc.w	r4, r4, r2
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	00e2      	lsls	r2, r4, #3
 80033ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033ce:	00d9      	lsls	r1, r3, #3
 80033d0:	460b      	mov	r3, r1
 80033d2:	4614      	mov	r4, r2
 80033d4:	195b      	adds	r3, r3, r5
 80033d6:	eb44 0406 	adc.w	r4, r4, r6
 80033da:	f04f 0100 	mov.w	r1, #0
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	0262      	lsls	r2, r4, #9
 80033e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80033e8:	0259      	lsls	r1, r3, #9
 80033ea:	460b      	mov	r3, r1
 80033ec:	4614      	mov	r4, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	4621      	mov	r1, r4
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f04f 0400 	mov.w	r4, #0
 80033f8:	461a      	mov	r2, r3
 80033fa:	4623      	mov	r3, r4
 80033fc:	f7fd f914 	bl	8000628 <__aeabi_uldivmod>
 8003400:	4603      	mov	r3, r0
 8003402:	460c      	mov	r4, r1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e049      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003408:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	f04f 0400 	mov.w	r4, #0
 8003412:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	ea03 0501 	and.w	r5, r3, r1
 800341e:	ea04 0602 	and.w	r6, r4, r2
 8003422:	4629      	mov	r1, r5
 8003424:	4632      	mov	r2, r6
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	f04f 0400 	mov.w	r4, #0
 800342e:	0154      	lsls	r4, r2, #5
 8003430:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003434:	014b      	lsls	r3, r1, #5
 8003436:	4619      	mov	r1, r3
 8003438:	4622      	mov	r2, r4
 800343a:	1b49      	subs	r1, r1, r5
 800343c:	eb62 0206 	sbc.w	r2, r2, r6
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	f04f 0400 	mov.w	r4, #0
 8003448:	0194      	lsls	r4, r2, #6
 800344a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800344e:	018b      	lsls	r3, r1, #6
 8003450:	1a5b      	subs	r3, r3, r1
 8003452:	eb64 0402 	sbc.w	r4, r4, r2
 8003456:	f04f 0100 	mov.w	r1, #0
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	00e2      	lsls	r2, r4, #3
 8003460:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003464:	00d9      	lsls	r1, r3, #3
 8003466:	460b      	mov	r3, r1
 8003468:	4614      	mov	r4, r2
 800346a:	195b      	adds	r3, r3, r5
 800346c:	eb44 0406 	adc.w	r4, r4, r6
 8003470:	f04f 0100 	mov.w	r1, #0
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	02a2      	lsls	r2, r4, #10
 800347a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800347e:	0299      	lsls	r1, r3, #10
 8003480:	460b      	mov	r3, r1
 8003482:	4614      	mov	r4, r2
 8003484:	4618      	mov	r0, r3
 8003486:	4621      	mov	r1, r4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f04f 0400 	mov.w	r4, #0
 800348e:	461a      	mov	r2, r3
 8003490:	4623      	mov	r3, r4
 8003492:	f7fd f8c9 	bl	8000628 <__aeabi_uldivmod>
 8003496:	4603      	mov	r3, r0
 8003498:	460c      	mov	r4, r1
 800349a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	3301      	adds	r3, #1
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	60bb      	str	r3, [r7, #8]
      break;
 80034b6:	e002      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034ba:	60bb      	str	r3, [r7, #8]
      break;
 80034bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034be:	68bb      	ldr	r3, [r7, #8]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	00f42400 	.word	0x00f42400
 80034d0:	007a1200 	.word	0x007a1200

080034d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d8:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000000 	.word	0x20000000

080034ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d105      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003510:	2b00      	cmp	r3, #0
 8003512:	d035      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003514:	4b62      	ldr	r3, [pc, #392]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800351a:	f7fd fec9 	bl	80012b0 <HAL_GetTick>
 800351e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003520:	e008      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003522:	f7fd fec5 	bl	80012b0 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0b0      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003534:	4b5b      	ldr	r3, [pc, #364]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f0      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	019a      	lsls	r2, r3, #6
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	071b      	lsls	r3, r3, #28
 800354c:	4955      	ldr	r1, [pc, #340]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003554:	4b52      	ldr	r3, [pc, #328]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800355a:	f7fd fea9 	bl	80012b0 <HAL_GetTick>
 800355e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003562:	f7fd fea5 	bl	80012b0 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e090      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8083 	beq.w	8003694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b44      	ldr	r3, [pc, #272]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a43      	ldr	r2, [pc, #268]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80035aa:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3e      	ldr	r2, [pc, #248]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035b6:	f7fd fe7b 	bl	80012b0 <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fd fe77 	bl	80012b0 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e062      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035dc:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d02f      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d028      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035fa:	4b2a      	ldr	r3, [pc, #168]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003602:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003604:	4b29      	ldr	r3, [pc, #164]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003606:	2201      	movs	r2, #1
 8003608:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800360a:	4b28      	ldr	r3, [pc, #160]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003610:	4a24      	ldr	r2, [pc, #144]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003616:	4b23      	ldr	r3, [pc, #140]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d114      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003622:	f7fd fe45 	bl	80012b0 <HAL_GetTick>
 8003626:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003628:	e00a      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7fd fe41 	bl	80012b0 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f241 3288 	movw	r2, #5000	; 0x1388
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e02a      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ee      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003658:	d10d      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800366a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366e:	490d      	ldr	r1, [pc, #52]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003670:	4313      	orrs	r3, r2
 8003672:	608b      	str	r3, [r1, #8]
 8003674:	e005      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800367c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003680:	6093      	str	r3, [r2, #8]
 8003682:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003684:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368e:	4905      	ldr	r1, [pc, #20]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003690:	4313      	orrs	r3, r2
 8003692:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	42470068 	.word	0x42470068
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40007000 	.word	0x40007000
 80036ac:	42470e40 	.word	0x42470e40

080036b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0a4      	b.n	800380c <HAL_RTC_Init+0x15c>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7f5b      	ldrb	r3, [r3, #29]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d126      	bne.n	800371a <HAL_RTC_Init+0x6a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a4f      	ldr	r2, [pc, #316]	; (8003814 <HAL_RTC_Init+0x164>)
 80036d6:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a4f      	ldr	r2, [pc, #316]	; (8003818 <HAL_RTC_Init+0x168>)
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4e      	ldr	r2, [pc, #312]	; (800381c <HAL_RTC_Init+0x16c>)
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a4e      	ldr	r2, [pc, #312]	; (8003820 <HAL_RTC_Init+0x170>)
 80036e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a4d      	ldr	r2, [pc, #308]	; (8003824 <HAL_RTC_Init+0x174>)
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a4d      	ldr	r2, [pc, #308]	; (8003828 <HAL_RTC_Init+0x178>)
 80036f4:	635a      	str	r2, [r3, #52]	; 0x34

    if(hrtc->MspInitCallback == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <HAL_RTC_Init+0x54>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a4a      	ldr	r2, [pc, #296]	; (800382c <HAL_RTC_Init+0x17c>)
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3

    if(hrtc->MspDeInitCallback == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d102      	bne.n	800371a <HAL_RTC_Init+0x6a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a46      	ldr	r2, [pc, #280]	; (8003830 <HAL_RTC_Init+0x180>)
 8003718:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	22ca      	movs	r2, #202	; 0xca
 8003726:	625a      	str	r2, [r3, #36]	; 0x24
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2253      	movs	r2, #83	; 0x53
 800372e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fcc9 	bl	80040c8 <RTC_EnterInitMode>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RTC_Init+0x9e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	22ff      	movs	r2, #255	; 0xff
 8003742:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2204      	movs	r2, #4
 8003748:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e05e      	b.n	800380c <HAL_RTC_Init+0x15c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800375c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003760:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6899      	ldr	r1, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	68d2      	ldr	r2, [r2, #12]
 8003788:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6919      	ldr	r1, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	041a      	lsls	r2, r3, #16
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10e      	bne.n	80037da <HAL_RTC_Init+0x12a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fc5b 	bl	8004078 <HAL_RTC_WaitForSynchro>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_RTC_Init+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2204      	movs	r2, #4
 80037d4:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e018      	b.n	800380c <HAL_RTC_Init+0x15c>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699a      	ldr	r2, [r3, #24]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	22ff      	movs	r2, #255	; 0xff
 8003802:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800380a:	2300      	movs	r3, #0
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	08000b05 	.word	0x08000b05
 8003818:	0800424d 	.word	0x0800424d
 800381c:	08004199 	.word	0x08004199
 8003820:	080041d5 	.word	0x080041d5
 8003824:	080041ad 	.word	0x080041ad
 8003828:	080041c1 	.word	0x080041c1
 800382c:	08000f15 	.word	0x08000f15
 8003830:	08000f4d 	.word	0x08000f4d

08003834 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	7f1b      	ldrb	r3, [r3, #28]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_RTC_SetTime+0x1c>
 800384c:	2302      	movs	r3, #2
 800384e:	e0aa      	b.n	80039a6 <HAL_RTC_SetTime+0x172>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2202      	movs	r2, #2
 800385a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d126      	bne.n	80038b0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	d102      	bne.n	8003876 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fc50 	bl	8004120 <RTC_ByteToBcd2>
 8003880:	4603      	mov	r3, r0
 8003882:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	785b      	ldrb	r3, [r3, #1]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fc49 	bl	8004120 <RTC_ByteToBcd2>
 800388e:	4603      	mov	r3, r0
 8003890:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003892:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	789b      	ldrb	r3, [r3, #2]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fc41 	bl	8004120 <RTC_ByteToBcd2>
 800389e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80038a0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	78db      	ldrb	r3, [r3, #3]
 80038a8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e018      	b.n	80038e2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2200      	movs	r2, #0
 80038c2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	785b      	ldrb	r3, [r3, #1]
 80038ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80038d0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80038d6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	78db      	ldrb	r3, [r3, #3]
 80038dc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	22ca      	movs	r2, #202	; 0xca
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2253      	movs	r2, #83	; 0x53
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fbe8 	bl	80040c8 <RTC_EnterInitMode>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	22ff      	movs	r2, #255	; 0xff
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2204      	movs	r2, #4
 800390a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e047      	b.n	80039a6 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003920:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003924:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003934:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6899      	ldr	r1, [r3, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	431a      	orrs	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800395c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d111      	bne.n	8003990 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fb83 	bl	8004078 <HAL_RTC_WaitForSynchro>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	22ff      	movs	r2, #255	; 0xff
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2204      	movs	r2, #4
 8003984:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e00a      	b.n	80039a6 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80039a4:	2300      	movs	r3, #0
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd90      	pop	{r4, r7, pc}

080039ae <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80039e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80039e4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d11a      	bne.n	8003a60 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fb94 	bl	800415c <RTC_Bcd2ToByte>
 8003a34:	4603      	mov	r3, r0
 8003a36:	461a      	mov	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	785b      	ldrb	r3, [r3, #1]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fb8b 	bl	800415c <RTC_Bcd2ToByte>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	789b      	ldrb	r3, [r3, #2]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fb82 	bl	800415c <RTC_Bcd2ToByte>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a6a:	b590      	push	{r4, r7, lr}
 8003a6c:	b087      	sub	sp, #28
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	7f1b      	ldrb	r3, [r3, #28]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_RTC_SetDate+0x1c>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e094      	b.n	8003bb0 <HAL_RTC_SetDate+0x146>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10e      	bne.n	8003ab6 <HAL_RTC_SetDate+0x4c>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	785b      	ldrb	r3, [r3, #1]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	785b      	ldrb	r3, [r3, #1]
 8003aa8:	f023 0310 	bic.w	r3, r3, #16
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	330a      	adds	r3, #10
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11c      	bne.n	8003af6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	78db      	ldrb	r3, [r3, #3]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fb2d 	bl	8004120 <RTC_ByteToBcd2>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	785b      	ldrb	r3, [r3, #1]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fb26 	bl	8004120 <RTC_ByteToBcd2>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003ad8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	789b      	ldrb	r3, [r3, #2]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fb1e 	bl	8004120 <RTC_ByteToBcd2>
 8003ae4:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003ae6:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e00e      	b.n	8003b14 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	78db      	ldrb	r3, [r3, #3]
 8003afa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003b02:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003b08:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	22ca      	movs	r2, #202	; 0xca
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2253      	movs	r2, #83	; 0x53
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 facf 	bl	80040c8 <RTC_EnterInitMode>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00b      	beq.n	8003b48 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	22ff      	movs	r2, #255	; 0xff
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e033      	b.n	8003bb0 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b56:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b66:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d111      	bne.n	8003b9a <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fa7e 	bl	8004078 <HAL_RTC_WaitForSynchro>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	22ff      	movs	r2, #255	; 0xff
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e00a      	b.n	8003bb0 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	22ff      	movs	r2, #255	; 0xff
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003bae:	2300      	movs	r3, #0
  }
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd90      	pop	{r4, r7, pc}

08003bb8 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003bd2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	0c1b      	lsrs	r3, r3, #16
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	0b5b      	lsrs	r3, r3, #13
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d11a      	bne.n	8003c4c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	78db      	ldrb	r3, [r3, #3]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fa9e 	bl	800415c <RTC_Bcd2ToByte>
 8003c20:	4603      	mov	r3, r0
 8003c22:	461a      	mov	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	785b      	ldrb	r3, [r3, #1]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fa95 	bl	800415c <RTC_Bcd2ToByte>
 8003c32:	4603      	mov	r3, r0
 8003c34:	461a      	mov	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	789b      	ldrb	r3, [r3, #2]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa8c 	bl	800415c <RTC_Bcd2ToByte>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8003c6c:	4b93      	ldr	r3, [pc, #588]	; (8003ebc <HAL_RTC_SetAlarm_IT+0x264>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a93      	ldr	r2, [pc, #588]	; (8003ec0 <HAL_RTC_SetAlarm_IT+0x268>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	0adb      	lsrs	r3, r3, #11
 8003c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	7f1b      	ldrb	r3, [r3, #28]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_RTC_SetAlarm_IT+0x36>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e111      	b.n	8003eb2 <HAL_RTC_SetAlarm_IT+0x25a>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2202      	movs	r2, #2
 8003c98:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d137      	bne.n	8003d10 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fa31 	bl	8004120 <RTC_ByteToBcd2>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	785b      	ldrb	r3, [r3, #1]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fa2a 	bl	8004120 <RTC_ByteToBcd2>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003cd0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	789b      	ldrb	r3, [r3, #2]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fa22 	bl	8004120 <RTC_ByteToBcd2>
 8003cdc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003cde:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	78db      	ldrb	r3, [r3, #3]
 8003ce6:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003ce8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fa14 	bl	8004120 <RTC_ByteToBcd2>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003cfc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003d04:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	e023      	b.n	8003d58 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2200      	movs	r2, #0
 8003d22:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	785b      	ldrb	r3, [r3, #1]
 8003d2e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003d30:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003d36:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	78db      	ldrb	r3, [r3, #3]
 8003d3c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003d3e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d46:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003d48:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003d4e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	22ca      	movs	r2, #202	; 0xca
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2253      	movs	r2, #83	; 0x53
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7c:	d141      	bne.n	8003e02 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d8c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003d9e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	1e5a      	subs	r2, r3, #1
 8003da4:	617a      	str	r2, [r7, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	22ff      	movs	r2, #255	; 0xff
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2203      	movs	r2, #3
 8003db6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e077      	b.n	8003eb2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0e7      	beq.n	8003da0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dee:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	e040      	b.n	8003e84 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e10:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003e22:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	1e5a      	subs	r2, r3, #1
 8003e28:	617a      	str	r2, [r7, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10b      	bne.n	8003e46 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	22ff      	movs	r2, #255	; 0xff
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2203      	movs	r2, #3
 8003e3a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e035      	b.n	8003eb2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0e7      	beq.n	8003e24 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e72:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e82:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003e84:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0e      	ldr	r2, [pc, #56]	; (8003ec4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4a0b      	ldr	r2, [pc, #44]	; (8003ec4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	22ff      	movs	r2, #255	; 0xff
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd90      	pop	{r4, r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000000 	.word	0x20000000
 8003ec0:	10624dd3 	.word	0x10624dd3
 8003ec4:	40013c00 	.word	0x40013c00

08003ec8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee4:	d10e      	bne.n	8003f04 <HAL_RTC_GetAlarm+0x3c>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	e00d      	b.n	8003f20 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003f1e:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	0c1b      	lsrs	r3, r3, #16
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	0a1b      	lsrs	r3, r3, #8
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	0e1b      	lsrs	r3, r3, #24
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	615a      	str	r2, [r3, #20]

  if(Format == RTC_FORMAT_BIN)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d125      	bne.n	8003fdc <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 f8e1 	bl	800415c <RTC_Bcd2ToByte>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	785b      	ldrb	r3, [r3, #1]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f8d8 	bl	800415c <RTC_Bcd2ToByte>
 8003fac:	4603      	mov	r3, r0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	789b      	ldrb	r3, [r3, #2]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f8cf 	bl	800415c <RTC_Bcd2ToByte>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f8c5 	bl	800415c <RTC_Bcd2ToByte>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d013      	beq.n	8004026 <HAL_RTC_AlarmIRQHandler+0x3e>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00c      	beq.n	8004026 <HAL_RTC_AlarmIRQHandler+0x3e>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	4798      	blx	r3
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	b2da      	uxtb	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004024:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d013      	beq.n	800405c <HAL_RTC_AlarmIRQHandler+0x74>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00c      	beq.n	800405c <HAL_RTC_AlarmIRQHandler+0x74>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f462 7220 	orn	r2, r2, #640	; 0x280
 800405a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RTC_AlarmIRQHandler+0x8c>)
 800405e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004062:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	775a      	strb	r2, [r3, #29]
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40013c00 	.word	0x40013c00

08004078 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004092:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004094:	f7fd f90c 	bl	80012b0 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800409a:	e009      	b.n	80040b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800409c:	f7fd f908 	bl	80012b0 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040aa:	d901      	bls.n	80040b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e007      	b.n	80040c0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ee      	beq.n	800409c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d119      	bne.n	8004116 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040ec:	f7fd f8e0 	bl	80012b0 <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040f2:	e009      	b.n	8004108 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80040f4:	f7fd f8dc 	bl	80012b0 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004102:	d901      	bls.n	8004108 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e007      	b.n	8004118 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ee      	beq.n	80040f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800412e:	e005      	b.n	800413c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	3b0a      	subs	r3, #10
 800413a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	2b09      	cmp	r3, #9
 8004140:	d8f6      	bhi.n	8004130 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	b2da      	uxtb	r2, r3
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	4313      	orrs	r3, r2
 800414e:	b2db      	uxtb	r3, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	b2db      	uxtb	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	b2da      	uxtb	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	4413      	add	r3, r2
 800418a:	b2db      	uxtb	r3, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_TimeStampEventCallback could be implemented in the user file
  */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper1EventCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper2EventCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3350      	adds	r3, #80	; 0x50
 80041fe:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4413      	add	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	601a      	str	r2, [r3, #0]
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3350      	adds	r3, #80	; 0x50
 8004230:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004260:	b084      	sub	sp, #16
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	f107 001c 	add.w	r0, r7, #28
 800426e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2b01      	cmp	r3, #1
 8004276:	d122      	bne.n	80042be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800428c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d105      	bne.n	80042b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f001 fac6 	bl	8005844 <USB_CoreReset>
 80042b8:	4603      	mov	r3, r0
 80042ba:	73fb      	strb	r3, [r7, #15]
 80042bc:	e01a      	b.n	80042f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f001 faba 	bl	8005844 <USB_CoreReset>
 80042d0:	4603      	mov	r3, r0
 80042d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	639a      	str	r2, [r3, #56]	; 0x38
 80042e6:	e005      	b.n	80042f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d10b      	bne.n	8004312 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f043 0206 	orr.w	r2, r3, #6
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f043 0220 	orr.w	r2, r3, #32
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004312:	7bfb      	ldrb	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800431e:	b004      	add	sp, #16
 8004320:	4770      	bx	lr
	...

08004324 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	4613      	mov	r3, r2
 8004330:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d165      	bne.n	8004404 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4a41      	ldr	r2, [pc, #260]	; (8004440 <USB_SetTurnaroundTime+0x11c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d906      	bls.n	800434e <USB_SetTurnaroundTime+0x2a>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4a40      	ldr	r2, [pc, #256]	; (8004444 <USB_SetTurnaroundTime+0x120>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d802      	bhi.n	800434e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004348:	230f      	movs	r3, #15
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e062      	b.n	8004414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4a3c      	ldr	r2, [pc, #240]	; (8004444 <USB_SetTurnaroundTime+0x120>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d906      	bls.n	8004364 <USB_SetTurnaroundTime+0x40>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4a3b      	ldr	r2, [pc, #236]	; (8004448 <USB_SetTurnaroundTime+0x124>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d802      	bhi.n	8004364 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800435e:	230e      	movs	r3, #14
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	e057      	b.n	8004414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4a38      	ldr	r2, [pc, #224]	; (8004448 <USB_SetTurnaroundTime+0x124>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d906      	bls.n	800437a <USB_SetTurnaroundTime+0x56>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4a37      	ldr	r2, [pc, #220]	; (800444c <USB_SetTurnaroundTime+0x128>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d802      	bhi.n	800437a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004374:	230d      	movs	r3, #13
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	e04c      	b.n	8004414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4a33      	ldr	r2, [pc, #204]	; (800444c <USB_SetTurnaroundTime+0x128>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d906      	bls.n	8004390 <USB_SetTurnaroundTime+0x6c>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4a32      	ldr	r2, [pc, #200]	; (8004450 <USB_SetTurnaroundTime+0x12c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d802      	bhi.n	8004390 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800438a:	230c      	movs	r3, #12
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	e041      	b.n	8004414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4a2f      	ldr	r2, [pc, #188]	; (8004450 <USB_SetTurnaroundTime+0x12c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d906      	bls.n	80043a6 <USB_SetTurnaroundTime+0x82>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4a2e      	ldr	r2, [pc, #184]	; (8004454 <USB_SetTurnaroundTime+0x130>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d802      	bhi.n	80043a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043a0:	230b      	movs	r3, #11
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e036      	b.n	8004414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4a2a      	ldr	r2, [pc, #168]	; (8004454 <USB_SetTurnaroundTime+0x130>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d906      	bls.n	80043bc <USB_SetTurnaroundTime+0x98>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4a29      	ldr	r2, [pc, #164]	; (8004458 <USB_SetTurnaroundTime+0x134>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d802      	bhi.n	80043bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043b6:	230a      	movs	r3, #10
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	e02b      	b.n	8004414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4a26      	ldr	r2, [pc, #152]	; (8004458 <USB_SetTurnaroundTime+0x134>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d906      	bls.n	80043d2 <USB_SetTurnaroundTime+0xae>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4a25      	ldr	r2, [pc, #148]	; (800445c <USB_SetTurnaroundTime+0x138>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d802      	bhi.n	80043d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043cc:	2309      	movs	r3, #9
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	e020      	b.n	8004414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4a21      	ldr	r2, [pc, #132]	; (800445c <USB_SetTurnaroundTime+0x138>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d906      	bls.n	80043e8 <USB_SetTurnaroundTime+0xc4>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4a20      	ldr	r2, [pc, #128]	; (8004460 <USB_SetTurnaroundTime+0x13c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d802      	bhi.n	80043e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043e2:	2308      	movs	r3, #8
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	e015      	b.n	8004414 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <USB_SetTurnaroundTime+0x13c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d906      	bls.n	80043fe <USB_SetTurnaroundTime+0xda>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <USB_SetTurnaroundTime+0x140>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d802      	bhi.n	80043fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80043f8:	2307      	movs	r3, #7
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	e00a      	b.n	8004414 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80043fe:	2306      	movs	r3, #6
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e007      	b.n	8004414 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800440a:	2309      	movs	r3, #9
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e001      	b.n	8004414 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004410:	2309      	movs	r3, #9
 8004412:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	029b      	lsls	r3, r3, #10
 8004428:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800442c:	431a      	orrs	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	00d8acbf 	.word	0x00d8acbf
 8004444:	00e4e1bf 	.word	0x00e4e1bf
 8004448:	00f423ff 	.word	0x00f423ff
 800444c:	0106737f 	.word	0x0106737f
 8004450:	011a499f 	.word	0x011a499f
 8004454:	01312cff 	.word	0x01312cff
 8004458:	014ca43f 	.word	0x014ca43f
 800445c:	016e35ff 	.word	0x016e35ff
 8004460:	01a6ab1f 	.word	0x01a6ab1f
 8004464:	01e847ff 	.word	0x01e847ff

08004468 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f043 0201 	orr.w	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f023 0201 	bic.w	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d106      	bne.n	80044d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	e00b      	b.n	80044f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	e001      	b.n	80044f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e003      	b.n	80044f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80044f0:	2032      	movs	r0, #50	; 0x32
 80044f2:	f7fc fee9 	bl	80012c8 <HAL_Delay>

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004500:	b084      	sub	sp, #16
 8004502:	b580      	push	{r7, lr}
 8004504:	b086      	sub	sp, #24
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800450e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	e009      	b.n	8004534 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	3340      	adds	r3, #64	; 0x40
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	2200      	movs	r2, #0
 800452c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	3301      	adds	r3, #1
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b0e      	cmp	r3, #14
 8004538:	d9f2      	bls.n	8004520 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800453a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d11c      	bne.n	800457a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800454e:	f043 0302 	orr.w	r3, r3, #2
 8004552:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	639a      	str	r2, [r3, #56]	; 0x38
 8004578:	e00b      	b.n	8004592 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004598:	461a      	mov	r2, r3
 800459a:	2300      	movs	r3, #0
 800459c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a4:	4619      	mov	r1, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ac:	461a      	mov	r2, r3
 80045ae:	680b      	ldr	r3, [r1, #0]
 80045b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d10c      	bne.n	80045d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d104      	bne.n	80045c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045be:	2100      	movs	r1, #0
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f949 	bl	8004858 <USB_SetDevSpeed>
 80045c6:	e008      	b.n	80045da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045c8:	2101      	movs	r1, #1
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f944 	bl	8004858 <USB_SetDevSpeed>
 80045d0:	e003      	b.n	80045da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045d2:	2103      	movs	r1, #3
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f93f 	bl	8004858 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045da:	2110      	movs	r1, #16
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f8f3 	bl	80047c8 <USB_FlushTxFifo>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f911 	bl	8004814 <USB_FlushRxFifo>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004602:	461a      	mov	r2, r3
 8004604:	2300      	movs	r3, #0
 8004606:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460e:	461a      	mov	r2, r3
 8004610:	2300      	movs	r3, #0
 8004612:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461a:	461a      	mov	r2, r3
 800461c:	2300      	movs	r3, #0
 800461e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004620:	2300      	movs	r3, #0
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	e043      	b.n	80046ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800463c:	d118      	bne.n	8004670 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004650:	461a      	mov	r2, r3
 8004652:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	e013      	b.n	8004682 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	461a      	mov	r2, r3
 8004668:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	e008      	b.n	8004682 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467c:	461a      	mov	r2, r3
 800467e:	2300      	movs	r3, #0
 8004680:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468e:	461a      	mov	r2, r3
 8004690:	2300      	movs	r3, #0
 8004692:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	461a      	mov	r2, r3
 80046a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	3301      	adds	r3, #1
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d3b7      	bcc.n	8004626 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	e043      	b.n	8004744 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046d2:	d118      	bne.n	8004706 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e6:	461a      	mov	r2, r3
 80046e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e013      	b.n	8004718 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	461a      	mov	r2, r3
 80046fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	e008      	b.n	8004718 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	461a      	mov	r2, r3
 8004714:	2300      	movs	r3, #0
 8004716:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	461a      	mov	r2, r3
 8004726:	2300      	movs	r3, #0
 8004728:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	461a      	mov	r2, r3
 8004738:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800473c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	3301      	adds	r3, #1
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	429a      	cmp	r2, r3
 800474a:	d3b7      	bcc.n	80046bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800475a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800475e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800476c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f043 0210 	orr.w	r2, r3, #16
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <USB_DevInit+0x2c4>)
 8004786:	4313      	orrs	r3, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800478c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f043 0208 	orr.w	r2, r3, #8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800479e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d107      	bne.n	80047b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047ac:	f043 0304 	orr.w	r3, r3, #4
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047c0:	b004      	add	sp, #16
 80047c2:	4770      	bx	lr
 80047c4:	803c3800 	.word	0x803c3800

080047c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	019b      	lsls	r3, r3, #6
 80047da:	f043 0220 	orr.w	r2, r3, #32
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4a09      	ldr	r2, [pc, #36]	; (8004810 <USB_FlushTxFifo+0x48>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e006      	b.n	8004802 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d0f0      	beq.n	80047e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	00030d40 	.word	0x00030d40

08004814 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2210      	movs	r2, #16
 8004824:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4a09      	ldr	r2, [pc, #36]	; (8004854 <USB_FlushRxFifo+0x40>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e006      	b.n	8004846 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b10      	cmp	r3, #16
 8004842:	d0f0      	beq.n	8004826 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	00030d40 	.word	0x00030d40

08004858 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	68f9      	ldr	r1, [r7, #12]
 8004874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800488a:	b480      	push	{r7}
 800488c:	b087      	sub	sp, #28
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 0306 	and.w	r3, r3, #6
 80048a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d102      	bne.n	80048b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]
 80048ae:	e00a      	b.n	80048c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d002      	beq.n	80048bc <USB_GetDevSpeed+0x32>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b06      	cmp	r3, #6
 80048ba:	d102      	bne.n	80048c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80048bc:	2302      	movs	r3, #2
 80048be:	75fb      	strb	r3, [r7, #23]
 80048c0:	e001      	b.n	80048c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048c2:	230f      	movs	r3, #15
 80048c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d13a      	bne.n	8004966 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	2101      	movs	r1, #1
 8004902:	fa01 f303 	lsl.w	r3, r1, r3
 8004906:	b29b      	uxth	r3, r3
 8004908:	68f9      	ldr	r1, [r7, #12]
 800490a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800490e:	4313      	orrs	r3, r2
 8004910:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d155      	bne.n	80049d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	78db      	ldrb	r3, [r3, #3]
 8004942:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004944:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	059b      	lsls	r3, r3, #22
 800494a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800494c:	4313      	orrs	r3, r2
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	e036      	b.n	80049d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	2101      	movs	r1, #1
 8004978:	fa01 f303 	lsl.w	r3, r1, r3
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004984:	4313      	orrs	r3, r2
 8004986:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d11a      	bne.n	80049d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	78db      	ldrb	r3, [r3, #3]
 80049b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049ba:	430b      	orrs	r3, r1
 80049bc:	4313      	orrs	r3, r2
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d161      	bne.n	8004ac4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a16:	d11f      	bne.n	8004a58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	68f9      	ldr	r1, [r7, #12]
 8004a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a78:	4013      	ands	r3, r2
 8004a7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	0159      	lsls	r1, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	440b      	add	r3, r1
 8004ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aba:	4619      	mov	r1, r3
 8004abc:	4b35      	ldr	r3, [pc, #212]	; (8004b94 <USB_DeactivateEndpoint+0x1b0>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]
 8004ac2:	e060      	b.n	8004b86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ada:	d11f      	bne.n	8004b1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004afa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	43db      	mvns	r3, r3
 8004b36:	68f9      	ldr	r1, [r7, #12]
 8004b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	2101      	movs	r1, #1
 8004b52:	fa01 f303 	lsl.w	r3, r1, r3
 8004b56:	041b      	lsls	r3, r3, #16
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b60:	4013      	ands	r3, r2
 8004b62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	0159      	lsls	r1, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	440b      	add	r3, r1
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <USB_DeactivateEndpoint+0x1b4>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	ec337800 	.word	0xec337800
 8004b98:	eff37800 	.word	0xeff37800

08004b9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08a      	sub	sp, #40	; 0x28
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	f040 815c 	bne.w	8004e76 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d132      	bne.n	8004c2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004be8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c24:	0cdb      	lsrs	r3, r3, #19
 8004c26:	04db      	lsls	r3, r3, #19
 8004c28:	6113      	str	r3, [r2, #16]
 8004c2a:	e074      	b.n	8004d16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c46:	0cdb      	lsrs	r3, r3, #19
 8004c48:	04db      	lsls	r3, r3, #19
 8004c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	0151      	lsls	r1, r2, #5
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	440a      	add	r2, r1
 8004c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	6959      	ldr	r1, [r3, #20]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	440b      	add	r3, r1
 8004c88:	1e59      	subs	r1, r3, #1
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c92:	04d9      	lsls	r1, r3, #19
 8004c94:	4b9d      	ldr	r3, [pc, #628]	; (8004f0c <USB_EPStartXfer+0x370>)
 8004c96:	400b      	ands	r3, r1
 8004c98:	69b9      	ldr	r1, [r7, #24]
 8004c9a:	0148      	lsls	r0, r1, #5
 8004c9c:	69f9      	ldr	r1, [r7, #28]
 8004c9e:	4401      	add	r1, r0
 8004ca0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cbe:	69b9      	ldr	r1, [r7, #24]
 8004cc0:	0148      	lsls	r0, r1, #5
 8004cc2:	69f9      	ldr	r1, [r7, #28]
 8004cc4:	4401      	add	r1, r0
 8004cc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	78db      	ldrb	r3, [r3, #3]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d11f      	bne.n	8004d16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004cf4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d14b      	bne.n	8004db4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d009      	beq.n	8004d38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d30:	461a      	mov	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	78db      	ldrb	r3, [r3, #3]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d128      	bne.n	8004d92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d110      	bne.n	8004d72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	e00f      	b.n	8004d92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e12f      	b.n	8005014 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dd2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	78db      	ldrb	r3, [r3, #3]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d015      	beq.n	8004e08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 8117 	beq.w	8005014 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	2101      	movs	r1, #1
 8004df8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfc:	69f9      	ldr	r1, [r7, #28]
 8004dfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e02:	4313      	orrs	r3, r2
 8004e04:	634b      	str	r3, [r1, #52]	; 0x34
 8004e06:	e105      	b.n	8005014 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d110      	bne.n	8004e3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	e00f      	b.n	8004e5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	68d9      	ldr	r1, [r3, #12]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	781a      	ldrb	r2, [r3, #0]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	b298      	uxth	r0, r3
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 fa2b 	bl	80052ca <USB_WritePacket>
 8004e74:	e0ce      	b.n	8005014 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e90:	0cdb      	lsrs	r3, r3, #19
 8004e92:	04db      	lsls	r3, r3, #19
 8004e94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d126      	bne.n	8004f10 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed8:	69b9      	ldr	r1, [r7, #24]
 8004eda:	0148      	lsls	r0, r1, #5
 8004edc:	69f9      	ldr	r1, [r7, #28]
 8004ede:	4401      	add	r1, r0
 8004ee0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	0151      	lsls	r1, r2, #5
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	440a      	add	r2, r1
 8004efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f06:	6113      	str	r3, [r2, #16]
 8004f08:	e036      	b.n	8004f78 <USB_EPStartXfer+0x3dc>
 8004f0a:	bf00      	nop
 8004f0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4413      	add	r3, r2
 8004f1a:	1e5a      	subs	r2, r3, #1
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	8afb      	ldrh	r3, [r7, #22]
 8004f36:	04d9      	lsls	r1, r3, #19
 8004f38:	4b39      	ldr	r3, [pc, #228]	; (8005020 <USB_EPStartXfer+0x484>)
 8004f3a:	400b      	ands	r3, r1
 8004f3c:	69b9      	ldr	r1, [r7, #24]
 8004f3e:	0148      	lsls	r0, r1, #5
 8004f40:	69f9      	ldr	r1, [r7, #28]
 8004f42:	4401      	add	r1, r0
 8004f44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	8af9      	ldrh	r1, [r7, #22]
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f68:	69b9      	ldr	r1, [r7, #24]
 8004f6a:	0148      	lsls	r0, r1, #5
 8004f6c:	69f9      	ldr	r1, [r7, #28]
 8004f6e:	4401      	add	r1, r0
 8004f70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f74:	4313      	orrs	r3, r2
 8004f76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d10d      	bne.n	8004f9a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	68d9      	ldr	r1, [r3, #12]
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	460a      	mov	r2, r1
 8004f98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	78db      	ldrb	r3, [r3, #3]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d128      	bne.n	8004ff4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d110      	bne.n	8004fd4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	0151      	lsls	r1, r2, #5
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	440a      	add	r2, r1
 8004fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e00f      	b.n	8004ff4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	0151      	lsls	r1, r2, #5
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	440a      	add	r2, r1
 8004fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005012:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	1ff80000 	.word	0x1ff80000

08005024 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	4613      	mov	r3, r2
 8005030:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	785b      	ldrb	r3, [r3, #1]
 8005040:	2b01      	cmp	r3, #1
 8005042:	f040 80cd 	bne.w	80051e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d132      	bne.n	80050b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	0151      	lsls	r1, r2, #5
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	440a      	add	r2, r1
 8005064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005068:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800506c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	440a      	add	r2, r1
 8005088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005090:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ac:	0cdb      	lsrs	r3, r3, #19
 80050ae:	04db      	lsls	r3, r3, #19
 80050b0:	6113      	str	r3, [r2, #16]
 80050b2:	e04e      	b.n	8005152 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ce:	0cdb      	lsrs	r3, r3, #19
 80050d0:	04db      	lsls	r3, r3, #19
 80050d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	429a      	cmp	r2, r3
 8005102:	d903      	bls.n	800510c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	0151      	lsls	r1, r2, #5
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	440a      	add	r2, r1
 8005122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800512a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005142:	6939      	ldr	r1, [r7, #16]
 8005144:	0148      	lsls	r0, r1, #5
 8005146:	6979      	ldr	r1, [r7, #20]
 8005148:	4401      	add	r1, r0
 800514a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800514e:	4313      	orrs	r3, r2
 8005150:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d11e      	bne.n	8005196 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d009      	beq.n	8005174 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516c:	461a      	mov	r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	0151      	lsls	r1, r2, #5
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	440a      	add	r2, r1
 800518a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	e092      	b.n	80052bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d07e      	beq.n	80052bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	2101      	movs	r1, #1
 80051d0:	fa01 f303 	lsl.w	r3, r1, r3
 80051d4:	6979      	ldr	r1, [r7, #20]
 80051d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051da:	4313      	orrs	r3, r2
 80051dc:	634b      	str	r3, [r1, #52]	; 0x34
 80051de:	e06d      	b.n	80052bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fa:	0cdb      	lsrs	r3, r3, #19
 80051fc:	04db      	lsls	r3, r3, #19
 80051fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800521a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800521e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005222:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005252:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526a:	6939      	ldr	r1, [r7, #16]
 800526c:	0148      	lsls	r0, r1, #5
 800526e:	6979      	ldr	r1, [r7, #20]
 8005270:	4401      	add	r1, r0
 8005272:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005276:	4313      	orrs	r3, r2
 8005278:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d10d      	bne.n	800529c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	68d9      	ldr	r1, [r3, #12]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005298:	460a      	mov	r2, r1
 800529a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b089      	sub	sp, #36	; 0x24
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	4611      	mov	r1, r2
 80052d6:	461a      	mov	r2, r3
 80052d8:	460b      	mov	r3, r1
 80052da:	71fb      	strb	r3, [r7, #7]
 80052dc:	4613      	mov	r3, r2
 80052de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80052e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d11a      	bne.n	8005326 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052f0:	88bb      	ldrh	r3, [r7, #4]
 80052f2:	3303      	adds	r3, #3
 80052f4:	089b      	lsrs	r3, r3, #2
 80052f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052f8:	2300      	movs	r3, #0
 80052fa:	61bb      	str	r3, [r7, #24]
 80052fc:	e00f      	b.n	800531e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	031a      	lsls	r2, r3, #12
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4413      	add	r3, r2
 8005306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530a:	461a      	mov	r2, r3
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	3304      	adds	r3, #4
 8005316:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	3301      	adds	r3, #1
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	429a      	cmp	r2, r3
 8005324:	d3eb      	bcc.n	80052fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3724      	adds	r7, #36	; 0x24
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005334:	b480      	push	{r7}
 8005336:	b089      	sub	sp, #36	; 0x24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	4613      	mov	r3, r2
 8005340:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	3303      	adds	r3, #3
 800534e:	089b      	lsrs	r3, r3, #2
 8005350:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005352:	2300      	movs	r3, #0
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	e00b      	b.n	8005370 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	601a      	str	r2, [r3, #0]
    pDest++;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	3304      	adds	r3, #4
 8005368:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	3301      	adds	r3, #1
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	429a      	cmp	r2, r3
 8005376:	d3ef      	bcc.n	8005358 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005378:	69fb      	ldr	r3, [r7, #28]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3724      	adds	r7, #36	; 0x24
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	785b      	ldrb	r3, [r3, #1]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d12c      	bne.n	80053fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db12      	blt.n	80053da <USB_EPSetStall+0x54>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00f      	beq.n	80053da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	0151      	lsls	r1, r2, #5
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	440a      	add	r2, r1
 80053f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	e02b      	b.n	8005454 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	db12      	blt.n	8005434 <USB_EPSetStall+0xae>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00f      	beq.n	8005434 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	0151      	lsls	r1, r2, #5
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	440a      	add	r2, r1
 800542a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005432:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005452:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d128      	bne.n	80054d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	440a      	add	r2, r1
 8005494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005498:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800549c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	78db      	ldrb	r3, [r3, #3]
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d003      	beq.n	80054ae <USB_EPClearStall+0x4c>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	78db      	ldrb	r3, [r3, #3]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d138      	bne.n	8005520 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e027      	b.n	8005520 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	78db      	ldrb	r3, [r3, #3]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d003      	beq.n	8005500 <USB_EPClearStall+0x9e>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	78db      	ldrb	r3, [r3, #3]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d10f      	bne.n	8005520 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	440a      	add	r2, r1
 8005516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800552e:	b480      	push	{r7}
 8005530:	b085      	sub	sp, #20
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	460b      	mov	r3, r1
 8005538:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800554c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005550:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	78fb      	ldrb	r3, [r7, #3]
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005562:	68f9      	ldr	r1, [r7, #12]
 8005564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005568:	4313      	orrs	r3, r2
 800556a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800557a:	b480      	push	{r7}
 800557c:	b085      	sub	sp, #20
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005594:	f023 0303 	bic.w	r3, r3, #3
 8005598:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055a8:	f023 0302 	bic.w	r3, r3, #2
 80055ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ea:	f043 0302 	orr.w	r3, r3, #2
 80055ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4013      	ands	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005616:	68fb      	ldr	r3, [r7, #12]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	0c1b      	lsrs	r3, r3, #16
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	4013      	ands	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	b29b      	uxth	r3, r3
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	4013      	ands	r3, r2
 80056b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056ba:	68bb      	ldr	r3, [r7, #8]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
 80056f8:	01db      	lsls	r3, r3, #7
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4013      	ands	r3, r2
 8005714:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005716:	68bb      	ldr	r3, [r7, #8]
}
 8005718:	4618      	mov	r0, r3
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0301 	and.w	r3, r3, #1
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800575e:	f023 0307 	bic.w	r3, r3, #7
 8005762:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005776:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
	...

08005788 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	460b      	mov	r3, r1
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	333c      	adds	r3, #60	; 0x3c
 800579e:	3304      	adds	r3, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4a26      	ldr	r2, [pc, #152]	; (8005840 <USB_EP0_OutStart+0xb8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d90a      	bls.n	80057c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057bc:	d101      	bne.n	80057c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e037      	b.n	8005832 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	461a      	mov	r2, r3
 80057ca:	2300      	movs	r3, #0
 80057cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f0:	f043 0318 	orr.w	r3, r3, #24
 80057f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005804:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005808:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800580a:	7afb      	ldrb	r3, [r7, #11]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d10f      	bne.n	8005830 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005816:	461a      	mov	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800582a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800582e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	4f54300a 	.word	0x4f54300a

08005844 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3301      	adds	r3, #1
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <USB_CoreReset+0x64>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e01b      	b.n	800589a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	daf2      	bge.n	8005850 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f043 0201 	orr.w	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3301      	adds	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <USB_CoreReset+0x64>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d901      	bls.n	800588c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e006      	b.n	800589a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b01      	cmp	r3, #1
 8005896:	d0f0      	beq.n	800587a <USB_CoreReset+0x36>

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	00030d40 	.word	0x00030d40

080058ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	460b      	mov	r3, r1
 80058b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80058bc:	f002 f8d6 	bl	8007a6c <malloc>
 80058c0:	4603      	mov	r3, r0
 80058c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d105      	bne.n	80058d6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80058d2:	2302      	movs	r3, #2
 80058d4:	e066      	b.n	80059a4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	7c1b      	ldrb	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d119      	bne.n	800591a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80058e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058ea:	2202      	movs	r2, #2
 80058ec:	2181      	movs	r1, #129	; 0x81
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 ff43 	bl	800777a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058fe:	2202      	movs	r2, #2
 8005900:	2101      	movs	r1, #1
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 ff39 	bl	800777a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2210      	movs	r2, #16
 8005914:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005918:	e016      	b.n	8005948 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800591a:	2340      	movs	r3, #64	; 0x40
 800591c:	2202      	movs	r2, #2
 800591e:	2181      	movs	r1, #129	; 0x81
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 ff2a 	bl	800777a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800592c:	2340      	movs	r3, #64	; 0x40
 800592e:	2202      	movs	r2, #2
 8005930:	2101      	movs	r1, #1
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f001 ff21 	bl	800777a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2210      	movs	r2, #16
 8005944:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005948:	2308      	movs	r3, #8
 800594a:	2203      	movs	r2, #3
 800594c:	2182      	movs	r1, #130	; 0x82
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f001 ff13 	bl	800777a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	7c1b      	ldrb	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005988:	2101      	movs	r1, #1
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f001 ffe4 	bl	8007958 <USBD_LL_PrepareReceive>
 8005990:	e007      	b.n	80059a2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005998:	2340      	movs	r3, #64	; 0x40
 800599a:	2101      	movs	r1, #1
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f001 ffdb 	bl	8007958 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80059bc:	2181      	movs	r1, #129	; 0x81
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 ff01 	bl	80077c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80059ca:	2101      	movs	r1, #1
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fefa 	bl	80077c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80059da:	2182      	movs	r1, #130	; 0x82
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 fef2 	bl	80077c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00e      	beq.n	8005a1a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f002 f835 	bl	8007a7c <free>
    pdev->pClassData = NULL;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a34:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d03a      	beq.n	8005ac4 <USBD_CDC_Setup+0xa0>
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	f040 8097 	bne.w	8005b82 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	88db      	ldrh	r3, [r3, #6]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d029      	beq.n	8005ab0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	b25b      	sxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	da11      	bge.n	8005a8a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005a72:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	88d2      	ldrh	r2, [r2, #6]
 8005a78:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005a7a:	6939      	ldr	r1, [r7, #16]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	88db      	ldrh	r3, [r3, #6]
 8005a80:	461a      	mov	r2, r3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f001 fa6d 	bl	8006f62 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005a88:	e082      	b.n	8005b90 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	785a      	ldrb	r2, [r3, #1]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	88db      	ldrh	r3, [r3, #6]
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005aa0:	6939      	ldr	r1, [r7, #16]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	88db      	ldrh	r3, [r3, #6]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 fa86 	bl	8006fba <USBD_CtlPrepareRx>
    break;
 8005aae:	e06f      	b.n	8005b90 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	7850      	ldrb	r0, [r2, #1]
 8005abc:	2200      	movs	r2, #0
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	4798      	blx	r3
    break;
 8005ac2:	e065      	b.n	8005b90 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	2b0b      	cmp	r3, #11
 8005aca:	d84f      	bhi.n	8005b6c <USBD_CDC_Setup+0x148>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <USBD_CDC_Setup+0xb0>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005b05 	.word	0x08005b05
 8005ad8:	08005b7b 	.word	0x08005b7b
 8005adc:	08005b6d 	.word	0x08005b6d
 8005ae0:	08005b6d 	.word	0x08005b6d
 8005ae4:	08005b6d 	.word	0x08005b6d
 8005ae8:	08005b6d 	.word	0x08005b6d
 8005aec:	08005b6d 	.word	0x08005b6d
 8005af0:	08005b6d 	.word	0x08005b6d
 8005af4:	08005b6d 	.word	0x08005b6d
 8005af8:	08005b6d 	.word	0x08005b6d
 8005afc:	08005b2d 	.word	0x08005b2d
 8005b00:	08005b55 	.word	0x08005b55
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d107      	bne.n	8005b1e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b0e:	f107 030c 	add.w	r3, r7, #12
 8005b12:	2202      	movs	r2, #2
 8005b14:	4619      	mov	r1, r3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f001 fa23 	bl	8006f62 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005b1c:	e030      	b.n	8005b80 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 f9ad 	bl	8006e80 <USBD_CtlError>
        ret = USBD_FAIL;
 8005b26:	2303      	movs	r3, #3
 8005b28:	75fb      	strb	r3, [r7, #23]
      break;
 8005b2a:	e029      	b.n	8005b80 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d107      	bne.n	8005b46 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b36:	f107 030f 	add.w	r3, r7, #15
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f001 fa0f 	bl	8006f62 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005b44:	e01c      	b.n	8005b80 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f001 f999 	bl	8006e80 <USBD_CtlError>
        ret = USBD_FAIL;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	75fb      	strb	r3, [r7, #23]
      break;
 8005b52:	e015      	b.n	8005b80 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d00f      	beq.n	8005b7e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005b5e:	6839      	ldr	r1, [r7, #0]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f001 f98d 	bl	8006e80 <USBD_CtlError>
        ret = USBD_FAIL;
 8005b66:	2303      	movs	r3, #3
 8005b68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005b6a:	e008      	b.n	8005b7e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f001 f986 	bl	8006e80 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b74:	2303      	movs	r3, #3
 8005b76:	75fb      	strb	r3, [r7, #23]
      break;
 8005b78:	e002      	b.n	8005b80 <USBD_CDC_Setup+0x15c>
      break;
 8005b7a:	bf00      	nop
 8005b7c:	e008      	b.n	8005b90 <USBD_CDC_Setup+0x16c>
      break;
 8005b7e:	bf00      	nop
    }
    break;
 8005b80:	e006      	b.n	8005b90 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 f97b 	bl	8006e80 <USBD_CtlError>
    ret = USBD_FAIL;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	75fb      	strb	r3, [r7, #23]
    break;
 8005b8e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop

08005b9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005bae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e049      	b.n	8005c52 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005bc6:	78fa      	ldrb	r2, [r7, #3]
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	3318      	adds	r3, #24
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d029      	beq.n	8005c30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005bdc:	78fa      	ldrb	r2, [r7, #3]
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	3318      	adds	r3, #24
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	78f9      	ldrb	r1, [r7, #3]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	1a5b      	subs	r3, r3, r1
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4403      	add	r3, r0
 8005bfc:	3344      	adds	r3, #68	; 0x44
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c04:	fb03 f301 	mul.w	r3, r3, r1
 8005c08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d110      	bne.n	8005c30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005c0e:	78fa      	ldrb	r2, [r7, #3]
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3318      	adds	r3, #24
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c22:	78f9      	ldrb	r1, [r7, #3]
 8005c24:	2300      	movs	r3, #0
 8005c26:	2200      	movs	r2, #0
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 fe74 	bl	8007916 <USBD_LL_Transmit>
 8005c2e:	e00f      	b.n	8005c50 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005c4c:	78fa      	ldrb	r2, [r7, #3]
 8005c4e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e015      	b.n	8005ca8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 fe8a 	bl	800799a <USBD_LL_GetRxDataSize>
 8005c86:	4602      	mov	r2, r0
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cbe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d015      	beq.n	8005cf6 <USBD_CDC_EP0_RxReady+0x46>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005cd0:	2bff      	cmp	r3, #255	; 0xff
 8005cd2:	d010      	beq.n	8005cf6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005ce2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005cea:	b292      	uxth	r2, r2
 8005cec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	22ff      	movs	r2, #255	; 0xff
 8005cf2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2243      	movs	r2, #67	; 0x43
 8005d0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005d0e:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	20000094 	.word	0x20000094

08005d20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2243      	movs	r2, #67	; 0x43
 8005d2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005d2e:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	20000050 	.word	0x20000050

08005d40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2243      	movs	r2, #67	; 0x43
 8005d4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005d4e:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	200000d8 	.word	0x200000d8

08005d60 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	220a      	movs	r2, #10
 8005d6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005d6e:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	2000000c 	.word	0x2000000c

08005d80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e004      	b.n	8005d9e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b087      	sub	sp, #28
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dbc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dec:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e016      	b.n	8005e50 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	7c1b      	ldrb	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e34:	2101      	movs	r1, #1
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 fd8e 	bl	8007958 <USBD_LL_PrepareReceive>
 8005e3c:	e007      	b.n	8005e4e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e44:	2340      	movs	r3, #64	; 0x40
 8005e46:	2101      	movs	r1, #1
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f001 fd85 	bl	8007958 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e025      	b.n	8005ebc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	79fa      	ldrb	r2, [r7, #7]
 8005eae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f001 fbfb 	bl	80076ac <USBD_LL_Init>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e010      	b.n	8005efe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	f107 020e 	add.w	r2, r7, #14
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	4798      	blx	r3
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f001 fc18 	bl	8007744 <USBD_LL_Start>
 8005f14:	4603      	mov	r3, r0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005f40:	2303      	movs	r3, #3
 8005f42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	78fa      	ldrb	r2, [r7, #3]
 8005f58:	4611      	mov	r1, r2
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	78fa      	ldrb	r2, [r7, #3]
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	4798      	blx	r3
  }

  return USBD_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 ff2c 	bl	8006e0c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fd0:	f003 031f 	and.w	r3, r3, #31
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d00e      	beq.n	8005ff6 <USBD_LL_SetupStage+0x5a>
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d302      	bcc.n	8005fe2 <USBD_LL_SetupStage+0x46>
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d014      	beq.n	800600a <USBD_LL_SetupStage+0x6e>
 8005fe0:	e01d      	b.n	800601e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fe8:	4619      	mov	r1, r3
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fa18 	bl	8006420 <USBD_StdDevReq>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff4:	e020      	b.n	8006038 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa7c 	bl	80064fc <USBD_StdItfReq>
 8006004:	4603      	mov	r3, r0
 8006006:	73fb      	strb	r3, [r7, #15]
      break;
 8006008:	e016      	b.n	8006038 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fab8 	bl	8006588 <USBD_StdEPReq>
 8006018:	4603      	mov	r3, r0
 800601a:	73fb      	strb	r3, [r7, #15]
      break;
 800601c:	e00c      	b.n	8006038 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006024:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006028:	b2db      	uxtb	r3, r3
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 fbe9 	bl	8007804 <USBD_LL_StallEP>
 8006032:	4603      	mov	r3, r0
 8006034:	73fb      	strb	r3, [r7, #15]
      break;
 8006036:	bf00      	nop
  }

  return ret;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	460b      	mov	r3, r1
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006050:	7afb      	ldrb	r3, [r7, #11]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d137      	bne.n	80060c6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800605c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006064:	2b03      	cmp	r3, #3
 8006066:	d14a      	bne.n	80060fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	429a      	cmp	r2, r3
 8006072:	d913      	bls.n	800609c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	1ad2      	subs	r2, r2, r3
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	4293      	cmp	r3, r2
 800608c:	bf28      	it	cs
 800608e:	4613      	movcs	r3, r2
 8006090:	461a      	mov	r2, r3
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 ffad 	bl	8006ff4 <USBD_CtlContinueRx>
 800609a:	e030      	b.n	80060fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d105      	bne.n	80060be <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 ffa9 	bl	8007016 <USBD_CtlSendStatus>
 80060c4:	e01b      	b.n	80060fe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d013      	beq.n	80060fa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d10e      	bne.n	80060fa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	7afa      	ldrb	r2, [r7, #11]
 80060e6:	4611      	mov	r1, r2
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	4798      	blx	r3
 80060ec:	4603      	mov	r3, r0
 80060ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	e002      	b.n	8006100 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e000      	b.n	8006100 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	460b      	mov	r3, r1
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006116:	7afb      	ldrb	r3, [r7, #11]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d16a      	bne.n	80061f2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3314      	adds	r3, #20
 8006120:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006128:	2b02      	cmp	r3, #2
 800612a:	d155      	bne.n	80061d8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	429a      	cmp	r2, r3
 8006136:	d914      	bls.n	8006162 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	1ad2      	subs	r2, r2, r3
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	461a      	mov	r2, r3
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 ff22 	bl	8006f98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006154:	2300      	movs	r3, #0
 8006156:	2200      	movs	r2, #0
 8006158:	2100      	movs	r1, #0
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f001 fbfc 	bl	8007958 <USBD_LL_PrepareReceive>
 8006160:	e03a      	b.n	80061d8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	d11c      	bne.n	80061a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006176:	429a      	cmp	r2, r3
 8006178:	d316      	bcc.n	80061a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006184:	429a      	cmp	r2, r3
 8006186:	d20f      	bcs.n	80061a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006188:	2200      	movs	r2, #0
 800618a:	2100      	movs	r1, #0
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 ff03 	bl	8006f98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800619a:	2300      	movs	r3, #0
 800619c:	2200      	movs	r2, #0
 800619e:	2100      	movs	r1, #0
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f001 fbd9 	bl	8007958 <USBD_LL_PrepareReceive>
 80061a6:	e017      	b.n	80061d8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d105      	bne.n	80061ca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80061ca:	2180      	movs	r1, #128	; 0x80
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f001 fb19 	bl	8007804 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 ff32 	bl	800703c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d123      	bne.n	800622a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7ff fe9b 	bl	8005f1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80061f0:	e01b      	b.n	800622a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d013      	beq.n	8006226 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006204:	2b03      	cmp	r3, #3
 8006206:	d10e      	bne.n	8006226 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	7afa      	ldrb	r2, [r7, #11]
 8006212:	4611      	mov	r1, r2
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	4798      	blx	r3
 8006218:	4603      	mov	r3, r0
 800621a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006222:	7dfb      	ldrb	r3, [r7, #23]
 8006224:	e002      	b.n	800622c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006226:	2303      	movs	r3, #3
 8006228:	e000      	b.n	800622c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006260:	2b00      	cmp	r3, #0
 8006262:	d009      	beq.n	8006278 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6852      	ldr	r2, [r2, #4]
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	4611      	mov	r1, r2
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006278:	2340      	movs	r3, #64	; 0x40
 800627a:	2200      	movs	r2, #0
 800627c:	2100      	movs	r1, #0
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 fa7b 	bl	800777a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2240      	movs	r2, #64	; 0x40
 8006290:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006294:	2340      	movs	r3, #64	; 0x40
 8006296:	2200      	movs	r2, #0
 8006298:	2180      	movs	r1, #128	; 0x80
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fa6d 	bl	800777a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2240      	movs	r2, #64	; 0x40
 80062aa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	460b      	mov	r3, r1
 80062c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	78fa      	ldrb	r2, [r7, #3]
 80062c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2204      	movs	r2, #4
 80062ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630e:	2b04      	cmp	r3, #4
 8006310:	d105      	bne.n	800631e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633a:	2b03      	cmp	r3, #3
 800633c:	d10b      	bne.n	8006356 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d009      	beq.n	80063d8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6852      	ldr	r2, [r2, #4]
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	4611      	mov	r1, r2
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
  }

  return USBD_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b087      	sub	sp, #28
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	3301      	adds	r3, #1
 80063f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006400:	8a3b      	ldrh	r3, [r7, #16]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	b21a      	sxth	r2, r3
 8006406:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800640a:	4313      	orrs	r3, r2
 800640c:	b21b      	sxth	r3, r3
 800640e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006410:	89fb      	ldrh	r3, [r7, #14]
}
 8006412:	4618      	mov	r0, r3
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006436:	2b20      	cmp	r3, #32
 8006438:	d004      	beq.n	8006444 <USBD_StdDevReq+0x24>
 800643a:	2b40      	cmp	r3, #64	; 0x40
 800643c:	d002      	beq.n	8006444 <USBD_StdDevReq+0x24>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <USBD_StdDevReq+0x38>
 8006442:	e050      	b.n	80064e6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	4798      	blx	r3
 8006452:	4603      	mov	r3, r0
 8006454:	73fb      	strb	r3, [r7, #15]
    break;
 8006456:	e04b      	b.n	80064f0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	785b      	ldrb	r3, [r3, #1]
 800645c:	2b09      	cmp	r3, #9
 800645e:	d83c      	bhi.n	80064da <USBD_StdDevReq+0xba>
 8006460:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <USBD_StdDevReq+0x48>)
 8006462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006466:	bf00      	nop
 8006468:	080064bd 	.word	0x080064bd
 800646c:	080064d1 	.word	0x080064d1
 8006470:	080064db 	.word	0x080064db
 8006474:	080064c7 	.word	0x080064c7
 8006478:	080064db 	.word	0x080064db
 800647c:	0800649b 	.word	0x0800649b
 8006480:	08006491 	.word	0x08006491
 8006484:	080064db 	.word	0x080064db
 8006488:	080064b3 	.word	0x080064b3
 800648c:	080064a5 	.word	0x080064a5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f9ce 	bl	8006834 <USBD_GetDescriptor>
      break;
 8006498:	e024      	b.n	80064e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fb33 	bl	8006b08 <USBD_SetAddress>
      break;
 80064a2:	e01f      	b.n	80064e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fb70 	bl	8006b8c <USBD_SetConfig>
 80064ac:	4603      	mov	r3, r0
 80064ae:	73fb      	strb	r3, [r7, #15]
      break;
 80064b0:	e018      	b.n	80064e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fc0d 	bl	8006cd4 <USBD_GetConfig>
      break;
 80064ba:	e013      	b.n	80064e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fc3c 	bl	8006d3c <USBD_GetStatus>
      break;
 80064c4:	e00e      	b.n	80064e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fc6a 	bl	8006da2 <USBD_SetFeature>
      break;
 80064ce:	e009      	b.n	80064e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fc79 	bl	8006dca <USBD_ClrFeature>
      break;
 80064d8:	e004      	b.n	80064e4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fccf 	bl	8006e80 <USBD_CtlError>
      break;
 80064e2:	bf00      	nop
    }
    break;
 80064e4:	e004      	b.n	80064f0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fcc9 	bl	8006e80 <USBD_CtlError>
    break;
 80064ee:	bf00      	nop
  }

  return ret;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop

080064fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006512:	2b20      	cmp	r3, #32
 8006514:	d003      	beq.n	800651e <USBD_StdItfReq+0x22>
 8006516:	2b40      	cmp	r3, #64	; 0x40
 8006518:	d001      	beq.n	800651e <USBD_StdItfReq+0x22>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d12a      	bne.n	8006574 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006524:	3b01      	subs	r3, #1
 8006526:	2b02      	cmp	r3, #2
 8006528:	d81d      	bhi.n	8006566 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	889b      	ldrh	r3, [r3, #4]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b01      	cmp	r3, #1
 8006532:	d813      	bhi.n	800655c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4798      	blx	r3
 8006542:	4603      	mov	r3, r0
 8006544:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	88db      	ldrh	r3, [r3, #6]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d110      	bne.n	8006570 <USBD_StdItfReq+0x74>
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10d      	bne.n	8006570 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fd5e 	bl	8007016 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800655a:	e009      	b.n	8006570 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fc8e 	bl	8006e80 <USBD_CtlError>
      break;
 8006564:	e004      	b.n	8006570 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fc89 	bl	8006e80 <USBD_CtlError>
      break;
 800656e:	e000      	b.n	8006572 <USBD_StdItfReq+0x76>
      break;
 8006570:	bf00      	nop
    }
    break;
 8006572:	e004      	b.n	800657e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fc82 	bl	8006e80 <USBD_CtlError>
    break;
 800657c:	bf00      	nop
  }

  return ret;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	889b      	ldrh	r3, [r3, #4]
 800659a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d004      	beq.n	80065b2 <USBD_StdEPReq+0x2a>
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	d002      	beq.n	80065b2 <USBD_StdEPReq+0x2a>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <USBD_StdEPReq+0x3e>
 80065b0:	e135      	b.n	800681e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	4798      	blx	r3
 80065c0:	4603      	mov	r3, r0
 80065c2:	73fb      	strb	r3, [r7, #15]
    break;
 80065c4:	e130      	b.n	8006828 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d03e      	beq.n	800664c <USBD_StdEPReq+0xc4>
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d002      	beq.n	80065d8 <USBD_StdEPReq+0x50>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d077      	beq.n	80066c6 <USBD_StdEPReq+0x13e>
 80065d6:	e11c      	b.n	8006812 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d002      	beq.n	80065e8 <USBD_StdEPReq+0x60>
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d015      	beq.n	8006612 <USBD_StdEPReq+0x8a>
 80065e6:	e02b      	b.n	8006640 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065e8:	7bbb      	ldrb	r3, [r7, #14]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00c      	beq.n	8006608 <USBD_StdEPReq+0x80>
 80065ee:	7bbb      	ldrb	r3, [r7, #14]
 80065f0:	2b80      	cmp	r3, #128	; 0x80
 80065f2:	d009      	beq.n	8006608 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 f903 	bl	8007804 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065fe:	2180      	movs	r1, #128	; 0x80
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 f8ff 	bl	8007804 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006606:	e020      	b.n	800664a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fc38 	bl	8006e80 <USBD_CtlError>
        break;
 8006610:	e01b      	b.n	800664a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	885b      	ldrh	r3, [r3, #2]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10e      	bne.n	8006638 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <USBD_StdEPReq+0xb0>
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	2b80      	cmp	r3, #128	; 0x80
 8006624:	d008      	beq.n	8006638 <USBD_StdEPReq+0xb0>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	88db      	ldrh	r3, [r3, #6]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 f8e6 	bl	8007804 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fcec 	bl	8007016 <USBD_CtlSendStatus>

        break;
 800663e:	e004      	b.n	800664a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fc1c 	bl	8006e80 <USBD_CtlError>
        break;
 8006648:	bf00      	nop
      }
      break;
 800664a:	e0e7      	b.n	800681c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006652:	2b02      	cmp	r3, #2
 8006654:	d002      	beq.n	800665c <USBD_StdEPReq+0xd4>
 8006656:	2b03      	cmp	r3, #3
 8006658:	d015      	beq.n	8006686 <USBD_StdEPReq+0xfe>
 800665a:	e02d      	b.n	80066b8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00c      	beq.n	800667c <USBD_StdEPReq+0xf4>
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d009      	beq.n	800667c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006668:	7bbb      	ldrb	r3, [r7, #14]
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 f8c9 	bl	8007804 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006672:	2180      	movs	r1, #128	; 0x80
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 f8c5 	bl	8007804 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800667a:	e023      	b.n	80066c4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fbfe 	bl	8006e80 <USBD_CtlError>
        break;
 8006684:	e01e      	b.n	80066c4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	885b      	ldrh	r3, [r3, #2]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d119      	bne.n	80066c2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800668e:	7bbb      	ldrb	r3, [r7, #14]
 8006690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006698:	7bbb      	ldrb	r3, [r7, #14]
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 f8d0 	bl	8007842 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fcb7 	bl	8007016 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
        }
        break;
 80066b6:	e004      	b.n	80066c2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fbe0 	bl	8006e80 <USBD_CtlError>
        break;
 80066c0:	e000      	b.n	80066c4 <USBD_StdEPReq+0x13c>
        break;
 80066c2:	bf00      	nop
      }
      break;
 80066c4:	e0aa      	b.n	800681c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d002      	beq.n	80066d6 <USBD_StdEPReq+0x14e>
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	d032      	beq.n	800673a <USBD_StdEPReq+0x1b2>
 80066d4:	e097      	b.n	8006806 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d007      	beq.n	80066ec <USBD_StdEPReq+0x164>
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	2b80      	cmp	r3, #128	; 0x80
 80066e0:	d004      	beq.n	80066ec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fbcb 	bl	8006e80 <USBD_CtlError>
          break;
 80066ea:	e091      	b.n	8006810 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	da0b      	bge.n	800670c <USBD_StdEPReq+0x184>
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	3310      	adds	r3, #16
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	4413      	add	r3, r2
 8006708:	3304      	adds	r3, #4
 800670a:	e00b      	b.n	8006724 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	4413      	add	r3, r2
 8006722:	3304      	adds	r3, #4
 8006724:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2202      	movs	r2, #2
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fc15 	bl	8006f62 <USBD_CtlSendData>
        break;
 8006738:	e06a      	b.n	8006810 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800673a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800673e:	2b00      	cmp	r3, #0
 8006740:	da11      	bge.n	8006766 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	f003 020f 	and.w	r2, r3, #15
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	3324      	adds	r3, #36	; 0x24
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d117      	bne.n	800678c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fb8e 	bl	8006e80 <USBD_CtlError>
            break;
 8006764:	e054      	b.n	8006810 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006766:	7bbb      	ldrb	r3, [r7, #14]
 8006768:	f003 020f 	and.w	r2, r3, #15
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d104      	bne.n	800678c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fb7b 	bl	8006e80 <USBD_CtlError>
            break;
 800678a:	e041      	b.n	8006810 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800678c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006790:	2b00      	cmp	r3, #0
 8006792:	da0b      	bge.n	80067ac <USBD_StdEPReq+0x224>
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	3310      	adds	r3, #16
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	4413      	add	r3, r2
 80067a8:	3304      	adds	r3, #4
 80067aa:	e00b      	b.n	80067c4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	4413      	add	r3, r2
 80067c2:	3304      	adds	r3, #4
 80067c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <USBD_StdEPReq+0x24a>
 80067cc:	7bbb      	ldrb	r3, [r7, #14]
 80067ce:	2b80      	cmp	r3, #128	; 0x80
 80067d0:	d103      	bne.n	80067da <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	e00e      	b.n	80067f8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067da:	7bbb      	ldrb	r3, [r7, #14]
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 f84e 	bl	8007880 <USBD_LL_IsStallEP>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2201      	movs	r2, #1
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	e002      	b.n	80067f8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2202      	movs	r2, #2
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fbaf 	bl	8006f62 <USBD_CtlSendData>
          break;
 8006804:	e004      	b.n	8006810 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fb39 	bl	8006e80 <USBD_CtlError>
        break;
 800680e:	bf00      	nop
      }
      break;
 8006810:	e004      	b.n	800681c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fb33 	bl	8006e80 <USBD_CtlError>
      break;
 800681a:	bf00      	nop
    }
    break;
 800681c:	e004      	b.n	8006828 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fb2d 	bl	8006e80 <USBD_CtlError>
    break;
 8006826:	bf00      	nop
  }

  return ret;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	885b      	ldrh	r3, [r3, #2]
 800684e:	0a1b      	lsrs	r3, r3, #8
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	2b06      	cmp	r3, #6
 8006856:	f200 8128 	bhi.w	8006aaa <USBD_GetDescriptor+0x276>
 800685a:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <USBD_GetDescriptor+0x2c>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	0800687d 	.word	0x0800687d
 8006864:	08006895 	.word	0x08006895
 8006868:	080068d5 	.word	0x080068d5
 800686c:	08006aab 	.word	0x08006aab
 8006870:	08006aab 	.word	0x08006aab
 8006874:	08006a4b 	.word	0x08006a4b
 8006878:	08006a77 	.word	0x08006a77
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	7c12      	ldrb	r2, [r2, #16]
 8006888:	f107 0108 	add.w	r1, r7, #8
 800688c:	4610      	mov	r0, r2
 800688e:	4798      	blx	r3
 8006890:	60f8      	str	r0, [r7, #12]
    break;
 8006892:	e112      	b.n	8006aba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	7c1b      	ldrb	r3, [r3, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10d      	bne.n	80068b8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	f107 0208 	add.w	r2, r7, #8
 80068a8:	4610      	mov	r0, r2
 80068aa:	4798      	blx	r3
 80068ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3301      	adds	r3, #1
 80068b2:	2202      	movs	r2, #2
 80068b4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80068b6:	e100      	b.n	8006aba <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c0:	f107 0208 	add.w	r2, r7, #8
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
 80068c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3301      	adds	r3, #1
 80068ce:	2202      	movs	r2, #2
 80068d0:	701a      	strb	r2, [r3, #0]
    break;
 80068d2:	e0f2      	b.n	8006aba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	885b      	ldrh	r3, [r3, #2]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b05      	cmp	r3, #5
 80068dc:	f200 80ac 	bhi.w	8006a38 <USBD_GetDescriptor+0x204>
 80068e0:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <USBD_GetDescriptor+0xb4>)
 80068e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e6:	bf00      	nop
 80068e8:	08006901 	.word	0x08006901
 80068ec:	08006935 	.word	0x08006935
 80068f0:	08006969 	.word	0x08006969
 80068f4:	0800699d 	.word	0x0800699d
 80068f8:	080069d1 	.word	0x080069d1
 80068fc:	08006a05 	.word	0x08006a05
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	7c12      	ldrb	r2, [r2, #16]
 8006918:	f107 0108 	add.w	r1, r7, #8
 800691c:	4610      	mov	r0, r2
 800691e:	4798      	blx	r3
 8006920:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006922:	e091      	b.n	8006a48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 faaa 	bl	8006e80 <USBD_CtlError>
        err++;
 800692c:	7afb      	ldrb	r3, [r7, #11]
 800692e:	3301      	adds	r3, #1
 8006930:	72fb      	strb	r3, [r7, #11]
      break;
 8006932:	e089      	b.n	8006a48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00b      	beq.n	8006958 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	7c12      	ldrb	r2, [r2, #16]
 800694c:	f107 0108 	add.w	r1, r7, #8
 8006950:	4610      	mov	r0, r2
 8006952:	4798      	blx	r3
 8006954:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006956:	e077      	b.n	8006a48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa90 	bl	8006e80 <USBD_CtlError>
        err++;
 8006960:	7afb      	ldrb	r3, [r7, #11]
 8006962:	3301      	adds	r3, #1
 8006964:	72fb      	strb	r3, [r7, #11]
      break;
 8006966:	e06f      	b.n	8006a48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	7c12      	ldrb	r2, [r2, #16]
 8006980:	f107 0108 	add.w	r1, r7, #8
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
 8006988:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800698a:	e05d      	b.n	8006a48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fa76 	bl	8006e80 <USBD_CtlError>
        err++;
 8006994:	7afb      	ldrb	r3, [r7, #11]
 8006996:	3301      	adds	r3, #1
 8006998:	72fb      	strb	r3, [r7, #11]
      break;
 800699a:	e055      	b.n	8006a48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00b      	beq.n	80069c0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	7c12      	ldrb	r2, [r2, #16]
 80069b4:	f107 0108 	add.w	r1, r7, #8
 80069b8:	4610      	mov	r0, r2
 80069ba:	4798      	blx	r3
 80069bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069be:	e043      	b.n	8006a48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa5c 	bl	8006e80 <USBD_CtlError>
        err++;
 80069c8:	7afb      	ldrb	r3, [r7, #11]
 80069ca:	3301      	adds	r3, #1
 80069cc:	72fb      	strb	r3, [r7, #11]
      break;
 80069ce:	e03b      	b.n	8006a48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	7c12      	ldrb	r2, [r2, #16]
 80069e8:	f107 0108 	add.w	r1, r7, #8
 80069ec:	4610      	mov	r0, r2
 80069ee:	4798      	blx	r3
 80069f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069f2:	e029      	b.n	8006a48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa42 	bl	8006e80 <USBD_CtlError>
        err++;
 80069fc:	7afb      	ldrb	r3, [r7, #11]
 80069fe:	3301      	adds	r3, #1
 8006a00:	72fb      	strb	r3, [r7, #11]
      break;
 8006a02:	e021      	b.n	8006a48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00b      	beq.n	8006a28 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	7c12      	ldrb	r2, [r2, #16]
 8006a1c:	f107 0108 	add.w	r1, r7, #8
 8006a20:	4610      	mov	r0, r2
 8006a22:	4798      	blx	r3
 8006a24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a26:	e00f      	b.n	8006a48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fa28 	bl	8006e80 <USBD_CtlError>
        err++;
 8006a30:	7afb      	ldrb	r3, [r7, #11]
 8006a32:	3301      	adds	r3, #1
 8006a34:	72fb      	strb	r3, [r7, #11]
      break;
 8006a36:	e007      	b.n	8006a48 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa20 	bl	8006e80 <USBD_CtlError>
      err++;
 8006a40:	7afb      	ldrb	r3, [r7, #11]
 8006a42:	3301      	adds	r3, #1
 8006a44:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006a46:	bf00      	nop
    }
    break;
 8006a48:	e037      	b.n	8006aba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	7c1b      	ldrb	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5a:	f107 0208 	add.w	r2, r7, #8
 8006a5e:	4610      	mov	r0, r2
 8006a60:	4798      	blx	r3
 8006a62:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006a64:	e029      	b.n	8006aba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa09 	bl	8006e80 <USBD_CtlError>
      err++;
 8006a6e:	7afb      	ldrb	r3, [r7, #11]
 8006a70:	3301      	adds	r3, #1
 8006a72:	72fb      	strb	r3, [r7, #11]
    break;
 8006a74:	e021      	b.n	8006aba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	7c1b      	ldrb	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10d      	bne.n	8006a9a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	f107 0208 	add.w	r2, r7, #8
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	4798      	blx	r3
 8006a8e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3301      	adds	r3, #1
 8006a94:	2207      	movs	r2, #7
 8006a96:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006a98:	e00f      	b.n	8006aba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f9ef 	bl	8006e80 <USBD_CtlError>
      err++;
 8006aa2:	7afb      	ldrb	r3, [r7, #11]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	72fb      	strb	r3, [r7, #11]
    break;
 8006aa8:	e007      	b.n	8006aba <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f9e7 	bl	8006e80 <USBD_CtlError>
    err++;
 8006ab2:	7afb      	ldrb	r3, [r7, #11]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	72fb      	strb	r3, [r7, #11]
    break;
 8006ab8:	bf00      	nop
  }

  if (err != 0U)
 8006aba:	7afb      	ldrb	r3, [r7, #11]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d11e      	bne.n	8006afe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	88db      	ldrh	r3, [r3, #6]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d016      	beq.n	8006af6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006ac8:	893b      	ldrh	r3, [r7, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00e      	beq.n	8006aec <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	88da      	ldrh	r2, [r3, #6]
 8006ad2:	893b      	ldrh	r3, [r7, #8]
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	bf28      	it	cs
 8006ad8:	4613      	movcs	r3, r2
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ade:	893b      	ldrh	r3, [r7, #8]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	68f9      	ldr	r1, [r7, #12]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fa3c 	bl	8006f62 <USBD_CtlSendData>
 8006aea:	e009      	b.n	8006b00 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f9c6 	bl	8006e80 <USBD_CtlError>
 8006af4:	e004      	b.n	8006b00 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa8d 	bl	8007016 <USBD_CtlSendStatus>
 8006afc:	e000      	b.n	8006b00 <USBD_GetDescriptor+0x2cc>
    return;
 8006afe:	bf00      	nop
    }
  }
}
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop

08006b08 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	889b      	ldrh	r3, [r3, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d130      	bne.n	8006b7c <USBD_SetAddress+0x74>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	88db      	ldrh	r3, [r3, #6]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d12c      	bne.n	8006b7c <USBD_SetAddress+0x74>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	885b      	ldrh	r3, [r3, #2]
 8006b26:	2b7f      	cmp	r3, #127	; 0x7f
 8006b28:	d828      	bhi.n	8006b7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	885b      	ldrh	r3, [r3, #2]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d104      	bne.n	8006b4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f99c 	bl	8006e80 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b48:	e01c      	b.n	8006b84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	7bfa      	ldrb	r2, [r7, #15]
 8006b4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 febe 	bl	80078d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fa5a 	bl	8007016 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d004      	beq.n	8006b72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b70:	e008      	b.n	8006b84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7a:	e003      	b.n	8006b84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f97e 	bl	8006e80 <USBD_CtlError>
  }
}
 8006b84:	bf00      	nop
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	885b      	ldrh	r3, [r3, #2]
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	4b4b      	ldr	r3, [pc, #300]	; (8006cd0 <USBD_SetConfig+0x144>)
 8006ba2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ba4:	4b4a      	ldr	r3, [pc, #296]	; (8006cd0 <USBD_SetConfig+0x144>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d905      	bls.n	8006bb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f966 	bl	8006e80 <USBD_CtlError>
    return USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e087      	b.n	8006cc8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d002      	beq.n	8006bc8 <USBD_SetConfig+0x3c>
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d025      	beq.n	8006c12 <USBD_SetConfig+0x86>
 8006bc6:	e071      	b.n	8006cac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006bc8:	4b41      	ldr	r3, [pc, #260]	; (8006cd0 <USBD_SetConfig+0x144>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01c      	beq.n	8006c0a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006bd0:	4b3f      	ldr	r3, [pc, #252]	; (8006cd0 <USBD_SetConfig+0x144>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bda:	4b3d      	ldr	r3, [pc, #244]	; (8006cd0 <USBD_SetConfig+0x144>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff f9a7 	bl	8005f34 <USBD_SetClassConfig>
 8006be6:	4603      	mov	r3, r0
 8006be8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f944 	bl	8006e80 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006bf8:	e065      	b.n	8006cc6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa0b 	bl	8007016 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2203      	movs	r2, #3
 8006c04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006c08:	e05d      	b.n	8006cc6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fa03 	bl	8007016 <USBD_CtlSendStatus>
    break;
 8006c10:	e059      	b.n	8006cc6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006c12:	4b2f      	ldr	r3, [pc, #188]	; (8006cd0 <USBD_SetConfig+0x144>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d112      	bne.n	8006c40 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006c22:	4b2b      	ldr	r3, [pc, #172]	; (8006cd0 <USBD_SetConfig+0x144>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c2c:	4b28      	ldr	r3, [pc, #160]	; (8006cd0 <USBD_SetConfig+0x144>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff f99a 	bl	8005f6c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f9ec 	bl	8007016 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006c3e:	e042      	b.n	8006cc6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006c40:	4b23      	ldr	r3, [pc, #140]	; (8006cd0 <USBD_SetConfig+0x144>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d02a      	beq.n	8006ca4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff f988 	bl	8005f6c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006c5c:	4b1c      	ldr	r3, [pc, #112]	; (8006cd0 <USBD_SetConfig+0x144>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c66:	4b1a      	ldr	r3, [pc, #104]	; (8006cd0 <USBD_SetConfig+0x144>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff f961 	bl	8005f34 <USBD_SetClassConfig>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00f      	beq.n	8006c9c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f8fe 	bl	8006e80 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff f96d 	bl	8005f6c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006c9a:	e014      	b.n	8006cc6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f9ba 	bl	8007016 <USBD_CtlSendStatus>
    break;
 8006ca2:	e010      	b.n	8006cc6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f9b6 	bl	8007016 <USBD_CtlSendStatus>
    break;
 8006caa:	e00c      	b.n	8006cc6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f8e6 	bl	8006e80 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cb4:	4b06      	ldr	r3, [pc, #24]	; (8006cd0 <USBD_SetConfig+0x144>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff f956 	bl	8005f6c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc4:	bf00      	nop
  }

  return ret;
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000210 	.word	0x20000210

08006cd4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	88db      	ldrh	r3, [r3, #6]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d004      	beq.n	8006cf0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f8c9 	bl	8006e80 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006cee:	e021      	b.n	8006d34 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	db17      	blt.n	8006d2a <USBD_GetConfig+0x56>
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	dd02      	ble.n	8006d04 <USBD_GetConfig+0x30>
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d00b      	beq.n	8006d1a <USBD_GetConfig+0x46>
 8006d02:	e012      	b.n	8006d2a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	2201      	movs	r2, #1
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f925 	bl	8006f62 <USBD_CtlSendData>
      break;
 8006d18:	e00c      	b.n	8006d34 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	2201      	movs	r2, #1
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f91d 	bl	8006f62 <USBD_CtlSendData>
      break;
 8006d28:	e004      	b.n	8006d34 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f8a7 	bl	8006e80 <USBD_CtlError>
      break;
 8006d32:	bf00      	nop
}
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d81e      	bhi.n	8006d90 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	88db      	ldrh	r3, [r3, #6]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d004      	beq.n	8006d64 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f88f 	bl	8006e80 <USBD_CtlError>
      break;
 8006d62:	e01a      	b.n	8006d9a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f043 0202 	orr.w	r2, r3, #2
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	330c      	adds	r3, #12
 8006d84:	2202      	movs	r2, #2
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f8ea 	bl	8006f62 <USBD_CtlSendData>
    break;
 8006d8e:	e004      	b.n	8006d9a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f874 	bl	8006e80 <USBD_CtlError>
    break;
 8006d98:	bf00      	nop
  }
}
 8006d9a:	bf00      	nop
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	885b      	ldrh	r3, [r3, #2]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d106      	bne.n	8006dc2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f92a 	bl	8007016 <USBD_CtlSendStatus>
  }
}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d80b      	bhi.n	8006df8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	885b      	ldrh	r3, [r3, #2]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d10c      	bne.n	8006e02 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f910 	bl	8007016 <USBD_CtlSendStatus>
      }
      break;
 8006df6:	e004      	b.n	8006e02 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f840 	bl	8006e80 <USBD_CtlError>
      break;
 8006e00:	e000      	b.n	8006e04 <USBD_ClrFeature+0x3a>
      break;
 8006e02:	bf00      	nop
  }
}
 8006e04:	bf00      	nop
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	781a      	ldrb	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3301      	adds	r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	781a      	ldrb	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3301      	adds	r3, #1
 8006e34:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7ff fad3 	bl	80063e2 <SWAPBYTE>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	461a      	mov	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3301      	adds	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f7ff fac6 	bl	80063e2 <SWAPBYTE>
 8006e56:	4603      	mov	r3, r0
 8006e58:	461a      	mov	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3301      	adds	r3, #1
 8006e62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3301      	adds	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff fab9 	bl	80063e2 <SWAPBYTE>
 8006e70:	4603      	mov	r3, r0
 8006e72:	461a      	mov	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	80da      	strh	r2, [r3, #6]
}
 8006e78:	bf00      	nop
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e8a:	2180      	movs	r1, #128	; 0x80
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fcb9 	bl	8007804 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e92:	2100      	movs	r1, #0
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fcb5 	bl	8007804 <USBD_LL_StallEP>
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d036      	beq.n	8006f26 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ebc:	6938      	ldr	r0, [r7, #16]
 8006ebe:	f000 f836 	bl	8006f2e <USBD_GetLen>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	7812      	ldrb	r2, [r2, #0]
 8006eda:	701a      	strb	r2, [r3, #0]
  idx++;
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	2203      	movs	r2, #3
 8006eea:	701a      	strb	r2, [r3, #0]
  idx++;
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ef2:	e013      	b.n	8006f1c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	4413      	add	r3, r2
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	7812      	ldrb	r2, [r2, #0]
 8006efe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	3301      	adds	r3, #1
 8006f04:	613b      	str	r3, [r7, #16]
    idx++;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	4413      	add	r3, r2
 8006f12:	2200      	movs	r2, #0
 8006f14:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e7      	bne.n	8006ef4 <USBD_GetString+0x52>
 8006f24:	e000      	b.n	8006f28 <USBD_GetString+0x86>
    return;
 8006f26:	bf00      	nop
  }
}
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b085      	sub	sp, #20
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f3e:	e005      	b.n	8006f4c <USBD_GetLen+0x1e>
  {
    len++;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	3301      	adds	r3, #1
 8006f44:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f5      	bne.n	8006f40 <USBD_GetLen+0x12>
  }

  return len;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2202      	movs	r2, #2
 8006f72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	2100      	movs	r1, #0
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fcc4 	bl	8007916 <USBD_LL_Transmit>

  return USBD_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	2100      	movs	r1, #0
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fcb3 	bl	8007916 <USBD_LL_Transmit>

  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2203      	movs	r2, #3
 8006fca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fcb7 	bl	8007958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	2100      	movs	r1, #0
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fca6 	bl	8007958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2204      	movs	r2, #4
 8007022:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007026:	2300      	movs	r3, #0
 8007028:	2200      	movs	r2, #0
 800702a:	2100      	movs	r1, #0
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fc72 	bl	8007916 <USBD_LL_Transmit>

  return USBD_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2205      	movs	r2, #5
 8007048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800704c:	2300      	movs	r3, #0
 800704e:	2200      	movs	r2, #0
 8007050:	2100      	movs	r1, #0
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fc80 	bl	8007958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007068:	2200      	movs	r2, #0
 800706a:	4912      	ldr	r1, [pc, #72]	; (80070b4 <MX_USB_DEVICE_Init+0x50>)
 800706c:	4812      	ldr	r0, [pc, #72]	; (80070b8 <MX_USB_DEVICE_Init+0x54>)
 800706e:	f7fe fef3 	bl	8005e58 <USBD_Init>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007078:	f7f9 ff20 	bl	8000ebc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800707c:	490f      	ldr	r1, [pc, #60]	; (80070bc <MX_USB_DEVICE_Init+0x58>)
 800707e:	480e      	ldr	r0, [pc, #56]	; (80070b8 <MX_USB_DEVICE_Init+0x54>)
 8007080:	f7fe ff20 	bl	8005ec4 <USBD_RegisterClass>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800708a:	f7f9 ff17 	bl	8000ebc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800708e:	490c      	ldr	r1, [pc, #48]	; (80070c0 <MX_USB_DEVICE_Init+0x5c>)
 8007090:	4809      	ldr	r0, [pc, #36]	; (80070b8 <MX_USB_DEVICE_Init+0x54>)
 8007092:	f7fe fe75 	bl	8005d80 <USBD_CDC_RegisterInterface>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800709c:	f7f9 ff0e 	bl	8000ebc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80070a0:	4805      	ldr	r0, [pc, #20]	; (80070b8 <MX_USB_DEVICE_Init+0x54>)
 80070a2:	f7fe ff30 	bl	8005f06 <USBD_Start>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80070ac:	f7f9 ff06 	bl	8000ebc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070b0:	bf00      	nop
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20000130 	.word	0x20000130
 80070b8:	20000280 	.word	0x20000280
 80070bc:	20000018 	.word	0x20000018
 80070c0:	2000011c 	.word	0x2000011c

080070c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070c8:	2200      	movs	r2, #0
 80070ca:	4905      	ldr	r1, [pc, #20]	; (80070e0 <CDC_Init_FS+0x1c>)
 80070cc:	4805      	ldr	r0, [pc, #20]	; (80070e4 <CDC_Init_FS+0x20>)
 80070ce:	f7fe fe6c 	bl	8005daa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80070d2:	4905      	ldr	r1, [pc, #20]	; (80070e8 <CDC_Init_FS+0x24>)
 80070d4:	4803      	ldr	r0, [pc, #12]	; (80070e4 <CDC_Init_FS+0x20>)
 80070d6:	f7fe fe81 	bl	8005ddc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80070da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070dc:	4618      	mov	r0, r3
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000d50 	.word	0x20000d50
 80070e4:	20000280 	.word	0x20000280
 80070e8:	20000550 	.word	0x20000550

080070ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	6039      	str	r1, [r7, #0]
 8007106:	71fb      	strb	r3, [r7, #7]
 8007108:	4613      	mov	r3, r2
 800710a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	2b23      	cmp	r3, #35	; 0x23
 8007110:	d84a      	bhi.n	80071a8 <CDC_Control_FS+0xac>
 8007112:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <CDC_Control_FS+0x1c>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	080071a9 	.word	0x080071a9
 800711c:	080071a9 	.word	0x080071a9
 8007120:	080071a9 	.word	0x080071a9
 8007124:	080071a9 	.word	0x080071a9
 8007128:	080071a9 	.word	0x080071a9
 800712c:	080071a9 	.word	0x080071a9
 8007130:	080071a9 	.word	0x080071a9
 8007134:	080071a9 	.word	0x080071a9
 8007138:	080071a9 	.word	0x080071a9
 800713c:	080071a9 	.word	0x080071a9
 8007140:	080071a9 	.word	0x080071a9
 8007144:	080071a9 	.word	0x080071a9
 8007148:	080071a9 	.word	0x080071a9
 800714c:	080071a9 	.word	0x080071a9
 8007150:	080071a9 	.word	0x080071a9
 8007154:	080071a9 	.word	0x080071a9
 8007158:	080071a9 	.word	0x080071a9
 800715c:	080071a9 	.word	0x080071a9
 8007160:	080071a9 	.word	0x080071a9
 8007164:	080071a9 	.word	0x080071a9
 8007168:	080071a9 	.word	0x080071a9
 800716c:	080071a9 	.word	0x080071a9
 8007170:	080071a9 	.word	0x080071a9
 8007174:	080071a9 	.word	0x080071a9
 8007178:	080071a9 	.word	0x080071a9
 800717c:	080071a9 	.word	0x080071a9
 8007180:	080071a9 	.word	0x080071a9
 8007184:	080071a9 	.word	0x080071a9
 8007188:	080071a9 	.word	0x080071a9
 800718c:	080071a9 	.word	0x080071a9
 8007190:	080071a9 	.word	0x080071a9
 8007194:	080071a9 	.word	0x080071a9
 8007198:	080071a9 	.word	0x080071a9
 800719c:	080071a9 	.word	0x080071a9
 80071a0:	080071a9 	.word	0x080071a9
 80071a4:	080071a9 	.word	0x080071a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80071a8:	bf00      	nop
  }

  return (USBD_OK);
 80071aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	4805      	ldr	r0, [pc, #20]	; (80071dc <CDC_Receive_FS+0x24>)
 80071c6:	f7fe fe09 	bl	8005ddc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071ca:	4804      	ldr	r0, [pc, #16]	; (80071dc <CDC_Receive_FS+0x24>)
 80071cc:	f7fe fe1a 	bl	8005e04 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80071d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20000280 	.word	0x20000280

080071e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	4613      	mov	r3, r2
 80071ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80071f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
	...

08007204 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	6039      	str	r1, [r7, #0]
 800720e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2212      	movs	r2, #18
 8007214:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007216:	4b03      	ldr	r3, [pc, #12]	; (8007224 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	2000014c 	.word	0x2000014c

08007228 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	6039      	str	r1, [r7, #0]
 8007232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2204      	movs	r2, #4
 8007238:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800723a:	4b03      	ldr	r3, [pc, #12]	; (8007248 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	20000160 	.word	0x20000160

0800724c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	6039      	str	r1, [r7, #0]
 8007256:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007258:	79fb      	ldrb	r3, [r7, #7]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d105      	bne.n	800726a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	4907      	ldr	r1, [pc, #28]	; (8007280 <USBD_FS_ProductStrDescriptor+0x34>)
 8007262:	4808      	ldr	r0, [pc, #32]	; (8007284 <USBD_FS_ProductStrDescriptor+0x38>)
 8007264:	f7ff fe1d 	bl	8006ea2 <USBD_GetString>
 8007268:	e004      	b.n	8007274 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	4904      	ldr	r1, [pc, #16]	; (8007280 <USBD_FS_ProductStrDescriptor+0x34>)
 800726e:	4805      	ldr	r0, [pc, #20]	; (8007284 <USBD_FS_ProductStrDescriptor+0x38>)
 8007270:	f7ff fe17 	bl	8006ea2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007274:	4b02      	ldr	r3, [pc, #8]	; (8007280 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20001550 	.word	0x20001550
 8007284:	080082e0 	.word	0x080082e0

08007288 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	4603      	mov	r3, r0
 8007290:	6039      	str	r1, [r7, #0]
 8007292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	4904      	ldr	r1, [pc, #16]	; (80072a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007298:	4804      	ldr	r0, [pc, #16]	; (80072ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800729a:	f7ff fe02 	bl	8006ea2 <USBD_GetString>
  return USBD_StrDesc;
 800729e:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20001550 	.word	0x20001550
 80072ac:	080082f8 	.word	0x080082f8

080072b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	4603      	mov	r3, r0
 80072b8:	6039      	str	r1, [r7, #0]
 80072ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	221a      	movs	r2, #26
 80072c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80072c2:	f000 f843 	bl	800734c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80072c6:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20000164 	.word	0x20000164

080072d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	4603      	mov	r3, r0
 80072dc:	6039      	str	r1, [r7, #0]
 80072de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d105      	bne.n	80072f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	4907      	ldr	r1, [pc, #28]	; (8007308 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072ea:	4808      	ldr	r0, [pc, #32]	; (800730c <USBD_FS_ConfigStrDescriptor+0x38>)
 80072ec:	f7ff fdd9 	bl	8006ea2 <USBD_GetString>
 80072f0:	e004      	b.n	80072fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	4904      	ldr	r1, [pc, #16]	; (8007308 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072f6:	4805      	ldr	r0, [pc, #20]	; (800730c <USBD_FS_ConfigStrDescriptor+0x38>)
 80072f8:	f7ff fdd3 	bl	8006ea2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072fc:	4b02      	ldr	r3, [pc, #8]	; (8007308 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20001550 	.word	0x20001550
 800730c:	0800830c 	.word	0x0800830c

08007310 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	6039      	str	r1, [r7, #0]
 800731a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800731c:	79fb      	ldrb	r3, [r7, #7]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d105      	bne.n	800732e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	4907      	ldr	r1, [pc, #28]	; (8007344 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007326:	4808      	ldr	r0, [pc, #32]	; (8007348 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007328:	f7ff fdbb 	bl	8006ea2 <USBD_GetString>
 800732c:	e004      	b.n	8007338 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	4904      	ldr	r1, [pc, #16]	; (8007344 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007332:	4805      	ldr	r0, [pc, #20]	; (8007348 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007334:	f7ff fdb5 	bl	8006ea2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007338:	4b02      	ldr	r3, [pc, #8]	; (8007344 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20001550 	.word	0x20001550
 8007348:	08008318 	.word	0x08008318

0800734c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007352:	4b0f      	ldr	r3, [pc, #60]	; (8007390 <Get_SerialNum+0x44>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007358:	4b0e      	ldr	r3, [pc, #56]	; (8007394 <Get_SerialNum+0x48>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800735e:	4b0e      	ldr	r3, [pc, #56]	; (8007398 <Get_SerialNum+0x4c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4413      	add	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d009      	beq.n	8007386 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007372:	2208      	movs	r2, #8
 8007374:	4909      	ldr	r1, [pc, #36]	; (800739c <Get_SerialNum+0x50>)
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 f814 	bl	80073a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800737c:	2204      	movs	r2, #4
 800737e:	4908      	ldr	r1, [pc, #32]	; (80073a0 <Get_SerialNum+0x54>)
 8007380:	68b8      	ldr	r0, [r7, #8]
 8007382:	f000 f80f 	bl	80073a4 <IntToUnicode>
  }
}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	1fff7a10 	.word	0x1fff7a10
 8007394:	1fff7a14 	.word	0x1fff7a14
 8007398:	1fff7a18 	.word	0x1fff7a18
 800739c:	20000166 	.word	0x20000166
 80073a0:	20000176 	.word	0x20000176

080073a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80073b6:	2300      	movs	r3, #0
 80073b8:	75fb      	strb	r3, [r7, #23]
 80073ba:	e027      	b.n	800740c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	0f1b      	lsrs	r3, r3, #28
 80073c0:	2b09      	cmp	r3, #9
 80073c2:	d80b      	bhi.n	80073dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	0f1b      	lsrs	r3, r3, #28
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	4619      	mov	r1, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	440b      	add	r3, r1
 80073d4:	3230      	adds	r2, #48	; 0x30
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	e00a      	b.n	80073f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	0f1b      	lsrs	r3, r3, #28
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	4619      	mov	r1, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	440b      	add	r3, r1
 80073ec:	3237      	adds	r2, #55	; 0x37
 80073ee:	b2d2      	uxtb	r2, r2
 80073f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	3301      	adds	r3, #1
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	4413      	add	r3, r2
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	3301      	adds	r3, #1
 800740a:	75fb      	strb	r3, [r7, #23]
 800740c:	7dfa      	ldrb	r2, [r7, #23]
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	429a      	cmp	r2, r3
 8007412:	d3d3      	bcc.n	80073bc <IntToUnicode+0x18>
  }
}
 8007414:	bf00      	nop
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08a      	sub	sp, #40	; 0x28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007428:	f107 0314 	add.w	r3, r7, #20
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	605a      	str	r2, [r3, #4]
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	60da      	str	r2, [r3, #12]
 8007436:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007440:	d13a      	bne.n	80074b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	4b1e      	ldr	r3, [pc, #120]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	4a1d      	ldr	r2, [pc, #116]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 800744c:	f043 0301 	orr.w	r3, r3, #1
 8007450:	6313      	str	r3, [r2, #48]	; 0x30
 8007452:	4b1b      	ldr	r3, [pc, #108]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800745e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007464:	2302      	movs	r3, #2
 8007466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007468:	2300      	movs	r3, #0
 800746a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800746c:	2303      	movs	r3, #3
 800746e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007470:	230a      	movs	r3, #10
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007474:	f107 0314 	add.w	r3, r7, #20
 8007478:	4619      	mov	r1, r3
 800747a:	4812      	ldr	r0, [pc, #72]	; (80074c4 <HAL_PCD_MspInit+0xa4>)
 800747c:	f7fa f888 	bl	8001590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 8007482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007484:	4a0e      	ldr	r2, [pc, #56]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 8007486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748a:	6353      	str	r3, [r2, #52]	; 0x34
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 8007492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007494:	4a0a      	ldr	r2, [pc, #40]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 8007496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800749a:	6453      	str	r3, [r2, #68]	; 0x44
 800749c:	4b08      	ldr	r3, [pc, #32]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 800749e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80074a8:	2200      	movs	r2, #0
 80074aa:	2100      	movs	r1, #0
 80074ac:	2043      	movs	r0, #67	; 0x43
 80074ae:	f7fa f82a 	bl	8001506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80074b2:	2043      	movs	r0, #67	; 0x43
 80074b4:	f7fa f843 	bl	800153e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80074b8:	bf00      	nop
 80074ba:	3728      	adds	r7, #40	; 0x28
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	40023800 	.word	0x40023800
 80074c4:	40020000 	.word	0x40020000

080074c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f7fe fd5c 	bl	8005f9c <USBD_LL_SetupStage>
}
 80074e4:	bf00      	nop
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	440b      	add	r3, r1
 800750c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	4619      	mov	r1, r3
 8007516:	f7fe fd94 	bl	8006042 <USBD_LL_DataOutStage>
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	4613      	mov	r3, r2
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	440b      	add	r3, r1
 8007542:	3348      	adds	r3, #72	; 0x48
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	4619      	mov	r1, r3
 800754a:	f7fe fddd 	bl	8006108 <USBD_LL_DataInStage>
}
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe fee1 	bl	800632c <USBD_LL_SOF>
}
 800756a:	bf00      	nop
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800757a:	2301      	movs	r3, #1
 800757c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d102      	bne.n	800758c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
 800758a:	e008      	b.n	800759e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d102      	bne.n	800759a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007594:	2301      	movs	r3, #1
 8007596:	73fb      	strb	r3, [r7, #15]
 8007598:	e001      	b.n	800759e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800759a:	f7f9 fc8f 	bl	8000ebc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075a4:	7bfa      	ldrb	r2, [r7, #15]
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fe84 	bl	80062b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe fe3d 	bl	8006234 <USBD_LL_Reset>
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe fe7f 	bl	80062d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6812      	ldr	r2, [r2, #0]
 80075e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075f8:	4b04      	ldr	r3, [pc, #16]	; (800760c <HAL_PCD_SuspendCallback+0x48>)
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	4a03      	ldr	r2, [pc, #12]	; (800760c <HAL_PCD_SuspendCallback+0x48>)
 80075fe:	f043 0306 	orr.w	r3, r3, #6
 8007602:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	e000ed00 	.word	0xe000ed00

08007610 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fe6e 	bl	8006300 <USBD_LL_Resume>
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800763e:	78fa      	ldrb	r2, [r7, #3]
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fe99 	bl	800637a <USBD_LL_IsoOUTIncomplete>
}
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	4611      	mov	r1, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fe7a 	bl	8006360 <USBD_LL_IsoINIncomplete>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fe86 	bl	8006394 <USBD_LL_DevConnected>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fe83 	bl	80063aa <USBD_LL_DevDisconnected>
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d13c      	bne.n	8007736 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80076bc:	4a20      	ldr	r2, [pc, #128]	; (8007740 <USBD_LL_Init+0x94>)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a1e      	ldr	r2, [pc, #120]	; (8007740 <USBD_LL_Init+0x94>)
 80076c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076cc:	4b1c      	ldr	r3, [pc, #112]	; (8007740 <USBD_LL_Init+0x94>)
 80076ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80076d4:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <USBD_LL_Init+0x94>)
 80076d6:	2204      	movs	r2, #4
 80076d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076da:	4b19      	ldr	r3, [pc, #100]	; (8007740 <USBD_LL_Init+0x94>)
 80076dc:	2202      	movs	r2, #2
 80076de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80076e0:	4b17      	ldr	r3, [pc, #92]	; (8007740 <USBD_LL_Init+0x94>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80076e6:	4b16      	ldr	r3, [pc, #88]	; (8007740 <USBD_LL_Init+0x94>)
 80076e8:	2202      	movs	r2, #2
 80076ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076ec:	4b14      	ldr	r3, [pc, #80]	; (8007740 <USBD_LL_Init+0x94>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076f2:	4b13      	ldr	r3, [pc, #76]	; (8007740 <USBD_LL_Init+0x94>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076f8:	4b11      	ldr	r3, [pc, #68]	; (8007740 <USBD_LL_Init+0x94>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80076fe:	4b10      	ldr	r3, [pc, #64]	; (8007740 <USBD_LL_Init+0x94>)
 8007700:	2200      	movs	r2, #0
 8007702:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <USBD_LL_Init+0x94>)
 8007706:	2200      	movs	r2, #0
 8007708:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800770a:	480d      	ldr	r0, [pc, #52]	; (8007740 <USBD_LL_Init+0x94>)
 800770c:	f7fa f931 	bl	8001972 <HAL_PCD_Init>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007716:	f7f9 fbd1 	bl	8000ebc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800771a:	2180      	movs	r1, #128	; 0x80
 800771c:	4808      	ldr	r0, [pc, #32]	; (8007740 <USBD_LL_Init+0x94>)
 800771e:	f7fb fa8e 	bl	8002c3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007722:	2240      	movs	r2, #64	; 0x40
 8007724:	2100      	movs	r1, #0
 8007726:	4806      	ldr	r0, [pc, #24]	; (8007740 <USBD_LL_Init+0x94>)
 8007728:	f7fb fa42 	bl	8002bb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800772c:	2280      	movs	r2, #128	; 0x80
 800772e:	2101      	movs	r1, #1
 8007730:	4803      	ldr	r0, [pc, #12]	; (8007740 <USBD_LL_Init+0x94>)
 8007732:	f7fb fa3d 	bl	8002bb0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20001750 	.word	0x20001750

08007744 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800775a:	4618      	mov	r0, r3
 800775c:	f7fa fa26 	bl	8001bac <HAL_PCD_Start>
 8007760:	4603      	mov	r3, r0
 8007762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 f92a 	bl	80079c0 <USBD_Get_USB_Status>
 800776c:	4603      	mov	r3, r0
 800776e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007770:	7bbb      	ldrb	r3, [r7, #14]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	4608      	mov	r0, r1
 8007784:	4611      	mov	r1, r2
 8007786:	461a      	mov	r2, r3
 8007788:	4603      	mov	r3, r0
 800778a:	70fb      	strb	r3, [r7, #3]
 800778c:	460b      	mov	r3, r1
 800778e:	70bb      	strb	r3, [r7, #2]
 8007790:	4613      	mov	r3, r2
 8007792:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80077a2:	78bb      	ldrb	r3, [r7, #2]
 80077a4:	883a      	ldrh	r2, [r7, #0]
 80077a6:	78f9      	ldrb	r1, [r7, #3]
 80077a8:	f7fa fe0a 	bl	80023c0 <HAL_PCD_EP_Open>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 f904 	bl	80079c0 <USBD_Get_USB_Status>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077e0:	78fa      	ldrb	r2, [r7, #3]
 80077e2:	4611      	mov	r1, r2
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fa fe53 	bl	8002490 <HAL_PCD_EP_Close>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 f8e5 	bl	80079c0 <USBD_Get_USB_Status>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800781e:	78fa      	ldrb	r2, [r7, #3]
 8007820:	4611      	mov	r1, r2
 8007822:	4618      	mov	r0, r3
 8007824:	f7fa ff2b 	bl	800267e <HAL_PCD_EP_SetStall>
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f8c6 	bl	80079c0 <USBD_Get_USB_Status>
 8007834:	4603      	mov	r3, r0
 8007836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007838:	7bbb      	ldrb	r3, [r7, #14]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800785c:	78fa      	ldrb	r2, [r7, #3]
 800785e:	4611      	mov	r1, r2
 8007860:	4618      	mov	r0, r3
 8007862:	f7fa ff70 	bl	8002746 <HAL_PCD_EP_ClrStall>
 8007866:	4603      	mov	r3, r0
 8007868:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800786a:	7bfb      	ldrb	r3, [r7, #15]
 800786c:	4618      	mov	r0, r3
 800786e:	f000 f8a7 	bl	80079c0 <USBD_Get_USB_Status>
 8007872:	4603      	mov	r3, r0
 8007874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007876:	7bbb      	ldrb	r3, [r7, #14]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007892:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007898:	2b00      	cmp	r3, #0
 800789a:	da0b      	bge.n	80078b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	4613      	mov	r3, r2
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	1a9b      	subs	r3, r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	440b      	add	r3, r1
 80078ae:	333e      	adds	r3, #62	; 0x3e
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	e00b      	b.n	80078cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078ba:	68f9      	ldr	r1, [r7, #12]
 80078bc:	4613      	mov	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	440b      	add	r3, r1
 80078c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078f2:	78fa      	ldrb	r2, [r7, #3]
 80078f4:	4611      	mov	r1, r2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fa fd3d 	bl	8002376 <HAL_PCD_SetAddress>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 f85c 	bl	80079c0 <USBD_Get_USB_Status>
 8007908:	4603      	mov	r3, r0
 800790a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800790c:	7bbb      	ldrb	r3, [r7, #14]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	607a      	str	r2, [r7, #4]
 8007920:	603b      	str	r3, [r7, #0]
 8007922:	460b      	mov	r3, r1
 8007924:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007934:	7af9      	ldrb	r1, [r7, #11]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	f7fa fe56 	bl	80025ea <HAL_PCD_EP_Transmit>
 800793e:	4603      	mov	r3, r0
 8007940:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	4618      	mov	r0, r3
 8007946:	f000 f83b 	bl	80079c0 <USBD_Get_USB_Status>
 800794a:	4603      	mov	r3, r0
 800794c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800794e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	607a      	str	r2, [r7, #4]
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	460b      	mov	r3, r1
 8007966:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007976:	7af9      	ldrb	r1, [r7, #11]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	f7fa fdd2 	bl	8002524 <HAL_PCD_EP_Receive>
 8007980:	4603      	mov	r3, r0
 8007982:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f81a 	bl	80079c0 <USBD_Get_USB_Status>
 800798c:	4603      	mov	r3, r0
 800798e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007990:	7dbb      	ldrb	r3, [r7, #22]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	460b      	mov	r3, r1
 80079a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	4611      	mov	r1, r2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fa fe02 	bl	80025ba <HAL_PCD_EP_GetRxCount>
 80079b6:	4603      	mov	r3, r0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	4603      	mov	r3, r0
 80079c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079ce:	79fb      	ldrb	r3, [r7, #7]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d817      	bhi.n	8007a04 <USBD_Get_USB_Status+0x44>
 80079d4:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <USBD_Get_USB_Status+0x1c>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	080079ed 	.word	0x080079ed
 80079e0:	080079f3 	.word	0x080079f3
 80079e4:	080079f9 	.word	0x080079f9
 80079e8:	080079ff 	.word	0x080079ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73fb      	strb	r3, [r7, #15]
    break;
 80079f0:	e00b      	b.n	8007a0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079f2:	2303      	movs	r3, #3
 80079f4:	73fb      	strb	r3, [r7, #15]
    break;
 80079f6:	e008      	b.n	8007a0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079f8:	2301      	movs	r3, #1
 80079fa:	73fb      	strb	r3, [r7, #15]
    break;
 80079fc:	e005      	b.n	8007a0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079fe:	2303      	movs	r3, #3
 8007a00:	73fb      	strb	r3, [r7, #15]
    break;
 8007a02:	e002      	b.n	8007a0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a04:	2303      	movs	r3, #3
 8007a06:	73fb      	strb	r3, [r7, #15]
    break;
 8007a08:	bf00      	nop
  }
  return usb_status;
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <__errno>:
 8007a18:	4b01      	ldr	r3, [pc, #4]	; (8007a20 <__errno+0x8>)
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	20000180 	.word	0x20000180

08007a24 <__libc_init_array>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	4e0d      	ldr	r6, [pc, #52]	; (8007a5c <__libc_init_array+0x38>)
 8007a28:	4c0d      	ldr	r4, [pc, #52]	; (8007a60 <__libc_init_array+0x3c>)
 8007a2a:	1ba4      	subs	r4, r4, r6
 8007a2c:	10a4      	asrs	r4, r4, #2
 8007a2e:	2500      	movs	r5, #0
 8007a30:	42a5      	cmp	r5, r4
 8007a32:	d109      	bne.n	8007a48 <__libc_init_array+0x24>
 8007a34:	4e0b      	ldr	r6, [pc, #44]	; (8007a64 <__libc_init_array+0x40>)
 8007a36:	4c0c      	ldr	r4, [pc, #48]	; (8007a68 <__libc_init_array+0x44>)
 8007a38:	f000 fc36 	bl	80082a8 <_init>
 8007a3c:	1ba4      	subs	r4, r4, r6
 8007a3e:	10a4      	asrs	r4, r4, #2
 8007a40:	2500      	movs	r5, #0
 8007a42:	42a5      	cmp	r5, r4
 8007a44:	d105      	bne.n	8007a52 <__libc_init_array+0x2e>
 8007a46:	bd70      	pop	{r4, r5, r6, pc}
 8007a48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a4c:	4798      	blx	r3
 8007a4e:	3501      	adds	r5, #1
 8007a50:	e7ee      	b.n	8007a30 <__libc_init_array+0xc>
 8007a52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a56:	4798      	blx	r3
 8007a58:	3501      	adds	r5, #1
 8007a5a:	e7f2      	b.n	8007a42 <__libc_init_array+0x1e>
 8007a5c:	08008374 	.word	0x08008374
 8007a60:	08008374 	.word	0x08008374
 8007a64:	08008374 	.word	0x08008374
 8007a68:	08008378 	.word	0x08008378

08007a6c <malloc>:
 8007a6c:	4b02      	ldr	r3, [pc, #8]	; (8007a78 <malloc+0xc>)
 8007a6e:	4601      	mov	r1, r0
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	f000 b861 	b.w	8007b38 <_malloc_r>
 8007a76:	bf00      	nop
 8007a78:	20000180 	.word	0x20000180

08007a7c <free>:
 8007a7c:	4b02      	ldr	r3, [pc, #8]	; (8007a88 <free+0xc>)
 8007a7e:	4601      	mov	r1, r0
 8007a80:	6818      	ldr	r0, [r3, #0]
 8007a82:	f000 b80b 	b.w	8007a9c <_free_r>
 8007a86:	bf00      	nop
 8007a88:	20000180 	.word	0x20000180

08007a8c <memset>:
 8007a8c:	4402      	add	r2, r0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d100      	bne.n	8007a96 <memset+0xa>
 8007a94:	4770      	bx	lr
 8007a96:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9a:	e7f9      	b.n	8007a90 <memset+0x4>

08007a9c <_free_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	2900      	cmp	r1, #0
 8007aa2:	d045      	beq.n	8007b30 <_free_r+0x94>
 8007aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aa8:	1f0c      	subs	r4, r1, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfb8      	it	lt
 8007aae:	18e4      	addlt	r4, r4, r3
 8007ab0:	f000 f8cc 	bl	8007c4c <__malloc_lock>
 8007ab4:	4a1f      	ldr	r2, [pc, #124]	; (8007b34 <_free_r+0x98>)
 8007ab6:	6813      	ldr	r3, [r2, #0]
 8007ab8:	4610      	mov	r0, r2
 8007aba:	b933      	cbnz	r3, 8007aca <_free_r+0x2e>
 8007abc:	6063      	str	r3, [r4, #4]
 8007abe:	6014      	str	r4, [r2, #0]
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ac6:	f000 b8c2 	b.w	8007c4e <__malloc_unlock>
 8007aca:	42a3      	cmp	r3, r4
 8007acc:	d90c      	bls.n	8007ae8 <_free_r+0x4c>
 8007ace:	6821      	ldr	r1, [r4, #0]
 8007ad0:	1862      	adds	r2, r4, r1
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	bf04      	itt	eq
 8007ad6:	681a      	ldreq	r2, [r3, #0]
 8007ad8:	685b      	ldreq	r3, [r3, #4]
 8007ada:	6063      	str	r3, [r4, #4]
 8007adc:	bf04      	itt	eq
 8007ade:	1852      	addeq	r2, r2, r1
 8007ae0:	6022      	streq	r2, [r4, #0]
 8007ae2:	6004      	str	r4, [r0, #0]
 8007ae4:	e7ec      	b.n	8007ac0 <_free_r+0x24>
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	b10a      	cbz	r2, 8007af0 <_free_r+0x54>
 8007aec:	42a2      	cmp	r2, r4
 8007aee:	d9fa      	bls.n	8007ae6 <_free_r+0x4a>
 8007af0:	6819      	ldr	r1, [r3, #0]
 8007af2:	1858      	adds	r0, r3, r1
 8007af4:	42a0      	cmp	r0, r4
 8007af6:	d10b      	bne.n	8007b10 <_free_r+0x74>
 8007af8:	6820      	ldr	r0, [r4, #0]
 8007afa:	4401      	add	r1, r0
 8007afc:	1858      	adds	r0, r3, r1
 8007afe:	4282      	cmp	r2, r0
 8007b00:	6019      	str	r1, [r3, #0]
 8007b02:	d1dd      	bne.n	8007ac0 <_free_r+0x24>
 8007b04:	6810      	ldr	r0, [r2, #0]
 8007b06:	6852      	ldr	r2, [r2, #4]
 8007b08:	605a      	str	r2, [r3, #4]
 8007b0a:	4401      	add	r1, r0
 8007b0c:	6019      	str	r1, [r3, #0]
 8007b0e:	e7d7      	b.n	8007ac0 <_free_r+0x24>
 8007b10:	d902      	bls.n	8007b18 <_free_r+0x7c>
 8007b12:	230c      	movs	r3, #12
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	e7d3      	b.n	8007ac0 <_free_r+0x24>
 8007b18:	6820      	ldr	r0, [r4, #0]
 8007b1a:	1821      	adds	r1, r4, r0
 8007b1c:	428a      	cmp	r2, r1
 8007b1e:	bf04      	itt	eq
 8007b20:	6811      	ldreq	r1, [r2, #0]
 8007b22:	6852      	ldreq	r2, [r2, #4]
 8007b24:	6062      	str	r2, [r4, #4]
 8007b26:	bf04      	itt	eq
 8007b28:	1809      	addeq	r1, r1, r0
 8007b2a:	6021      	streq	r1, [r4, #0]
 8007b2c:	605c      	str	r4, [r3, #4]
 8007b2e:	e7c7      	b.n	8007ac0 <_free_r+0x24>
 8007b30:	bd38      	pop	{r3, r4, r5, pc}
 8007b32:	bf00      	nop
 8007b34:	20000214 	.word	0x20000214

08007b38 <_malloc_r>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	1ccd      	adds	r5, r1, #3
 8007b3c:	f025 0503 	bic.w	r5, r5, #3
 8007b40:	3508      	adds	r5, #8
 8007b42:	2d0c      	cmp	r5, #12
 8007b44:	bf38      	it	cc
 8007b46:	250c      	movcc	r5, #12
 8007b48:	2d00      	cmp	r5, #0
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	db01      	blt.n	8007b52 <_malloc_r+0x1a>
 8007b4e:	42a9      	cmp	r1, r5
 8007b50:	d903      	bls.n	8007b5a <_malloc_r+0x22>
 8007b52:	230c      	movs	r3, #12
 8007b54:	6033      	str	r3, [r6, #0]
 8007b56:	2000      	movs	r0, #0
 8007b58:	bd70      	pop	{r4, r5, r6, pc}
 8007b5a:	f000 f877 	bl	8007c4c <__malloc_lock>
 8007b5e:	4a21      	ldr	r2, [pc, #132]	; (8007be4 <_malloc_r+0xac>)
 8007b60:	6814      	ldr	r4, [r2, #0]
 8007b62:	4621      	mov	r1, r4
 8007b64:	b991      	cbnz	r1, 8007b8c <_malloc_r+0x54>
 8007b66:	4c20      	ldr	r4, [pc, #128]	; (8007be8 <_malloc_r+0xb0>)
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	b91b      	cbnz	r3, 8007b74 <_malloc_r+0x3c>
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f000 f83d 	bl	8007bec <_sbrk_r>
 8007b72:	6020      	str	r0, [r4, #0]
 8007b74:	4629      	mov	r1, r5
 8007b76:	4630      	mov	r0, r6
 8007b78:	f000 f838 	bl	8007bec <_sbrk_r>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d124      	bne.n	8007bca <_malloc_r+0x92>
 8007b80:	230c      	movs	r3, #12
 8007b82:	6033      	str	r3, [r6, #0]
 8007b84:	4630      	mov	r0, r6
 8007b86:	f000 f862 	bl	8007c4e <__malloc_unlock>
 8007b8a:	e7e4      	b.n	8007b56 <_malloc_r+0x1e>
 8007b8c:	680b      	ldr	r3, [r1, #0]
 8007b8e:	1b5b      	subs	r3, r3, r5
 8007b90:	d418      	bmi.n	8007bc4 <_malloc_r+0x8c>
 8007b92:	2b0b      	cmp	r3, #11
 8007b94:	d90f      	bls.n	8007bb6 <_malloc_r+0x7e>
 8007b96:	600b      	str	r3, [r1, #0]
 8007b98:	50cd      	str	r5, [r1, r3]
 8007b9a:	18cc      	adds	r4, r1, r3
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f000 f856 	bl	8007c4e <__malloc_unlock>
 8007ba2:	f104 000b 	add.w	r0, r4, #11
 8007ba6:	1d23      	adds	r3, r4, #4
 8007ba8:	f020 0007 	bic.w	r0, r0, #7
 8007bac:	1ac3      	subs	r3, r0, r3
 8007bae:	d0d3      	beq.n	8007b58 <_malloc_r+0x20>
 8007bb0:	425a      	negs	r2, r3
 8007bb2:	50e2      	str	r2, [r4, r3]
 8007bb4:	e7d0      	b.n	8007b58 <_malloc_r+0x20>
 8007bb6:	428c      	cmp	r4, r1
 8007bb8:	684b      	ldr	r3, [r1, #4]
 8007bba:	bf16      	itet	ne
 8007bbc:	6063      	strne	r3, [r4, #4]
 8007bbe:	6013      	streq	r3, [r2, #0]
 8007bc0:	460c      	movne	r4, r1
 8007bc2:	e7eb      	b.n	8007b9c <_malloc_r+0x64>
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	6849      	ldr	r1, [r1, #4]
 8007bc8:	e7cc      	b.n	8007b64 <_malloc_r+0x2c>
 8007bca:	1cc4      	adds	r4, r0, #3
 8007bcc:	f024 0403 	bic.w	r4, r4, #3
 8007bd0:	42a0      	cmp	r0, r4
 8007bd2:	d005      	beq.n	8007be0 <_malloc_r+0xa8>
 8007bd4:	1a21      	subs	r1, r4, r0
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f000 f808 	bl	8007bec <_sbrk_r>
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d0cf      	beq.n	8007b80 <_malloc_r+0x48>
 8007be0:	6025      	str	r5, [r4, #0]
 8007be2:	e7db      	b.n	8007b9c <_malloc_r+0x64>
 8007be4:	20000214 	.word	0x20000214
 8007be8:	20000218 	.word	0x20000218

08007bec <_sbrk_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4c06      	ldr	r4, [pc, #24]	; (8007c08 <_sbrk_r+0x1c>)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	6023      	str	r3, [r4, #0]
 8007bf8:	f7f9 fa7e 	bl	80010f8 <_sbrk>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d102      	bne.n	8007c06 <_sbrk_r+0x1a>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	b103      	cbz	r3, 8007c06 <_sbrk_r+0x1a>
 8007c04:	602b      	str	r3, [r5, #0]
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	20001b58 	.word	0x20001b58

08007c0c <siprintf>:
 8007c0c:	b40e      	push	{r1, r2, r3}
 8007c0e:	b500      	push	{lr}
 8007c10:	b09c      	sub	sp, #112	; 0x70
 8007c12:	ab1d      	add	r3, sp, #116	; 0x74
 8007c14:	9002      	str	r0, [sp, #8]
 8007c16:	9006      	str	r0, [sp, #24]
 8007c18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c1c:	4809      	ldr	r0, [pc, #36]	; (8007c44 <siprintf+0x38>)
 8007c1e:	9107      	str	r1, [sp, #28]
 8007c20:	9104      	str	r1, [sp, #16]
 8007c22:	4909      	ldr	r1, [pc, #36]	; (8007c48 <siprintf+0x3c>)
 8007c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c28:	9105      	str	r1, [sp, #20]
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	a902      	add	r1, sp, #8
 8007c30:	f000 f868 	bl	8007d04 <_svfiprintf_r>
 8007c34:	9b02      	ldr	r3, [sp, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	b01c      	add	sp, #112	; 0x70
 8007c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c40:	b003      	add	sp, #12
 8007c42:	4770      	bx	lr
 8007c44:	20000180 	.word	0x20000180
 8007c48:	ffff0208 	.word	0xffff0208

08007c4c <__malloc_lock>:
 8007c4c:	4770      	bx	lr

08007c4e <__malloc_unlock>:
 8007c4e:	4770      	bx	lr

08007c50 <__ssputs_r>:
 8007c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	688e      	ldr	r6, [r1, #8]
 8007c56:	429e      	cmp	r6, r3
 8007c58:	4682      	mov	sl, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	4690      	mov	r8, r2
 8007c5e:	4699      	mov	r9, r3
 8007c60:	d837      	bhi.n	8007cd2 <__ssputs_r+0x82>
 8007c62:	898a      	ldrh	r2, [r1, #12]
 8007c64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c68:	d031      	beq.n	8007cce <__ssputs_r+0x7e>
 8007c6a:	6825      	ldr	r5, [r4, #0]
 8007c6c:	6909      	ldr	r1, [r1, #16]
 8007c6e:	1a6f      	subs	r7, r5, r1
 8007c70:	6965      	ldr	r5, [r4, #20]
 8007c72:	2302      	movs	r3, #2
 8007c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c78:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c7c:	f109 0301 	add.w	r3, r9, #1
 8007c80:	443b      	add	r3, r7
 8007c82:	429d      	cmp	r5, r3
 8007c84:	bf38      	it	cc
 8007c86:	461d      	movcc	r5, r3
 8007c88:	0553      	lsls	r3, r2, #21
 8007c8a:	d530      	bpl.n	8007cee <__ssputs_r+0x9e>
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	f7ff ff53 	bl	8007b38 <_malloc_r>
 8007c92:	4606      	mov	r6, r0
 8007c94:	b950      	cbnz	r0, 8007cac <__ssputs_r+0x5c>
 8007c96:	230c      	movs	r3, #12
 8007c98:	f8ca 3000 	str.w	r3, [sl]
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca2:	81a3      	strh	r3, [r4, #12]
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cac:	463a      	mov	r2, r7
 8007cae:	6921      	ldr	r1, [r4, #16]
 8007cb0:	f000 faa8 	bl	8008204 <memcpy>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	6126      	str	r6, [r4, #16]
 8007cc2:	6165      	str	r5, [r4, #20]
 8007cc4:	443e      	add	r6, r7
 8007cc6:	1bed      	subs	r5, r5, r7
 8007cc8:	6026      	str	r6, [r4, #0]
 8007cca:	60a5      	str	r5, [r4, #8]
 8007ccc:	464e      	mov	r6, r9
 8007cce:	454e      	cmp	r6, r9
 8007cd0:	d900      	bls.n	8007cd4 <__ssputs_r+0x84>
 8007cd2:	464e      	mov	r6, r9
 8007cd4:	4632      	mov	r2, r6
 8007cd6:	4641      	mov	r1, r8
 8007cd8:	6820      	ldr	r0, [r4, #0]
 8007cda:	f000 fa9e 	bl	800821a <memmove>
 8007cde:	68a3      	ldr	r3, [r4, #8]
 8007ce0:	1b9b      	subs	r3, r3, r6
 8007ce2:	60a3      	str	r3, [r4, #8]
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	441e      	add	r6, r3
 8007ce8:	6026      	str	r6, [r4, #0]
 8007cea:	2000      	movs	r0, #0
 8007cec:	e7dc      	b.n	8007ca8 <__ssputs_r+0x58>
 8007cee:	462a      	mov	r2, r5
 8007cf0:	f000 faac 	bl	800824c <_realloc_r>
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d1e2      	bne.n	8007cc0 <__ssputs_r+0x70>
 8007cfa:	6921      	ldr	r1, [r4, #16]
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	f7ff fecd 	bl	8007a9c <_free_r>
 8007d02:	e7c8      	b.n	8007c96 <__ssputs_r+0x46>

08007d04 <_svfiprintf_r>:
 8007d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d08:	461d      	mov	r5, r3
 8007d0a:	898b      	ldrh	r3, [r1, #12]
 8007d0c:	061f      	lsls	r7, r3, #24
 8007d0e:	b09d      	sub	sp, #116	; 0x74
 8007d10:	4680      	mov	r8, r0
 8007d12:	460c      	mov	r4, r1
 8007d14:	4616      	mov	r6, r2
 8007d16:	d50f      	bpl.n	8007d38 <_svfiprintf_r+0x34>
 8007d18:	690b      	ldr	r3, [r1, #16]
 8007d1a:	b96b      	cbnz	r3, 8007d38 <_svfiprintf_r+0x34>
 8007d1c:	2140      	movs	r1, #64	; 0x40
 8007d1e:	f7ff ff0b 	bl	8007b38 <_malloc_r>
 8007d22:	6020      	str	r0, [r4, #0]
 8007d24:	6120      	str	r0, [r4, #16]
 8007d26:	b928      	cbnz	r0, 8007d34 <_svfiprintf_r+0x30>
 8007d28:	230c      	movs	r3, #12
 8007d2a:	f8c8 3000 	str.w	r3, [r8]
 8007d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d32:	e0c8      	b.n	8007ec6 <_svfiprintf_r+0x1c2>
 8007d34:	2340      	movs	r3, #64	; 0x40
 8007d36:	6163      	str	r3, [r4, #20]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3c:	2320      	movs	r3, #32
 8007d3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d42:	2330      	movs	r3, #48	; 0x30
 8007d44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d48:	9503      	str	r5, [sp, #12]
 8007d4a:	f04f 0b01 	mov.w	fp, #1
 8007d4e:	4637      	mov	r7, r6
 8007d50:	463d      	mov	r5, r7
 8007d52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d56:	b10b      	cbz	r3, 8007d5c <_svfiprintf_r+0x58>
 8007d58:	2b25      	cmp	r3, #37	; 0x25
 8007d5a:	d13e      	bne.n	8007dda <_svfiprintf_r+0xd6>
 8007d5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d60:	d00b      	beq.n	8007d7a <_svfiprintf_r+0x76>
 8007d62:	4653      	mov	r3, sl
 8007d64:	4632      	mov	r2, r6
 8007d66:	4621      	mov	r1, r4
 8007d68:	4640      	mov	r0, r8
 8007d6a:	f7ff ff71 	bl	8007c50 <__ssputs_r>
 8007d6e:	3001      	adds	r0, #1
 8007d70:	f000 80a4 	beq.w	8007ebc <_svfiprintf_r+0x1b8>
 8007d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d76:	4453      	add	r3, sl
 8007d78:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7a:	783b      	ldrb	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 809d 	beq.w	8007ebc <_svfiprintf_r+0x1b8>
 8007d82:	2300      	movs	r3, #0
 8007d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d8c:	9304      	str	r3, [sp, #16]
 8007d8e:	9307      	str	r3, [sp, #28]
 8007d90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d94:	931a      	str	r3, [sp, #104]	; 0x68
 8007d96:	462f      	mov	r7, r5
 8007d98:	2205      	movs	r2, #5
 8007d9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d9e:	4850      	ldr	r0, [pc, #320]	; (8007ee0 <_svfiprintf_r+0x1dc>)
 8007da0:	f7f8 fa16 	bl	80001d0 <memchr>
 8007da4:	9b04      	ldr	r3, [sp, #16]
 8007da6:	b9d0      	cbnz	r0, 8007dde <_svfiprintf_r+0xda>
 8007da8:	06d9      	lsls	r1, r3, #27
 8007daa:	bf44      	itt	mi
 8007dac:	2220      	movmi	r2, #32
 8007dae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007db2:	071a      	lsls	r2, r3, #28
 8007db4:	bf44      	itt	mi
 8007db6:	222b      	movmi	r2, #43	; 0x2b
 8007db8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007dbc:	782a      	ldrb	r2, [r5, #0]
 8007dbe:	2a2a      	cmp	r2, #42	; 0x2a
 8007dc0:	d015      	beq.n	8007dee <_svfiprintf_r+0xea>
 8007dc2:	9a07      	ldr	r2, [sp, #28]
 8007dc4:	462f      	mov	r7, r5
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	250a      	movs	r5, #10
 8007dca:	4639      	mov	r1, r7
 8007dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dd0:	3b30      	subs	r3, #48	; 0x30
 8007dd2:	2b09      	cmp	r3, #9
 8007dd4:	d94d      	bls.n	8007e72 <_svfiprintf_r+0x16e>
 8007dd6:	b1b8      	cbz	r0, 8007e08 <_svfiprintf_r+0x104>
 8007dd8:	e00f      	b.n	8007dfa <_svfiprintf_r+0xf6>
 8007dda:	462f      	mov	r7, r5
 8007ddc:	e7b8      	b.n	8007d50 <_svfiprintf_r+0x4c>
 8007dde:	4a40      	ldr	r2, [pc, #256]	; (8007ee0 <_svfiprintf_r+0x1dc>)
 8007de0:	1a80      	subs	r0, r0, r2
 8007de2:	fa0b f000 	lsl.w	r0, fp, r0
 8007de6:	4318      	orrs	r0, r3
 8007de8:	9004      	str	r0, [sp, #16]
 8007dea:	463d      	mov	r5, r7
 8007dec:	e7d3      	b.n	8007d96 <_svfiprintf_r+0x92>
 8007dee:	9a03      	ldr	r2, [sp, #12]
 8007df0:	1d11      	adds	r1, r2, #4
 8007df2:	6812      	ldr	r2, [r2, #0]
 8007df4:	9103      	str	r1, [sp, #12]
 8007df6:	2a00      	cmp	r2, #0
 8007df8:	db01      	blt.n	8007dfe <_svfiprintf_r+0xfa>
 8007dfa:	9207      	str	r2, [sp, #28]
 8007dfc:	e004      	b.n	8007e08 <_svfiprintf_r+0x104>
 8007dfe:	4252      	negs	r2, r2
 8007e00:	f043 0302 	orr.w	r3, r3, #2
 8007e04:	9207      	str	r2, [sp, #28]
 8007e06:	9304      	str	r3, [sp, #16]
 8007e08:	783b      	ldrb	r3, [r7, #0]
 8007e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e0c:	d10c      	bne.n	8007e28 <_svfiprintf_r+0x124>
 8007e0e:	787b      	ldrb	r3, [r7, #1]
 8007e10:	2b2a      	cmp	r3, #42	; 0x2a
 8007e12:	d133      	bne.n	8007e7c <_svfiprintf_r+0x178>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	1d1a      	adds	r2, r3, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	9203      	str	r2, [sp, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bfb8      	it	lt
 8007e20:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e24:	3702      	adds	r7, #2
 8007e26:	9305      	str	r3, [sp, #20]
 8007e28:	4d2e      	ldr	r5, [pc, #184]	; (8007ee4 <_svfiprintf_r+0x1e0>)
 8007e2a:	7839      	ldrb	r1, [r7, #0]
 8007e2c:	2203      	movs	r2, #3
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f7f8 f9ce 	bl	80001d0 <memchr>
 8007e34:	b138      	cbz	r0, 8007e46 <_svfiprintf_r+0x142>
 8007e36:	2340      	movs	r3, #64	; 0x40
 8007e38:	1b40      	subs	r0, r0, r5
 8007e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e3e:	9b04      	ldr	r3, [sp, #16]
 8007e40:	4303      	orrs	r3, r0
 8007e42:	3701      	adds	r7, #1
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	7839      	ldrb	r1, [r7, #0]
 8007e48:	4827      	ldr	r0, [pc, #156]	; (8007ee8 <_svfiprintf_r+0x1e4>)
 8007e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e4e:	2206      	movs	r2, #6
 8007e50:	1c7e      	adds	r6, r7, #1
 8007e52:	f7f8 f9bd 	bl	80001d0 <memchr>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d038      	beq.n	8007ecc <_svfiprintf_r+0x1c8>
 8007e5a:	4b24      	ldr	r3, [pc, #144]	; (8007eec <_svfiprintf_r+0x1e8>)
 8007e5c:	bb13      	cbnz	r3, 8007ea4 <_svfiprintf_r+0x1a0>
 8007e5e:	9b03      	ldr	r3, [sp, #12]
 8007e60:	3307      	adds	r3, #7
 8007e62:	f023 0307 	bic.w	r3, r3, #7
 8007e66:	3308      	adds	r3, #8
 8007e68:	9303      	str	r3, [sp, #12]
 8007e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6c:	444b      	add	r3, r9
 8007e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e70:	e76d      	b.n	8007d4e <_svfiprintf_r+0x4a>
 8007e72:	fb05 3202 	mla	r2, r5, r2, r3
 8007e76:	2001      	movs	r0, #1
 8007e78:	460f      	mov	r7, r1
 8007e7a:	e7a6      	b.n	8007dca <_svfiprintf_r+0xc6>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	3701      	adds	r7, #1
 8007e80:	9305      	str	r3, [sp, #20]
 8007e82:	4619      	mov	r1, r3
 8007e84:	250a      	movs	r5, #10
 8007e86:	4638      	mov	r0, r7
 8007e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e8c:	3a30      	subs	r2, #48	; 0x30
 8007e8e:	2a09      	cmp	r2, #9
 8007e90:	d903      	bls.n	8007e9a <_svfiprintf_r+0x196>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0c8      	beq.n	8007e28 <_svfiprintf_r+0x124>
 8007e96:	9105      	str	r1, [sp, #20]
 8007e98:	e7c6      	b.n	8007e28 <_svfiprintf_r+0x124>
 8007e9a:	fb05 2101 	mla	r1, r5, r1, r2
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	e7f0      	b.n	8007e86 <_svfiprintf_r+0x182>
 8007ea4:	ab03      	add	r3, sp, #12
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	4622      	mov	r2, r4
 8007eaa:	4b11      	ldr	r3, [pc, #68]	; (8007ef0 <_svfiprintf_r+0x1ec>)
 8007eac:	a904      	add	r1, sp, #16
 8007eae:	4640      	mov	r0, r8
 8007eb0:	f3af 8000 	nop.w
 8007eb4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007eb8:	4681      	mov	r9, r0
 8007eba:	d1d6      	bne.n	8007e6a <_svfiprintf_r+0x166>
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	065b      	lsls	r3, r3, #25
 8007ec0:	f53f af35 	bmi.w	8007d2e <_svfiprintf_r+0x2a>
 8007ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ec6:	b01d      	add	sp, #116	; 0x74
 8007ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ecc:	ab03      	add	r3, sp, #12
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <_svfiprintf_r+0x1ec>)
 8007ed4:	a904      	add	r1, sp, #16
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	f000 f882 	bl	8007fe0 <_printf_i>
 8007edc:	e7ea      	b.n	8007eb4 <_svfiprintf_r+0x1b0>
 8007ede:	bf00      	nop
 8007ee0:	08008338 	.word	0x08008338
 8007ee4:	0800833e 	.word	0x0800833e
 8007ee8:	08008342 	.word	0x08008342
 8007eec:	00000000 	.word	0x00000000
 8007ef0:	08007c51 	.word	0x08007c51

08007ef4 <_printf_common>:
 8007ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef8:	4691      	mov	r9, r2
 8007efa:	461f      	mov	r7, r3
 8007efc:	688a      	ldr	r2, [r1, #8]
 8007efe:	690b      	ldr	r3, [r1, #16]
 8007f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f04:	4293      	cmp	r3, r2
 8007f06:	bfb8      	it	lt
 8007f08:	4613      	movlt	r3, r2
 8007f0a:	f8c9 3000 	str.w	r3, [r9]
 8007f0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f12:	4606      	mov	r6, r0
 8007f14:	460c      	mov	r4, r1
 8007f16:	b112      	cbz	r2, 8007f1e <_printf_common+0x2a>
 8007f18:	3301      	adds	r3, #1
 8007f1a:	f8c9 3000 	str.w	r3, [r9]
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	0699      	lsls	r1, r3, #26
 8007f22:	bf42      	ittt	mi
 8007f24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007f28:	3302      	addmi	r3, #2
 8007f2a:	f8c9 3000 	strmi.w	r3, [r9]
 8007f2e:	6825      	ldr	r5, [r4, #0]
 8007f30:	f015 0506 	ands.w	r5, r5, #6
 8007f34:	d107      	bne.n	8007f46 <_printf_common+0x52>
 8007f36:	f104 0a19 	add.w	sl, r4, #25
 8007f3a:	68e3      	ldr	r3, [r4, #12]
 8007f3c:	f8d9 2000 	ldr.w	r2, [r9]
 8007f40:	1a9b      	subs	r3, r3, r2
 8007f42:	42ab      	cmp	r3, r5
 8007f44:	dc28      	bgt.n	8007f98 <_printf_common+0xa4>
 8007f46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007f4a:	6822      	ldr	r2, [r4, #0]
 8007f4c:	3300      	adds	r3, #0
 8007f4e:	bf18      	it	ne
 8007f50:	2301      	movne	r3, #1
 8007f52:	0692      	lsls	r2, r2, #26
 8007f54:	d42d      	bmi.n	8007fb2 <_printf_common+0xbe>
 8007f56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	47c0      	blx	r8
 8007f60:	3001      	adds	r0, #1
 8007f62:	d020      	beq.n	8007fa6 <_printf_common+0xb2>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	68e5      	ldr	r5, [r4, #12]
 8007f68:	f8d9 2000 	ldr.w	r2, [r9]
 8007f6c:	f003 0306 	and.w	r3, r3, #6
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	bf08      	it	eq
 8007f74:	1aad      	subeq	r5, r5, r2
 8007f76:	68a3      	ldr	r3, [r4, #8]
 8007f78:	6922      	ldr	r2, [r4, #16]
 8007f7a:	bf0c      	ite	eq
 8007f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f80:	2500      	movne	r5, #0
 8007f82:	4293      	cmp	r3, r2
 8007f84:	bfc4      	itt	gt
 8007f86:	1a9b      	subgt	r3, r3, r2
 8007f88:	18ed      	addgt	r5, r5, r3
 8007f8a:	f04f 0900 	mov.w	r9, #0
 8007f8e:	341a      	adds	r4, #26
 8007f90:	454d      	cmp	r5, r9
 8007f92:	d11a      	bne.n	8007fca <_printf_common+0xd6>
 8007f94:	2000      	movs	r0, #0
 8007f96:	e008      	b.n	8007faa <_printf_common+0xb6>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	4652      	mov	r2, sl
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	47c0      	blx	r8
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	d103      	bne.n	8007fae <_printf_common+0xba>
 8007fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fae:	3501      	adds	r5, #1
 8007fb0:	e7c3      	b.n	8007f3a <_printf_common+0x46>
 8007fb2:	18e1      	adds	r1, r4, r3
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	2030      	movs	r0, #48	; 0x30
 8007fb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fbc:	4422      	add	r2, r4
 8007fbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fc6:	3302      	adds	r3, #2
 8007fc8:	e7c5      	b.n	8007f56 <_printf_common+0x62>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	4622      	mov	r2, r4
 8007fce:	4639      	mov	r1, r7
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	47c0      	blx	r8
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d0e6      	beq.n	8007fa6 <_printf_common+0xb2>
 8007fd8:	f109 0901 	add.w	r9, r9, #1
 8007fdc:	e7d8      	b.n	8007f90 <_printf_common+0x9c>
	...

08007fe0 <_printf_i>:
 8007fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fe4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007fe8:	460c      	mov	r4, r1
 8007fea:	7e09      	ldrb	r1, [r1, #24]
 8007fec:	b085      	sub	sp, #20
 8007fee:	296e      	cmp	r1, #110	; 0x6e
 8007ff0:	4617      	mov	r7, r2
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	4698      	mov	r8, r3
 8007ff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ff8:	f000 80b3 	beq.w	8008162 <_printf_i+0x182>
 8007ffc:	d822      	bhi.n	8008044 <_printf_i+0x64>
 8007ffe:	2963      	cmp	r1, #99	; 0x63
 8008000:	d036      	beq.n	8008070 <_printf_i+0x90>
 8008002:	d80a      	bhi.n	800801a <_printf_i+0x3a>
 8008004:	2900      	cmp	r1, #0
 8008006:	f000 80b9 	beq.w	800817c <_printf_i+0x19c>
 800800a:	2958      	cmp	r1, #88	; 0x58
 800800c:	f000 8083 	beq.w	8008116 <_printf_i+0x136>
 8008010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008014:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008018:	e032      	b.n	8008080 <_printf_i+0xa0>
 800801a:	2964      	cmp	r1, #100	; 0x64
 800801c:	d001      	beq.n	8008022 <_printf_i+0x42>
 800801e:	2969      	cmp	r1, #105	; 0x69
 8008020:	d1f6      	bne.n	8008010 <_printf_i+0x30>
 8008022:	6820      	ldr	r0, [r4, #0]
 8008024:	6813      	ldr	r3, [r2, #0]
 8008026:	0605      	lsls	r5, r0, #24
 8008028:	f103 0104 	add.w	r1, r3, #4
 800802c:	d52a      	bpl.n	8008084 <_printf_i+0xa4>
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6011      	str	r1, [r2, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	da03      	bge.n	800803e <_printf_i+0x5e>
 8008036:	222d      	movs	r2, #45	; 0x2d
 8008038:	425b      	negs	r3, r3
 800803a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800803e:	486f      	ldr	r0, [pc, #444]	; (80081fc <_printf_i+0x21c>)
 8008040:	220a      	movs	r2, #10
 8008042:	e039      	b.n	80080b8 <_printf_i+0xd8>
 8008044:	2973      	cmp	r1, #115	; 0x73
 8008046:	f000 809d 	beq.w	8008184 <_printf_i+0x1a4>
 800804a:	d808      	bhi.n	800805e <_printf_i+0x7e>
 800804c:	296f      	cmp	r1, #111	; 0x6f
 800804e:	d020      	beq.n	8008092 <_printf_i+0xb2>
 8008050:	2970      	cmp	r1, #112	; 0x70
 8008052:	d1dd      	bne.n	8008010 <_printf_i+0x30>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	f043 0320 	orr.w	r3, r3, #32
 800805a:	6023      	str	r3, [r4, #0]
 800805c:	e003      	b.n	8008066 <_printf_i+0x86>
 800805e:	2975      	cmp	r1, #117	; 0x75
 8008060:	d017      	beq.n	8008092 <_printf_i+0xb2>
 8008062:	2978      	cmp	r1, #120	; 0x78
 8008064:	d1d4      	bne.n	8008010 <_printf_i+0x30>
 8008066:	2378      	movs	r3, #120	; 0x78
 8008068:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800806c:	4864      	ldr	r0, [pc, #400]	; (8008200 <_printf_i+0x220>)
 800806e:	e055      	b.n	800811c <_printf_i+0x13c>
 8008070:	6813      	ldr	r3, [r2, #0]
 8008072:	1d19      	adds	r1, r3, #4
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6011      	str	r1, [r2, #0]
 8008078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800807c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008080:	2301      	movs	r3, #1
 8008082:	e08c      	b.n	800819e <_printf_i+0x1be>
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6011      	str	r1, [r2, #0]
 8008088:	f010 0f40 	tst.w	r0, #64	; 0x40
 800808c:	bf18      	it	ne
 800808e:	b21b      	sxthne	r3, r3
 8008090:	e7cf      	b.n	8008032 <_printf_i+0x52>
 8008092:	6813      	ldr	r3, [r2, #0]
 8008094:	6825      	ldr	r5, [r4, #0]
 8008096:	1d18      	adds	r0, r3, #4
 8008098:	6010      	str	r0, [r2, #0]
 800809a:	0628      	lsls	r0, r5, #24
 800809c:	d501      	bpl.n	80080a2 <_printf_i+0xc2>
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	e002      	b.n	80080a8 <_printf_i+0xc8>
 80080a2:	0668      	lsls	r0, r5, #25
 80080a4:	d5fb      	bpl.n	800809e <_printf_i+0xbe>
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	4854      	ldr	r0, [pc, #336]	; (80081fc <_printf_i+0x21c>)
 80080aa:	296f      	cmp	r1, #111	; 0x6f
 80080ac:	bf14      	ite	ne
 80080ae:	220a      	movne	r2, #10
 80080b0:	2208      	moveq	r2, #8
 80080b2:	2100      	movs	r1, #0
 80080b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080b8:	6865      	ldr	r5, [r4, #4]
 80080ba:	60a5      	str	r5, [r4, #8]
 80080bc:	2d00      	cmp	r5, #0
 80080be:	f2c0 8095 	blt.w	80081ec <_printf_i+0x20c>
 80080c2:	6821      	ldr	r1, [r4, #0]
 80080c4:	f021 0104 	bic.w	r1, r1, #4
 80080c8:	6021      	str	r1, [r4, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d13d      	bne.n	800814a <_printf_i+0x16a>
 80080ce:	2d00      	cmp	r5, #0
 80080d0:	f040 808e 	bne.w	80081f0 <_printf_i+0x210>
 80080d4:	4665      	mov	r5, ip
 80080d6:	2a08      	cmp	r2, #8
 80080d8:	d10b      	bne.n	80080f2 <_printf_i+0x112>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	07db      	lsls	r3, r3, #31
 80080de:	d508      	bpl.n	80080f2 <_printf_i+0x112>
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	6862      	ldr	r2, [r4, #4]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	bfde      	ittt	le
 80080e8:	2330      	movle	r3, #48	; 0x30
 80080ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080ee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80080f2:	ebac 0305 	sub.w	r3, ip, r5
 80080f6:	6123      	str	r3, [r4, #16]
 80080f8:	f8cd 8000 	str.w	r8, [sp]
 80080fc:	463b      	mov	r3, r7
 80080fe:	aa03      	add	r2, sp, #12
 8008100:	4621      	mov	r1, r4
 8008102:	4630      	mov	r0, r6
 8008104:	f7ff fef6 	bl	8007ef4 <_printf_common>
 8008108:	3001      	adds	r0, #1
 800810a:	d14d      	bne.n	80081a8 <_printf_i+0x1c8>
 800810c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008110:	b005      	add	sp, #20
 8008112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008116:	4839      	ldr	r0, [pc, #228]	; (80081fc <_printf_i+0x21c>)
 8008118:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800811c:	6813      	ldr	r3, [r2, #0]
 800811e:	6821      	ldr	r1, [r4, #0]
 8008120:	1d1d      	adds	r5, r3, #4
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6015      	str	r5, [r2, #0]
 8008126:	060a      	lsls	r2, r1, #24
 8008128:	d50b      	bpl.n	8008142 <_printf_i+0x162>
 800812a:	07ca      	lsls	r2, r1, #31
 800812c:	bf44      	itt	mi
 800812e:	f041 0120 	orrmi.w	r1, r1, #32
 8008132:	6021      	strmi	r1, [r4, #0]
 8008134:	b91b      	cbnz	r3, 800813e <_printf_i+0x15e>
 8008136:	6822      	ldr	r2, [r4, #0]
 8008138:	f022 0220 	bic.w	r2, r2, #32
 800813c:	6022      	str	r2, [r4, #0]
 800813e:	2210      	movs	r2, #16
 8008140:	e7b7      	b.n	80080b2 <_printf_i+0xd2>
 8008142:	064d      	lsls	r5, r1, #25
 8008144:	bf48      	it	mi
 8008146:	b29b      	uxthmi	r3, r3
 8008148:	e7ef      	b.n	800812a <_printf_i+0x14a>
 800814a:	4665      	mov	r5, ip
 800814c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008150:	fb02 3311 	mls	r3, r2, r1, r3
 8008154:	5cc3      	ldrb	r3, [r0, r3]
 8008156:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800815a:	460b      	mov	r3, r1
 800815c:	2900      	cmp	r1, #0
 800815e:	d1f5      	bne.n	800814c <_printf_i+0x16c>
 8008160:	e7b9      	b.n	80080d6 <_printf_i+0xf6>
 8008162:	6813      	ldr	r3, [r2, #0]
 8008164:	6825      	ldr	r5, [r4, #0]
 8008166:	6961      	ldr	r1, [r4, #20]
 8008168:	1d18      	adds	r0, r3, #4
 800816a:	6010      	str	r0, [r2, #0]
 800816c:	0628      	lsls	r0, r5, #24
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	d501      	bpl.n	8008176 <_printf_i+0x196>
 8008172:	6019      	str	r1, [r3, #0]
 8008174:	e002      	b.n	800817c <_printf_i+0x19c>
 8008176:	066a      	lsls	r2, r5, #25
 8008178:	d5fb      	bpl.n	8008172 <_printf_i+0x192>
 800817a:	8019      	strh	r1, [r3, #0]
 800817c:	2300      	movs	r3, #0
 800817e:	6123      	str	r3, [r4, #16]
 8008180:	4665      	mov	r5, ip
 8008182:	e7b9      	b.n	80080f8 <_printf_i+0x118>
 8008184:	6813      	ldr	r3, [r2, #0]
 8008186:	1d19      	adds	r1, r3, #4
 8008188:	6011      	str	r1, [r2, #0]
 800818a:	681d      	ldr	r5, [r3, #0]
 800818c:	6862      	ldr	r2, [r4, #4]
 800818e:	2100      	movs	r1, #0
 8008190:	4628      	mov	r0, r5
 8008192:	f7f8 f81d 	bl	80001d0 <memchr>
 8008196:	b108      	cbz	r0, 800819c <_printf_i+0x1bc>
 8008198:	1b40      	subs	r0, r0, r5
 800819a:	6060      	str	r0, [r4, #4]
 800819c:	6863      	ldr	r3, [r4, #4]
 800819e:	6123      	str	r3, [r4, #16]
 80081a0:	2300      	movs	r3, #0
 80081a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a6:	e7a7      	b.n	80080f8 <_printf_i+0x118>
 80081a8:	6923      	ldr	r3, [r4, #16]
 80081aa:	462a      	mov	r2, r5
 80081ac:	4639      	mov	r1, r7
 80081ae:	4630      	mov	r0, r6
 80081b0:	47c0      	blx	r8
 80081b2:	3001      	adds	r0, #1
 80081b4:	d0aa      	beq.n	800810c <_printf_i+0x12c>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	079b      	lsls	r3, r3, #30
 80081ba:	d413      	bmi.n	80081e4 <_printf_i+0x204>
 80081bc:	68e0      	ldr	r0, [r4, #12]
 80081be:	9b03      	ldr	r3, [sp, #12]
 80081c0:	4298      	cmp	r0, r3
 80081c2:	bfb8      	it	lt
 80081c4:	4618      	movlt	r0, r3
 80081c6:	e7a3      	b.n	8008110 <_printf_i+0x130>
 80081c8:	2301      	movs	r3, #1
 80081ca:	464a      	mov	r2, r9
 80081cc:	4639      	mov	r1, r7
 80081ce:	4630      	mov	r0, r6
 80081d0:	47c0      	blx	r8
 80081d2:	3001      	adds	r0, #1
 80081d4:	d09a      	beq.n	800810c <_printf_i+0x12c>
 80081d6:	3501      	adds	r5, #1
 80081d8:	68e3      	ldr	r3, [r4, #12]
 80081da:	9a03      	ldr	r2, [sp, #12]
 80081dc:	1a9b      	subs	r3, r3, r2
 80081de:	42ab      	cmp	r3, r5
 80081e0:	dcf2      	bgt.n	80081c8 <_printf_i+0x1e8>
 80081e2:	e7eb      	b.n	80081bc <_printf_i+0x1dc>
 80081e4:	2500      	movs	r5, #0
 80081e6:	f104 0919 	add.w	r9, r4, #25
 80081ea:	e7f5      	b.n	80081d8 <_printf_i+0x1f8>
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1ac      	bne.n	800814a <_printf_i+0x16a>
 80081f0:	7803      	ldrb	r3, [r0, #0]
 80081f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081fa:	e76c      	b.n	80080d6 <_printf_i+0xf6>
 80081fc:	08008349 	.word	0x08008349
 8008200:	0800835a 	.word	0x0800835a

08008204 <memcpy>:
 8008204:	b510      	push	{r4, lr}
 8008206:	1e43      	subs	r3, r0, #1
 8008208:	440a      	add	r2, r1
 800820a:	4291      	cmp	r1, r2
 800820c:	d100      	bne.n	8008210 <memcpy+0xc>
 800820e:	bd10      	pop	{r4, pc}
 8008210:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008214:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008218:	e7f7      	b.n	800820a <memcpy+0x6>

0800821a <memmove>:
 800821a:	4288      	cmp	r0, r1
 800821c:	b510      	push	{r4, lr}
 800821e:	eb01 0302 	add.w	r3, r1, r2
 8008222:	d807      	bhi.n	8008234 <memmove+0x1a>
 8008224:	1e42      	subs	r2, r0, #1
 8008226:	4299      	cmp	r1, r3
 8008228:	d00a      	beq.n	8008240 <memmove+0x26>
 800822a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800822e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008232:	e7f8      	b.n	8008226 <memmove+0xc>
 8008234:	4283      	cmp	r3, r0
 8008236:	d9f5      	bls.n	8008224 <memmove+0xa>
 8008238:	1881      	adds	r1, r0, r2
 800823a:	1ad2      	subs	r2, r2, r3
 800823c:	42d3      	cmn	r3, r2
 800823e:	d100      	bne.n	8008242 <memmove+0x28>
 8008240:	bd10      	pop	{r4, pc}
 8008242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008246:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800824a:	e7f7      	b.n	800823c <memmove+0x22>

0800824c <_realloc_r>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	4607      	mov	r7, r0
 8008250:	4614      	mov	r4, r2
 8008252:	460e      	mov	r6, r1
 8008254:	b921      	cbnz	r1, 8008260 <_realloc_r+0x14>
 8008256:	4611      	mov	r1, r2
 8008258:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800825c:	f7ff bc6c 	b.w	8007b38 <_malloc_r>
 8008260:	b922      	cbnz	r2, 800826c <_realloc_r+0x20>
 8008262:	f7ff fc1b 	bl	8007a9c <_free_r>
 8008266:	4625      	mov	r5, r4
 8008268:	4628      	mov	r0, r5
 800826a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800826c:	f000 f814 	bl	8008298 <_malloc_usable_size_r>
 8008270:	42a0      	cmp	r0, r4
 8008272:	d20f      	bcs.n	8008294 <_realloc_r+0x48>
 8008274:	4621      	mov	r1, r4
 8008276:	4638      	mov	r0, r7
 8008278:	f7ff fc5e 	bl	8007b38 <_malloc_r>
 800827c:	4605      	mov	r5, r0
 800827e:	2800      	cmp	r0, #0
 8008280:	d0f2      	beq.n	8008268 <_realloc_r+0x1c>
 8008282:	4631      	mov	r1, r6
 8008284:	4622      	mov	r2, r4
 8008286:	f7ff ffbd 	bl	8008204 <memcpy>
 800828a:	4631      	mov	r1, r6
 800828c:	4638      	mov	r0, r7
 800828e:	f7ff fc05 	bl	8007a9c <_free_r>
 8008292:	e7e9      	b.n	8008268 <_realloc_r+0x1c>
 8008294:	4635      	mov	r5, r6
 8008296:	e7e7      	b.n	8008268 <_realloc_r+0x1c>

08008298 <_malloc_usable_size_r>:
 8008298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800829c:	1f18      	subs	r0, r3, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bfbc      	itt	lt
 80082a2:	580b      	ldrlt	r3, [r1, r0]
 80082a4:	18c0      	addlt	r0, r0, r3
 80082a6:	4770      	bx	lr

080082a8 <_init>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr

080082b4 <_fini>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	bf00      	nop
 80082b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ba:	bc08      	pop	{r3}
 80082bc:	469e      	mov	lr, r3
 80082be:	4770      	bx	lr
