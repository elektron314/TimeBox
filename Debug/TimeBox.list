
TimeBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005030  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800538c  0800538c  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800538c  0800538c  0001538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005394  08005394  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800539c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200000e0  0800547c  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  0800547c  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c984  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f28  00000000  00000000  0002ca94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002e9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002f390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021686  00000000  00000000  0002fcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9d3  00000000  00000000  00051346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9df9  00000000  00000000  0005cd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126b12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb4  00000000  00000000  00126b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051a8 	.word	0x080051a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	080051a8 	.word	0x080051a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2uiz>:
 80005f8:	004a      	lsls	r2, r1, #1
 80005fa:	d211      	bcs.n	8000620 <__aeabi_d2uiz+0x28>
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d211      	bcs.n	8000626 <__aeabi_d2uiz+0x2e>
 8000602:	d50d      	bpl.n	8000620 <__aeabi_d2uiz+0x28>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d40e      	bmi.n	800062c <__aeabi_d2uiz+0x34>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	fa23 f002 	lsr.w	r0, r3, r2
 800061e:	4770      	bx	lr
 8000620:	f04f 0000 	mov.w	r0, #0
 8000624:	4770      	bx	lr
 8000626:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800062a:	d102      	bne.n	8000632 <__aeabi_d2uiz+0x3a>
 800062c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000648:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <TurnHexIntoDec>:
/* USER CODE BEGIN 0 */

//Time is storing in format that being in Hex visually looks like the real time in decimals
//So this function translate this format into real decimal number of time digits
uint8_t TurnHexIntoDec(uint8_t hex)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
	return ((hex & 0x000F) + ((hex >> 4) & 0x000F)*10);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f003 030f 	and.w	r3, r3, #15
 8000940:	b2da      	uxtb	r2, r3
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	0089      	lsls	r1, r1, #2
 800094c:	440b      	add	r3, r1
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4413      	add	r3, r2
 8000954:	b2db      	uxtb	r3, r3
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <TurnDecIntoHex>:

uint8_t TurnDecIntoHex(uint8_t dec)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	return ((((uint8_t)(floor(dec/10))) << 4) + dec%10);
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4a11      	ldr	r2, [pc, #68]	; (80009b8 <TurnDecIntoHex+0x54>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	08db      	lsrs	r3, r3, #3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fdd2 	bl	8000524 <__aeabi_i2d>
 8000980:	4602      	mov	r2, r0
 8000982:	460b      	mov	r3, r1
 8000984:	4610      	mov	r0, r2
 8000986:	4619      	mov	r1, r3
 8000988:	f7ff fe36 	bl	80005f8 <__aeabi_d2uiz>
 800098c:	4603      	mov	r3, r0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	011b      	lsls	r3, r3, #4
 8000992:	b2d8      	uxtb	r0, r3
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <TurnDecIntoHex+0x54>)
 8000998:	fba3 1302 	umull	r1, r3, r3, r2
 800099c:	08d9      	lsrs	r1, r3, #3
 800099e:	460b      	mov	r3, r1
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	440b      	add	r3, r1
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4403      	add	r3, r0
 80009ac:	b2db      	uxtb	r3, r3
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	cccccccd 	.word	0xcccccccd

080009bc <HappyToggling>:

void HappyToggling(uint8_t longetivity)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	uint8_t TogglingDelay = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	73fb      	strb	r3, [r7, #15]
	for (TogglingDelay = 0; TogglingDelay < longetivity; TogglingDelay++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e00b      	b.n	80009e8 <HappyToggling+0x2c>
	{
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80009d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d4:	4809      	ldr	r0, [pc, #36]	; (80009fc <HappyToggling+0x40>)
 80009d6:	f001 fcde 	bl	8002396 <HAL_GPIO_TogglePin>
	  HAL_Delay(TogglingDelay);
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 f92b 	bl	8001c38 <HAL_Delay>
	for (TogglingDelay = 0; TogglingDelay < longetivity; TogglingDelay++)
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	3301      	adds	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	7bfa      	ldrb	r2, [r7, #15]
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d3ef      	bcc.n	80009d0 <HappyToggling+0x14>
	}
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021400 	.word	0x40021400

08000a00 <SetTime>:

void SetTime(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	/** Initialize RTC and set the Time and Date*/
	sTime.Hours = 0x23;
 8000a06:	2323      	movs	r3, #35	; 0x23
 8000a08:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x25;
 8000a0a:	2325      	movs	r3, #37	; 0x25
 8000a0c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <SetTime+0x6c>)
 8000a22:	f002 fb0f 	bl	8003044 <HAL_RTC_SetTime>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SetTime+0x30>
	{
		Error_Handler();
 8000a2c:	f000 fd50 	bl	80014d0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000a30:	2304      	movs	r3, #4
 8000a32:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_FEBRUARY;
 8000a34:	2302      	movs	r3, #2
 8000a36:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x25;
 8000a38:	2325      	movs	r3, #37	; 0x25
 8000a3a:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x21;
 8000a3c:	2321      	movs	r3, #33	; 0x21
 8000a3e:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	2201      	movs	r2, #1
 8000a44:	4619      	mov	r1, r3
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <SetTime+0x6c>)
 8000a48:	f002 fc17 	bl	800327a <HAL_RTC_SetDate>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SetTime+0x56>
	{
		Error_Handler();
 8000a52:	f000 fd3d 	bl	80014d0 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000a56:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <SetTime+0x6c>)
 8000a5e:	f002 ffcb 	bl	80039f8 <HAL_RTCEx_BKUPWrite>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001c8 	.word	0x200001c8

08000a70 <SetAlarmFunc>:

void SetAlarmFunc(uint8_t SetInHours, uint8_t SetInMinutes, uint8_t SetInDate, uint8_t SetInSeconds)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b08d      	sub	sp, #52	; 0x34
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4604      	mov	r4, r0
 8000a78:	4608      	mov	r0, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4623      	mov	r3, r4
 8000a80:	71fb      	strb	r3, [r7, #7]
 8000a82:	4603      	mov	r3, r0
 8000a84:	71bb      	strb	r3, [r7, #6]
 8000a86:	460b      	mov	r3, r1
 8000a88:	717b      	strb	r3, [r7, #5]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	713b      	strb	r3, [r7, #4]
	RTC_AlarmTypeDef sAlarm;

	sAlarm.AlarmTime.Hours = TurnDecIntoHex(SetInHours);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff67 	bl	8000964 <TurnDecIntoHex>
 8000a96:	4603      	mov	r3, r0
 8000a98:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = TurnDecIntoHex(SetInMinutes);
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff61 	bl	8000964 <TurnDecIntoHex>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = TurnDecIntoHex(SetInSeconds);
 8000aa6:	793b      	ldrb	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5b 	bl	8000964 <TurnDecIntoHex>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = TurnDecIntoHex(SetInDate);
 8000aca:	797b      	ldrb	r3, [r7, #5]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff49 	bl	8000964 <TurnDecIntoHex>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8000ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <SetAlarmFunc+0x90>)
 8000ae8:	f002 fcbe 	bl	8003468 <HAL_RTC_SetAlarm_IT>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SetAlarmFunc+0x86>
	{
	Error_Handler();
 8000af2:	f000 fced 	bl	80014d0 <Error_Handler>
	}
}
 8000af6:	bf00      	nop
 8000af8:	3734      	adds	r7, #52	; 0x34
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd90      	pop	{r4, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200001c8 	.word	0x200001c8

08000b04 <GetTimeDate>:

void GetTimeDate(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af02      	add	r7, sp, #8
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4913      	ldr	r1, [pc, #76]	; (8000b5c <GetTimeDate+0x58>)
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <GetTimeDate+0x5c>)
 8000b10:	f002 fb55 	bl	80031be <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8000b14:	2201      	movs	r2, #1
 8000b16:	4913      	ldr	r1, [pc, #76]	; (8000b64 <GetTimeDate+0x60>)
 8000b18:	4811      	ldr	r0, [pc, #68]	; (8000b60 <GetTimeDate+0x5c>)
 8000b1a:	f002 fc55 	bl	80033c8 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	sprintf((char*)time,"%02x:%02x:%02x",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <GetTimeDate+0x58>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <GetTimeDate+0x58>)
 8000b26:	785b      	ldrb	r3, [r3, #1]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <GetTimeDate+0x58>)
 8000b2c:	789b      	ldrb	r3, [r3, #2]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	460b      	mov	r3, r1
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <GetTimeDate+0x64>)
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <GetTimeDate+0x68>)
 8000b36:	f003 fe7b 	bl	8004830 <siprintf>

	/* Display date Format: yy-mm-dd */
	sprintf((char*)date,"%02x-%02x-%02x",gDate.Year, gDate.Month, gDate.Date);
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <GetTimeDate+0x60>)
 8000b3c:	78db      	ldrb	r3, [r3, #3]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <GetTimeDate+0x60>)
 8000b42:	785b      	ldrb	r3, [r3, #1]
 8000b44:	4619      	mov	r1, r3
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <GetTimeDate+0x60>)
 8000b48:	789b      	ldrb	r3, [r3, #2]
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <GetTimeDate+0x6c>)
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <GetTimeDate+0x70>)
 8000b52:	f003 fe6d 	bl	8004830 <siprintf>
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000168 	.word	0x20000168
 8000b60:	200001c8 	.word	0x200001c8
 8000b64:	2000010c 	.word	0x2000010c
 8000b68:	080051c0 	.word	0x080051c0
 8000b6c:	20000208 	.word	0x20000208
 8000b70:	080051d0 	.word	0x080051d0
 8000b74:	20000220 	.word	0x20000220

08000b78 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	alarm = 1;
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000144 	.word	0x20000144

08000b98 <IsAlarmSetBeforeNow>:

uint8_t IsAlarmSetBeforeNow(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	GetTimeDate();
 8000b9c:	f7ff ffb2 	bl	8000b04 <GetTimeDate>
	HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba6:	4924      	ldr	r1, [pc, #144]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000ba8:	4824      	ldr	r0, [pc, #144]	; (8000c3c <IsAlarmSetBeforeNow+0xa4>)
 8000baa:	f002 fd95 	bl	80036d8 <HAL_RTC_GetAlarm>
	if (gAlarm.AlarmTime.Seconds < gDate.Month)
 8000bae:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000bb0:	789a      	ldrb	r2, [r3, #2]
 8000bb2:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <IsAlarmSetBeforeNow+0xa8>)
 8000bb4:	785b      	ldrb	r3, [r3, #1]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d201      	bcs.n	8000bbe <IsAlarmSetBeforeNow+0x26>
	{
		return 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e03a      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
	} else if (gAlarm.AlarmTime.Seconds > gDate.Month)
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000bc0:	789a      	ldrb	r2, [r3, #2]
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <IsAlarmSetBeforeNow+0xa8>)
 8000bc4:	785b      	ldrb	r3, [r3, #1]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d901      	bls.n	8000bce <IsAlarmSetBeforeNow+0x36>
	{
		return 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e032      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
	} else
	{
		if (gAlarm.AlarmDateWeekDay < gDate.Date)
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000bd0:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <IsAlarmSetBeforeNow+0xa8>)
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d201      	bcs.n	8000be0 <IsAlarmSetBeforeNow+0x48>
		{
			return 1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e029      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
		} else if (gAlarm.AlarmDateWeekDay > gDate.Date)
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000be2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <IsAlarmSetBeforeNow+0xa8>)
 8000be8:	789b      	ldrb	r3, [r3, #2]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d901      	bls.n	8000bf2 <IsAlarmSetBeforeNow+0x5a>
		{
			return 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e020      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
		} else
		{
			if (gAlarm.AlarmTime.Hours < gTime.Hours)
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <IsAlarmSetBeforeNow+0xac>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d201      	bcs.n	8000c02 <IsAlarmSetBeforeNow+0x6a>
			{
				return 1;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e018      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
			} else if (gAlarm.AlarmTime.Hours > gTime.Hours)
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <IsAlarmSetBeforeNow+0xac>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d901      	bls.n	8000c12 <IsAlarmSetBeforeNow+0x7a>
			{
				return 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e010      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
			} else
			{
				if (gAlarm.AlarmTime.Minutes < gTime.Minutes)
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000c14:	785a      	ldrb	r2, [r3, #1]
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <IsAlarmSetBeforeNow+0xac>)
 8000c18:	785b      	ldrb	r3, [r3, #1]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d201      	bcs.n	8000c22 <IsAlarmSetBeforeNow+0x8a>
				{
					return 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e008      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
				} else if (gAlarm.AlarmTime.Minutes > gTime.Minutes)
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <IsAlarmSetBeforeNow+0xa0>)
 8000c24:	785a      	ldrb	r2, [r3, #1]
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <IsAlarmSetBeforeNow+0xac>)
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d901      	bls.n	8000c32 <IsAlarmSetBeforeNow+0x9a>
				{
					return 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <IsAlarmSetBeforeNow+0x9c>
				} else
				{
					return 1;
 8000c32:	2301      	movs	r3, #1
				}
			}
		}
	}
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000011c 	.word	0x2000011c
 8000c3c:	200001c8 	.word	0x200001c8
 8000c40:	2000010c 	.word	0x2000010c
 8000c44:	20000168 	.word	0x20000168

08000c48 <IsNewAlarmMoreFresh>:

uint8_t IsNewAlarmMoreFresh(void)
{
 8000c48:	b598      	push	{r3, r4, r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
		HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c52:	4938      	ldr	r1, [pc, #224]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000c54:	4838      	ldr	r0, [pc, #224]	; (8000d38 <IsNewAlarmMoreFresh+0xf0>)
 8000c56:	f002 fd3f 	bl	80036d8 <HAL_RTC_GetAlarm>
		if (gAlarm.AlarmTime.Seconds < TurnDecIntoHex(SetSeconds))
 8000c5a:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000c5c:	789c      	ldrb	r4, [r3, #2]
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <IsNewAlarmMoreFresh+0xf4>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fe7d 	bl	8000964 <TurnDecIntoHex>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	429c      	cmp	r4, r3
 8000c6e:	d201      	bcs.n	8000c74 <IsNewAlarmMoreFresh+0x2c>
		{
			return 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e05c      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
		} else if (gAlarm.AlarmTime.Seconds > TurnDecIntoHex(SetSeconds))
 8000c74:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000c76:	789c      	ldrb	r4, [r3, #2]
 8000c78:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <IsNewAlarmMoreFresh+0xf4>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fe70 	bl	8000964 <TurnDecIntoHex>
 8000c84:	4603      	mov	r3, r0
 8000c86:	429c      	cmp	r4, r3
 8000c88:	d901      	bls.n	8000c8e <IsNewAlarmMoreFresh+0x46>
		{
			return 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e04f      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
		} else
		{
			if (gAlarm.AlarmDateWeekDay < TurnDecIntoHex(SetDate))
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000c90:	f893 4020 	ldrb.w	r4, [r3, #32]
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <IsNewAlarmMoreFresh+0xf8>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fe62 	bl	8000964 <TurnDecIntoHex>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	d201      	bcs.n	8000caa <IsNewAlarmMoreFresh+0x62>
			{
				return 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e041      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
			} else if (gAlarm.AlarmDateWeekDay > TurnDecIntoHex(SetDate))
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000cac:	f893 4020 	ldrb.w	r4, [r3, #32]
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <IsNewAlarmMoreFresh+0xf8>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fe54 	bl	8000964 <TurnDecIntoHex>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	429c      	cmp	r4, r3
 8000cc0:	d901      	bls.n	8000cc6 <IsNewAlarmMoreFresh+0x7e>
			{
				return 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e033      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
			} else
			{
				if (gAlarm.AlarmTime.Hours < TurnDecIntoHex(SetHours))
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000cc8:	781c      	ldrb	r4, [r3, #0]
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <IsNewAlarmMoreFresh+0xfc>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe47 	bl	8000964 <TurnDecIntoHex>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	d201      	bcs.n	8000ce0 <IsNewAlarmMoreFresh+0x98>
				{
					return 1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e026      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
				} else if (gAlarm.AlarmTime.Hours > TurnDecIntoHex(SetHours))
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000ce2:	781c      	ldrb	r4, [r3, #0]
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <IsNewAlarmMoreFresh+0xfc>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fe3a 	bl	8000964 <TurnDecIntoHex>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	429c      	cmp	r4, r3
 8000cf4:	d901      	bls.n	8000cfa <IsNewAlarmMoreFresh+0xb2>
				{
					return 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e019      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
				} else
				{
					if (gAlarm.AlarmTime.Minutes < TurnDecIntoHex(SetMinutes))
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000cfc:	785c      	ldrb	r4, [r3, #1]
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <IsNewAlarmMoreFresh+0x100>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fe2d 	bl	8000964 <TurnDecIntoHex>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	d201      	bcs.n	8000d14 <IsNewAlarmMoreFresh+0xcc>
					{
						return 1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e00c      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
					} else if (gAlarm.AlarmTime.Minutes >= TurnDecIntoHex(SetMinutes))
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <IsNewAlarmMoreFresh+0xec>)
 8000d16:	785c      	ldrb	r4, [r3, #1]
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <IsNewAlarmMoreFresh+0x100>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fe20 	bl	8000964 <TurnDecIntoHex>
 8000d24:	4603      	mov	r3, r0
 8000d26:	429c      	cmp	r4, r3
 8000d28:	d301      	bcc.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
					{
						return 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e7ff      	b.n	8000d2e <IsNewAlarmMoreFresh+0xe6>
					}
				}
			}
		}
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd98      	pop	{r3, r4, r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000011c 	.word	0x2000011c
 8000d38:	200001c8 	.word	0x200001c8
 8000d3c:	20000167 	.word	0x20000167
 8000d40:	20000166 	.word	0x20000166
 8000d44:	20000230 	.word	0x20000230
 8000d48:	20000110 	.word	0x20000110

08000d4c <IsNewAlarmAfterNow>:

uint8_t IsNewAlarmAfterNow(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
		GetTimeDate();
 8000d50:	f7ff fed8 	bl	8000b04 <GetTimeDate>
		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000d54:	2201      	movs	r2, #1
 8000d56:	493d      	ldr	r1, [pc, #244]	; (8000e4c <IsNewAlarmAfterNow+0x100>)
 8000d58:	483d      	ldr	r0, [pc, #244]	; (8000e50 <IsNewAlarmAfterNow+0x104>)
 8000d5a:	f002 fa30 	bl	80031be <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	493c      	ldr	r1, [pc, #240]	; (8000e54 <IsNewAlarmAfterNow+0x108>)
 8000d62:	483b      	ldr	r0, [pc, #236]	; (8000e50 <IsNewAlarmAfterNow+0x104>)
 8000d64:	f002 fb30 	bl	80033c8 <HAL_RTC_GetDate>
		if (TurnDecIntoHex(SetSeconds) > gDate.Month)
 8000d68:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <IsNewAlarmAfterNow+0x10c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fdf8 	bl	8000964 <TurnDecIntoHex>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <IsNewAlarmAfterNow+0x108>)
 8000d7a:	785b      	ldrb	r3, [r3, #1]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d901      	bls.n	8000d84 <IsNewAlarmAfterNow+0x38>
		{
			return 1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e061      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
		} else if (TurnDecIntoHex(SetSeconds) < gDate.Month)
 8000d84:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <IsNewAlarmAfterNow+0x10c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fdea 	bl	8000964 <TurnDecIntoHex>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <IsNewAlarmAfterNow+0x108>)
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d201      	bcs.n	8000da0 <IsNewAlarmAfterNow+0x54>
		{
			return 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e053      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
		} else
		{
			if (TurnDecIntoHex(SetDate) > gDate.Date)
 8000da0:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <IsNewAlarmAfterNow+0x110>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fddc 	bl	8000964 <TurnDecIntoHex>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <IsNewAlarmAfterNow+0x108>)
 8000db2:	789b      	ldrb	r3, [r3, #2]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d901      	bls.n	8000dbc <IsNewAlarmAfterNow+0x70>
			{
				return 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e045      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
			} else if (TurnDecIntoHex(SetDate) < gDate.Date)
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <IsNewAlarmAfterNow+0x110>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fdce 	bl	8000964 <TurnDecIntoHex>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <IsNewAlarmAfterNow+0x108>)
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d201      	bcs.n	8000dd8 <IsNewAlarmAfterNow+0x8c>
			{
				return 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e037      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
			} else
			{
				if (TurnDecIntoHex(SetHours) > gTime.Hours)
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <IsNewAlarmAfterNow+0x114>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fdc0 	bl	8000964 <TurnDecIntoHex>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <IsNewAlarmAfterNow+0x100>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d901      	bls.n	8000df4 <IsNewAlarmAfterNow+0xa8>
				{
					return 1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e029      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
				} else if (TurnDecIntoHex(SetHours) < gTime.Hours)
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <IsNewAlarmAfterNow+0x114>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fdb2 	bl	8000964 <TurnDecIntoHex>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <IsNewAlarmAfterNow+0x100>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d201      	bcs.n	8000e10 <IsNewAlarmAfterNow+0xc4>
				{
					return 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e01b      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
				} else
				{
					if (TurnDecIntoHex(SetMinutes) > gTime.Minutes)
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <IsNewAlarmAfterNow+0x118>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fda4 	bl	8000964 <TurnDecIntoHex>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <IsNewAlarmAfterNow+0x100>)
 8000e22:	785b      	ldrb	r3, [r3, #1]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d901      	bls.n	8000e2c <IsNewAlarmAfterNow+0xe0>
					{
						return 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e00d      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
					} else if (TurnDecIntoHex(SetMinutes) <= gTime.Minutes)
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <IsNewAlarmAfterNow+0x118>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fd96 	bl	8000964 <TurnDecIntoHex>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <IsNewAlarmAfterNow+0x100>)
 8000e3e:	785b      	ldrb	r3, [r3, #1]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d801      	bhi.n	8000e48 <IsNewAlarmAfterNow+0xfc>
					{
						return 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e7ff      	b.n	8000e48 <IsNewAlarmAfterNow+0xfc>
					}
				}
			}
		}
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000168 	.word	0x20000168
 8000e50:	200001c8 	.word	0x200001c8
 8000e54:	2000010c 	.word	0x2000010c
 8000e58:	20000167 	.word	0x20000167
 8000e5c:	20000166 	.word	0x20000166
 8000e60:	20000230 	.word	0x20000230
 8000e64:	20000110 	.word	0x20000110

08000e68 <Rewind5Sec>:

void Rewind5Sec(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
	if (K0isPressed)
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <Rewind5Sec+0x78>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d02f      	beq.n	8000ed6 <Rewind5Sec+0x6e>
	{
		RTC_TimeTypeDef gTime;

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4819      	ldr	r0, [pc, #100]	; (8000ee4 <Rewind5Sec+0x7c>)
 8000e7e:	f002 f99e 	bl	80031be <HAL_RTC_GetTime>
		gTime.Seconds = TurnDecIntoHex(TurnHexIntoDec(gTime.Seconds)-5);
 8000e82:	79bb      	ldrb	r3, [r7, #6]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fd53 	bl	8000930 <TurnHexIntoDec>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	3b05      	subs	r3, #5
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fd67 	bl	8000964 <TurnDecIntoHex>
 8000e96:	4603      	mov	r3, r0
 8000e98:	71bb      	strb	r3, [r7, #6]
		gTime.Hours = TurnDecIntoHex(TurnHexIntoDec(gTime.Hours)+0);
 8000e9a:	793b      	ldrb	r3, [r7, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fd47 	bl	8000930 <TurnHexIntoDec>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fd5d 	bl	8000964 <TurnDecIntoHex>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	713b      	strb	r3, [r7, #4]

		if (HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BCD) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <Rewind5Sec+0x7c>)
 8000eb6:	f002 f8c5 	bl	8003044 <HAL_RTC_SetTime>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <Rewind5Sec+0x5c>
		{
		  Error_Handler();
 8000ec0:	f000 fb06 	bl	80014d0 <Error_Handler>
		}

		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000ec4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <Rewind5Sec+0x7c>)
 8000ecc:	f002 fd94 	bl	80039f8 <HAL_RTCEx_BKUPWrite>

		K0isPressed = 0;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <Rewind5Sec+0x78>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001c4 	.word	0x200001c4
 8000ee4:	200001c8 	.word	0x200001c8

08000ee8 <Forwardd5Sec>:

void Forwardd5Sec(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
	if (K1isPressed)
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <Forwardd5Sec+0x78>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d02f      	beq.n	8000f56 <Forwardd5Sec+0x6e>
	{
		RTC_TimeTypeDef gTime;

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4619      	mov	r1, r3
 8000efc:	4819      	ldr	r0, [pc, #100]	; (8000f64 <Forwardd5Sec+0x7c>)
 8000efe:	f002 f95e 	bl	80031be <HAL_RTC_GetTime>
		gTime.Seconds = TurnDecIntoHex(TurnHexIntoDec(gTime.Seconds)+5);
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fd13 	bl	8000930 <TurnHexIntoDec>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	3305      	adds	r3, #5
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fd27 	bl	8000964 <TurnDecIntoHex>
 8000f16:	4603      	mov	r3, r0
 8000f18:	71bb      	strb	r3, [r7, #6]
		gTime.Hours = TurnDecIntoHex(TurnHexIntoDec(gTime.Hours)+0);
 8000f1a:	793b      	ldrb	r3, [r7, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fd07 	bl	8000930 <TurnHexIntoDec>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fd1d 	bl	8000964 <TurnDecIntoHex>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	713b      	strb	r3, [r7, #4]

		if (HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2201      	movs	r2, #1
 8000f32:	4619      	mov	r1, r3
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <Forwardd5Sec+0x7c>)
 8000f36:	f002 f885 	bl	8003044 <HAL_RTC_SetTime>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <Forwardd5Sec+0x5c>
		{
		  Error_Handler();
 8000f40:	f000 fac6 	bl	80014d0 <Error_Handler>
		}

		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000f44:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <Forwardd5Sec+0x7c>)
 8000f4c:	f002 fd54 	bl	80039f8 <HAL_RTCEx_BKUPWrite>
		K1isPressed = 0;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <Forwardd5Sec+0x78>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	}
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200001c5 	.word	0x200001c5
 8000f64:	200001c8 	.word	0x200001c8

08000f68 <OpenTheDoor>:

void OpenTheDoor(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <OpenTheDoor+0x28>)
 8000f74:	f001 f9f6 	bl	8002364 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000f78:	20c8      	movs	r0, #200	; 0xc8
 8000f7a:	f000 fe5d 	bl	8001c38 <HAL_Delay>
	HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <OpenTheDoor+0x28>)
 8000f86:	f001 f9ed 	bl	8002364 <HAL_GPIO_WritePin>
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020400 	.word	0x40020400

08000f94 <ToDoOnAlarm>:

void ToDoOnAlarm(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	OpenTheDoor();
 8000f98:	f7ff ffe6 	bl	8000f68 <OpenTheDoor>
	HappyToggling(150);
 8000f9c:	2096      	movs	r0, #150	; 0x96
 8000f9e:	f7ff fd0d 	bl	80009bc <HappyToggling>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <DeleteAlarm>:

void DeleteAlarm(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
	SetAlarmFunc(0,0,1,1);
 8000faa:	2301      	movs	r3, #1
 8000fac:	2201      	movs	r2, #1
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fd5d 	bl	8000a70 <SetAlarmFunc>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  HAL_Init();
 8000fc2:	f000 fdc7 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f909 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fca:	f000 f9cd 	bl	8001368 <MX_GPIO_Init>
  MX_RTC_Init();
 8000fce:	f000 f97b 	bl	80012c8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000fd2:	f000 f99f 	bl	8001314 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	486e      	ldr	r0, [pc, #440]	; (8001194 <main+0x1d8>)
 8000fda:	f002 fd27 	bl	8003a2c <HAL_RTCEx_BKUPRead>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d001      	beq.n	8000fec <main+0x30>
  {
	  SetTime();
 8000fe8:	f7ff fd0a 	bl	8000a00 <SetTime>
  }

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000fec:	4b6a      	ldr	r3, [pc, #424]	; (8001198 <main+0x1dc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	4b69      	ldr	r3, [pc, #420]	; (8001198 <main+0x1dc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0220 	orr.w	r2, r2, #32
 8000ffa:	60da      	str	r2, [r3, #12]

  if (IsAlarmSetBeforeNow())
 8000ffc:	f7ff fdcc 	bl	8000b98 <IsAlarmSetBeforeNow>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <main+0x4e>
  {
	  OpenTheDoor();
 8001006:	f7ff ffaf 	bl	8000f68 <OpenTheDoor>

//	!!
//	if I upload confifugartion from CubeMX Configurator I need to delete set time from MX_RTC_Init()!
//	!!

	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800100a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100e:	4863      	ldr	r0, [pc, #396]	; (800119c <main+0x1e0>)
 8001010:	f001 f9c1 	bl	8002396 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8001014:	20c8      	movs	r0, #200	; 0xc8
 8001016:	f000 fe0f 	bl	8001c38 <HAL_Delay>

	  if (SetAlarm)
 800101a:	4b61      	ldr	r3, [pc, #388]	; (80011a0 <main+0x1e4>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d078      	beq.n	8001116 <main+0x15a>
	  {
		  if (IsNewAlarmMoreFresh())
 8001024:	f7ff fe10 	bl	8000c48 <IsNewAlarmMoreFresh>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d04d      	beq.n	80010ca <main+0x10e>
		  {
			  if (IsNewAlarmAfterNow())
 800102e:	f7ff fe8d 	bl	8000d4c <IsNewAlarmAfterNow>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d036      	beq.n	80010a6 <main+0xea>
			  {
				  sprintf(Message, "Set alarm to %02d:%02d of %02d.%02d\0",SetHours, SetMinutes, SetDate, SetSeconds);
 8001038:	4b5a      	ldr	r3, [pc, #360]	; (80011a4 <main+0x1e8>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4619      	mov	r1, r3
 8001040:	4b59      	ldr	r3, [pc, #356]	; (80011a8 <main+0x1ec>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4618      	mov	r0, r3
 8001048:	4b58      	ldr	r3, [pc, #352]	; (80011ac <main+0x1f0>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <main+0x1f4>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	4955      	ldr	r1, [pc, #340]	; (80011b4 <main+0x1f8>)
 8001060:	4855      	ldr	r0, [pc, #340]	; (80011b8 <main+0x1fc>)
 8001062:	f003 fbe5 	bl	8004830 <siprintf>
				  HAL_UART_Transmit(&huart1, Message, strlen(Message), strlen(Message));
 8001066:	4854      	ldr	r0, [pc, #336]	; (80011b8 <main+0x1fc>)
 8001068:	f7ff f8b2 	bl	80001d0 <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	b29c      	uxth	r4, r3
 8001070:	4851      	ldr	r0, [pc, #324]	; (80011b8 <main+0x1fc>)
 8001072:	f7ff f8ad 	bl	80001d0 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	4622      	mov	r2, r4
 800107a:	494f      	ldr	r1, [pc, #316]	; (80011b8 <main+0x1fc>)
 800107c:	4846      	ldr	r0, [pc, #280]	; (8001198 <main+0x1dc>)
 800107e:	f002 fd44 	bl	8003b0a <HAL_UART_Transmit>
				  HappyToggling(100);
 8001082:	2064      	movs	r0, #100	; 0x64
 8001084:	f7ff fc9a 	bl	80009bc <HappyToggling>
//				  HAL_Delay(60000);
				  SetAlarmFunc(SetHours, SetMinutes, SetDate, SetSeconds);
 8001088:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <main+0x1e8>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2d8      	uxtb	r0, r3
 800108e:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <main+0x1ec>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2d9      	uxtb	r1, r3
 8001094:	4b45      	ldr	r3, [pc, #276]	; (80011ac <main+0x1f0>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <main+0x1f4>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f7ff fce6 	bl	8000a70 <SetAlarmFunc>
 80010a4:	e026      	b.n	80010f4 <main+0x138>
			  } else
			  {
				  HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 80010a6:	2301      	movs	r3, #1
 80010a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ac:	4943      	ldr	r1, [pc, #268]	; (80011bc <main+0x200>)
 80010ae:	4839      	ldr	r0, [pc, #228]	; (8001194 <main+0x1d8>)
 80010b0:	f002 fb12 	bl	80036d8 <HAL_RTC_GetAlarm>
//				  sprintf(AlarmIsAlreadyOn, "%s %02x:%02x of %02x.%02x", AlarmIsAlreadyOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
				  HAL_UART_Transmit(&huart1, AlarmExpired, strlen(AlarmExpired), 29);
 80010b4:	4842      	ldr	r0, [pc, #264]	; (80011c0 <main+0x204>)
 80010b6:	f7ff f88b 	bl	80001d0 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b29a      	uxth	r2, r3
 80010be:	231d      	movs	r3, #29
 80010c0:	493f      	ldr	r1, [pc, #252]	; (80011c0 <main+0x204>)
 80010c2:	4835      	ldr	r0, [pc, #212]	; (8001198 <main+0x1dc>)
 80010c4:	f002 fd21 	bl	8003b0a <HAL_UART_Transmit>
 80010c8:	e014      	b.n	80010f4 <main+0x138>
//				  HAL_UART_Transmit(&huart1, AlarmIsAlreadyOn, strlen(AlarmIsAlreadyOn), 35);
			  }
		  } else
			  sprintf(Message, "%s %02x:%02x of %02x.%02x\0", AlarmIsAlreadyOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
 80010ca:	4b3c      	ldr	r3, [pc, #240]	; (80011bc <main+0x200>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <main+0x200>)
 80010d2:	785b      	ldrb	r3, [r3, #1]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b39      	ldr	r3, [pc, #228]	; (80011bc <main+0x200>)
 80010d8:	789b      	ldrb	r3, [r3, #2]
 80010da:	4619      	mov	r1, r3
 80010dc:	4b37      	ldr	r3, [pc, #220]	; (80011bc <main+0x200>)
 80010de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	9101      	str	r1, [sp, #4]
 80010e6:	9200      	str	r2, [sp, #0]
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a36      	ldr	r2, [pc, #216]	; (80011c4 <main+0x208>)
 80010ec:	4936      	ldr	r1, [pc, #216]	; (80011c8 <main+0x20c>)
 80010ee:	4832      	ldr	r0, [pc, #200]	; (80011b8 <main+0x1fc>)
 80010f0:	f003 fb9e 	bl	8004830 <siprintf>
//		  	  sprintf(Message2, "%s %02x:%02x of %02x.%02x\0", AlarmIsAlreadyOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
//		  	  sprintf(*Message3, "%s %02x:%02x of %02x.%02x\0", AlarmIsAlreadyOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
//		  	  sprintf(&Message4, "%s %02x:%02x of %02x.%02x\0", AlarmIsAlreadyOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
			  HAL_UART_Transmit(&huart1, Message, strlen(Message), strlen(Message));
 80010f4:	4830      	ldr	r0, [pc, #192]	; (80011b8 <main+0x1fc>)
 80010f6:	f7ff f86b 	bl	80001d0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29c      	uxth	r4, r3
 80010fe:	482e      	ldr	r0, [pc, #184]	; (80011b8 <main+0x1fc>)
 8001100:	f7ff f866 	bl	80001d0 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	4622      	mov	r2, r4
 8001108:	492b      	ldr	r1, [pc, #172]	; (80011b8 <main+0x1fc>)
 800110a:	4823      	ldr	r0, [pc, #140]	; (8001198 <main+0x1dc>)
 800110c:	f002 fcfd 	bl	8003b0a <HAL_UART_Transmit>
		  SetAlarm = 0;
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <main+0x1e4>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
	  }

	  GetTimeDate();
 8001116:	f7ff fcf5 	bl	8000b04 <GetTimeDate>

	  if (alarm)
 800111a:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <main+0x210>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <main+0x170>
	  {
		  ToDoOnAlarm();
 8001122:	f7ff ff37 	bl	8000f94 <ToDoOnAlarm>
		  alarm = 0;
 8001126:	4b29      	ldr	r3, [pc, #164]	; (80011cc <main+0x210>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	  }

//	  1000 milliseconds is just a time, taken from nothing, during that RX interrupts will be disabled
	  NowTime = HAL_GetTick();
 800112c:	f000 fd78 	bl	8001c20 <HAL_GetTick>
 8001130:	4603      	mov	r3, r0
 8001132:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <main+0x214>)
 8001134:	6013      	str	r3, [r2, #0]
//	  if (((IgnoringFlag == 1) || (NowTime - MessageTimer > 5000)) && ((NowTime - StartIgnoringTimer) > 1000))
	  if ((CharCounter >= 8) && (NowTime - MessageTimer > 5000))
 8001136:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <main+0x218>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b07      	cmp	r3, #7
 800113c:	d924      	bls.n	8001188 <main+0x1cc>
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <main+0x214>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <main+0x21c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f241 3288 	movw	r2, #5000	; 0x1388
 800114c:	4293      	cmp	r3, r2
 800114e:	d91b      	bls.n	8001188 <main+0x1cc>
//	  if (NowTime - StartIgnoringTimer > 1000)
	  {
		  CharCounter = 0;
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <main+0x218>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
//		  IgnoringFlag = 0;
		  __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <main+0x1dc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <main+0x1dc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <main+0x1dc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <main+0x1dc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0220 	orr.w	r2, r2, #32
 800117a:	60da      	str	r2, [r3, #12]
		  HappyToggling(30);
 800117c:	201e      	movs	r0, #30
 800117e:	f7ff fc1d 	bl	80009bc <HappyToggling>
		  MessageTimer = 0;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <main+0x21c>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
	  }

	  Rewind5Sec();
 8001188:	f7ff fe6e 	bl	8000e68 <Rewind5Sec>
	  Forwardd5Sec();
 800118c:	f7ff feac 	bl	8000ee8 <Forwardd5Sec>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001190:	e73b      	b.n	800100a <main+0x4e>
 8001192:	bf00      	nop
 8001194:	200001c8 	.word	0x200001c8
 8001198:	2000017c 	.word	0x2000017c
 800119c:	40021400 	.word	0x40021400
 80011a0:	20000145 	.word	0x20000145
 80011a4:	20000230 	.word	0x20000230
 80011a8:	20000110 	.word	0x20000110
 80011ac:	20000166 	.word	0x20000166
 80011b0:	20000167 	.word	0x20000167
 80011b4:	080051e0 	.word	0x080051e0
 80011b8:	20000148 	.word	0x20000148
 80011bc:	2000011c 	.word	0x2000011c
 80011c0:	20000018 	.word	0x20000018
 80011c4:	20000000 	.word	0x20000000
 80011c8:	08005208 	.word	0x08005208
 80011cc:	20000144 	.word	0x20000144
 80011d0:	2000021c 	.word	0x2000021c
 80011d4:	20000211 	.word	0x20000211
 80011d8:	20000114 	.word	0x20000114

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b098      	sub	sp, #96	; 0x60
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 fb18 	bl	8004820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <SystemClock_Config+0xe4>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a2a      	ldr	r2, [pc, #168]	; (80012c0 <SystemClock_Config+0xe4>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <SystemClock_Config+0xe4>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <SystemClock_Config+0xe8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <SystemClock_Config+0xe8>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <SystemClock_Config+0xe8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001246:	2306      	movs	r3, #6
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800124a:	2301      	movs	r3, #1
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124e:	2301      	movs	r3, #1
 8001250:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001252:	2310      	movs	r3, #16
 8001254:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800125e:	4618      	mov	r0, r3
 8001260:	f001 f8d8 	bl	8002414 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800126a:	f000 f931 	bl	80014d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f001 fb3b 	bl	8002904 <HAL_RCC_ClockConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001294:	f000 f91c 	bl	80014d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001298:	2302      	movs	r3, #2
 800129a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800129c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fd28 	bl	8002cfc <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80012b2:	f000 f90d 	bl	80014d0 <Error_Handler>
  }
}
 80012b6:	bf00      	nop
 80012b8:	3760      	adds	r7, #96	; 0x60
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_RTC_Init+0x44>)
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <MX_RTC_Init+0x48>)
 80012d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_RTC_Init+0x44>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_RTC_Init+0x44>)
 80012da:	227f      	movs	r2, #127	; 0x7f
 80012dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_RTC_Init+0x44>)
 80012e0:	22ff      	movs	r2, #255	; 0xff
 80012e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_RTC_Init+0x44>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_RTC_Init+0x44>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_RTC_Init+0x44>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_RTC_Init+0x44>)
 80012f8:	f001 fde2 	bl	8002ec0 <HAL_RTC_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001302:	f000 f8e5 	bl	80014d0 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001c8 	.word	0x200001c8
 8001310:	40002800 	.word	0x40002800

08001314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_USART1_UART_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001320:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800134c:	f002 fb90 	bl	8003a70 <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001356:	f000 f8bb 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000017c 	.word	0x2000017c
 8001364:	40011000 	.word	0x40011000

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	; 0x30
 800136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	4b4e      	ldr	r3, [pc, #312]	; (80014bc <MX_GPIO_Init+0x154>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a4d      	ldr	r2, [pc, #308]	; (80014bc <MX_GPIO_Init+0x154>)
 8001388:	f043 0310 	orr.w	r3, r3, #16
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b4b      	ldr	r3, [pc, #300]	; (80014bc <MX_GPIO_Init+0x154>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	4b47      	ldr	r3, [pc, #284]	; (80014bc <MX_GPIO_Init+0x154>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a46      	ldr	r2, [pc, #280]	; (80014bc <MX_GPIO_Init+0x154>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b44      	ldr	r3, [pc, #272]	; (80014bc <MX_GPIO_Init+0x154>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b40      	ldr	r3, [pc, #256]	; (80014bc <MX_GPIO_Init+0x154>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a3f      	ldr	r2, [pc, #252]	; (80014bc <MX_GPIO_Init+0x154>)
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <MX_GPIO_Init+0x154>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0320 	and.w	r3, r3, #32
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b39      	ldr	r3, [pc, #228]	; (80014bc <MX_GPIO_Init+0x154>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a38      	ldr	r2, [pc, #224]	; (80014bc <MX_GPIO_Init+0x154>)
 80013dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <MX_GPIO_Init+0x154>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b32      	ldr	r3, [pc, #200]	; (80014bc <MX_GPIO_Init+0x154>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a31      	ldr	r2, [pc, #196]	; (80014bc <MX_GPIO_Init+0x154>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <MX_GPIO_Init+0x154>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <MX_GPIO_Init+0x154>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a2a      	ldr	r2, [pc, #168]	; (80014bc <MX_GPIO_Init+0x154>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b28      	ldr	r3, [pc, #160]	; (80014bc <MX_GPIO_Init+0x154>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800142c:	4824      	ldr	r0, [pc, #144]	; (80014c0 <MX_GPIO_Init+0x158>)
 800142e:	f000 ff99 	bl	8002364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001438:	4822      	ldr	r0, [pc, #136]	; (80014c4 <MX_GPIO_Init+0x15c>)
 800143a:	f000 ff93 	bl	8002364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 800143e:	2318      	movs	r3, #24
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <MX_GPIO_Init+0x160>)
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001446:	2301      	movs	r3, #1
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	481e      	ldr	r0, [pc, #120]	; (80014cc <MX_GPIO_Init+0x164>)
 8001452:	f000 fdeb 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8001456:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800145c:	2311      	movs	r3, #17
 800145e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	4814      	ldr	r0, [pc, #80]	; (80014c0 <MX_GPIO_Init+0x158>)
 8001470:	f000 fddc 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pin : OpenDoor_Pin */
  GPIO_InitStruct.Pin = OpenDoor_Pin;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800147a:	2311      	movs	r3, #17
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OpenDoor_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_GPIO_Init+0x15c>)
 800148e:	f000 fdcd 	bl	800202c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2102      	movs	r1, #2
 8001496:	2009      	movs	r0, #9
 8001498:	f000 fcf1 	bl	8001e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800149c:	2009      	movs	r0, #9
 800149e:	f000 fd0a 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2102      	movs	r1, #2
 80014a6:	200a      	movs	r0, #10
 80014a8:	f000 fce9 	bl	8001e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014ac:	200a      	movs	r0, #10
 80014ae:	f000 fd02 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

}
 80014b2:	bf00      	nop
 80014b4:	3730      	adds	r7, #48	; 0x30
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40021400 	.word	0x40021400
 80014c4:	40020400 	.word	0x40020400
 80014c8:	10110000 	.word	0x10110000
 80014cc:	40021000 	.word	0x40021000

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <Error_Handler+0x8>
	...

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_MspInit+0x4c>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a08      	ldr	r2, [pc, #32]	; (8001528 <HAL_MspInit+0x4c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_RTC_MspInit+0x30>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d10a      	bne.n	8001554 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_RTC_MspInit+0x34>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2029      	movs	r0, #41	; 0x29
 800154a:	f000 fc98 	bl	8001e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800154e:	2029      	movs	r0, #41	; 0x29
 8001550:	f000 fcb1 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40002800 	.word	0x40002800
 8001560:	42470e3c 	.word	0x42470e3c

08001564 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_RTC_MspDeInit+0x28>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d105      	bne.n	8001582 <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_RTC_MspDeInit+0x2c>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 800157c:	2029      	movs	r0, #41	; 0x29
 800157e:	f000 fca8 	bl	8001ed2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40002800 	.word	0x40002800
 8001590:	42470e3c 	.word	0x42470e3c

08001594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_UART_MspInit+0x94>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d134      	bne.n	8001620 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_UART_MspInit+0x98>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a1b      	ldr	r2, [pc, #108]	; (800162c <HAL_UART_MspInit+0x98>)
 80015c0:	f043 0310 	orr.w	r3, r3, #16
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_UART_MspInit+0x98>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_UART_MspInit+0x98>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <HAL_UART_MspInit+0x98>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_UART_MspInit+0x98>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001600:	2307      	movs	r3, #7
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4809      	ldr	r0, [pc, #36]	; (8001630 <HAL_UART_MspInit+0x9c>)
 800160c:	f000 fd0e 	bl	800202c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	2025      	movs	r0, #37	; 0x25
 8001616:	f000 fc32 	bl	8001e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800161a:	2025      	movs	r0, #37	; 0x25
 800161c:	f000 fc4b 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40011000 	.word	0x40011000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler+0x4>

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001680:	f000 faba 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

//	jitter solver
	if (HAL_GetTick() - JitterButtonK1 > 300)
 800168c:	f000 fac8 	bl	8001c20 <HAL_GetTick>
 8001690:	4603      	mov	r3, r0
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <EXTI3_IRQHandler+0x34>)
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800169c:	d908      	bls.n	80016b0 <EXTI3_IRQHandler+0x28>
	{
		JitterButtonK1 = HAL_GetTick();
 800169e:	f000 fabf 	bl	8001c20 <HAL_GetTick>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <EXTI3_IRQHandler+0x34>)
 80016a8:	701a      	strb	r2, [r3, #0]

//		here is our action on KEY1 button
		K1isPressed = 1;
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <EXTI3_IRQHandler+0x38>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80016b0:	2008      	movs	r0, #8
 80016b2:	f000 fe8b 	bl	80023cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200000fd 	.word	0x200000fd
 80016c0:	200001c5 	.word	0x200001c5

080016c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

//	jitter solver
	if (HAL_GetTick() - JitterButtonK0 > 300)
 80016c8:	f000 faaa 	bl	8001c20 <HAL_GetTick>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <EXTI4_IRQHandler+0x34>)
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016d8:	d908      	bls.n	80016ec <EXTI4_IRQHandler+0x28>
	{
		JitterButtonK0 = HAL_GetTick();
 80016da:	f000 faa1 	bl	8001c20 <HAL_GetTick>
 80016de:	4603      	mov	r3, r0
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <EXTI4_IRQHandler+0x34>)
 80016e4:	701a      	strb	r2, [r3, #0]

//		here is our action on KEY0 button
		K0isPressed = 1;
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <EXTI4_IRQHandler+0x38>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80016ec:	2010      	movs	r0, #16
 80016ee:	f000 fe6d 	bl	80023cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200000fc 	.word	0x200000fc
 80016fc:	200001c4 	.word	0x200001c4

08001700 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b087      	sub	sp, #28
 8001704:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001706:	487d      	ldr	r0, [pc, #500]	; (80018fc <USART1_IRQHandler+0x1fc>)
 8001708:	f002 fb34 	bl	8003d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  if (MessageTimer == 0)
 800170c:	4b7c      	ldr	r3, [pc, #496]	; (8001900 <USART1_IRQHandler+0x200>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d104      	bne.n	800171e <USART1_IRQHandler+0x1e>
	  MessageTimer = HAL_GetTick();
 8001714:	f000 fa84 	bl	8001c20 <HAL_GetTick>
 8001718:	4603      	mov	r3, r0
 800171a:	4a79      	ldr	r2, [pc, #484]	; (8001900 <USART1_IRQHandler+0x200>)
 800171c:	6013      	str	r3, [r2, #0]
//  IgnoringFlag = 1;
  HAL_UART_Receive(&huart1, RxData, 1, 10);
 800171e:	230a      	movs	r3, #10
 8001720:	2201      	movs	r2, #1
 8001722:	4978      	ldr	r1, [pc, #480]	; (8001904 <USART1_IRQHandler+0x204>)
 8001724:	4875      	ldr	r0, [pc, #468]	; (80018fc <USART1_IRQHandler+0x1fc>)
 8001726:	f002 fa82 	bl	8003c2e <HAL_UART_Receive>
  Buffer[CharCounter] = *RxData;
 800172a:	4b77      	ldr	r3, [pc, #476]	; (8001908 <USART1_IRQHandler+0x208>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	4b74      	ldr	r3, [pc, #464]	; (8001904 <USART1_IRQHandler+0x204>)
 8001732:	7819      	ldrb	r1, [r3, #0]
 8001734:	4b75      	ldr	r3, [pc, #468]	; (800190c <USART1_IRQHandler+0x20c>)
 8001736:	5499      	strb	r1, [r3, r2]
  CharCounter++;
 8001738:	4b73      	ldr	r3, [pc, #460]	; (8001908 <USART1_IRQHandler+0x208>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b71      	ldr	r3, [pc, #452]	; (8001908 <USART1_IRQHandler+0x208>)
 8001742:	701a      	strb	r2, [r3, #0]

  if (CharCounter == strlen(DelMessage))
 8001744:	4b70      	ldr	r3, [pc, #448]	; (8001908 <USART1_IRQHandler+0x208>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461c      	mov	r4, r3
 800174a:	4871      	ldr	r0, [pc, #452]	; (8001910 <USART1_IRQHandler+0x210>)
 800174c:	f7fe fd40 	bl	80001d0 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	429c      	cmp	r4, r3
 8001754:	d11c      	bne.n	8001790 <USART1_IRQHandler+0x90>
    {
  //	  StartIgnoringTimer = HAL_GetTick();
  	  uint8_t loop;
  	  for (loop = 0; loop < CharCounter; loop++)
 8001756:	2300      	movs	r3, #0
 8001758:	71fb      	strb	r3, [r7, #7]
 800175a:	e012      	b.n	8001782 <USART1_IRQHandler+0x82>
  	  {
  		  if (Buffer[loop] == DelMessage[loop])
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4a6b      	ldr	r2, [pc, #428]	; (800190c <USART1_IRQHandler+0x20c>)
 8001760:	5cd2      	ldrb	r2, [r2, r3]
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	496a      	ldr	r1, [pc, #424]	; (8001910 <USART1_IRQHandler+0x210>)
 8001766:	5ccb      	ldrb	r3, [r1, r3]
 8001768:	429a      	cmp	r2, r3
 800176a:	d110      	bne.n	800178e <USART1_IRQHandler+0x8e>
  		  {
  			  if (loop == CharCounter-1)
 800176c:	79fa      	ldrb	r2, [r7, #7]
 800176e:	4b66      	ldr	r3, [pc, #408]	; (8001908 <USART1_IRQHandler+0x208>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3b01      	subs	r3, #1
 8001774:	429a      	cmp	r2, r3
 8001776:	d101      	bne.n	800177c <USART1_IRQHandler+0x7c>
  			  {
//  				  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
  				  DeleteAlarm();
 8001778:	f7ff fc15 	bl	8000fa6 <DeleteAlarm>
  	  for (loop = 0; loop < CharCounter; loop++)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	3301      	adds	r3, #1
 8001780:	71fb      	strb	r3, [r7, #7]
 8001782:	4b61      	ldr	r3, [pc, #388]	; (8001908 <USART1_IRQHandler+0x208>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	79fa      	ldrb	r2, [r7, #7]
 8001788:	429a      	cmp	r2, r3
 800178a:	d3e7      	bcc.n	800175c <USART1_IRQHandler+0x5c>
 800178c:	e000      	b.n	8001790 <USART1_IRQHandler+0x90>
  			  }
  			  continue;
  		  }
  		  else
  			  break;
 800178e:	bf00      	nop
  	  }
    }

  if (CharCounter == strlen(OpenMessage))
 8001790:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <USART1_IRQHandler+0x208>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461c      	mov	r4, r3
 8001796:	485f      	ldr	r0, [pc, #380]	; (8001914 <USART1_IRQHandler+0x214>)
 8001798:	f7fe fd1a 	bl	80001d0 <strlen>
 800179c:	4603      	mov	r3, r0
 800179e:	429c      	cmp	r4, r3
 80017a0:	d15e      	bne.n	8001860 <USART1_IRQHandler+0x160>
  {
//	  StartIgnoringTimer = HAL_GetTick();
	  uint8_t loop;
	  for (loop = 0; loop < CharCounter; loop++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	71bb      	strb	r3, [r7, #6]
 80017a6:	e054      	b.n	8001852 <USART1_IRQHandler+0x152>
	  {
		  if (Buffer[loop] == OpenMessage[loop])
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	4a58      	ldr	r2, [pc, #352]	; (800190c <USART1_IRQHandler+0x20c>)
 80017ac:	5cd2      	ldrb	r2, [r2, r3]
 80017ae:	79bb      	ldrb	r3, [r7, #6]
 80017b0:	4958      	ldr	r1, [pc, #352]	; (8001914 <USART1_IRQHandler+0x214>)
 80017b2:	5ccb      	ldrb	r3, [r1, r3]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d152      	bne.n	800185e <USART1_IRQHandler+0x15e>
		  {
			  if (loop == CharCounter-1)
 80017b8:	79ba      	ldrb	r2, [r7, #6]
 80017ba:	4b53      	ldr	r3, [pc, #332]	; (8001908 <USART1_IRQHandler+0x208>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	3b01      	subs	r3, #1
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d143      	bne.n	800184c <USART1_IRQHandler+0x14c>
			  {
//				  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
				  if (IsAlarmSetBeforeNow())
 80017c4:	f7ff f9e8 	bl	8000b98 <IsAlarmSetBeforeNow>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d014      	beq.n	80017f8 <USART1_IRQHandler+0xf8>
				  {
					  HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017d4:	4850      	ldr	r0, [pc, #320]	; (8001918 <USART1_IRQHandler+0x218>)
 80017d6:	f000 fdc5 	bl	8002364 <HAL_GPIO_WritePin>
					  HAL_UART_Transmit(&huart1, Buffer, CharCounter, 10);
 80017da:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <USART1_IRQHandler+0x208>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	230a      	movs	r3, #10
 80017e2:	494a      	ldr	r1, [pc, #296]	; (800190c <USART1_IRQHandler+0x20c>)
 80017e4:	4845      	ldr	r0, [pc, #276]	; (80018fc <USART1_IRQHandler+0x1fc>)
 80017e6:	f002 f990 	bl	8003b0a <HAL_UART_Transmit>
					  HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f0:	4849      	ldr	r0, [pc, #292]	; (8001918 <USART1_IRQHandler+0x218>)
 80017f2:	f000 fdb7 	bl	8002364 <HAL_GPIO_WritePin>
 80017f6:	e029      	b.n	800184c <USART1_IRQHandler+0x14c>
				  } else
				  {
					  HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 80017f8:	2301      	movs	r3, #1
 80017fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017fe:	4947      	ldr	r1, [pc, #284]	; (800191c <USART1_IRQHandler+0x21c>)
 8001800:	4847      	ldr	r0, [pc, #284]	; (8001920 <USART1_IRQHandler+0x220>)
 8001802:	f001 ff69 	bl	80036d8 <HAL_RTC_GetAlarm>
					  sprintf(Message, "%s %02x:%02x of %02x.%02x", AlarmNowIsOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
 8001806:	4b45      	ldr	r3, [pc, #276]	; (800191c <USART1_IRQHandler+0x21c>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <USART1_IRQHandler+0x21c>)
 800180e:	785b      	ldrb	r3, [r3, #1]
 8001810:	461a      	mov	r2, r3
 8001812:	4b42      	ldr	r3, [pc, #264]	; (800191c <USART1_IRQHandler+0x21c>)
 8001814:	789b      	ldrb	r3, [r3, #2]
 8001816:	4619      	mov	r1, r3
 8001818:	4b40      	ldr	r3, [pc, #256]	; (800191c <USART1_IRQHandler+0x21c>)
 800181a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181e:	9302      	str	r3, [sp, #8]
 8001820:	9101      	str	r1, [sp, #4]
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	4603      	mov	r3, r0
 8001826:	4a3f      	ldr	r2, [pc, #252]	; (8001924 <USART1_IRQHandler+0x224>)
 8001828:	493f      	ldr	r1, [pc, #252]	; (8001928 <USART1_IRQHandler+0x228>)
 800182a:	4840      	ldr	r0, [pc, #256]	; (800192c <USART1_IRQHandler+0x22c>)
 800182c:	f003 f800 	bl	8004830 <siprintf>
					  HAL_UART_Transmit(&huart1, Message, strlen(Message), strlen(Message));
 8001830:	483e      	ldr	r0, [pc, #248]	; (800192c <USART1_IRQHandler+0x22c>)
 8001832:	f7fe fccd 	bl	80001d0 <strlen>
 8001836:	4603      	mov	r3, r0
 8001838:	b29c      	uxth	r4, r3
 800183a:	483c      	ldr	r0, [pc, #240]	; (800192c <USART1_IRQHandler+0x22c>)
 800183c:	f7fe fcc8 	bl	80001d0 <strlen>
 8001840:	4603      	mov	r3, r0
 8001842:	4622      	mov	r2, r4
 8001844:	4939      	ldr	r1, [pc, #228]	; (800192c <USART1_IRQHandler+0x22c>)
 8001846:	482d      	ldr	r0, [pc, #180]	; (80018fc <USART1_IRQHandler+0x1fc>)
 8001848:	f002 f95f 	bl	8003b0a <HAL_UART_Transmit>
	  for (loop = 0; loop < CharCounter; loop++)
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	3301      	adds	r3, #1
 8001850:	71bb      	strb	r3, [r7, #6]
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <USART1_IRQHandler+0x208>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	79ba      	ldrb	r2, [r7, #6]
 8001858:	429a      	cmp	r2, r3
 800185a:	d3a5      	bcc.n	80017a8 <USART1_IRQHandler+0xa8>
 800185c:	e000      	b.n	8001860 <USART1_IRQHandler+0x160>
				  }
			  }
			  continue;
		  }
		  else
			  break;
 800185e:	bf00      	nop
	  }
  }

  if (CharCounter == strlen(GetAlarm))
 8001860:	4b29      	ldr	r3, [pc, #164]	; (8001908 <USART1_IRQHandler+0x208>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461c      	mov	r4, r3
 8001866:	4832      	ldr	r0, [pc, #200]	; (8001930 <USART1_IRQHandler+0x230>)
 8001868:	f7fe fcb2 	bl	80001d0 <strlen>
 800186c:	4603      	mov	r3, r0
 800186e:	429c      	cmp	r4, r3
 8001870:	d13c      	bne.n	80018ec <USART1_IRQHandler+0x1ec>
  {
	  uint8_t loop;
	  for (loop = 0; loop < CharCounter; loop++)
 8001872:	2300      	movs	r3, #0
 8001874:	717b      	strb	r3, [r7, #5]
 8001876:	e032      	b.n	80018de <USART1_IRQHandler+0x1de>
	  {
		  if (Buffer[loop] == GetAlarm[loop])
 8001878:	797b      	ldrb	r3, [r7, #5]
 800187a:	4a24      	ldr	r2, [pc, #144]	; (800190c <USART1_IRQHandler+0x20c>)
 800187c:	5cd2      	ldrb	r2, [r2, r3]
 800187e:	797b      	ldrb	r3, [r7, #5]
 8001880:	492b      	ldr	r1, [pc, #172]	; (8001930 <USART1_IRQHandler+0x230>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	429a      	cmp	r2, r3
 8001886:	d130      	bne.n	80018ea <USART1_IRQHandler+0x1ea>
		  {
			  if (loop == CharCounter-1)
 8001888:	797a      	ldrb	r2, [r7, #5]
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <USART1_IRQHandler+0x208>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3b01      	subs	r3, #1
 8001890:	429a      	cmp	r2, r3
 8001892:	d121      	bne.n	80018d8 <USART1_IRQHandler+0x1d8>
			  {
//				  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
				  HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 8001894:	2301      	movs	r3, #1
 8001896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189a:	4920      	ldr	r1, [pc, #128]	; (800191c <USART1_IRQHandler+0x21c>)
 800189c:	4820      	ldr	r0, [pc, #128]	; (8001920 <USART1_IRQHandler+0x220>)
 800189e:	f001 ff1b 	bl	80036d8 <HAL_RTC_GetAlarm>
				  sprintf(Message, "%s %02x:%02x of %02x.%02x", AlarmNowIsOn, gAlarm.AlarmTime.Hours, gAlarm.AlarmTime.Minutes, gAlarm.AlarmTime.Seconds, gAlarm.AlarmDateWeekDay);
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <USART1_IRQHandler+0x21c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <USART1_IRQHandler+0x21c>)
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <USART1_IRQHandler+0x21c>)
 80018b0:	789b      	ldrb	r3, [r3, #2]
 80018b2:	4619      	mov	r1, r3
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <USART1_IRQHandler+0x21c>)
 80018b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	9101      	str	r1, [sp, #4]
 80018be:	9200      	str	r2, [sp, #0]
 80018c0:	4603      	mov	r3, r0
 80018c2:	4a18      	ldr	r2, [pc, #96]	; (8001924 <USART1_IRQHandler+0x224>)
 80018c4:	4918      	ldr	r1, [pc, #96]	; (8001928 <USART1_IRQHandler+0x228>)
 80018c6:	4819      	ldr	r0, [pc, #100]	; (800192c <USART1_IRQHandler+0x22c>)
 80018c8:	f002 ffb2 	bl	8004830 <siprintf>
				  HAL_UART_Transmit(&huart1, Message, 26, 26);
 80018cc:	231a      	movs	r3, #26
 80018ce:	221a      	movs	r2, #26
 80018d0:	4916      	ldr	r1, [pc, #88]	; (800192c <USART1_IRQHandler+0x22c>)
 80018d2:	480a      	ldr	r0, [pc, #40]	; (80018fc <USART1_IRQHandler+0x1fc>)
 80018d4:	f002 f919 	bl	8003b0a <HAL_UART_Transmit>
	  for (loop = 0; loop < CharCounter; loop++)
 80018d8:	797b      	ldrb	r3, [r7, #5]
 80018da:	3301      	adds	r3, #1
 80018dc:	717b      	strb	r3, [r7, #5]
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <USART1_IRQHandler+0x208>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	797a      	ldrb	r2, [r7, #5]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d3c7      	bcc.n	8001878 <USART1_IRQHandler+0x178>
 80018e8:	e000      	b.n	80018ec <USART1_IRQHandler+0x1ec>
			  }
			  continue;
		  }
		  else
			  break;
 80018ea:	bf00      	nop
	  }
  }

  if (CharCounter == 8)
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <USART1_IRQHandler+0x208>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	f040 8091 	bne.w	8001a18 <USART1_IRQHandler+0x318>
  {
	  uint8_t loop;
	  for (loop = 0; loop < CharCounter; loop++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	713b      	strb	r3, [r7, #4]
 80018fa:	e086      	b.n	8001a0a <USART1_IRQHandler+0x30a>
 80018fc:	2000017c 	.word	0x2000017c
 8001900:	20000114 	.word	0x20000114
 8001904:	20000240 	.word	0x20000240
 8001908:	20000211 	.word	0x20000211
 800190c:	20000218 	.word	0x20000218
 8001910:	20000040 	.word	0x20000040
 8001914:	20000038 	.word	0x20000038
 8001918:	40020400 	.word	0x40020400
 800191c:	2000011c 	.word	0x2000011c
 8001920:	200001c8 	.word	0x200001c8
 8001924:	20000054 	.word	0x20000054
 8001928:	08005224 	.word	0x08005224
 800192c:	20000148 	.word	0x20000148
 8001930:	20000048 	.word	0x20000048
	  {
		  if isdigit((uint8_t)Buffer[loop])
 8001934:	793b      	ldrb	r3, [r7, #4]
 8001936:	4a3a      	ldr	r2, [pc, #232]	; (8001a20 <USART1_IRQHandler+0x320>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	3301      	adds	r3, #1
 800193c:	4a39      	ldr	r2, [pc, #228]	; (8001a24 <USART1_IRQHandler+0x324>)
 800193e:	4413      	add	r3, r2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d065      	beq.n	8001a16 <USART1_IRQHandler+0x316>
		  {
			  if (loop == CharCounter-1)
 800194a:	793a      	ldrb	r2, [r7, #4]
 800194c:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <USART1_IRQHandler+0x328>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	3b01      	subs	r3, #1
 8001952:	429a      	cmp	r2, r3
 8001954:	d156      	bne.n	8001a04 <USART1_IRQHandler+0x304>
			  {
				  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8001956:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <USART1_IRQHandler+0x32c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <USART1_IRQHandler+0x32c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0220 	bic.w	r2, r2, #32
 8001964:	60da      	str	r2, [r3, #12]

//				  check if all the received numbers are valid to set for alarm
				  Hstr[0] = (uint8_t)Buffer[0];
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <USART1_IRQHandler+0x320>)
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <USART1_IRQHandler+0x330>)
 800196c:	701a      	strb	r2, [r3, #0]
				  Hstr[1] = (uint8_t)Buffer[1];
 800196e:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <USART1_IRQHandler+0x320>)
 8001970:	785a      	ldrb	r2, [r3, #1]
 8001972:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <USART1_IRQHandler+0x330>)
 8001974:	705a      	strb	r2, [r3, #1]
				  SetHours = atoi(Hstr);
 8001976:	482e      	ldr	r0, [pc, #184]	; (8001a30 <USART1_IRQHandler+0x330>)
 8001978:	f002 ff24 	bl	80047c4 <atoi>
 800197c:	4603      	mov	r3, r0
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <USART1_IRQHandler+0x334>)
 8001982:	701a      	strb	r2, [r3, #0]
				  if ( (SetHours >= 0) && (SetHours <= 23) )
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <USART1_IRQHandler+0x334>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b17      	cmp	r3, #23
 800198a:	d83b      	bhi.n	8001a04 <USART1_IRQHandler+0x304>
				  {
					  Mstr[0] = (uint8_t)Buffer[2];
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <USART1_IRQHandler+0x320>)
 800198e:	789a      	ldrb	r2, [r3, #2]
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <USART1_IRQHandler+0x338>)
 8001992:	701a      	strb	r2, [r3, #0]
					  Mstr[1] = (uint8_t)Buffer[3];
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <USART1_IRQHandler+0x320>)
 8001996:	78da      	ldrb	r2, [r3, #3]
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <USART1_IRQHandler+0x338>)
 800199a:	705a      	strb	r2, [r3, #1]
					  SetMinutes = atoi(Mstr);
 800199c:	4826      	ldr	r0, [pc, #152]	; (8001a38 <USART1_IRQHandler+0x338>)
 800199e:	f002 ff11 	bl	80047c4 <atoi>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <USART1_IRQHandler+0x33c>)
 80019a8:	701a      	strb	r2, [r3, #0]
					  if ( (SetMinutes >= 0) && (SetMinutes <= 59) )
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <USART1_IRQHandler+0x33c>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b3b      	cmp	r3, #59	; 0x3b
 80019b0:	d828      	bhi.n	8001a04 <USART1_IRQHandler+0x304>
					  {
						  Dstr[0] = (uint8_t)Buffer[6];
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <USART1_IRQHandler+0x320>)
 80019b4:	799a      	ldrb	r2, [r3, #6]
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <USART1_IRQHandler+0x340>)
 80019b8:	701a      	strb	r2, [r3, #0]
						  Dstr[1] = (uint8_t)Buffer[7];
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <USART1_IRQHandler+0x320>)
 80019bc:	79da      	ldrb	r2, [r3, #7]
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <USART1_IRQHandler+0x340>)
 80019c0:	705a      	strb	r2, [r3, #1]
						  SetDate = atoi(Dstr);
 80019c2:	481f      	ldr	r0, [pc, #124]	; (8001a40 <USART1_IRQHandler+0x340>)
 80019c4:	f002 fefe 	bl	80047c4 <atoi>
 80019c8:	4603      	mov	r3, r0
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <USART1_IRQHandler+0x344>)
 80019ce:	701a      	strb	r2, [r3, #0]
						  if ( (SetDate >= 1) && (SetDate <= 30) )
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <USART1_IRQHandler+0x344>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d015      	beq.n	8001a04 <USART1_IRQHandler+0x304>
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <USART1_IRQHandler+0x344>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b1e      	cmp	r3, #30
 80019de:	d811      	bhi.n	8001a04 <USART1_IRQHandler+0x304>
						  {
							  Sstr[0] = (uint8_t)Buffer[4];
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <USART1_IRQHandler+0x320>)
 80019e2:	791a      	ldrb	r2, [r3, #4]
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <USART1_IRQHandler+0x348>)
 80019e6:	701a      	strb	r2, [r3, #0]
							  Sstr[1] = (uint8_t)Buffer[5];
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <USART1_IRQHandler+0x320>)
 80019ea:	795a      	ldrb	r2, [r3, #5]
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <USART1_IRQHandler+0x348>)
 80019ee:	705a      	strb	r2, [r3, #1]
							  SetSeconds = atoi(Sstr);
 80019f0:	4815      	ldr	r0, [pc, #84]	; (8001a48 <USART1_IRQHandler+0x348>)
 80019f2:	f002 fee7 	bl	80047c4 <atoi>
 80019f6:	4603      	mov	r3, r0
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <USART1_IRQHandler+0x34c>)
 80019fc:	701a      	strb	r2, [r3, #0]
							  SetAlarm = 1;
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <USART1_IRQHandler+0x350>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
	  for (loop = 0; loop < CharCounter; loop++)
 8001a04:	793b      	ldrb	r3, [r7, #4]
 8001a06:	3301      	adds	r3, #1
 8001a08:	713b      	strb	r3, [r7, #4]
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <USART1_IRQHandler+0x328>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	793a      	ldrb	r2, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d38f      	bcc.n	8001934 <USART1_IRQHandler+0x234>
			  break;
	  }
  }

  /* USER CODE END USART1_IRQn 1 */
}
 8001a14:	e000      	b.n	8001a18 <USART1_IRQHandler+0x318>
			  break;
 8001a16:	bf00      	nop
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd90      	pop	{r4, r7, pc}
 8001a20:	20000218 	.word	0x20000218
 8001a24:	08005258 	.word	0x08005258
 8001a28:	20000211 	.word	0x20000211
 8001a2c:	2000017c 	.word	0x2000017c
 8001a30:	20000244 	.word	0x20000244
 8001a34:	20000230 	.word	0x20000230
 8001a38:	2000023c 	.word	0x2000023c
 8001a3c:	20000110 	.word	0x20000110
 8001a40:	20000238 	.word	0x20000238
 8001a44:	20000166 	.word	0x20000166
 8001a48:	20000234 	.word	0x20000234
 8001a4c:	20000167 	.word	0x20000167
 8001a50:	20000145 	.word	0x20000145

08001a54 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <RTC_Alarm_IRQHandler+0x10>)
 8001a5a:	f001 fecd 	bl	80037f8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200001c8 	.word	0x200001c8

08001a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <_sbrk+0x5c>)
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <_sbrk+0x60>)
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <_sbrk+0x64>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <_sbrk+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d207      	bcs.n	8001aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a98:	f002 fe98 	bl	80047cc <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20020000 	.word	0x20020000
 8001ac8:	00000400 	.word	0x00000400
 8001acc:	20000100 	.word	0x20000100
 8001ad0:	20000260 	.word	0x20000260

08001ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <SystemInit+0x28>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	4a07      	ldr	r2, [pc, #28]	; (8001afc <SystemInit+0x28>)
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SystemInit+0x28>)
 8001aea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aee:	609a      	str	r2, [r3, #8]
#endif
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b06:	e003      	b.n	8001b10 <LoopCopyDataInit>

08001b08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b0e:	3104      	adds	r1, #4

08001b10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b10:	480b      	ldr	r0, [pc, #44]	; (8001b40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b18:	d3f6      	bcc.n	8001b08 <CopyDataInit>
  ldr  r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b1c:	e002      	b.n	8001b24 <LoopFillZerobss>

08001b1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b20:	f842 3b04 	str.w	r3, [r2], #4

08001b24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b28:	d3f9      	bcc.n	8001b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b2a:	f7ff ffd3 	bl	8001ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f002 fe53 	bl	80047d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7ff fa43 	bl	8000fbc <main>
  bx  lr    
 8001b36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b3c:	0800539c 	.word	0x0800539c
  ldr  r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b44:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8001b48:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8001b4c:	2000025c 	.word	0x2000025c

08001b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC_IRQHandler>
	...

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <HAL_Init+0x40>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_Init+0x40>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_Init+0x40>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 f973 	bl	8001e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 f808 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b88:	f7ff fca8 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f999 	bl	8001eee <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd4:	f000 f953 	bl	8001e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <HAL_InitTick+0x5c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000070 	.word	0x20000070
 8001bf0:	20000078 	.word	0x20000078
 8001bf4:	20000074 	.word	0x20000074

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000078 	.word	0x20000078
 8001c1c:	20000248 	.word	0x20000248

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000248 	.word	0x20000248

08001c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff ffee 	bl	8001c20 <HAL_GetTick>
 8001c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c50:	d005      	beq.n	8001c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_Delay+0x44>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c5e:	bf00      	nop
 8001c60:	f7ff ffde 	bl	8001c20 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d8f7      	bhi.n	8001c60 <HAL_Delay+0x28>
  {
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000078 	.word	0x20000078

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4907      	ldr	r1, [pc, #28]	; (8001d1c <__NVIC_EnableIRQ+0x38>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db12      	blt.n	8001d58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	490a      	ldr	r1, [pc, #40]	; (8001d64 <__NVIC_DisableIRQ+0x44>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	3320      	adds	r3, #32
 8001d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d4c:	f3bf 8f4f 	dsb	sy
}
 8001d50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d52:	f3bf 8f6f 	isb	sy
}
 8001d56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	; (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	; (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	; 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e34:	d301      	bcc.n	8001e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00f      	b.n	8001e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <SysTick_Config+0x40>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e42:	210f      	movs	r1, #15
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e48:	f7ff ff8e 	bl	8001d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <SysTick_Config+0x40>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e52:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <SysTick_Config+0x40>)
 8001e54:	2207      	movs	r2, #7
 8001e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	e000e010 	.word	0xe000e010

08001e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ff05 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e90:	f7ff ff1a 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	6978      	ldr	r0, [r7, #20]
 8001e9c:	f7ff ff8e 	bl	8001dbc <NVIC_EncodePriority>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff5d 	bl	8001d68 <__NVIC_SetPriority>
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff0d 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff1d 	bl	8001d20 <__NVIC_DisableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ff94 	bl	8001e24 <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff fe84 	bl	8001c20 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d008      	beq.n	8001f38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e052      	b.n	8001fde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0216 	bic.w	r2, r2, #22
 8001f46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d103      	bne.n	8001f68 <HAL_DMA_Abort+0x62>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0208 	bic.w	r2, r2, #8
 8001f76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f88:	e013      	b.n	8001fb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f8a:	f7ff fe49 	bl	8001c20 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d90c      	bls.n	8001fb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e015      	b.n	8001fde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e4      	bne.n	8001f8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	223f      	movs	r2, #63	; 0x3f
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d004      	beq.n	8002004 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e00c      	b.n	800201e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2205      	movs	r2, #5
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	; 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e16b      	b.n	8002320 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	429a      	cmp	r2, r3
 8002062:	f040 815a 	bne.w	800231a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d005      	beq.n	800207e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	2b02      	cmp	r3, #2
 800207c:	d130      	bne.n	80020e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 0201 	and.w	r2, r3, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d017      	beq.n	800211c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d123      	bne.n	8002170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	08da      	lsrs	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3208      	adds	r2, #8
 8002130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	08da      	lsrs	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3208      	adds	r2, #8
 800216a:	69b9      	ldr	r1, [r7, #24]
 800216c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0203 	and.w	r2, r3, #3
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80b4 	beq.w	800231a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b60      	ldr	r3, [pc, #384]	; (8002338 <HAL_GPIO_Init+0x30c>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a5f      	ldr	r2, [pc, #380]	; (8002338 <HAL_GPIO_Init+0x30c>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <HAL_GPIO_Init+0x30c>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ce:	4a5b      	ldr	r2, [pc, #364]	; (800233c <HAL_GPIO_Init+0x310>)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a52      	ldr	r2, [pc, #328]	; (8002340 <HAL_GPIO_Init+0x314>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d02b      	beq.n	8002252 <HAL_GPIO_Init+0x226>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a51      	ldr	r2, [pc, #324]	; (8002344 <HAL_GPIO_Init+0x318>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d025      	beq.n	800224e <HAL_GPIO_Init+0x222>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a50      	ldr	r2, [pc, #320]	; (8002348 <HAL_GPIO_Init+0x31c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01f      	beq.n	800224a <HAL_GPIO_Init+0x21e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4f      	ldr	r2, [pc, #316]	; (800234c <HAL_GPIO_Init+0x320>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d019      	beq.n	8002246 <HAL_GPIO_Init+0x21a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4e      	ldr	r2, [pc, #312]	; (8002350 <HAL_GPIO_Init+0x324>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0x216>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4d      	ldr	r2, [pc, #308]	; (8002354 <HAL_GPIO_Init+0x328>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00d      	beq.n	800223e <HAL_GPIO_Init+0x212>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4c      	ldr	r2, [pc, #304]	; (8002358 <HAL_GPIO_Init+0x32c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x20e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4b      	ldr	r2, [pc, #300]	; (800235c <HAL_GPIO_Init+0x330>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_GPIO_Init+0x20a>
 8002232:	2307      	movs	r3, #7
 8002234:	e00e      	b.n	8002254 <HAL_GPIO_Init+0x228>
 8002236:	2308      	movs	r3, #8
 8002238:	e00c      	b.n	8002254 <HAL_GPIO_Init+0x228>
 800223a:	2306      	movs	r3, #6
 800223c:	e00a      	b.n	8002254 <HAL_GPIO_Init+0x228>
 800223e:	2305      	movs	r3, #5
 8002240:	e008      	b.n	8002254 <HAL_GPIO_Init+0x228>
 8002242:	2304      	movs	r3, #4
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x228>
 8002246:	2303      	movs	r3, #3
 8002248:	e004      	b.n	8002254 <HAL_GPIO_Init+0x228>
 800224a:	2302      	movs	r3, #2
 800224c:	e002      	b.n	8002254 <HAL_GPIO_Init+0x228>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x228>
 8002252:	2300      	movs	r3, #0
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4093      	lsls	r3, r2
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002264:	4935      	ldr	r1, [pc, #212]	; (800233c <HAL_GPIO_Init+0x310>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_GPIO_Init+0x334>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002296:	4a32      	ldr	r2, [pc, #200]	; (8002360 <HAL_GPIO_Init+0x334>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800229c:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_GPIO_Init+0x334>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022c0:	4a27      	ldr	r2, [pc, #156]	; (8002360 <HAL_GPIO_Init+0x334>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <HAL_GPIO_Init+0x334>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_GPIO_Init+0x334>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_GPIO_Init+0x334>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002314:	4a12      	ldr	r2, [pc, #72]	; (8002360 <HAL_GPIO_Init+0x334>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	f67f ae90 	bls.w	8002048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40013800 	.word	0x40013800
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400
 8002348:	40020800 	.word	0x40020800
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40021000 	.word	0x40021000
 8002354:	40021400 	.word	0x40021400
 8002358:	40021800 	.word	0x40021800
 800235c:	40021c00 	.word	0x40021c00
 8002360:	40013c00 	.word	0x40013c00

08002364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
 8002370:	4613      	mov	r3, r2
 8002372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002380:	e003      	b.n	800238a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	041a      	lsls	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	619a      	str	r2, [r3, #24]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002396:	b480      	push	{r7}
 8002398:	b085      	sub	sp, #20
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a8:	887a      	ldrh	r2, [r7, #2]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4013      	ands	r3, r2
 80023ae:	041a      	lsls	r2, r3, #16
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	400b      	ands	r3, r1
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	619a      	str	r2, [r3, #24]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f806 	bl	80023fc <HAL_GPIO_EXTI_Callback>
  }
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40013c00 	.word	0x40013c00

080023fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e264      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d075      	beq.n	800251e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002432:	4ba3      	ldr	r3, [pc, #652]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b04      	cmp	r3, #4
 800243c:	d00c      	beq.n	8002458 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243e:	4ba0      	ldr	r3, [pc, #640]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002446:	2b08      	cmp	r3, #8
 8002448:	d112      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244a:	4b9d      	ldr	r3, [pc, #628]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002456:	d10b      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	4b99      	ldr	r3, [pc, #612]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d05b      	beq.n	800251c <HAL_RCC_OscConfig+0x108>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d157      	bne.n	800251c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e23f      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002478:	d106      	bne.n	8002488 <HAL_RCC_OscConfig+0x74>
 800247a:	4b91      	ldr	r3, [pc, #580]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a90      	ldr	r2, [pc, #576]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e01d      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x98>
 8002492:	4b8b      	ldr	r3, [pc, #556]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a8a      	ldr	r2, [pc, #552]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a87      	ldr	r2, [pc, #540]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 80024ac:	4b84      	ldr	r3, [pc, #528]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a83      	ldr	r2, [pc, #524]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b81      	ldr	r3, [pc, #516]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a80      	ldr	r2, [pc, #512]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff fba8 	bl	8001c20 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff fba4 	bl	8001c20 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e204      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0xc0>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff fb94 	bl	8001c20 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff fb90 	bl	8001c20 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1f0      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	4b6c      	ldr	r3, [pc, #432]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0xe8>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d063      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800252a:	4b65      	ldr	r3, [pc, #404]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002536:	4b62      	ldr	r3, [pc, #392]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800253e:	2b08      	cmp	r3, #8
 8002540:	d11c      	bne.n	800257c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b5f      	ldr	r3, [pc, #380]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d116      	bne.n	800257c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	4b5c      	ldr	r3, [pc, #368]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x152>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e1c4      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4952      	ldr	r1, [pc, #328]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	e03a      	b.n	80025f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002584:	4b4f      	ldr	r3, [pc, #316]	; (80026c4 <HAL_RCC_OscConfig+0x2b0>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7ff fb49 	bl	8001c20 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002592:	f7ff fb45 	bl	8001c20 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1a5      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4940      	ldr	r1, [pc, #256]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4b3f      	ldr	r3, [pc, #252]	; (80026c4 <HAL_RCC_OscConfig+0x2b0>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7ff fb28 	bl	8001c20 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d4:	f7ff fb24 	bl	8001c20 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e184      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d030      	beq.n	8002660 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d016      	beq.n	8002634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <HAL_RCC_OscConfig+0x2b4>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7ff fb08 	bl	8001c20 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002614:	f7ff fb04 	bl	8001c20 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e164      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x200>
 8002632:	e015      	b.n	8002660 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002634:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x2b4>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7ff faf1 	bl	8001c20 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002642:	f7ff faed 	bl	8001c20 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e14d      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f0      	bne.n	8002642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80a0 	beq.w	80027ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269a:	2301      	movs	r3, #1
 800269c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_OscConfig+0x2b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d121      	bne.n	80026ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_RCC_OscConfig+0x2b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a07      	ldr	r2, [pc, #28]	; (80026cc <HAL_RCC_OscConfig+0x2b8>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b6:	f7ff fab3 	bl	8001c20 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	e011      	b.n	80026e2 <HAL_RCC_OscConfig+0x2ce>
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470000 	.word	0x42470000
 80026c8:	42470e80 	.word	0x42470e80
 80026cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d0:	f7ff faa6 	bl	8001c20 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e106      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	4b85      	ldr	r3, [pc, #532]	; (80028f8 <HAL_RCC_OscConfig+0x4e4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d106      	bne.n	8002704 <HAL_RCC_OscConfig+0x2f0>
 80026f6:	4b81      	ldr	r3, [pc, #516]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a80      	ldr	r2, [pc, #512]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	e01c      	b.n	800273e <HAL_RCC_OscConfig+0x32a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x312>
 800270c:	4b7b      	ldr	r3, [pc, #492]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a7a      	ldr	r2, [pc, #488]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	4b78      	ldr	r3, [pc, #480]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a77      	ldr	r2, [pc, #476]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
 8002724:	e00b      	b.n	800273e <HAL_RCC_OscConfig+0x32a>
 8002726:	4b75      	ldr	r3, [pc, #468]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a74      	ldr	r2, [pc, #464]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	4b72      	ldr	r3, [pc, #456]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a71      	ldr	r2, [pc, #452]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d015      	beq.n	8002772 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7ff fa6b 	bl	8001c20 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7ff fa67 	bl	8001c20 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0c5      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ee      	beq.n	800274e <HAL_RCC_OscConfig+0x33a>
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7ff fa55 	bl	8001c20 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7ff fa51 	bl	8001c20 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0af      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a2:	4b56      	ldr	r3, [pc, #344]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a55      	ldr	r2, [pc, #340]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80027a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 809b 	beq.w	80028ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d05c      	beq.n	800287e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d141      	bne.n	8002850 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b4c      	ldr	r3, [pc, #304]	; (8002900 <HAL_RCC_OscConfig+0x4ec>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7ff fa25 	bl	8001c20 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027da:	f7ff fa21 	bl	8001c20 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e081      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ec:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	019b      	lsls	r3, r3, #6
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	3b01      	subs	r3, #1
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	4937      	ldr	r1, [pc, #220]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_OscConfig+0x4ec>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7ff f9fa 	bl	8001c20 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002830:	f7ff f9f6 	bl	8001c20 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e056      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002842:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x41c>
 800284e:	e04e      	b.n	80028ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_OscConfig+0x4ec>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7ff f9e3 	bl	8001c20 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7ff f9df 	bl	8001c20 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e03f      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x44a>
 800287c:	e037      	b.n	80028ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e032      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d028      	beq.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d121      	bne.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d11a      	bne.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ba:	4013      	ands	r3, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d111      	bne.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	3b01      	subs	r3, #1
 80028d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40007000 	.word	0x40007000
 80028fc:	40023800 	.word	0x40023800
 8002900:	42470060 	.word	0x42470060

08002904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0cc      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b68      	ldr	r3, [pc, #416]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d90c      	bls.n	8002940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b65      	ldr	r3, [pc, #404]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0b8      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a58      	ldr	r2, [pc, #352]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002962:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800297a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	494d      	ldr	r1, [pc, #308]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d044      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d119      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e07f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d003      	beq.n	80029c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e067      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e2:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4934      	ldr	r1, [pc, #208]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f4:	f7ff f914 	bl	8001c20 <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fc:	f7ff f910 	bl	8001c20 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e04f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 020c 	and.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1eb      	bne.n	80029fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d20c      	bcs.n	8002a4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e032      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4916      	ldr	r1, [pc, #88]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a76:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	490e      	ldr	r1, [pc, #56]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a8a:	f000 f821 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	490a      	ldr	r1, [pc, #40]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	5ccb      	ldrb	r3, [r1, r3]
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff f874 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023c00 	.word	0x40023c00
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	08005240 	.word	0x08005240
 8002ac8:	20000070 	.word	0x20000070
 8002acc:	20000074 	.word	0x20000074

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	607b      	str	r3, [r7, #4]
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae8:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d00d      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x40>
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	f200 80bd 	bhi.w	8002c74 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x34>
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b02:	e0b7      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b06:	60bb      	str	r3, [r7, #8]
       break;
 8002b08:	e0b7      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0a:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b0c:	60bb      	str	r3, [r7, #8]
      break;
 8002b0e:	e0b4      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b10:	4b5d      	ldr	r3, [pc, #372]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b1a:	4b5b      	ldr	r3, [pc, #364]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d04d      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b26:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	099b      	lsrs	r3, r3, #6
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	ea02 0800 	and.w	r8, r2, r0
 8002b3e:	ea03 0901 	and.w	r9, r3, r1
 8002b42:	4640      	mov	r0, r8
 8002b44:	4649      	mov	r1, r9
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	014b      	lsls	r3, r1, #5
 8002b50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b54:	0142      	lsls	r2, r0, #5
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	ebb0 0008 	subs.w	r0, r0, r8
 8002b5e:	eb61 0109 	sbc.w	r1, r1, r9
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	018b      	lsls	r3, r1, #6
 8002b6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b70:	0182      	lsls	r2, r0, #6
 8002b72:	1a12      	subs	r2, r2, r0
 8002b74:	eb63 0301 	sbc.w	r3, r3, r1
 8002b78:	f04f 0000 	mov.w	r0, #0
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	00d9      	lsls	r1, r3, #3
 8002b82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b86:	00d0      	lsls	r0, r2, #3
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	eb12 0208 	adds.w	r2, r2, r8
 8002b90:	eb43 0309 	adc.w	r3, r3, r9
 8002b94:	f04f 0000 	mov.w	r0, #0
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	0259      	lsls	r1, r3, #9
 8002b9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ba2:	0250      	lsls	r0, r2, #9
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	f7fd fd40 	bl	8000638 <__aeabi_uldivmod>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e04a      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc2:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	ea02 0400 	and.w	r4, r2, r0
 8002bda:	ea03 0501 	and.w	r5, r3, r1
 8002bde:	4620      	mov	r0, r4
 8002be0:	4629      	mov	r1, r5
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	014b      	lsls	r3, r1, #5
 8002bec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bf0:	0142      	lsls	r2, r0, #5
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	1b00      	subs	r0, r0, r4
 8002bf8:	eb61 0105 	sbc.w	r1, r1, r5
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	018b      	lsls	r3, r1, #6
 8002c06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c0a:	0182      	lsls	r2, r0, #6
 8002c0c:	1a12      	subs	r2, r2, r0
 8002c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	00d9      	lsls	r1, r3, #3
 8002c1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c20:	00d0      	lsls	r0, r2, #3
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	1912      	adds	r2, r2, r4
 8002c28:	eb45 0303 	adc.w	r3, r5, r3
 8002c2c:	f04f 0000 	mov.w	r0, #0
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	0299      	lsls	r1, r3, #10
 8002c36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c3a:	0290      	lsls	r0, r2, #10
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	f7fd fcf4 	bl	8000638 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	3301      	adds	r3, #1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	60bb      	str	r3, [r7, #8]
      break;
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c76:	60bb      	str	r3, [r7, #8]
      break;
 8002c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	00f42400 	.word	0x00f42400
 8002c90:	007a1200 	.word	0x007a1200

08002c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000070 	.word	0x20000070

08002cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb0:	f7ff fff0 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0a9b      	lsrs	r3, r3, #10
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08005250 	.word	0x08005250

08002cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cd8:	f7ff ffdc 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0b5b      	lsrs	r3, r3, #13
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4903      	ldr	r1, [pc, #12]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	08005250 	.word	0x08005250

08002cfc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d035      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d24:	4b62      	ldr	r3, [pc, #392]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe ff79 	bl	8001c20 <HAL_GetTick>
 8002d2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d32:	f7fe ff75 	bl	8001c20 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0b0      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d44:	4b5b      	ldr	r3, [pc, #364]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	019a      	lsls	r2, r3, #6
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	071b      	lsls	r3, r3, #28
 8002d5c:	4955      	ldr	r1, [pc, #340]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d64:	4b52      	ldr	r3, [pc, #328]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d6a:	f7fe ff59 	bl	8001c20 <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d72:	f7fe ff55 	bl	8001c20 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e090      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d84:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8083 	beq.w	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b44      	ldr	r3, [pc, #272]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a43      	ldr	r2, [pc, #268]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002dba:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3e      	ldr	r2, [pc, #248]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dc6:	f7fe ff2b 	bl	8001c20 <HAL_GetTick>
 8002dca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dce:	f7fe ff27 	bl	8001c20 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e062      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002de0:	4b35      	ldr	r3, [pc, #212]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dec:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d02f      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d028      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e14:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1a:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e20:	4a24      	ldr	r2, [pc, #144]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d114      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fe fef5 	bl	8001c20 <HAL_GetTick>
 8002e36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fe fef1 	bl	8001c20 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e02a      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ee      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e68:	d10d      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7e:	490d      	ldr	r1, [pc, #52]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]
 8002e84:	e005      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e8c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e90:	6093      	str	r3, [r2, #8]
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9e:	4905      	ldr	r1, [pc, #20]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	42470068 	.word	0x42470068
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40007000 	.word	0x40007000
 8002ebc:	42470e40 	.word	0x42470e40

08002ec0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0a4      	b.n	800301c <HAL_RTC_Init+0x15c>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	7f5b      	ldrb	r3, [r3, #29]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d126      	bne.n	8002f2a <HAL_RTC_Init+0x6a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4f      	ldr	r2, [pc, #316]	; (8003024 <HAL_RTC_Init+0x164>)
 8002ee6:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a4f      	ldr	r2, [pc, #316]	; (8003028 <HAL_RTC_Init+0x168>)
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a4e      	ldr	r2, [pc, #312]	; (800302c <HAL_RTC_Init+0x16c>)
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a4e      	ldr	r2, [pc, #312]	; (8003030 <HAL_RTC_Init+0x170>)
 8002ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4d      	ldr	r2, [pc, #308]	; (8003034 <HAL_RTC_Init+0x174>)
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a4d      	ldr	r2, [pc, #308]	; (8003038 <HAL_RTC_Init+0x178>)
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34

    if(hrtc->MspInitCallback == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <HAL_RTC_Init+0x54>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4a      	ldr	r2, [pc, #296]	; (800303c <HAL_RTC_Init+0x17c>)
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3

    if(hrtc->MspDeInitCallback == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <HAL_RTC_Init+0x6a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a46      	ldr	r2, [pc, #280]	; (8003040 <HAL_RTC_Init+0x180>)
 8002f28:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	22ca      	movs	r2, #202	; 0xca
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2253      	movs	r2, #83	; 0x53
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fcc9 	bl	80038d8 <RTC_EnterInitMode>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RTC_Init+0x9e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	22ff      	movs	r2, #255	; 0xff
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2204      	movs	r2, #4
 8002f58:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e05e      	b.n	800301c <HAL_RTC_Init+0x15c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f70:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68d2      	ldr	r2, [r2, #12]
 8002f98:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6919      	ldr	r1, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	041a      	lsls	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fbc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10e      	bne.n	8002fea <HAL_RTC_Init+0x12a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fc5b 	bl	8003888 <HAL_RTC_WaitForSynchro>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RTC_Init+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	22ff      	movs	r2, #255	; 0xff
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e018      	b.n	800301c <HAL_RTC_Init+0x15c>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	22ff      	movs	r2, #255	; 0xff
 8003012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
  }
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	08000b79 	.word	0x08000b79
 8003028:	08003a5d 	.word	0x08003a5d
 800302c:	080039a9 	.word	0x080039a9
 8003030:	080039e5 	.word	0x080039e5
 8003034:	080039bd 	.word	0x080039bd
 8003038:	080039d1 	.word	0x080039d1
 800303c:	0800152d 	.word	0x0800152d
 8003040:	08001565 	.word	0x08001565

08003044 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	7f1b      	ldrb	r3, [r3, #28]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_RTC_SetTime+0x1c>
 800305c:	2302      	movs	r3, #2
 800305e:	e0aa      	b.n	80031b6 <HAL_RTC_SetTime+0x172>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2202      	movs	r2, #2
 800306a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d126      	bne.n	80030c0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d102      	bne.n	8003086 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2200      	movs	r2, #0
 8003084:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fc50 	bl	8003930 <RTC_ByteToBcd2>
 8003090:	4603      	mov	r3, r0
 8003092:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	785b      	ldrb	r3, [r3, #1]
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fc49 	bl	8003930 <RTC_ByteToBcd2>
 800309e:	4603      	mov	r3, r0
 80030a0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030a2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	789b      	ldrb	r3, [r3, #2]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fc41 	bl	8003930 <RTC_ByteToBcd2>
 80030ae:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80030b0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	78db      	ldrb	r3, [r3, #3]
 80030b8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	e018      	b.n	80030f2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2200      	movs	r2, #0
 80030d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	785b      	ldrb	r3, [r3, #1]
 80030de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030e0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80030e6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	78db      	ldrb	r3, [r3, #3]
 80030ec:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	22ca      	movs	r2, #202	; 0xca
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2253      	movs	r2, #83	; 0x53
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fbe8 	bl	80038d8 <RTC_EnterInitMode>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	22ff      	movs	r2, #255	; 0xff
 8003114:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2204      	movs	r2, #4
 800311a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e047      	b.n	80031b6 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003130:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003134:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003144:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6899      	ldr	r1, [r3, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	431a      	orrs	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d111      	bne.n	80031a0 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fb83 	bl	8003888 <HAL_RTC_WaitForSynchro>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	22ff      	movs	r2, #255	; 0xff
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2204      	movs	r2, #4
 8003194:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e00a      	b.n	80031b6 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	22ff      	movs	r2, #255	; 0xff
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80031b4:	2300      	movs	r3, #0
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd90      	pop	{r4, r7, pc}

080031be <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031f0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031f4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	0c1b      	lsrs	r3, r3, #16
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800321e:	b2da      	uxtb	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	0c1b      	lsrs	r3, r3, #16
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d11a      	bne.n	8003270 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fb94 	bl	800396c <RTC_Bcd2ToByte>
 8003244:	4603      	mov	r3, r0
 8003246:	461a      	mov	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	785b      	ldrb	r3, [r3, #1]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fb8b 	bl	800396c <RTC_Bcd2ToByte>
 8003256:	4603      	mov	r3, r0
 8003258:	461a      	mov	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	789b      	ldrb	r3, [r3, #2]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fb82 	bl	800396c <RTC_Bcd2ToByte>
 8003268:	4603      	mov	r3, r0
 800326a:	461a      	mov	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800327a:	b590      	push	{r4, r7, lr}
 800327c:	b087      	sub	sp, #28
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	7f1b      	ldrb	r3, [r3, #28]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_RTC_SetDate+0x1c>
 8003292:	2302      	movs	r3, #2
 8003294:	e094      	b.n	80033c0 <HAL_RTC_SetDate+0x146>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2202      	movs	r2, #2
 80032a0:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10e      	bne.n	80032c6 <HAL_RTC_SetDate+0x4c>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	785b      	ldrb	r3, [r3, #1]
 80032b8:	f023 0310 	bic.w	r3, r3, #16
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	330a      	adds	r3, #10
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d11c      	bne.n	8003306 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	78db      	ldrb	r3, [r3, #3]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fb2d 	bl	8003930 <RTC_ByteToBcd2>
 80032d6:	4603      	mov	r3, r0
 80032d8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	785b      	ldrb	r3, [r3, #1]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fb26 	bl	8003930 <RTC_ByteToBcd2>
 80032e4:	4603      	mov	r3, r0
 80032e6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80032e8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fb1e 	bl	8003930 <RTC_ByteToBcd2>
 80032f4:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80032f6:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	e00e      	b.n	8003324 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	78db      	ldrb	r3, [r3, #3]
 800330a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	785b      	ldrb	r3, [r3, #1]
 8003310:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003312:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003318:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	22ca      	movs	r2, #202	; 0xca
 800332a:	625a      	str	r2, [r3, #36]	; 0x24
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2253      	movs	r2, #83	; 0x53
 8003332:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 facf 	bl	80038d8 <RTC_EnterInitMode>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2204      	movs	r2, #4
 800334c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e033      	b.n	80033c0 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003362:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003366:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003376:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d111      	bne.n	80033aa <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fa7e 	bl	8003888 <HAL_RTC_WaitForSynchro>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	22ff      	movs	r2, #255	; 0xff
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2204      	movs	r2, #4
 800339e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e00a      	b.n	80033c0 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	22ff      	movs	r2, #255	; 0xff
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80033be:	2300      	movs	r3, #0
  }
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd90      	pop	{r4, r7, pc}

080033c8 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	0c1b      	lsrs	r3, r3, #16
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	0b5b      	lsrs	r3, r3, #13
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	b2da      	uxtb	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d11a      	bne.n	800345c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	78db      	ldrb	r3, [r3, #3]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fa9e 	bl	800396c <RTC_Bcd2ToByte>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fa95 	bl	800396c <RTC_Bcd2ToByte>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	789b      	ldrb	r3, [r3, #2]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fa8c 	bl	800396c <RTC_Bcd2ToByte>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800347c:	4b93      	ldr	r3, [pc, #588]	; (80036cc <HAL_RTC_SetAlarm_IT+0x264>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a93      	ldr	r2, [pc, #588]	; (80036d0 <HAL_RTC_SetAlarm_IT+0x268>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	0adb      	lsrs	r3, r3, #11
 8003488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800348c:	fb02 f303 	mul.w	r3, r2, r3
 8003490:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	7f1b      	ldrb	r3, [r3, #28]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_RTC_SetAlarm_IT+0x36>
 800349a:	2302      	movs	r3, #2
 800349c:	e111      	b.n	80036c2 <HAL_RTC_SetAlarm_IT+0x25a>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2202      	movs	r2, #2
 80034a8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d137      	bne.n	8003520 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2200      	movs	r2, #0
 80034c2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fa31 	bl	8003930 <RTC_ByteToBcd2>
 80034ce:	4603      	mov	r3, r0
 80034d0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	785b      	ldrb	r3, [r3, #1]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fa2a 	bl	8003930 <RTC_ByteToBcd2>
 80034dc:	4603      	mov	r3, r0
 80034de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80034e0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	789b      	ldrb	r3, [r3, #2]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fa22 	bl	8003930 <RTC_ByteToBcd2>
 80034ec:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80034ee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	78db      	ldrb	r3, [r3, #3]
 80034f6:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80034f8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fa14 	bl	8003930 <RTC_ByteToBcd2>
 8003508:	4603      	mov	r3, r0
 800350a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800350c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003514:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800351a:	4313      	orrs	r3, r2
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	e023      	b.n	8003568 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2200      	movs	r2, #0
 8003532:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	785b      	ldrb	r3, [r3, #1]
 800353e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003540:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003546:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	78db      	ldrb	r3, [r3, #3]
 800354c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800354e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003556:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003558:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800355e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003564:	4313      	orrs	r3, r2
 8003566:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	22ca      	movs	r2, #202	; 0xca
 800357a:	625a      	str	r2, [r3, #36]	; 0x24
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2253      	movs	r2, #83	; 0x53
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358c:	d141      	bne.n	8003612 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800359c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80035ae:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	1e5a      	subs	r2, r3, #1
 80035b4:	617a      	str	r2, [r7, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10b      	bne.n	80035d2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	22ff      	movs	r2, #255	; 0xff
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2203      	movs	r2, #3
 80035c6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e077      	b.n	80036c2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0e7      	beq.n	80035b0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035fe:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	e040      	b.n	8003694 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003620:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003632:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1e5a      	subs	r2, r3, #1
 8003638:	617a      	str	r2, [r7, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10b      	bne.n	8003656 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	22ff      	movs	r2, #255	; 0xff
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2203      	movs	r2, #3
 800364a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e035      	b.n	80036c2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0e7      	beq.n	8003634 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003682:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003692:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003694:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a0e      	ldr	r2, [pc, #56]	; (80036d4 <HAL_RTC_SetAlarm_IT+0x26c>)
 800369a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RTC_SetAlarm_IT+0x26c>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a0b      	ldr	r2, [pc, #44]	; (80036d4 <HAL_RTC_SetAlarm_IT+0x26c>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036aa:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	22ff      	movs	r2, #255	; 0xff
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd90      	pop	{r4, r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000070 	.word	0x20000070
 80036d0:	10624dd3 	.word	0x10624dd3
 80036d4:	40013c00 	.word	0x40013c00

080036d8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f4:	d10e      	bne.n	8003714 <HAL_RTC_GetAlarm+0x3c>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	e00d      	b.n	8003730 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800371a:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800372e:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	0c1b      	lsrs	r3, r3, #16
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	0a1b      	lsrs	r3, r3, #8
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	0e1b      	lsrs	r3, r3, #24
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800377e:	b2da      	uxtb	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	615a      	str	r2, [r3, #20]

  if(Format == RTC_FORMAT_BIN)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d125      	bne.n	80037ec <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f8e1 	bl	800396c <RTC_Bcd2ToByte>
 80037aa:	4603      	mov	r3, r0
 80037ac:	461a      	mov	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	785b      	ldrb	r3, [r3, #1]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f8d8 	bl	800396c <RTC_Bcd2ToByte>
 80037bc:	4603      	mov	r3, r0
 80037be:	461a      	mov	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	789b      	ldrb	r3, [r3, #2]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f8cf 	bl	800396c <RTC_Bcd2ToByte>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 f8c5 	bl	800396c <RTC_Bcd2ToByte>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d013      	beq.n	8003836 <HAL_RTC_AlarmIRQHandler+0x3e>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00c      	beq.n	8003836 <HAL_RTC_AlarmIRQHandler+0x3e>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003834:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d013      	beq.n	800386c <HAL_RTC_AlarmIRQHandler+0x74>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_RTC_AlarmIRQHandler+0x74>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f462 7220 	orn	r2, r2, #640	; 0x280
 800386a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_RTC_AlarmIRQHandler+0x8c>)
 800386e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003872:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	775a      	strb	r2, [r3, #29]
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40013c00 	.word	0x40013c00

08003888 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038a2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038a4:	f7fe f9bc 	bl	8001c20 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80038aa:	e009      	b.n	80038c0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80038ac:	f7fe f9b8 	bl	8001c20 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ba:	d901      	bls.n	80038c0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e007      	b.n	80038d0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0ee      	beq.n	80038ac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d119      	bne.n	8003926 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038fc:	f7fe f990 	bl	8001c20 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003902:	e009      	b.n	8003918 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003904:	f7fe f98c 	bl	8001c20 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003912:	d901      	bls.n	8003918 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e007      	b.n	8003928 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ee      	beq.n	8003904 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800393e:	e005      	b.n	800394c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3301      	adds	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	3b0a      	subs	r3, #10
 800394a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	2b09      	cmp	r3, #9
 8003950:	d8f6      	bhi.n	8003940 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	b2da      	uxtb	r2, r3
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	4313      	orrs	r3, r2
 800395e:	b2db      	uxtb	r3, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	b2da      	uxtb	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	4413      	add	r3, r2
 800399a:	b2db      	uxtb	r3, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_TimeStampEventCallback could be implemented in the user file
  */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper1EventCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper2EventCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3350      	adds	r3, #80	; 0x50
 8003a0e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4413      	add	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	601a      	str	r2, [r3, #0]
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3350      	adds	r3, #80	; 0x50
 8003a40:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e03f      	b.n	8003b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fd7c 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fcbd 	bl	8004434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b08a      	sub	sp, #40	; 0x28
 8003b0e:	af02      	add	r7, sp, #8
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d17c      	bne.n	8003c24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_UART_Transmit+0x2c>
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e075      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_UART_Transmit+0x3e>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e06e      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2221      	movs	r2, #33	; 0x21
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5e:	f7fe f85f 	bl	8001c20 <HAL_GetTick>
 8003b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	88fa      	ldrh	r2, [r7, #6]
 8003b6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b78:	d108      	bne.n	8003b8c <HAL_UART_Transmit+0x82>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	e003      	b.n	8003b94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b9c:	e02a      	b.n	8003bf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2180      	movs	r1, #128	; 0x80
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fab9 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e036      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	e007      	b.n	8003be6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	781a      	ldrb	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	3301      	adds	r3, #1
 8003be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1cf      	bne.n	8003b9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2200      	movs	r2, #0
 8003c06:	2140      	movs	r1, #64	; 0x40
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 fa89 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e006      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b08a      	sub	sp, #40	; 0x28
 8003c32:	af02      	add	r7, sp, #8
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	f040 808c 	bne.w	8003d68 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_UART_Receive+0x2e>
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e084      	b.n	8003d6a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Receive+0x40>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e07d      	b.n	8003d6a <HAL_UART_Receive+0x13c>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2222      	movs	r2, #34	; 0x22
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8a:	f7fd ffc9 	bl	8001c20 <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca4:	d108      	bne.n	8003cb8 <HAL_UART_Receive+0x8a>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d104      	bne.n	8003cb8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	e003      	b.n	8003cc0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cc8:	e043      	b.n	8003d52 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2120      	movs	r1, #32
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fa23 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e042      	b.n	8003d6a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10c      	bne.n	8003d04 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	3302      	adds	r3, #2
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	e01f      	b.n	8003d44 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0c:	d007      	beq.n	8003d1e <HAL_UART_Receive+0xf0>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <HAL_UART_Receive+0xfe>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	e008      	b.n	8003d3e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3301      	adds	r3, #1
 8003d42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1b6      	bne.n	8003cca <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3720      	adds	r7, #32
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x52>
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 faa1 	bl	8004306 <UART_Receive_IT>
      return;
 8003dc4:	e17c      	b.n	80040c0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80b1 	beq.w	8003f30 <HAL_UART_IRQHandler+0x1bc>
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d105      	bne.n	8003de4 <HAL_UART_IRQHandler+0x70>
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80a6 	beq.w	8003f30 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_UART_IRQHandler+0x90>
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	f043 0201 	orr.w	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_UART_IRQHandler+0xb0>
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f043 0202 	orr.w	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_UART_IRQHandler+0xd0>
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	f043 0204 	orr.w	r2, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00f      	beq.n	8003e6e <HAL_UART_IRQHandler+0xfa>
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d104      	bne.n	8003e62 <HAL_UART_IRQHandler+0xee>
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f043 0208 	orr.w	r2, r3, #8
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 811f 	beq.w	80040b6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <HAL_UART_IRQHandler+0x11e>
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fa3a 	bl	8004306 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <HAL_UART_IRQHandler+0x146>
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d031      	beq.n	8003f1e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f97a 	bl	80041b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d123      	bne.n	8003f16 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003edc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d013      	beq.n	8003f0e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	4a77      	ldr	r2, [pc, #476]	; (80040c8 <HAL_UART_IRQHandler+0x354>)
 8003eec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe f877 	bl	8001fe6 <HAL_DMA_Abort_IT>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	e00e      	b.n	8003f2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8f0 	bl	80040f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	e00a      	b.n	8003f2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8ec 	bl	80040f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1c:	e006      	b.n	8003f2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f8e8 	bl	80040f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f2a:	e0c4      	b.n	80040b6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	bf00      	nop
    return;
 8003f2e:	e0c2      	b.n	80040b6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	f040 80a2 	bne.w	800407e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 809c 	beq.w	800407e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8096 	beq.w	800407e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d14f      	bne.n	8004016 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f80:	8a3b      	ldrh	r3, [r7, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8099 	beq.w	80040ba <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f8c:	8a3a      	ldrh	r2, [r7, #16]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	f080 8093 	bcs.w	80040ba <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8a3a      	ldrh	r2, [r7, #16]
 8003f98:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa4:	d02b      	beq.n	8003ffe <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0201 	bic.w	r2, r2, #1
 8003fc4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0210 	bic.w	r2, r2, #16
 8003ff2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd ff84 	bl	8001f06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004006:	b29b      	uxth	r3, r3
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	b29b      	uxth	r3, r3
 800400c:	4619      	mov	r1, r3
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f87a 	bl	8004108 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004014:	e051      	b.n	80040ba <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800401e:	b29b      	uxth	r3, r3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d047      	beq.n	80040be <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800402e:	8a7b      	ldrh	r3, [r7, #18]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d044      	beq.n	80040be <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004042:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0201 	bic.w	r2, r2, #1
 8004052:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0210 	bic.w	r2, r2, #16
 8004070:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004072:	8a7b      	ldrh	r3, [r7, #18]
 8004074:	4619      	mov	r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f846 	bl	8004108 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800407c:	e01f      	b.n	80040be <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_UART_IRQHandler+0x326>
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f8cf 	bl	8004236 <UART_Transmit_IT>
    return;
 8004098:	e012      	b.n	80040c0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <HAL_UART_IRQHandler+0x34c>
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f911 	bl	80042d6 <UART_EndTransmit_IT>
    return;
 80040b4:	e004      	b.n	80040c0 <HAL_UART_IRQHandler+0x34c>
    return;
 80040b6:	bf00      	nop
 80040b8:	e002      	b.n	80040c0 <HAL_UART_IRQHandler+0x34c>
      return;
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <HAL_UART_IRQHandler+0x34c>
      return;
 80040be:	bf00      	nop
  }
}
 80040c0:	3728      	adds	r7, #40	; 0x28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	0800420f 	.word	0x0800420f

080040cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004130:	e02c      	b.n	800418c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004138:	d028      	beq.n	800418c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <UART_WaitOnFlagUntilTimeout+0x30>
 8004140:	f7fd fd6e 	bl	8001c20 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	429a      	cmp	r2, r3
 800414e:	d21d      	bcs.n	800418c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800415e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e00f      	b.n	80041ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4013      	ands	r3, r2
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d0c3      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d107      	bne.n	80041f4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0210 	bic.w	r2, r2, #16
 80041f2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff ff63 	bl	80040f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b21      	cmp	r3, #33	; 0x21
 8004248:	d13e      	bne.n	80042c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004252:	d114      	bne.n	800427e <UART_Transmit_IT+0x48>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d110      	bne.n	800427e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004270:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	1c9a      	adds	r2, r3, #2
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	621a      	str	r2, [r3, #32]
 800427c:	e008      	b.n	8004290 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	1c59      	adds	r1, r3, #1
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6211      	str	r1, [r2, #32]
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29b      	uxth	r3, r3
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4619      	mov	r1, r3
 800429e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10f      	bne.n	80042c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	e000      	b.n	80042ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
  }
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fee8 	bl	80040cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b22      	cmp	r3, #34	; 0x22
 8004318:	f040 8087 	bne.w	800442a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004324:	d117      	bne.n	8004356 <UART_Receive_IT+0x50>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d113      	bne.n	8004356 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	b29b      	uxth	r3, r3
 8004340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004344:	b29a      	uxth	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	1c9a      	adds	r2, r3, #2
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	629a      	str	r2, [r3, #40]	; 0x28
 8004354:	e026      	b.n	80043a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004368:	d007      	beq.n	800437a <UART_Receive_IT+0x74>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <UART_Receive_IT+0x82>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e008      	b.n	800439a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004394:	b2da      	uxtb	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4619      	mov	r1, r3
 80043b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d136      	bne.n	8004426 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0220 	bic.w	r2, r2, #32
 80043c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0201 	bic.w	r2, r2, #1
 80043e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d10e      	bne.n	8004416 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0210 	bic.w	r2, r2, #16
 8004406:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fe7a 	bl	8004108 <HAL_UARTEx_RxEventCallback>
 8004414:	e002      	b.n	800441c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff fe62 	bl	80040e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e002      	b.n	800442c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e000      	b.n	800442c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800442a:	2302      	movs	r3, #2
  }
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004438:	b09f      	sub	sp, #124	; 0x7c
 800443a:	af00      	add	r7, sp, #0
 800443c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800443e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444a:	68d9      	ldr	r1, [r3, #12]
 800444c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	ea40 0301 	orr.w	r3, r0, r1
 8004454:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	431a      	orrs	r2, r3
 8004460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	431a      	orrs	r2, r3
 8004466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	4313      	orrs	r3, r2
 800446c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800446e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004478:	f021 010c 	bic.w	r1, r1, #12
 800447c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004482:	430b      	orrs	r3, r1
 8004484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004492:	6999      	ldr	r1, [r3, #24]
 8004494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	ea40 0301 	orr.w	r3, r0, r1
 800449c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800449e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4bc5      	ldr	r3, [pc, #788]	; (80047b8 <UART_SetConfig+0x384>)
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d004      	beq.n	80044b2 <UART_SetConfig+0x7e>
 80044a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4bc3      	ldr	r3, [pc, #780]	; (80047bc <UART_SetConfig+0x388>)
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d103      	bne.n	80044ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044b2:	f7fe fc0f 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 80044b6:	6778      	str	r0, [r7, #116]	; 0x74
 80044b8:	e002      	b.n	80044c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044ba:	f7fe fbf7 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 80044be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c8:	f040 80b6 	bne.w	8004638 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ce:	461c      	mov	r4, r3
 80044d0:	f04f 0500 	mov.w	r5, #0
 80044d4:	4622      	mov	r2, r4
 80044d6:	462b      	mov	r3, r5
 80044d8:	1891      	adds	r1, r2, r2
 80044da:	6439      	str	r1, [r7, #64]	; 0x40
 80044dc:	415b      	adcs	r3, r3
 80044de:	647b      	str	r3, [r7, #68]	; 0x44
 80044e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044e4:	1912      	adds	r2, r2, r4
 80044e6:	eb45 0303 	adc.w	r3, r5, r3
 80044ea:	f04f 0000 	mov.w	r0, #0
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	00d9      	lsls	r1, r3, #3
 80044f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044f8:	00d0      	lsls	r0, r2, #3
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	1911      	adds	r1, r2, r4
 8004500:	6639      	str	r1, [r7, #96]	; 0x60
 8004502:	416b      	adcs	r3, r5
 8004504:	667b      	str	r3, [r7, #100]	; 0x64
 8004506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	461a      	mov	r2, r3
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	1891      	adds	r1, r2, r2
 8004512:	63b9      	str	r1, [r7, #56]	; 0x38
 8004514:	415b      	adcs	r3, r3
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800451c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004520:	f7fc f88a 	bl	8000638 <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4ba5      	ldr	r3, [pc, #660]	; (80047c0 <UART_SetConfig+0x38c>)
 800452a:	fba3 2302 	umull	r2, r3, r3, r2
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	011e      	lsls	r6, r3, #4
 8004532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004534:	461c      	mov	r4, r3
 8004536:	f04f 0500 	mov.w	r5, #0
 800453a:	4622      	mov	r2, r4
 800453c:	462b      	mov	r3, r5
 800453e:	1891      	adds	r1, r2, r2
 8004540:	6339      	str	r1, [r7, #48]	; 0x30
 8004542:	415b      	adcs	r3, r3
 8004544:	637b      	str	r3, [r7, #52]	; 0x34
 8004546:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800454a:	1912      	adds	r2, r2, r4
 800454c:	eb45 0303 	adc.w	r3, r5, r3
 8004550:	f04f 0000 	mov.w	r0, #0
 8004554:	f04f 0100 	mov.w	r1, #0
 8004558:	00d9      	lsls	r1, r3, #3
 800455a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800455e:	00d0      	lsls	r0, r2, #3
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	1911      	adds	r1, r2, r4
 8004566:	65b9      	str	r1, [r7, #88]	; 0x58
 8004568:	416b      	adcs	r3, r5
 800456a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800456c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	461a      	mov	r2, r3
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	1891      	adds	r1, r2, r2
 8004578:	62b9      	str	r1, [r7, #40]	; 0x28
 800457a:	415b      	adcs	r3, r3
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004582:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004586:	f7fc f857 	bl	8000638 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4b8c      	ldr	r3, [pc, #560]	; (80047c0 <UART_SetConfig+0x38c>)
 8004590:	fba3 1302 	umull	r1, r3, r3, r2
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	2164      	movs	r1, #100	; 0x64
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	3332      	adds	r3, #50	; 0x32
 80045a2:	4a87      	ldr	r2, [pc, #540]	; (80047c0 <UART_SetConfig+0x38c>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045b0:	441e      	add	r6, r3
 80045b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b4:	4618      	mov	r0, r3
 80045b6:	f04f 0100 	mov.w	r1, #0
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	1894      	adds	r4, r2, r2
 80045c0:	623c      	str	r4, [r7, #32]
 80045c2:	415b      	adcs	r3, r3
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
 80045c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ca:	1812      	adds	r2, r2, r0
 80045cc:	eb41 0303 	adc.w	r3, r1, r3
 80045d0:	f04f 0400 	mov.w	r4, #0
 80045d4:	f04f 0500 	mov.w	r5, #0
 80045d8:	00dd      	lsls	r5, r3, #3
 80045da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045de:	00d4      	lsls	r4, r2, #3
 80045e0:	4622      	mov	r2, r4
 80045e2:	462b      	mov	r3, r5
 80045e4:	1814      	adds	r4, r2, r0
 80045e6:	653c      	str	r4, [r7, #80]	; 0x50
 80045e8:	414b      	adcs	r3, r1
 80045ea:	657b      	str	r3, [r7, #84]	; 0x54
 80045ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	461a      	mov	r2, r3
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	1891      	adds	r1, r2, r2
 80045f8:	61b9      	str	r1, [r7, #24]
 80045fa:	415b      	adcs	r3, r3
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004602:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004606:	f7fc f817 	bl	8000638 <__aeabi_uldivmod>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4b6c      	ldr	r3, [pc, #432]	; (80047c0 <UART_SetConfig+0x38c>)
 8004610:	fba3 1302 	umull	r1, r3, r3, r2
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	2164      	movs	r1, #100	; 0x64
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	3332      	adds	r3, #50	; 0x32
 8004622:	4a67      	ldr	r2, [pc, #412]	; (80047c0 <UART_SetConfig+0x38c>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	f003 0207 	and.w	r2, r3, #7
 800462e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4432      	add	r2, r6
 8004634:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004636:	e0b9      	b.n	80047ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800463a:	461c      	mov	r4, r3
 800463c:	f04f 0500 	mov.w	r5, #0
 8004640:	4622      	mov	r2, r4
 8004642:	462b      	mov	r3, r5
 8004644:	1891      	adds	r1, r2, r2
 8004646:	6139      	str	r1, [r7, #16]
 8004648:	415b      	adcs	r3, r3
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004650:	1912      	adds	r2, r2, r4
 8004652:	eb45 0303 	adc.w	r3, r5, r3
 8004656:	f04f 0000 	mov.w	r0, #0
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	00d9      	lsls	r1, r3, #3
 8004660:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004664:	00d0      	lsls	r0, r2, #3
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	eb12 0804 	adds.w	r8, r2, r4
 800466e:	eb43 0905 	adc.w	r9, r3, r5
 8004672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	4618      	mov	r0, r3
 8004678:	f04f 0100 	mov.w	r1, #0
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	008b      	lsls	r3, r1, #2
 8004686:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800468a:	0082      	lsls	r2, r0, #2
 800468c:	4640      	mov	r0, r8
 800468e:	4649      	mov	r1, r9
 8004690:	f7fb ffd2 	bl	8000638 <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4b49      	ldr	r3, [pc, #292]	; (80047c0 <UART_SetConfig+0x38c>)
 800469a:	fba3 2302 	umull	r2, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	011e      	lsls	r6, r3, #4
 80046a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a4:	4618      	mov	r0, r3
 80046a6:	f04f 0100 	mov.w	r1, #0
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	1894      	adds	r4, r2, r2
 80046b0:	60bc      	str	r4, [r7, #8]
 80046b2:	415b      	adcs	r3, r3
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ba:	1812      	adds	r2, r2, r0
 80046bc:	eb41 0303 	adc.w	r3, r1, r3
 80046c0:	f04f 0400 	mov.w	r4, #0
 80046c4:	f04f 0500 	mov.w	r5, #0
 80046c8:	00dd      	lsls	r5, r3, #3
 80046ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046ce:	00d4      	lsls	r4, r2, #3
 80046d0:	4622      	mov	r2, r4
 80046d2:	462b      	mov	r3, r5
 80046d4:	1814      	adds	r4, r2, r0
 80046d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80046d8:	414b      	adcs	r3, r1
 80046da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f04f 0100 	mov.w	r1, #0
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	008b      	lsls	r3, r1, #2
 80046f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046f4:	0082      	lsls	r2, r0, #2
 80046f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80046fa:	f7fb ff9d 	bl	8000638 <__aeabi_uldivmod>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4b2f      	ldr	r3, [pc, #188]	; (80047c0 <UART_SetConfig+0x38c>)
 8004704:	fba3 1302 	umull	r1, r3, r3, r2
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	2164      	movs	r1, #100	; 0x64
 800470c:	fb01 f303 	mul.w	r3, r1, r3
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	3332      	adds	r3, #50	; 0x32
 8004716:	4a2a      	ldr	r2, [pc, #168]	; (80047c0 <UART_SetConfig+0x38c>)
 8004718:	fba2 2303 	umull	r2, r3, r2, r3
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004722:	441e      	add	r6, r3
 8004724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004726:	4618      	mov	r0, r3
 8004728:	f04f 0100 	mov.w	r1, #0
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	1894      	adds	r4, r2, r2
 8004732:	603c      	str	r4, [r7, #0]
 8004734:	415b      	adcs	r3, r3
 8004736:	607b      	str	r3, [r7, #4]
 8004738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800473c:	1812      	adds	r2, r2, r0
 800473e:	eb41 0303 	adc.w	r3, r1, r3
 8004742:	f04f 0400 	mov.w	r4, #0
 8004746:	f04f 0500 	mov.w	r5, #0
 800474a:	00dd      	lsls	r5, r3, #3
 800474c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004750:	00d4      	lsls	r4, r2, #3
 8004752:	4622      	mov	r2, r4
 8004754:	462b      	mov	r3, r5
 8004756:	eb12 0a00 	adds.w	sl, r2, r0
 800475a:	eb43 0b01 	adc.w	fp, r3, r1
 800475e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4618      	mov	r0, r3
 8004764:	f04f 0100 	mov.w	r1, #0
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	008b      	lsls	r3, r1, #2
 8004772:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004776:	0082      	lsls	r2, r0, #2
 8004778:	4650      	mov	r0, sl
 800477a:	4659      	mov	r1, fp
 800477c:	f7fb ff5c 	bl	8000638 <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <UART_SetConfig+0x38c>)
 8004786:	fba3 1302 	umull	r1, r3, r3, r2
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2164      	movs	r1, #100	; 0x64
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	3332      	adds	r3, #50	; 0x32
 8004798:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <UART_SetConfig+0x38c>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	f003 020f 	and.w	r2, r3, #15
 80047a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4432      	add	r2, r6
 80047aa:	609a      	str	r2, [r3, #8]
}
 80047ac:	bf00      	nop
 80047ae:	377c      	adds	r7, #124	; 0x7c
 80047b0:	46bd      	mov	sp, r7
 80047b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b6:	bf00      	nop
 80047b8:	40011000 	.word	0x40011000
 80047bc:	40011400 	.word	0x40011400
 80047c0:	51eb851f 	.word	0x51eb851f

080047c4 <atoi>:
 80047c4:	220a      	movs	r2, #10
 80047c6:	2100      	movs	r1, #0
 80047c8:	f000 b8d6 	b.w	8004978 <strtol>

080047cc <__errno>:
 80047cc:	4b01      	ldr	r3, [pc, #4]	; (80047d4 <__errno+0x8>)
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	2000007c 	.word	0x2000007c

080047d8 <__libc_init_array>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	4d0d      	ldr	r5, [pc, #52]	; (8004810 <__libc_init_array+0x38>)
 80047dc:	4c0d      	ldr	r4, [pc, #52]	; (8004814 <__libc_init_array+0x3c>)
 80047de:	1b64      	subs	r4, r4, r5
 80047e0:	10a4      	asrs	r4, r4, #2
 80047e2:	2600      	movs	r6, #0
 80047e4:	42a6      	cmp	r6, r4
 80047e6:	d109      	bne.n	80047fc <__libc_init_array+0x24>
 80047e8:	4d0b      	ldr	r5, [pc, #44]	; (8004818 <__libc_init_array+0x40>)
 80047ea:	4c0c      	ldr	r4, [pc, #48]	; (800481c <__libc_init_array+0x44>)
 80047ec:	f000 fcdc 	bl	80051a8 <_init>
 80047f0:	1b64      	subs	r4, r4, r5
 80047f2:	10a4      	asrs	r4, r4, #2
 80047f4:	2600      	movs	r6, #0
 80047f6:	42a6      	cmp	r6, r4
 80047f8:	d105      	bne.n	8004806 <__libc_init_array+0x2e>
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004800:	4798      	blx	r3
 8004802:	3601      	adds	r6, #1
 8004804:	e7ee      	b.n	80047e4 <__libc_init_array+0xc>
 8004806:	f855 3b04 	ldr.w	r3, [r5], #4
 800480a:	4798      	blx	r3
 800480c:	3601      	adds	r6, #1
 800480e:	e7f2      	b.n	80047f6 <__libc_init_array+0x1e>
 8004810:	08005394 	.word	0x08005394
 8004814:	08005394 	.word	0x08005394
 8004818:	08005394 	.word	0x08005394
 800481c:	08005398 	.word	0x08005398

08004820 <memset>:
 8004820:	4402      	add	r2, r0
 8004822:	4603      	mov	r3, r0
 8004824:	4293      	cmp	r3, r2
 8004826:	d100      	bne.n	800482a <memset+0xa>
 8004828:	4770      	bx	lr
 800482a:	f803 1b01 	strb.w	r1, [r3], #1
 800482e:	e7f9      	b.n	8004824 <memset+0x4>

08004830 <siprintf>:
 8004830:	b40e      	push	{r1, r2, r3}
 8004832:	b500      	push	{lr}
 8004834:	b09c      	sub	sp, #112	; 0x70
 8004836:	ab1d      	add	r3, sp, #116	; 0x74
 8004838:	9002      	str	r0, [sp, #8]
 800483a:	9006      	str	r0, [sp, #24]
 800483c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004840:	4809      	ldr	r0, [pc, #36]	; (8004868 <siprintf+0x38>)
 8004842:	9107      	str	r1, [sp, #28]
 8004844:	9104      	str	r1, [sp, #16]
 8004846:	4909      	ldr	r1, [pc, #36]	; (800486c <siprintf+0x3c>)
 8004848:	f853 2b04 	ldr.w	r2, [r3], #4
 800484c:	9105      	str	r1, [sp, #20]
 800484e:	6800      	ldr	r0, [r0, #0]
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	a902      	add	r1, sp, #8
 8004854:	f000 f8f6 	bl	8004a44 <_svfiprintf_r>
 8004858:	9b02      	ldr	r3, [sp, #8]
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	b01c      	add	sp, #112	; 0x70
 8004860:	f85d eb04 	ldr.w	lr, [sp], #4
 8004864:	b003      	add	sp, #12
 8004866:	4770      	bx	lr
 8004868:	2000007c 	.word	0x2000007c
 800486c:	ffff0208 	.word	0xffff0208

08004870 <_strtol_l.isra.0>:
 8004870:	2b01      	cmp	r3, #1
 8004872:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004876:	d001      	beq.n	800487c <_strtol_l.isra.0+0xc>
 8004878:	2b24      	cmp	r3, #36	; 0x24
 800487a:	d906      	bls.n	800488a <_strtol_l.isra.0+0x1a>
 800487c:	f7ff ffa6 	bl	80047cc <__errno>
 8004880:	2316      	movs	r3, #22
 8004882:	6003      	str	r3, [r0, #0]
 8004884:	2000      	movs	r0, #0
 8004886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488a:	4f3a      	ldr	r7, [pc, #232]	; (8004974 <_strtol_l.isra.0+0x104>)
 800488c:	468e      	mov	lr, r1
 800488e:	4676      	mov	r6, lr
 8004890:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004894:	5de5      	ldrb	r5, [r4, r7]
 8004896:	f015 0508 	ands.w	r5, r5, #8
 800489a:	d1f8      	bne.n	800488e <_strtol_l.isra.0+0x1e>
 800489c:	2c2d      	cmp	r4, #45	; 0x2d
 800489e:	d134      	bne.n	800490a <_strtol_l.isra.0+0x9a>
 80048a0:	f89e 4000 	ldrb.w	r4, [lr]
 80048a4:	f04f 0801 	mov.w	r8, #1
 80048a8:	f106 0e02 	add.w	lr, r6, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d05c      	beq.n	800496a <_strtol_l.isra.0+0xfa>
 80048b0:	2b10      	cmp	r3, #16
 80048b2:	d10c      	bne.n	80048ce <_strtol_l.isra.0+0x5e>
 80048b4:	2c30      	cmp	r4, #48	; 0x30
 80048b6:	d10a      	bne.n	80048ce <_strtol_l.isra.0+0x5e>
 80048b8:	f89e 4000 	ldrb.w	r4, [lr]
 80048bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80048c0:	2c58      	cmp	r4, #88	; 0x58
 80048c2:	d14d      	bne.n	8004960 <_strtol_l.isra.0+0xf0>
 80048c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80048c8:	2310      	movs	r3, #16
 80048ca:	f10e 0e02 	add.w	lr, lr, #2
 80048ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80048d2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80048d6:	2600      	movs	r6, #0
 80048d8:	fbbc f9f3 	udiv	r9, ip, r3
 80048dc:	4635      	mov	r5, r6
 80048de:	fb03 ca19 	mls	sl, r3, r9, ip
 80048e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80048e6:	2f09      	cmp	r7, #9
 80048e8:	d818      	bhi.n	800491c <_strtol_l.isra.0+0xac>
 80048ea:	463c      	mov	r4, r7
 80048ec:	42a3      	cmp	r3, r4
 80048ee:	dd24      	ble.n	800493a <_strtol_l.isra.0+0xca>
 80048f0:	2e00      	cmp	r6, #0
 80048f2:	db1f      	blt.n	8004934 <_strtol_l.isra.0+0xc4>
 80048f4:	45a9      	cmp	r9, r5
 80048f6:	d31d      	bcc.n	8004934 <_strtol_l.isra.0+0xc4>
 80048f8:	d101      	bne.n	80048fe <_strtol_l.isra.0+0x8e>
 80048fa:	45a2      	cmp	sl, r4
 80048fc:	db1a      	blt.n	8004934 <_strtol_l.isra.0+0xc4>
 80048fe:	fb05 4503 	mla	r5, r5, r3, r4
 8004902:	2601      	movs	r6, #1
 8004904:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004908:	e7eb      	b.n	80048e2 <_strtol_l.isra.0+0x72>
 800490a:	2c2b      	cmp	r4, #43	; 0x2b
 800490c:	bf08      	it	eq
 800490e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004912:	46a8      	mov	r8, r5
 8004914:	bf08      	it	eq
 8004916:	f106 0e02 	addeq.w	lr, r6, #2
 800491a:	e7c7      	b.n	80048ac <_strtol_l.isra.0+0x3c>
 800491c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004920:	2f19      	cmp	r7, #25
 8004922:	d801      	bhi.n	8004928 <_strtol_l.isra.0+0xb8>
 8004924:	3c37      	subs	r4, #55	; 0x37
 8004926:	e7e1      	b.n	80048ec <_strtol_l.isra.0+0x7c>
 8004928:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800492c:	2f19      	cmp	r7, #25
 800492e:	d804      	bhi.n	800493a <_strtol_l.isra.0+0xca>
 8004930:	3c57      	subs	r4, #87	; 0x57
 8004932:	e7db      	b.n	80048ec <_strtol_l.isra.0+0x7c>
 8004934:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004938:	e7e4      	b.n	8004904 <_strtol_l.isra.0+0x94>
 800493a:	2e00      	cmp	r6, #0
 800493c:	da05      	bge.n	800494a <_strtol_l.isra.0+0xda>
 800493e:	2322      	movs	r3, #34	; 0x22
 8004940:	6003      	str	r3, [r0, #0]
 8004942:	4665      	mov	r5, ip
 8004944:	b942      	cbnz	r2, 8004958 <_strtol_l.isra.0+0xe8>
 8004946:	4628      	mov	r0, r5
 8004948:	e79d      	b.n	8004886 <_strtol_l.isra.0+0x16>
 800494a:	f1b8 0f00 	cmp.w	r8, #0
 800494e:	d000      	beq.n	8004952 <_strtol_l.isra.0+0xe2>
 8004950:	426d      	negs	r5, r5
 8004952:	2a00      	cmp	r2, #0
 8004954:	d0f7      	beq.n	8004946 <_strtol_l.isra.0+0xd6>
 8004956:	b10e      	cbz	r6, 800495c <_strtol_l.isra.0+0xec>
 8004958:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800495c:	6011      	str	r1, [r2, #0]
 800495e:	e7f2      	b.n	8004946 <_strtol_l.isra.0+0xd6>
 8004960:	2430      	movs	r4, #48	; 0x30
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1b3      	bne.n	80048ce <_strtol_l.isra.0+0x5e>
 8004966:	2308      	movs	r3, #8
 8004968:	e7b1      	b.n	80048ce <_strtol_l.isra.0+0x5e>
 800496a:	2c30      	cmp	r4, #48	; 0x30
 800496c:	d0a4      	beq.n	80048b8 <_strtol_l.isra.0+0x48>
 800496e:	230a      	movs	r3, #10
 8004970:	e7ad      	b.n	80048ce <_strtol_l.isra.0+0x5e>
 8004972:	bf00      	nop
 8004974:	08005259 	.word	0x08005259

08004978 <strtol>:
 8004978:	4613      	mov	r3, r2
 800497a:	460a      	mov	r2, r1
 800497c:	4601      	mov	r1, r0
 800497e:	4802      	ldr	r0, [pc, #8]	; (8004988 <strtol+0x10>)
 8004980:	6800      	ldr	r0, [r0, #0]
 8004982:	f7ff bf75 	b.w	8004870 <_strtol_l.isra.0>
 8004986:	bf00      	nop
 8004988:	2000007c 	.word	0x2000007c

0800498c <__ssputs_r>:
 800498c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004990:	688e      	ldr	r6, [r1, #8]
 8004992:	429e      	cmp	r6, r3
 8004994:	4682      	mov	sl, r0
 8004996:	460c      	mov	r4, r1
 8004998:	4690      	mov	r8, r2
 800499a:	461f      	mov	r7, r3
 800499c:	d838      	bhi.n	8004a10 <__ssputs_r+0x84>
 800499e:	898a      	ldrh	r2, [r1, #12]
 80049a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049a4:	d032      	beq.n	8004a0c <__ssputs_r+0x80>
 80049a6:	6825      	ldr	r5, [r4, #0]
 80049a8:	6909      	ldr	r1, [r1, #16]
 80049aa:	eba5 0901 	sub.w	r9, r5, r1
 80049ae:	6965      	ldr	r5, [r4, #20]
 80049b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049b8:	3301      	adds	r3, #1
 80049ba:	444b      	add	r3, r9
 80049bc:	106d      	asrs	r5, r5, #1
 80049be:	429d      	cmp	r5, r3
 80049c0:	bf38      	it	cc
 80049c2:	461d      	movcc	r5, r3
 80049c4:	0553      	lsls	r3, r2, #21
 80049c6:	d531      	bpl.n	8004a2c <__ssputs_r+0xa0>
 80049c8:	4629      	mov	r1, r5
 80049ca:	f000 fb47 	bl	800505c <_malloc_r>
 80049ce:	4606      	mov	r6, r0
 80049d0:	b950      	cbnz	r0, 80049e8 <__ssputs_r+0x5c>
 80049d2:	230c      	movs	r3, #12
 80049d4:	f8ca 3000 	str.w	r3, [sl]
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e8:	6921      	ldr	r1, [r4, #16]
 80049ea:	464a      	mov	r2, r9
 80049ec:	f000 fabe 	bl	8004f6c <memcpy>
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fa:	81a3      	strh	r3, [r4, #12]
 80049fc:	6126      	str	r6, [r4, #16]
 80049fe:	6165      	str	r5, [r4, #20]
 8004a00:	444e      	add	r6, r9
 8004a02:	eba5 0509 	sub.w	r5, r5, r9
 8004a06:	6026      	str	r6, [r4, #0]
 8004a08:	60a5      	str	r5, [r4, #8]
 8004a0a:	463e      	mov	r6, r7
 8004a0c:	42be      	cmp	r6, r7
 8004a0e:	d900      	bls.n	8004a12 <__ssputs_r+0x86>
 8004a10:	463e      	mov	r6, r7
 8004a12:	4632      	mov	r2, r6
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	4641      	mov	r1, r8
 8004a18:	f000 fab6 	bl	8004f88 <memmove>
 8004a1c:	68a3      	ldr	r3, [r4, #8]
 8004a1e:	6822      	ldr	r2, [r4, #0]
 8004a20:	1b9b      	subs	r3, r3, r6
 8004a22:	4432      	add	r2, r6
 8004a24:	60a3      	str	r3, [r4, #8]
 8004a26:	6022      	str	r2, [r4, #0]
 8004a28:	2000      	movs	r0, #0
 8004a2a:	e7db      	b.n	80049e4 <__ssputs_r+0x58>
 8004a2c:	462a      	mov	r2, r5
 8004a2e:	f000 fb6f 	bl	8005110 <_realloc_r>
 8004a32:	4606      	mov	r6, r0
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d1e1      	bne.n	80049fc <__ssputs_r+0x70>
 8004a38:	6921      	ldr	r1, [r4, #16]
 8004a3a:	4650      	mov	r0, sl
 8004a3c:	f000 fabe 	bl	8004fbc <_free_r>
 8004a40:	e7c7      	b.n	80049d2 <__ssputs_r+0x46>
	...

08004a44 <_svfiprintf_r>:
 8004a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a48:	4698      	mov	r8, r3
 8004a4a:	898b      	ldrh	r3, [r1, #12]
 8004a4c:	061b      	lsls	r3, r3, #24
 8004a4e:	b09d      	sub	sp, #116	; 0x74
 8004a50:	4607      	mov	r7, r0
 8004a52:	460d      	mov	r5, r1
 8004a54:	4614      	mov	r4, r2
 8004a56:	d50e      	bpl.n	8004a76 <_svfiprintf_r+0x32>
 8004a58:	690b      	ldr	r3, [r1, #16]
 8004a5a:	b963      	cbnz	r3, 8004a76 <_svfiprintf_r+0x32>
 8004a5c:	2140      	movs	r1, #64	; 0x40
 8004a5e:	f000 fafd 	bl	800505c <_malloc_r>
 8004a62:	6028      	str	r0, [r5, #0]
 8004a64:	6128      	str	r0, [r5, #16]
 8004a66:	b920      	cbnz	r0, 8004a72 <_svfiprintf_r+0x2e>
 8004a68:	230c      	movs	r3, #12
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a70:	e0d1      	b.n	8004c16 <_svfiprintf_r+0x1d2>
 8004a72:	2340      	movs	r3, #64	; 0x40
 8004a74:	616b      	str	r3, [r5, #20]
 8004a76:	2300      	movs	r3, #0
 8004a78:	9309      	str	r3, [sp, #36]	; 0x24
 8004a7a:	2320      	movs	r3, #32
 8004a7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a80:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a84:	2330      	movs	r3, #48	; 0x30
 8004a86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c30 <_svfiprintf_r+0x1ec>
 8004a8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a8e:	f04f 0901 	mov.w	r9, #1
 8004a92:	4623      	mov	r3, r4
 8004a94:	469a      	mov	sl, r3
 8004a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a9a:	b10a      	cbz	r2, 8004aa0 <_svfiprintf_r+0x5c>
 8004a9c:	2a25      	cmp	r2, #37	; 0x25
 8004a9e:	d1f9      	bne.n	8004a94 <_svfiprintf_r+0x50>
 8004aa0:	ebba 0b04 	subs.w	fp, sl, r4
 8004aa4:	d00b      	beq.n	8004abe <_svfiprintf_r+0x7a>
 8004aa6:	465b      	mov	r3, fp
 8004aa8:	4622      	mov	r2, r4
 8004aaa:	4629      	mov	r1, r5
 8004aac:	4638      	mov	r0, r7
 8004aae:	f7ff ff6d 	bl	800498c <__ssputs_r>
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f000 80aa 	beq.w	8004c0c <_svfiprintf_r+0x1c8>
 8004ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aba:	445a      	add	r2, fp
 8004abc:	9209      	str	r2, [sp, #36]	; 0x24
 8004abe:	f89a 3000 	ldrb.w	r3, [sl]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 80a2 	beq.w	8004c0c <_svfiprintf_r+0x1c8>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ad2:	f10a 0a01 	add.w	sl, sl, #1
 8004ad6:	9304      	str	r3, [sp, #16]
 8004ad8:	9307      	str	r3, [sp, #28]
 8004ada:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ade:	931a      	str	r3, [sp, #104]	; 0x68
 8004ae0:	4654      	mov	r4, sl
 8004ae2:	2205      	movs	r2, #5
 8004ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae8:	4851      	ldr	r0, [pc, #324]	; (8004c30 <_svfiprintf_r+0x1ec>)
 8004aea:	f7fb fb79 	bl	80001e0 <memchr>
 8004aee:	9a04      	ldr	r2, [sp, #16]
 8004af0:	b9d8      	cbnz	r0, 8004b2a <_svfiprintf_r+0xe6>
 8004af2:	06d0      	lsls	r0, r2, #27
 8004af4:	bf44      	itt	mi
 8004af6:	2320      	movmi	r3, #32
 8004af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004afc:	0711      	lsls	r1, r2, #28
 8004afe:	bf44      	itt	mi
 8004b00:	232b      	movmi	r3, #43	; 0x2b
 8004b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b06:	f89a 3000 	ldrb.w	r3, [sl]
 8004b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b0c:	d015      	beq.n	8004b3a <_svfiprintf_r+0xf6>
 8004b0e:	9a07      	ldr	r2, [sp, #28]
 8004b10:	4654      	mov	r4, sl
 8004b12:	2000      	movs	r0, #0
 8004b14:	f04f 0c0a 	mov.w	ip, #10
 8004b18:	4621      	mov	r1, r4
 8004b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b1e:	3b30      	subs	r3, #48	; 0x30
 8004b20:	2b09      	cmp	r3, #9
 8004b22:	d94e      	bls.n	8004bc2 <_svfiprintf_r+0x17e>
 8004b24:	b1b0      	cbz	r0, 8004b54 <_svfiprintf_r+0x110>
 8004b26:	9207      	str	r2, [sp, #28]
 8004b28:	e014      	b.n	8004b54 <_svfiprintf_r+0x110>
 8004b2a:	eba0 0308 	sub.w	r3, r0, r8
 8004b2e:	fa09 f303 	lsl.w	r3, r9, r3
 8004b32:	4313      	orrs	r3, r2
 8004b34:	9304      	str	r3, [sp, #16]
 8004b36:	46a2      	mov	sl, r4
 8004b38:	e7d2      	b.n	8004ae0 <_svfiprintf_r+0x9c>
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	1d19      	adds	r1, r3, #4
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	9103      	str	r1, [sp, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bfbb      	ittet	lt
 8004b46:	425b      	neglt	r3, r3
 8004b48:	f042 0202 	orrlt.w	r2, r2, #2
 8004b4c:	9307      	strge	r3, [sp, #28]
 8004b4e:	9307      	strlt	r3, [sp, #28]
 8004b50:	bfb8      	it	lt
 8004b52:	9204      	strlt	r2, [sp, #16]
 8004b54:	7823      	ldrb	r3, [r4, #0]
 8004b56:	2b2e      	cmp	r3, #46	; 0x2e
 8004b58:	d10c      	bne.n	8004b74 <_svfiprintf_r+0x130>
 8004b5a:	7863      	ldrb	r3, [r4, #1]
 8004b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b5e:	d135      	bne.n	8004bcc <_svfiprintf_r+0x188>
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	1d1a      	adds	r2, r3, #4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	9203      	str	r2, [sp, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bfb8      	it	lt
 8004b6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004b70:	3402      	adds	r4, #2
 8004b72:	9305      	str	r3, [sp, #20]
 8004b74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c40 <_svfiprintf_r+0x1fc>
 8004b78:	7821      	ldrb	r1, [r4, #0]
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	4650      	mov	r0, sl
 8004b7e:	f7fb fb2f 	bl	80001e0 <memchr>
 8004b82:	b140      	cbz	r0, 8004b96 <_svfiprintf_r+0x152>
 8004b84:	2340      	movs	r3, #64	; 0x40
 8004b86:	eba0 000a 	sub.w	r0, r0, sl
 8004b8a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b8e:	9b04      	ldr	r3, [sp, #16]
 8004b90:	4303      	orrs	r3, r0
 8004b92:	3401      	adds	r4, #1
 8004b94:	9304      	str	r3, [sp, #16]
 8004b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b9a:	4826      	ldr	r0, [pc, #152]	; (8004c34 <_svfiprintf_r+0x1f0>)
 8004b9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ba0:	2206      	movs	r2, #6
 8004ba2:	f7fb fb1d 	bl	80001e0 <memchr>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d038      	beq.n	8004c1c <_svfiprintf_r+0x1d8>
 8004baa:	4b23      	ldr	r3, [pc, #140]	; (8004c38 <_svfiprintf_r+0x1f4>)
 8004bac:	bb1b      	cbnz	r3, 8004bf6 <_svfiprintf_r+0x1b2>
 8004bae:	9b03      	ldr	r3, [sp, #12]
 8004bb0:	3307      	adds	r3, #7
 8004bb2:	f023 0307 	bic.w	r3, r3, #7
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	9303      	str	r3, [sp, #12]
 8004bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bbc:	4433      	add	r3, r6
 8004bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8004bc0:	e767      	b.n	8004a92 <_svfiprintf_r+0x4e>
 8004bc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	2001      	movs	r0, #1
 8004bca:	e7a5      	b.n	8004b18 <_svfiprintf_r+0xd4>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	3401      	adds	r4, #1
 8004bd0:	9305      	str	r3, [sp, #20]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	f04f 0c0a 	mov.w	ip, #10
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bde:	3a30      	subs	r2, #48	; 0x30
 8004be0:	2a09      	cmp	r2, #9
 8004be2:	d903      	bls.n	8004bec <_svfiprintf_r+0x1a8>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0c5      	beq.n	8004b74 <_svfiprintf_r+0x130>
 8004be8:	9105      	str	r1, [sp, #20]
 8004bea:	e7c3      	b.n	8004b74 <_svfiprintf_r+0x130>
 8004bec:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e7f0      	b.n	8004bd8 <_svfiprintf_r+0x194>
 8004bf6:	ab03      	add	r3, sp, #12
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	462a      	mov	r2, r5
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <_svfiprintf_r+0x1f8>)
 8004bfe:	a904      	add	r1, sp, #16
 8004c00:	4638      	mov	r0, r7
 8004c02:	f3af 8000 	nop.w
 8004c06:	1c42      	adds	r2, r0, #1
 8004c08:	4606      	mov	r6, r0
 8004c0a:	d1d6      	bne.n	8004bba <_svfiprintf_r+0x176>
 8004c0c:	89ab      	ldrh	r3, [r5, #12]
 8004c0e:	065b      	lsls	r3, r3, #25
 8004c10:	f53f af2c 	bmi.w	8004a6c <_svfiprintf_r+0x28>
 8004c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c16:	b01d      	add	sp, #116	; 0x74
 8004c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1c:	ab03      	add	r3, sp, #12
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	462a      	mov	r2, r5
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <_svfiprintf_r+0x1f8>)
 8004c24:	a904      	add	r1, sp, #16
 8004c26:	4638      	mov	r0, r7
 8004c28:	f000 f87a 	bl	8004d20 <_printf_i>
 8004c2c:	e7eb      	b.n	8004c06 <_svfiprintf_r+0x1c2>
 8004c2e:	bf00      	nop
 8004c30:	08005359 	.word	0x08005359
 8004c34:	08005363 	.word	0x08005363
 8004c38:	00000000 	.word	0x00000000
 8004c3c:	0800498d 	.word	0x0800498d
 8004c40:	0800535f 	.word	0x0800535f

08004c44 <_printf_common>:
 8004c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c48:	4616      	mov	r6, r2
 8004c4a:	4699      	mov	r9, r3
 8004c4c:	688a      	ldr	r2, [r1, #8]
 8004c4e:	690b      	ldr	r3, [r1, #16]
 8004c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c54:	4293      	cmp	r3, r2
 8004c56:	bfb8      	it	lt
 8004c58:	4613      	movlt	r3, r2
 8004c5a:	6033      	str	r3, [r6, #0]
 8004c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c60:	4607      	mov	r7, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	b10a      	cbz	r2, 8004c6a <_printf_common+0x26>
 8004c66:	3301      	adds	r3, #1
 8004c68:	6033      	str	r3, [r6, #0]
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	0699      	lsls	r1, r3, #26
 8004c6e:	bf42      	ittt	mi
 8004c70:	6833      	ldrmi	r3, [r6, #0]
 8004c72:	3302      	addmi	r3, #2
 8004c74:	6033      	strmi	r3, [r6, #0]
 8004c76:	6825      	ldr	r5, [r4, #0]
 8004c78:	f015 0506 	ands.w	r5, r5, #6
 8004c7c:	d106      	bne.n	8004c8c <_printf_common+0x48>
 8004c7e:	f104 0a19 	add.w	sl, r4, #25
 8004c82:	68e3      	ldr	r3, [r4, #12]
 8004c84:	6832      	ldr	r2, [r6, #0]
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	42ab      	cmp	r3, r5
 8004c8a:	dc26      	bgt.n	8004cda <_printf_common+0x96>
 8004c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c90:	1e13      	subs	r3, r2, #0
 8004c92:	6822      	ldr	r2, [r4, #0]
 8004c94:	bf18      	it	ne
 8004c96:	2301      	movne	r3, #1
 8004c98:	0692      	lsls	r2, r2, #26
 8004c9a:	d42b      	bmi.n	8004cf4 <_printf_common+0xb0>
 8004c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	47c0      	blx	r8
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d01e      	beq.n	8004ce8 <_printf_common+0xa4>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	68e5      	ldr	r5, [r4, #12]
 8004cae:	6832      	ldr	r2, [r6, #0]
 8004cb0:	f003 0306 	and.w	r3, r3, #6
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	bf08      	it	eq
 8004cb8:	1aad      	subeq	r5, r5, r2
 8004cba:	68a3      	ldr	r3, [r4, #8]
 8004cbc:	6922      	ldr	r2, [r4, #16]
 8004cbe:	bf0c      	ite	eq
 8004cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cc4:	2500      	movne	r5, #0
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	bfc4      	itt	gt
 8004cca:	1a9b      	subgt	r3, r3, r2
 8004ccc:	18ed      	addgt	r5, r5, r3
 8004cce:	2600      	movs	r6, #0
 8004cd0:	341a      	adds	r4, #26
 8004cd2:	42b5      	cmp	r5, r6
 8004cd4:	d11a      	bne.n	8004d0c <_printf_common+0xc8>
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	e008      	b.n	8004cec <_printf_common+0xa8>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	4652      	mov	r2, sl
 8004cde:	4649      	mov	r1, r9
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	47c0      	blx	r8
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d103      	bne.n	8004cf0 <_printf_common+0xac>
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf0:	3501      	adds	r5, #1
 8004cf2:	e7c6      	b.n	8004c82 <_printf_common+0x3e>
 8004cf4:	18e1      	adds	r1, r4, r3
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	2030      	movs	r0, #48	; 0x30
 8004cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cfe:	4422      	add	r2, r4
 8004d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d08:	3302      	adds	r3, #2
 8004d0a:	e7c7      	b.n	8004c9c <_printf_common+0x58>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	4622      	mov	r2, r4
 8004d10:	4649      	mov	r1, r9
 8004d12:	4638      	mov	r0, r7
 8004d14:	47c0      	blx	r8
 8004d16:	3001      	adds	r0, #1
 8004d18:	d0e6      	beq.n	8004ce8 <_printf_common+0xa4>
 8004d1a:	3601      	adds	r6, #1
 8004d1c:	e7d9      	b.n	8004cd2 <_printf_common+0x8e>
	...

08004d20 <_printf_i>:
 8004d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d24:	460c      	mov	r4, r1
 8004d26:	4691      	mov	r9, r2
 8004d28:	7e27      	ldrb	r7, [r4, #24]
 8004d2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d2c:	2f78      	cmp	r7, #120	; 0x78
 8004d2e:	4680      	mov	r8, r0
 8004d30:	469a      	mov	sl, r3
 8004d32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d36:	d807      	bhi.n	8004d48 <_printf_i+0x28>
 8004d38:	2f62      	cmp	r7, #98	; 0x62
 8004d3a:	d80a      	bhi.n	8004d52 <_printf_i+0x32>
 8004d3c:	2f00      	cmp	r7, #0
 8004d3e:	f000 80d8 	beq.w	8004ef2 <_printf_i+0x1d2>
 8004d42:	2f58      	cmp	r7, #88	; 0x58
 8004d44:	f000 80a3 	beq.w	8004e8e <_printf_i+0x16e>
 8004d48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d50:	e03a      	b.n	8004dc8 <_printf_i+0xa8>
 8004d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d56:	2b15      	cmp	r3, #21
 8004d58:	d8f6      	bhi.n	8004d48 <_printf_i+0x28>
 8004d5a:	a001      	add	r0, pc, #4	; (adr r0, 8004d60 <_printf_i+0x40>)
 8004d5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d60:	08004db9 	.word	0x08004db9
 8004d64:	08004dcd 	.word	0x08004dcd
 8004d68:	08004d49 	.word	0x08004d49
 8004d6c:	08004d49 	.word	0x08004d49
 8004d70:	08004d49 	.word	0x08004d49
 8004d74:	08004d49 	.word	0x08004d49
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004d49 	.word	0x08004d49
 8004d80:	08004d49 	.word	0x08004d49
 8004d84:	08004d49 	.word	0x08004d49
 8004d88:	08004d49 	.word	0x08004d49
 8004d8c:	08004ed9 	.word	0x08004ed9
 8004d90:	08004dfd 	.word	0x08004dfd
 8004d94:	08004ebb 	.word	0x08004ebb
 8004d98:	08004d49 	.word	0x08004d49
 8004d9c:	08004d49 	.word	0x08004d49
 8004da0:	08004efb 	.word	0x08004efb
 8004da4:	08004d49 	.word	0x08004d49
 8004da8:	08004dfd 	.word	0x08004dfd
 8004dac:	08004d49 	.word	0x08004d49
 8004db0:	08004d49 	.word	0x08004d49
 8004db4:	08004ec3 	.word	0x08004ec3
 8004db8:	680b      	ldr	r3, [r1, #0]
 8004dba:	1d1a      	adds	r2, r3, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	600a      	str	r2, [r1, #0]
 8004dc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0a3      	b.n	8004f14 <_printf_i+0x1f4>
 8004dcc:	6825      	ldr	r5, [r4, #0]
 8004dce:	6808      	ldr	r0, [r1, #0]
 8004dd0:	062e      	lsls	r6, r5, #24
 8004dd2:	f100 0304 	add.w	r3, r0, #4
 8004dd6:	d50a      	bpl.n	8004dee <_printf_i+0xce>
 8004dd8:	6805      	ldr	r5, [r0, #0]
 8004dda:	600b      	str	r3, [r1, #0]
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	da03      	bge.n	8004de8 <_printf_i+0xc8>
 8004de0:	232d      	movs	r3, #45	; 0x2d
 8004de2:	426d      	negs	r5, r5
 8004de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004de8:	485e      	ldr	r0, [pc, #376]	; (8004f64 <_printf_i+0x244>)
 8004dea:	230a      	movs	r3, #10
 8004dec:	e019      	b.n	8004e22 <_printf_i+0x102>
 8004dee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004df2:	6805      	ldr	r5, [r0, #0]
 8004df4:	600b      	str	r3, [r1, #0]
 8004df6:	bf18      	it	ne
 8004df8:	b22d      	sxthne	r5, r5
 8004dfa:	e7ef      	b.n	8004ddc <_printf_i+0xbc>
 8004dfc:	680b      	ldr	r3, [r1, #0]
 8004dfe:	6825      	ldr	r5, [r4, #0]
 8004e00:	1d18      	adds	r0, r3, #4
 8004e02:	6008      	str	r0, [r1, #0]
 8004e04:	0628      	lsls	r0, r5, #24
 8004e06:	d501      	bpl.n	8004e0c <_printf_i+0xec>
 8004e08:	681d      	ldr	r5, [r3, #0]
 8004e0a:	e002      	b.n	8004e12 <_printf_i+0xf2>
 8004e0c:	0669      	lsls	r1, r5, #25
 8004e0e:	d5fb      	bpl.n	8004e08 <_printf_i+0xe8>
 8004e10:	881d      	ldrh	r5, [r3, #0]
 8004e12:	4854      	ldr	r0, [pc, #336]	; (8004f64 <_printf_i+0x244>)
 8004e14:	2f6f      	cmp	r7, #111	; 0x6f
 8004e16:	bf0c      	ite	eq
 8004e18:	2308      	moveq	r3, #8
 8004e1a:	230a      	movne	r3, #10
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e22:	6866      	ldr	r6, [r4, #4]
 8004e24:	60a6      	str	r6, [r4, #8]
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	bfa2      	ittt	ge
 8004e2a:	6821      	ldrge	r1, [r4, #0]
 8004e2c:	f021 0104 	bicge.w	r1, r1, #4
 8004e30:	6021      	strge	r1, [r4, #0]
 8004e32:	b90d      	cbnz	r5, 8004e38 <_printf_i+0x118>
 8004e34:	2e00      	cmp	r6, #0
 8004e36:	d04d      	beq.n	8004ed4 <_printf_i+0x1b4>
 8004e38:	4616      	mov	r6, r2
 8004e3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e3e:	fb03 5711 	mls	r7, r3, r1, r5
 8004e42:	5dc7      	ldrb	r7, [r0, r7]
 8004e44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e48:	462f      	mov	r7, r5
 8004e4a:	42bb      	cmp	r3, r7
 8004e4c:	460d      	mov	r5, r1
 8004e4e:	d9f4      	bls.n	8004e3a <_printf_i+0x11a>
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d10b      	bne.n	8004e6c <_printf_i+0x14c>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	07df      	lsls	r7, r3, #31
 8004e58:	d508      	bpl.n	8004e6c <_printf_i+0x14c>
 8004e5a:	6923      	ldr	r3, [r4, #16]
 8004e5c:	6861      	ldr	r1, [r4, #4]
 8004e5e:	4299      	cmp	r1, r3
 8004e60:	bfde      	ittt	le
 8004e62:	2330      	movle	r3, #48	; 0x30
 8004e64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e68:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004e6c:	1b92      	subs	r2, r2, r6
 8004e6e:	6122      	str	r2, [r4, #16]
 8004e70:	f8cd a000 	str.w	sl, [sp]
 8004e74:	464b      	mov	r3, r9
 8004e76:	aa03      	add	r2, sp, #12
 8004e78:	4621      	mov	r1, r4
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	f7ff fee2 	bl	8004c44 <_printf_common>
 8004e80:	3001      	adds	r0, #1
 8004e82:	d14c      	bne.n	8004f1e <_printf_i+0x1fe>
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e88:	b004      	add	sp, #16
 8004e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8e:	4835      	ldr	r0, [pc, #212]	; (8004f64 <_printf_i+0x244>)
 8004e90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	680e      	ldr	r6, [r1, #0]
 8004e98:	061f      	lsls	r7, r3, #24
 8004e9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e9e:	600e      	str	r6, [r1, #0]
 8004ea0:	d514      	bpl.n	8004ecc <_printf_i+0x1ac>
 8004ea2:	07d9      	lsls	r1, r3, #31
 8004ea4:	bf44      	itt	mi
 8004ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eaa:	6023      	strmi	r3, [r4, #0]
 8004eac:	b91d      	cbnz	r5, 8004eb6 <_printf_i+0x196>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	f023 0320 	bic.w	r3, r3, #32
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	2310      	movs	r3, #16
 8004eb8:	e7b0      	b.n	8004e1c <_printf_i+0xfc>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	f043 0320 	orr.w	r3, r3, #32
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	2378      	movs	r3, #120	; 0x78
 8004ec4:	4828      	ldr	r0, [pc, #160]	; (8004f68 <_printf_i+0x248>)
 8004ec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004eca:	e7e3      	b.n	8004e94 <_printf_i+0x174>
 8004ecc:	065e      	lsls	r6, r3, #25
 8004ece:	bf48      	it	mi
 8004ed0:	b2ad      	uxthmi	r5, r5
 8004ed2:	e7e6      	b.n	8004ea2 <_printf_i+0x182>
 8004ed4:	4616      	mov	r6, r2
 8004ed6:	e7bb      	b.n	8004e50 <_printf_i+0x130>
 8004ed8:	680b      	ldr	r3, [r1, #0]
 8004eda:	6826      	ldr	r6, [r4, #0]
 8004edc:	6960      	ldr	r0, [r4, #20]
 8004ede:	1d1d      	adds	r5, r3, #4
 8004ee0:	600d      	str	r5, [r1, #0]
 8004ee2:	0635      	lsls	r5, r6, #24
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	d501      	bpl.n	8004eec <_printf_i+0x1cc>
 8004ee8:	6018      	str	r0, [r3, #0]
 8004eea:	e002      	b.n	8004ef2 <_printf_i+0x1d2>
 8004eec:	0671      	lsls	r1, r6, #25
 8004eee:	d5fb      	bpl.n	8004ee8 <_printf_i+0x1c8>
 8004ef0:	8018      	strh	r0, [r3, #0]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	6123      	str	r3, [r4, #16]
 8004ef6:	4616      	mov	r6, r2
 8004ef8:	e7ba      	b.n	8004e70 <_printf_i+0x150>
 8004efa:	680b      	ldr	r3, [r1, #0]
 8004efc:	1d1a      	adds	r2, r3, #4
 8004efe:	600a      	str	r2, [r1, #0]
 8004f00:	681e      	ldr	r6, [r3, #0]
 8004f02:	6862      	ldr	r2, [r4, #4]
 8004f04:	2100      	movs	r1, #0
 8004f06:	4630      	mov	r0, r6
 8004f08:	f7fb f96a 	bl	80001e0 <memchr>
 8004f0c:	b108      	cbz	r0, 8004f12 <_printf_i+0x1f2>
 8004f0e:	1b80      	subs	r0, r0, r6
 8004f10:	6060      	str	r0, [r4, #4]
 8004f12:	6863      	ldr	r3, [r4, #4]
 8004f14:	6123      	str	r3, [r4, #16]
 8004f16:	2300      	movs	r3, #0
 8004f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f1c:	e7a8      	b.n	8004e70 <_printf_i+0x150>
 8004f1e:	6923      	ldr	r3, [r4, #16]
 8004f20:	4632      	mov	r2, r6
 8004f22:	4649      	mov	r1, r9
 8004f24:	4640      	mov	r0, r8
 8004f26:	47d0      	blx	sl
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d0ab      	beq.n	8004e84 <_printf_i+0x164>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	079b      	lsls	r3, r3, #30
 8004f30:	d413      	bmi.n	8004f5a <_printf_i+0x23a>
 8004f32:	68e0      	ldr	r0, [r4, #12]
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	4298      	cmp	r0, r3
 8004f38:	bfb8      	it	lt
 8004f3a:	4618      	movlt	r0, r3
 8004f3c:	e7a4      	b.n	8004e88 <_printf_i+0x168>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	4632      	mov	r2, r6
 8004f42:	4649      	mov	r1, r9
 8004f44:	4640      	mov	r0, r8
 8004f46:	47d0      	blx	sl
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d09b      	beq.n	8004e84 <_printf_i+0x164>
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	68e3      	ldr	r3, [r4, #12]
 8004f50:	9903      	ldr	r1, [sp, #12]
 8004f52:	1a5b      	subs	r3, r3, r1
 8004f54:	42ab      	cmp	r3, r5
 8004f56:	dcf2      	bgt.n	8004f3e <_printf_i+0x21e>
 8004f58:	e7eb      	b.n	8004f32 <_printf_i+0x212>
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	f104 0619 	add.w	r6, r4, #25
 8004f60:	e7f5      	b.n	8004f4e <_printf_i+0x22e>
 8004f62:	bf00      	nop
 8004f64:	0800536a 	.word	0x0800536a
 8004f68:	0800537b 	.word	0x0800537b

08004f6c <memcpy>:
 8004f6c:	440a      	add	r2, r1
 8004f6e:	4291      	cmp	r1, r2
 8004f70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f74:	d100      	bne.n	8004f78 <memcpy+0xc>
 8004f76:	4770      	bx	lr
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f82:	4291      	cmp	r1, r2
 8004f84:	d1f9      	bne.n	8004f7a <memcpy+0xe>
 8004f86:	bd10      	pop	{r4, pc}

08004f88 <memmove>:
 8004f88:	4288      	cmp	r0, r1
 8004f8a:	b510      	push	{r4, lr}
 8004f8c:	eb01 0402 	add.w	r4, r1, r2
 8004f90:	d902      	bls.n	8004f98 <memmove+0x10>
 8004f92:	4284      	cmp	r4, r0
 8004f94:	4623      	mov	r3, r4
 8004f96:	d807      	bhi.n	8004fa8 <memmove+0x20>
 8004f98:	1e43      	subs	r3, r0, #1
 8004f9a:	42a1      	cmp	r1, r4
 8004f9c:	d008      	beq.n	8004fb0 <memmove+0x28>
 8004f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fa6:	e7f8      	b.n	8004f9a <memmove+0x12>
 8004fa8:	4402      	add	r2, r0
 8004faa:	4601      	mov	r1, r0
 8004fac:	428a      	cmp	r2, r1
 8004fae:	d100      	bne.n	8004fb2 <memmove+0x2a>
 8004fb0:	bd10      	pop	{r4, pc}
 8004fb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fba:	e7f7      	b.n	8004fac <memmove+0x24>

08004fbc <_free_r>:
 8004fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fbe:	2900      	cmp	r1, #0
 8004fc0:	d048      	beq.n	8005054 <_free_r+0x98>
 8004fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc6:	9001      	str	r0, [sp, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f1a1 0404 	sub.w	r4, r1, #4
 8004fce:	bfb8      	it	lt
 8004fd0:	18e4      	addlt	r4, r4, r3
 8004fd2:	f000 f8d3 	bl	800517c <__malloc_lock>
 8004fd6:	4a20      	ldr	r2, [pc, #128]	; (8005058 <_free_r+0x9c>)
 8004fd8:	9801      	ldr	r0, [sp, #4]
 8004fda:	6813      	ldr	r3, [r2, #0]
 8004fdc:	4615      	mov	r5, r2
 8004fde:	b933      	cbnz	r3, 8004fee <_free_r+0x32>
 8004fe0:	6063      	str	r3, [r4, #4]
 8004fe2:	6014      	str	r4, [r2, #0]
 8004fe4:	b003      	add	sp, #12
 8004fe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fea:	f000 b8cd 	b.w	8005188 <__malloc_unlock>
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	d90b      	bls.n	800500a <_free_r+0x4e>
 8004ff2:	6821      	ldr	r1, [r4, #0]
 8004ff4:	1862      	adds	r2, r4, r1
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	bf04      	itt	eq
 8004ffa:	681a      	ldreq	r2, [r3, #0]
 8004ffc:	685b      	ldreq	r3, [r3, #4]
 8004ffe:	6063      	str	r3, [r4, #4]
 8005000:	bf04      	itt	eq
 8005002:	1852      	addeq	r2, r2, r1
 8005004:	6022      	streq	r2, [r4, #0]
 8005006:	602c      	str	r4, [r5, #0]
 8005008:	e7ec      	b.n	8004fe4 <_free_r+0x28>
 800500a:	461a      	mov	r2, r3
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	b10b      	cbz	r3, 8005014 <_free_r+0x58>
 8005010:	42a3      	cmp	r3, r4
 8005012:	d9fa      	bls.n	800500a <_free_r+0x4e>
 8005014:	6811      	ldr	r1, [r2, #0]
 8005016:	1855      	adds	r5, r2, r1
 8005018:	42a5      	cmp	r5, r4
 800501a:	d10b      	bne.n	8005034 <_free_r+0x78>
 800501c:	6824      	ldr	r4, [r4, #0]
 800501e:	4421      	add	r1, r4
 8005020:	1854      	adds	r4, r2, r1
 8005022:	42a3      	cmp	r3, r4
 8005024:	6011      	str	r1, [r2, #0]
 8005026:	d1dd      	bne.n	8004fe4 <_free_r+0x28>
 8005028:	681c      	ldr	r4, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	6053      	str	r3, [r2, #4]
 800502e:	4421      	add	r1, r4
 8005030:	6011      	str	r1, [r2, #0]
 8005032:	e7d7      	b.n	8004fe4 <_free_r+0x28>
 8005034:	d902      	bls.n	800503c <_free_r+0x80>
 8005036:	230c      	movs	r3, #12
 8005038:	6003      	str	r3, [r0, #0]
 800503a:	e7d3      	b.n	8004fe4 <_free_r+0x28>
 800503c:	6825      	ldr	r5, [r4, #0]
 800503e:	1961      	adds	r1, r4, r5
 8005040:	428b      	cmp	r3, r1
 8005042:	bf04      	itt	eq
 8005044:	6819      	ldreq	r1, [r3, #0]
 8005046:	685b      	ldreq	r3, [r3, #4]
 8005048:	6063      	str	r3, [r4, #4]
 800504a:	bf04      	itt	eq
 800504c:	1949      	addeq	r1, r1, r5
 800504e:	6021      	streq	r1, [r4, #0]
 8005050:	6054      	str	r4, [r2, #4]
 8005052:	e7c7      	b.n	8004fe4 <_free_r+0x28>
 8005054:	b003      	add	sp, #12
 8005056:	bd30      	pop	{r4, r5, pc}
 8005058:	20000104 	.word	0x20000104

0800505c <_malloc_r>:
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	1ccd      	adds	r5, r1, #3
 8005060:	f025 0503 	bic.w	r5, r5, #3
 8005064:	3508      	adds	r5, #8
 8005066:	2d0c      	cmp	r5, #12
 8005068:	bf38      	it	cc
 800506a:	250c      	movcc	r5, #12
 800506c:	2d00      	cmp	r5, #0
 800506e:	4606      	mov	r6, r0
 8005070:	db01      	blt.n	8005076 <_malloc_r+0x1a>
 8005072:	42a9      	cmp	r1, r5
 8005074:	d903      	bls.n	800507e <_malloc_r+0x22>
 8005076:	230c      	movs	r3, #12
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	2000      	movs	r0, #0
 800507c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800507e:	f000 f87d 	bl	800517c <__malloc_lock>
 8005082:	4921      	ldr	r1, [pc, #132]	; (8005108 <_malloc_r+0xac>)
 8005084:	680a      	ldr	r2, [r1, #0]
 8005086:	4614      	mov	r4, r2
 8005088:	b99c      	cbnz	r4, 80050b2 <_malloc_r+0x56>
 800508a:	4f20      	ldr	r7, [pc, #128]	; (800510c <_malloc_r+0xb0>)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	b923      	cbnz	r3, 800509a <_malloc_r+0x3e>
 8005090:	4621      	mov	r1, r4
 8005092:	4630      	mov	r0, r6
 8005094:	f000 f862 	bl	800515c <_sbrk_r>
 8005098:	6038      	str	r0, [r7, #0]
 800509a:	4629      	mov	r1, r5
 800509c:	4630      	mov	r0, r6
 800509e:	f000 f85d 	bl	800515c <_sbrk_r>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	d123      	bne.n	80050ee <_malloc_r+0x92>
 80050a6:	230c      	movs	r3, #12
 80050a8:	6033      	str	r3, [r6, #0]
 80050aa:	4630      	mov	r0, r6
 80050ac:	f000 f86c 	bl	8005188 <__malloc_unlock>
 80050b0:	e7e3      	b.n	800507a <_malloc_r+0x1e>
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	1b5b      	subs	r3, r3, r5
 80050b6:	d417      	bmi.n	80050e8 <_malloc_r+0x8c>
 80050b8:	2b0b      	cmp	r3, #11
 80050ba:	d903      	bls.n	80050c4 <_malloc_r+0x68>
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	441c      	add	r4, r3
 80050c0:	6025      	str	r5, [r4, #0]
 80050c2:	e004      	b.n	80050ce <_malloc_r+0x72>
 80050c4:	6863      	ldr	r3, [r4, #4]
 80050c6:	42a2      	cmp	r2, r4
 80050c8:	bf0c      	ite	eq
 80050ca:	600b      	streq	r3, [r1, #0]
 80050cc:	6053      	strne	r3, [r2, #4]
 80050ce:	4630      	mov	r0, r6
 80050d0:	f000 f85a 	bl	8005188 <__malloc_unlock>
 80050d4:	f104 000b 	add.w	r0, r4, #11
 80050d8:	1d23      	adds	r3, r4, #4
 80050da:	f020 0007 	bic.w	r0, r0, #7
 80050de:	1ac2      	subs	r2, r0, r3
 80050e0:	d0cc      	beq.n	800507c <_malloc_r+0x20>
 80050e2:	1a1b      	subs	r3, r3, r0
 80050e4:	50a3      	str	r3, [r4, r2]
 80050e6:	e7c9      	b.n	800507c <_malloc_r+0x20>
 80050e8:	4622      	mov	r2, r4
 80050ea:	6864      	ldr	r4, [r4, #4]
 80050ec:	e7cc      	b.n	8005088 <_malloc_r+0x2c>
 80050ee:	1cc4      	adds	r4, r0, #3
 80050f0:	f024 0403 	bic.w	r4, r4, #3
 80050f4:	42a0      	cmp	r0, r4
 80050f6:	d0e3      	beq.n	80050c0 <_malloc_r+0x64>
 80050f8:	1a21      	subs	r1, r4, r0
 80050fa:	4630      	mov	r0, r6
 80050fc:	f000 f82e 	bl	800515c <_sbrk_r>
 8005100:	3001      	adds	r0, #1
 8005102:	d1dd      	bne.n	80050c0 <_malloc_r+0x64>
 8005104:	e7cf      	b.n	80050a6 <_malloc_r+0x4a>
 8005106:	bf00      	nop
 8005108:	20000104 	.word	0x20000104
 800510c:	20000108 	.word	0x20000108

08005110 <_realloc_r>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	4607      	mov	r7, r0
 8005114:	4614      	mov	r4, r2
 8005116:	460e      	mov	r6, r1
 8005118:	b921      	cbnz	r1, 8005124 <_realloc_r+0x14>
 800511a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800511e:	4611      	mov	r1, r2
 8005120:	f7ff bf9c 	b.w	800505c <_malloc_r>
 8005124:	b922      	cbnz	r2, 8005130 <_realloc_r+0x20>
 8005126:	f7ff ff49 	bl	8004fbc <_free_r>
 800512a:	4625      	mov	r5, r4
 800512c:	4628      	mov	r0, r5
 800512e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005130:	f000 f830 	bl	8005194 <_malloc_usable_size_r>
 8005134:	42a0      	cmp	r0, r4
 8005136:	d20f      	bcs.n	8005158 <_realloc_r+0x48>
 8005138:	4621      	mov	r1, r4
 800513a:	4638      	mov	r0, r7
 800513c:	f7ff ff8e 	bl	800505c <_malloc_r>
 8005140:	4605      	mov	r5, r0
 8005142:	2800      	cmp	r0, #0
 8005144:	d0f2      	beq.n	800512c <_realloc_r+0x1c>
 8005146:	4631      	mov	r1, r6
 8005148:	4622      	mov	r2, r4
 800514a:	f7ff ff0f 	bl	8004f6c <memcpy>
 800514e:	4631      	mov	r1, r6
 8005150:	4638      	mov	r0, r7
 8005152:	f7ff ff33 	bl	8004fbc <_free_r>
 8005156:	e7e9      	b.n	800512c <_realloc_r+0x1c>
 8005158:	4635      	mov	r5, r6
 800515a:	e7e7      	b.n	800512c <_realloc_r+0x1c>

0800515c <_sbrk_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4d06      	ldr	r5, [pc, #24]	; (8005178 <_sbrk_r+0x1c>)
 8005160:	2300      	movs	r3, #0
 8005162:	4604      	mov	r4, r0
 8005164:	4608      	mov	r0, r1
 8005166:	602b      	str	r3, [r5, #0]
 8005168:	f7fc fc7e 	bl	8001a68 <_sbrk>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_sbrk_r+0x1a>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_sbrk_r+0x1a>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	2000024c 	.word	0x2000024c

0800517c <__malloc_lock>:
 800517c:	4801      	ldr	r0, [pc, #4]	; (8005184 <__malloc_lock+0x8>)
 800517e:	f000 b811 	b.w	80051a4 <__retarget_lock_acquire_recursive>
 8005182:	bf00      	nop
 8005184:	20000254 	.word	0x20000254

08005188 <__malloc_unlock>:
 8005188:	4801      	ldr	r0, [pc, #4]	; (8005190 <__malloc_unlock+0x8>)
 800518a:	f000 b80c 	b.w	80051a6 <__retarget_lock_release_recursive>
 800518e:	bf00      	nop
 8005190:	20000254 	.word	0x20000254

08005194 <_malloc_usable_size_r>:
 8005194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005198:	1f18      	subs	r0, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	bfbc      	itt	lt
 800519e:	580b      	ldrlt	r3, [r1, r0]
 80051a0:	18c0      	addlt	r0, r0, r3
 80051a2:	4770      	bx	lr

080051a4 <__retarget_lock_acquire_recursive>:
 80051a4:	4770      	bx	lr

080051a6 <__retarget_lock_release_recursive>:
 80051a6:	4770      	bx	lr

080051a8 <_init>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	bf00      	nop
 80051ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ae:	bc08      	pop	{r3}
 80051b0:	469e      	mov	lr, r3
 80051b2:	4770      	bx	lr

080051b4 <_fini>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	bf00      	nop
 80051b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ba:	bc08      	pop	{r3}
 80051bc:	469e      	mov	lr, r3
 80051be:	4770      	bx	lr
