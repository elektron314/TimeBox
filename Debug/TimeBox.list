
TimeBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007530  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080076c0  080076c0  000176c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800776c  0800776c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007774  08007774  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007774  08007774  00017774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007778  08007778  00017778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800777c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001968  200001e4  08007960  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b4c  08007960  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147e2  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030d4  00000000  00000000  000349f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  00037ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c10  00000000  00000000  00038858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023cd4  00000000  00000000  00039468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec4c  00000000  00000000  0005d13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9bd4  00000000  00000000  0006bd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013595c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003944  00000000  00000000  001359d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076a8 	.word	0x080076a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080076a8 	.word	0x080076a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <set_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	/** Initialize RTC and set the Time and Date
	  */
	sTime.Hours = 0x0;
 8000576:	2300      	movs	r3, #0
 8000578:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x5;
 800057a:	2305      	movs	r3, #5
 800057c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800057e:	2300      	movs	r3, #0
 8000580:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2201      	movs	r2, #1
 800058e:	4619      	mov	r1, r3
 8000590:	4812      	ldr	r0, [pc, #72]	; (80005dc <set_time+0x6c>)
 8000592:	f002 fd61 	bl	8003058 <HAL_RTC_SetTime>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <set_time+0x30>
	{
	Error_Handler();
 800059c:	f000 f9a0 	bl	80008e0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80005a0:	2302      	movs	r3, #2
 80005a2:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_FEBRUARY;
 80005a4:	2302      	movs	r3, #2
 80005a6:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x02;
 80005a8:	2302      	movs	r3, #2
 80005aa:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x21;
 80005ac:	2321      	movs	r3, #33	; 0x21
 80005ae:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	2201      	movs	r2, #1
 80005b4:	4619      	mov	r1, r3
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <set_time+0x6c>)
 80005b8:	f002 fe69 	bl	800328e <HAL_RTC_SetDate>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <set_time+0x56>
	{
	Error_Handler();
 80005c2:	f000 f98d 	bl	80008e0 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80005c6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80005ca:	2101      	movs	r1, #1
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <set_time+0x6c>)
 80005ce:	f003 f80c 	bl	80035ea <HAL_RTCEx_BKUPWrite>
}
 80005d2:	bf00      	nop
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000214 	.word	0x20000214

080005e0 <get_time>:
//	Error_Handler();
//	}
//}

void get_time (void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af02      	add	r7, sp, #8
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <get_time+0x58>)
 80005ee:	f002 fdf0 	bl	80031d2 <HAL_RTC_GetTime>
	/* Get the RTC Curret Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	4619      	mov	r1, r3
 80005fa:	480f      	ldr	r0, [pc, #60]	; (8000638 <get_time+0x58>)
 80005fc:	f002 feee 	bl	80033dc <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000600:	783b      	ldrb	r3, [r7, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	787b      	ldrb	r3, [r7, #1]
 8000606:	4619      	mov	r1, r3
 8000608:	78bb      	ldrb	r3, [r7, #2]
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	460b      	mov	r3, r1
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <get_time+0x5c>)
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <get_time+0x60>)
 8000612:	f006 fcfb 	bl	800700c <siprintf>

	/* Display date Format: mm-dd-yy */
	sprintf((char*)date,"%02d-%02d-%02d",gDate.Year, gDate.Month, 2000+gDate.Date);
 8000616:	7dfb      	ldrb	r3, [r7, #23]
 8000618:	461a      	mov	r2, r3
 800061a:	7d7b      	ldrb	r3, [r7, #21]
 800061c:	4619      	mov	r1, r3
 800061e:	7dbb      	ldrb	r3, [r7, #22]
 8000620:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	460b      	mov	r3, r1
 8000628:	4906      	ldr	r1, [pc, #24]	; (8000644 <get_time+0x64>)
 800062a:	4807      	ldr	r0, [pc, #28]	; (8000648 <get_time+0x68>)
 800062c:	f006 fcee 	bl	800700c <siprintf>
}
 8000630:	bf00      	nop
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000214 	.word	0x20000214
 800063c:	080076c0 	.word	0x080076c0
 8000640:	20000254 	.word	0x20000254
 8000644:	080076d0 	.word	0x080076d0
 8000648:	20000260 	.word	0x20000260

0800064c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	alarm = 1;
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000200 	.word	0x20000200

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fa38 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f82a 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 f8d2 	bl	8000820 <MX_GPIO_Init>
  MX_RTC_Init();
 800067c:	f000 f8aa 	bl	80007d4 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000680:	f005 fef0 	bl	8006464 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000684:	2101      	movs	r1, #1
 8000686:	480f      	ldr	r0, [pc, #60]	; (80006c4 <main+0x58>)
 8000688:	f002 ffc9 	bl	800361e <HAL_RTCEx_BKUPRead>
 800068c:	4602      	mov	r2, r0
 800068e:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8000692:	429a      	cmp	r2, r3
 8000694:	d001      	beq.n	800069a <main+0x2e>
  {
	  set_time();
 8000696:	f7ff ff6b 	bl	8000570 <set_time>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  get_time();
 800069a:	f7ff ffa1 	bl	80005e0 <get_time>
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a4:	4808      	ldr	r0, [pc, #32]	; (80006c8 <main+0x5c>)
 80006a6:	f000 fd5d 	bl	8001164 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80006aa:	20c8      	movs	r0, #200	; 0xc8
 80006ac:	f000 fa8c 	bl	8000bc8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b6:	4804      	ldr	r0, [pc, #16]	; (80006c8 <main+0x5c>)
 80006b8:	f000 fd54 	bl	8001164 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80006bc:	20c8      	movs	r0, #200	; 0xc8
 80006be:	f000 fa83 	bl	8000bc8 <HAL_Delay>
	  get_time();
 80006c2:	e7ea      	b.n	800069a <main+0x2e>
 80006c4:	20000214 	.word	0x20000214
 80006c8:	40021400 	.word	0x40021400

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b098      	sub	sp, #96	; 0x60
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 fbd6 	bl	8006e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b32      	ldr	r3, [pc, #200]	; (80007cc <SystemClock_Config+0x100>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	4a31      	ldr	r2, [pc, #196]	; (80007cc <SystemClock_Config+0x100>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <SystemClock_Config+0x100>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <SystemClock_Config+0x104>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a2b      	ldr	r2, [pc, #172]	; (80007d0 <SystemClock_Config+0x104>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000728:	6013      	str	r3, [r2, #0]
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <SystemClock_Config+0x104>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000736:	2307      	movs	r3, #7
 8000738:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000750:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000756:	2304      	movs	r3, #4
 8000758:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 800075a:	2348      	movs	r3, #72	; 0x48
 800075c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075e:	2302      	movs	r3, #2
 8000760:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000762:	2303      	movs	r3, #3
 8000764:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076a:	4618      	mov	r0, r3
 800076c:	f001 fe96 	bl	800249c <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000776:	f000 f8b3 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f002 f8f1 	bl	800297c <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80007a0:	f000 f89e 	bl	80008e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007a4:	2302      	movs	r3, #2
 80007a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ac:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 faac 	bl	8002d10 <HAL_RCCEx_PeriphCLKConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80007be:	f000 f88f 	bl	80008e0 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3760      	adds	r7, #96	; 0x60
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_RTC_Init+0x44>)
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <MX_RTC_Init+0x48>)
 80007dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_RTC_Init+0x44>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_RTC_Init+0x44>)
 80007e6:	227f      	movs	r2, #127	; 0x7f
 80007e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_RTC_Init+0x44>)
 80007ec:	22ff      	movs	r2, #255	; 0xff
 80007ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_RTC_Init+0x44>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_RTC_Init+0x44>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_RTC_Init+0x44>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_RTC_Init+0x44>)
 8000804:	f002 fb66 	bl	8002ed4 <HAL_RTC_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800080e:	f000 f867 	bl	80008e0 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000214 	.word	0x20000214
 800081c:	40002800 	.word	0x40002800

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <MX_GPIO_Init+0xb8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a26      	ldr	r2, [pc, #152]	; (80008d8 <MX_GPIO_Init+0xb8>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <MX_GPIO_Init+0xb8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_GPIO_Init+0xb8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <MX_GPIO_Init+0xb8>)
 800085c:	f043 0320 	orr.w	r3, r3, #32
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_GPIO_Init+0xb8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_GPIO_Init+0xb8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <MX_GPIO_Init+0xb8>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_GPIO_Init+0xb8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_GPIO_Init+0xb8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <MX_GPIO_Init+0xb8>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_GPIO_Init+0xb8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80008ac:	480b      	ldr	r0, [pc, #44]	; (80008dc <MX_GPIO_Init+0xbc>)
 80008ae:	f000 fc59 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80008b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0xbc>)
 80008cc:	f000 fab0 	bl	8000e30 <HAL_GPIO_Init>

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40021400 	.word	0x40021400

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <Error_Handler+0x6>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <HAL_MspInit+0x4c>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x4c>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a05      	ldr	r2, [pc, #20]	; (800095c <HAL_RTC_MspInit+0x24>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d102      	bne.n	8000950 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_RTC_MspInit+0x28>)
 800094c:	2201      	movs	r2, #1
 800094e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	40002800 	.word	0x40002800
 8000960:	42470e3c 	.word	0x42470e3c

08000964 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a05      	ldr	r2, [pc, #20]	; (8000988 <HAL_RTC_MspDeInit+0x24>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d102      	bne.n	800097c <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_RTC_MspDeInit+0x28>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	40002800 	.word	0x40002800
 800098c:	42470e3c 	.word	0x42470e3c

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f8d4 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <OTG_FS_IRQHandler+0x10>)
 80009ea:	f000 fd24 	bl	8001436 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20001740 	.word	0x20001740

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f006 f9f6 	bl	8006e18 <__errno>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	230c      	movs	r3, #12
 8000a30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20020000 	.word	0x20020000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	20000204 	.word	0x20000204
 8000a60:	20001b50 	.word	0x20001b50

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <SystemInit+0x28>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <SystemInit+0x28>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SystemInit+0x28>)
 8000a7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a96:	e003      	b.n	8000aa0 <LoopCopyDataInit>

08000a98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a9e:	3104      	adds	r1, #4

08000aa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000aa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000aa8:	d3f6      	bcc.n	8000a98 <CopyDataInit>
  ldr  r2, =_sbss
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000aac:	e002      	b.n	8000ab4 <LoopFillZerobss>

08000aae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ab0:	f842 3b04 	str.w	r3, [r2], #4

08000ab4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ab6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ab8:	d3f9      	bcc.n	8000aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aba:	f7ff ffd3 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f006 f9b1 	bl	8006e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fdd3 	bl	800066c <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000acc:	0800777c 	.word	0x0800777c
  ldr  r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ad4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000ad8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000adc:	20001b4c 	.word	0x20001b4c

08000ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <HAL_Init+0x40>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_Init+0x40>)
 8000afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x40>)
 8000b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f94d 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 f808 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fee6 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023c00 	.word	0x40023c00

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x54>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x58>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f965 	bl	8000e16 <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00e      	b.n	8000b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d80a      	bhi.n	8000b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b64:	f000 f92d 	bl	8000dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_InitTick+0x5c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	2000026c 	.word	0x2000026c

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	2000026c 	.word	0x2000026c

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff ffee 	bl	8000bb0 <HAL_GetTick>
 8000bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be0:	d005      	beq.n	8000bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_Delay+0x40>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4413      	add	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bee:	bf00      	nop
 8000bf0:	f7ff ffde 	bl	8000bb0 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f7      	bhi.n	8000bf0 <HAL_Delay+0x28>
  {
  }
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000008 	.word	0x20000008

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff29 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff3e 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff8e 	bl	8000d00 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5d 	bl	8000cac <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff31 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffa2 	bl	8000d68 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e16b      	b.n	8001124 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 815a 	bne.w	800111e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d00b      	beq.n	8000e8a <HAL_GPIO_Init+0x5a>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d007      	beq.n	8000e8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e7e:	2b11      	cmp	r3, #17
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d130      	bne.n	8000eec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0xfc>
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b12      	cmp	r3, #18
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80b4 	beq.w	800111e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b5f      	ldr	r3, [pc, #380]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a5e      	ldr	r2, [pc, #376]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b5c      	ldr	r3, [pc, #368]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a5a      	ldr	r2, [pc, #360]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a51      	ldr	r2, [pc, #324]	; (8001140 <HAL_GPIO_Init+0x310>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x226>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a50      	ldr	r2, [pc, #320]	; (8001144 <HAL_GPIO_Init+0x314>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x222>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4f      	ldr	r2, [pc, #316]	; (8001148 <HAL_GPIO_Init+0x318>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x21e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4e      	ldr	r2, [pc, #312]	; (800114c <HAL_GPIO_Init+0x31c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4d      	ldr	r2, [pc, #308]	; (8001150 <HAL_GPIO_Init+0x320>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4c      	ldr	r2, [pc, #304]	; (8001154 <HAL_GPIO_Init+0x324>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4b      	ldr	r2, [pc, #300]	; (8001158 <HAL_GPIO_Init+0x328>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4a      	ldr	r2, [pc, #296]	; (800115c <HAL_GPIO_Init+0x32c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x20a>
 8001036:	2307      	movs	r3, #7
 8001038:	e00e      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103a:	2308      	movs	r3, #8
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103e:	2306      	movs	r3, #6
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4934      	ldr	r1, [pc, #208]	; (800113c <HAL_GPIO_Init+0x30c>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001076:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <HAL_GPIO_Init+0x330>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109a:	4a31      	ldr	r2, [pc, #196]	; (8001160 <HAL_GPIO_Init+0x330>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a0:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c4:	4a26      	ldr	r2, [pc, #152]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001118:	4a11      	ldr	r2, [pc, #68]	; (8001160 <HAL_GPIO_Init+0x330>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f ae90 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	3724      	adds	r7, #36	; 0x24
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40021400 	.word	0x40021400
 8001158:	40021800 	.word	0x40021800
 800115c:	40021c00 	.word	0x40021c00
 8001160:	40013c00 	.word	0x40013c00

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001180:	e003      	b.n	800118a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	041a      	lsls	r2, r3, #16
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001196:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001198:	b08f      	sub	sp, #60	; 0x3c
 800119a:	af0a      	add	r7, sp, #40	; 0x28
 800119c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e10f      	b.n	80013c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d106      	bne.n	80011c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f005 fb2c 	bl	8006820 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2203      	movs	r2, #3
 80011cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 fb4f 	bl	800388a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	687e      	ldr	r6, [r7, #4]
 80011f4:	466d      	mov	r5, sp
 80011f6:	f106 0410 	add.w	r4, r6, #16
 80011fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001202:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001206:	e885 0003 	stmia.w	r5, {r0, r1}
 800120a:	1d33      	adds	r3, r6, #4
 800120c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f002 fa27 	bl	8003662 <USB_CoreInit>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2202      	movs	r2, #2
 800121e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e0d0      	b.n	80013c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fb3d 	bl	80038ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e04a      	b.n	80012ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	1a9b      	subs	r3, r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	333d      	adds	r3, #61	; 0x3d
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	333c      	adds	r3, #60	; 0x3c
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	b298      	uxth	r0, r3
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3342      	adds	r3, #66	; 0x42
 8001274:	4602      	mov	r2, r0
 8001276:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	333f      	adds	r3, #63	; 0x3f
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	3344      	adds	r3, #68	; 0x44
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	3348      	adds	r3, #72	; 0x48
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	3350      	adds	r3, #80	; 0x50
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	3301      	adds	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d3af      	bcc.n	8001238 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e044      	b.n	8001368 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	1a9b      	subs	r3, r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800130a:	7bfa      	ldrb	r2, [r7, #15]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	1a9b      	subs	r3, r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	1a9b      	subs	r3, r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	3301      	adds	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	429a      	cmp	r2, r3
 8001370:	d3b5      	bcc.n	80012de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	687e      	ldr	r6, [r7, #4]
 800137a:	466d      	mov	r5, sp
 800137c:	f106 0410 	add.w	r4, r6, #16
 8001380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001388:	e894 0003 	ldmia.w	r4, {r0, r1}
 800138c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001390:	1d33      	adds	r3, r6, #4
 8001392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001394:	6838      	ldr	r0, [r7, #0]
 8001396:	f002 fab3 	bl	8003900 <USB_DevInit>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2202      	movs	r2, #2
 80013a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e00d      	b.n	80013c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fafb 	bl	80049bc <USB_DevDisconnect>

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_PCD_Start+0x1c>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e020      	b.n	800142e <HAL_PCD_Start+0x5e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d109      	bne.n	8001410 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001400:	2b01      	cmp	r3, #1
 8001402:	d005      	beq.n	8001410 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f002 fa27 	bl	8003868 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f003 faab 	bl	800497a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001436:	b590      	push	{r4, r7, lr}
 8001438:	b08d      	sub	sp, #52	; 0x34
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f003 fb69 	bl	8004b24 <USB_GetMode>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	f040 839d 	bne.w	8001b94 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f003 facd 	bl	80049fe <USB_ReadInterrupts>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8393 	beq.w	8001b92 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f003 fac4 	bl	80049fe <USB_ReadInterrupts>
 8001476:	4603      	mov	r3, r0
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b02      	cmp	r3, #2
 800147e:	d107      	bne.n	8001490 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f002 0202 	and.w	r2, r2, #2
 800148e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f003 fab2 	bl	80049fe <USB_ReadInterrupts>
 800149a:	4603      	mov	r3, r0
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b10      	cmp	r3, #16
 80014a2:	d161      	bne.n	8001568 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0210 	bic.w	r2, r2, #16
 80014b2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	f003 020f 	and.w	r2, r3, #15
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	4413      	add	r3, r2
 80014d0:	3304      	adds	r3, #4
 80014d2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	0c5b      	lsrs	r3, r3, #17
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d124      	bne.n	800152a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d035      	beq.n	8001558 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	6a38      	ldr	r0, [r7, #32]
 8001500:	f003 f918 	bl	8004734 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001510:	441a      	add	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001522:	441a      	add	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	e016      	b.n	8001558 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	0c5b      	lsrs	r3, r3, #17
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	2b06      	cmp	r3, #6
 8001534:	d110      	bne.n	8001558 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800153c:	2208      	movs	r2, #8
 800153e:	4619      	mov	r1, r3
 8001540:	6a38      	ldr	r0, [r7, #32]
 8001542:	f003 f8f7 	bl	8004734 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001552:	441a      	add	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0210 	orr.w	r2, r2, #16
 8001566:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f003 fa46 	bl	80049fe <USB_ReadInterrupts>
 8001572:	4603      	mov	r3, r0
 8001574:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001578:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800157c:	d16e      	bne.n	800165c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fa4c 	bl	8004a24 <USB_ReadDevAllOutEpInterrupt>
 800158c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800158e:	e062      	b.n	8001656 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d057      	beq.n	800164a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 fa71 	bl	8004a8c <USB_ReadDevOutEPInterrupt>
 80015aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00c      	beq.n	80015d0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	015a      	lsls	r2, r3, #5
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015c2:	461a      	mov	r2, r3
 80015c4:	2301      	movs	r3, #1
 80015c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 fdb0 	bl	8002130 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00c      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015e6:	461a      	mov	r2, r3
 80015e8:	2308      	movs	r3, #8
 80015ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 feaa 	bl	8002348 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160a:	461a      	mov	r2, r3
 800160c:	2310      	movs	r3, #16
 800160e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001626:	461a      	mov	r2, r3
 8001628:	2320      	movs	r3, #32
 800162a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d009      	beq.n	800164a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	015a      	lsls	r2, r3, #5
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	4413      	add	r3, r2
 800163e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001642:	461a      	mov	r2, r3
 8001644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001648:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	3301      	adds	r3, #1
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	2b00      	cmp	r3, #0
 800165a:	d199      	bne.n	8001590 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f003 f9cc 	bl	80049fe <USB_ReadInterrupts>
 8001666:	4603      	mov	r3, r0
 8001668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001670:	f040 80c0 	bne.w	80017f4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f003 f9ed 	bl	8004a58 <USB_ReadDevAllInEpInterrupt>
 800167e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001684:	e0b2      	b.n	80017ec <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a7 	beq.w	80017e0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f003 fa13 	bl	8004ac8 <USB_ReadDevInEPInterrupt>
 80016a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d057      	beq.n	800175e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	2201      	movs	r2, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69f9      	ldr	r1, [r7, #28]
 80016ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016ce:	4013      	ands	r3, r2
 80016d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016de:	461a      	mov	r2, r3
 80016e0:	2301      	movs	r3, #1
 80016e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d132      	bne.n	8001752 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f0:	4613      	mov	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	1a9b      	subs	r3, r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	3348      	adds	r3, #72	; 0x48
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4403      	add	r3, r0
 800170c:	3344      	adds	r3, #68	; 0x44
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4419      	add	r1, r3
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4403      	add	r3, r0
 8001720:	3348      	adds	r3, #72	; 0x48
 8001722:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	2b00      	cmp	r3, #0
 8001728:	d113      	bne.n	8001752 <HAL_PCD_IRQHandler+0x31c>
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	1a9b      	subs	r3, r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	3350      	adds	r3, #80	; 0x50
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d108      	bne.n	8001752 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800174a:	461a      	mov	r2, r3
 800174c:	2101      	movs	r1, #1
 800174e:	f003 fa1b 	bl	8004b88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f005 f8e2 	bl	8006922 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	015a      	lsls	r2, r3, #5
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	4413      	add	r3, r2
 8001770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001774:	461a      	mov	r2, r3
 8001776:	2308      	movs	r3, #8
 8001778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001790:	461a      	mov	r2, r3
 8001792:	2310      	movs	r3, #16
 8001794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ac:	461a      	mov	r2, r3
 80017ae:	2340      	movs	r3, #64	; 0x40
 80017b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d008      	beq.n	80017ce <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	015a      	lsls	r2, r3, #5
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	4413      	add	r3, r2
 80017c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c8:	461a      	mov	r2, r3
 80017ca:	2302      	movs	r3, #2
 80017cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fc1b 	bl	8002016 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	3301      	adds	r3, #1
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f47f af49 	bne.w	8001686 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 f900 	bl	80049fe <USB_ReadInterrupts>
 80017fe:	4603      	mov	r3, r0
 8001800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001808:	d122      	bne.n	8001850 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001824:	2b01      	cmp	r3, #1
 8001826:	d108      	bne.n	800183a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001830:	2100      	movs	r1, #0
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fe26 	bl	8002484 <HAL_PCDEx_LPM_Callback>
 8001838:	e002      	b.n	8001840 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f005 f8e8 	bl	8006a10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800184e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f003 f8d2 	bl	80049fe <USB_ReadInterrupts>
 800185a:	4603      	mov	r3, r0
 800185c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001864:	d112      	bne.n	800188c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b01      	cmp	r3, #1
 8001874:	d102      	bne.n	800187c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f005 f8a4 	bl	80069c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800188a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f003 f8b4 	bl	80049fe <USB_ReadInterrupts>
 8001896:	4603      	mov	r3, r0
 8001898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a0:	f040 80c7 	bne.w	8001a32 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2110      	movs	r1, #16
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 f982 	bl	8003bc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c8:	e056      	b.n	8001978 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018d6:	461a      	mov	r2, r3
 80018d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ee:	0151      	lsls	r1, r2, #5
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	440a      	add	r2, r1
 80018f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018fc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190e:	0151      	lsls	r1, r2, #5
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	440a      	add	r2, r1
 8001914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800191c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001920:	015a      	lsls	r2, r3, #5
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	4413      	add	r3, r2
 8001926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192a:	461a      	mov	r2, r3
 800192c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001930:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001942:	0151      	lsls	r1, r2, #5
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	440a      	add	r2, r1
 8001948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800194c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001950:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	015a      	lsls	r2, r3, #5
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	4413      	add	r3, r2
 800195a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001962:	0151      	lsls	r1, r2, #5
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	440a      	add	r2, r1
 8001968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800196c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001970:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001974:	3301      	adds	r3, #1
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197e:	429a      	cmp	r2, r3
 8001980:	d3a3      	bcc.n	80018ca <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001990:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001994:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	2b00      	cmp	r3, #0
 800199c:	d016      	beq.n	80019cc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ae:	f043 030b 	orr.w	r3, r3, #11
 80019b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c4:	f043 030b 	orr.w	r3, r3, #11
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	e015      	b.n	80019f8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f2:	f043 030b 	orr.w	r3, r3, #11
 80019f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f003 f8b3 	bl	8004b88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 ffe1 	bl	80049fe <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a46:	d124      	bne.n	8001a92 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f003 f877 	bl	8004b40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 f917 	bl	8003c8a <USB_GetDevSpeed>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681c      	ldr	r4, [r3, #0]
 8001a68:	f001 f946 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8001a6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	4620      	mov	r0, r4
 8001a78:	f001 fe54 	bl	8003724 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f004 ff78 	bl	8006972 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 ffb1 	bl	80049fe <USB_ReadInterrupts>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d10a      	bne.n	8001abc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f004 ff55 	bl	8006956 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f002 0208 	and.w	r2, r2, #8
 8001aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 ff9c 	bl	80049fe <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ad0:	d10f      	bne.n	8001af2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f004 ffb7 	bl	8006a50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 ff81 	bl	80049fe <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b06:	d10f      	bne.n	8001b28 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f004 ff8a 	bl	8006a2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 ff66 	bl	80049fe <USB_ReadInterrupts>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3c:	d10a      	bne.n	8001b54 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f004 ff98 	bl	8006a74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 ff50 	bl	80049fe <USB_ReadInterrupts>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d115      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f004 ff88 	bl	8006a90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6859      	ldr	r1, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	e000      	b.n	8001b94 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001b92:	bf00      	nop
    }
  }
}
 8001b94:	3734      	adds	r7, #52	; 0x34
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}

08001b9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_PCD_SetAddress+0x1a>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e013      	b.n	8001bdc <HAL_PCD_SetAddress+0x42>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 feae 	bl	800492e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	70fb      	strb	r3, [r7, #3]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	803b      	strh	r3, [r7, #0]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	da0f      	bge.n	8001c2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 020f 	and.w	r2, r3, #15
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	3338      	adds	r3, #56	; 0x38
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3304      	adds	r3, #4
 8001c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	705a      	strb	r2, [r3, #1]
 8001c28:	e00f      	b.n	8001c4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	f003 020f 	and.w	r2, r3, #15
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	3304      	adds	r3, #4
 8001c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c56:	883a      	ldrh	r2, [r7, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	78ba      	ldrb	r2, [r7, #2]
 8001c60:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	785b      	ldrb	r3, [r3, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c74:	78bb      	ldrb	r3, [r7, #2]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d102      	bne.n	8001c80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_PCD_EP_Open+0xaa>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e00e      	b.n	8001cac <HAL_PCD_EP_Open+0xc8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68f9      	ldr	r1, [r7, #12]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 f819 	bl	8003cd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001caa:	7afb      	ldrb	r3, [r7, #11]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	da0f      	bge.n	8001ce8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 020f 	and.w	r2, r3, #15
 8001cce:	4613      	mov	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	3338      	adds	r3, #56	; 0x38
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	705a      	strb	r2, [r3, #1]
 8001ce6:	e00f      	b.n	8001d08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	f003 020f 	and.w	r2, r3, #15
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_PCD_EP_Close+0x6e>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e00e      	b.n	8001d40 <HAL_PCD_EP_Close+0x8c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68f9      	ldr	r1, [r7, #12]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 f857 	bl	8003de4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	460b      	mov	r3, r1
 8001d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	f003 020f 	and.w	r2, r3, #15
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3304      	adds	r3, #4
 8001d70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2200      	movs	r2, #0
 8001d88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8a:	7afb      	ldrb	r3, [r7, #11]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d102      	bne.n	8001da4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da4:	7afb      	ldrb	r3, [r7, #11]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	6979      	ldr	r1, [r7, #20]
 8001dbc:	f002 fb32 	bl	8004424 <USB_EP0StartXfer>
 8001dc0:	e008      	b.n	8001dd4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	6979      	ldr	r1, [r7, #20]
 8001dd0:	f002 f8e4 	bl	8003f9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 020f 	and.w	r2, r3, #15
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e00:	681b      	ldr	r3, [r3, #0]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1e:	7afb      	ldrb	r3, [r7, #11]
 8001e20:	f003 020f 	and.w	r2, r3, #15
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	3338      	adds	r3, #56	; 0x38
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4413      	add	r3, r2
 8001e32:	3304      	adds	r3, #4
 8001e34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e68:	7afb      	ldrb	r3, [r7, #11]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6979      	ldr	r1, [r7, #20]
 8001e80:	f002 fad0 	bl	8004424 <USB_EP0StartXfer>
 8001e84:	e008      	b.n	8001e98 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	6979      	ldr	r1, [r7, #20]
 8001e94:	f002 f882 	bl	8003f9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	f003 020f 	and.w	r2, r3, #15
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d901      	bls.n	8001ec0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e050      	b.n	8001f62 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	da0f      	bge.n	8001ee8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 020f 	and.w	r2, r3, #15
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	3338      	adds	r3, #56	; 0x38
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	3304      	adds	r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	705a      	strb	r2, [r3, #1]
 8001ee6:	e00d      	b.n	8001f04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	3304      	adds	r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_PCD_EP_SetStall+0x82>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e01e      	b.n	8001f62 <HAL_PCD_EP_SetStall+0xc0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68f9      	ldr	r1, [r7, #12]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fc27 	bl	8004786 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	b2d9      	uxtb	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f52:	461a      	mov	r2, r3
 8001f54:	f002 fe18 	bl	8004b88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d901      	bls.n	8001f88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e042      	b.n	800200e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da0f      	bge.n	8001fb0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	f003 020f 	and.w	r2, r3, #15
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	3338      	adds	r3, #56	; 0x38
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2201      	movs	r2, #1
 8001fac:	705a      	strb	r2, [r3, #1]
 8001fae:	e00f      	b.n	8001fd0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 020f 	and.w	r2, r3, #15
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_PCD_EP_ClrStall+0x86>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e00e      	b.n	800200e <HAL_PCD_EP_ClrStall+0xa4>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 fc2f 	bl	8004862 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b08a      	sub	sp, #40	; 0x28
 800201a:	af02      	add	r7, sp, #8
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	3338      	adds	r3, #56	; 0x38
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	429a      	cmp	r2, r3
 8002048:	d901      	bls.n	800204e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06c      	b.n	8002128 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	429a      	cmp	r2, r3
 8002062:	d902      	bls.n	800206a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3303      	adds	r3, #3
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002072:	e02b      	b.n	80020cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	429a      	cmp	r2, r3
 8002088:	d902      	bls.n	8002090 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3303      	adds	r3, #3
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68d9      	ldr	r1, [r3, #12]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	4603      	mov	r3, r0
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f002 fb0b 	bl	80046ca <USB_WritePacket>

    ep->xfer_buff  += len;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	441a      	add	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	441a      	add	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d809      	bhi.n	80020f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d203      	bcs.n	80020f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1be      	bne.n	8002074 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d811      	bhi.n	8002126 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	2201      	movs	r2, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	43db      	mvns	r3, r3
 800211c:	6939      	ldr	r1, [r7, #16]
 800211e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002122:	4013      	ands	r3, r2
 8002124:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	333c      	adds	r3, #60	; 0x3c
 8002148:	3304      	adds	r3, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b01      	cmp	r3, #1
 8002164:	f040 80a0 	bne.w	80022a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d015      	beq.n	800219e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4a72      	ldr	r2, [pc, #456]	; (8002340 <PCD_EP_OutXfrComplete_int+0x210>)
 8002176:	4293      	cmp	r3, r2
 8002178:	f240 80dd 	bls.w	8002336 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80d7 	beq.w	8002336 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002194:	461a      	mov	r2, r3
 8002196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800219a:	6093      	str	r3, [r2, #8]
 800219c:	e0cb      	b.n	8002336 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b4:	461a      	mov	r2, r3
 80021b6:	2320      	movs	r3, #32
 80021b8:	6093      	str	r3, [r2, #8]
 80021ba:	e0bc      	b.n	8002336 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 80b7 	bne.w	8002336 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a5d      	ldr	r2, [pc, #372]	; (8002340 <PCD_EP_OutXfrComplete_int+0x210>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d90f      	bls.n	80021f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	461a      	mov	r2, r3
 80021e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ec:	6093      	str	r3, [r2, #8]
 80021ee:	e0a2      	b.n	8002336 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002202:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	0159      	lsls	r1, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	440b      	add	r3, r1
 800220c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002216:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4403      	add	r3, r0
 8002226:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800222a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4403      	add	r3, r0
 800224e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4419      	add	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4403      	add	r3, r0
 8002264:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002268:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d114      	bne.n	800229a <PCD_EP_OutXfrComplete_int+0x16a>
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d108      	bne.n	800229a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002292:	461a      	mov	r2, r3
 8002294:	2101      	movs	r1, #1
 8002296:	f002 fc77 	bl	8004b88 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f004 fb23 	bl	80068ec <HAL_PCD_DataOutStageCallback>
 80022a6:	e046      	b.n	8002336 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a26      	ldr	r2, [pc, #152]	; (8002344 <PCD_EP_OutXfrComplete_int+0x214>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d124      	bne.n	80022fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c6:	461a      	mov	r2, r3
 80022c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022cc:	6093      	str	r3, [r2, #8]
 80022ce:	e032      	b.n	8002336 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e6:	461a      	mov	r2, r3
 80022e8:	2320      	movs	r3, #32
 80022ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f004 fafa 	bl	80068ec <HAL_PCD_DataOutStageCallback>
 80022f8:	e01d      	b.n	8002336 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d114      	bne.n	800232a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d108      	bne.n	800232a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002322:	461a      	mov	r2, r3
 8002324:	2100      	movs	r1, #0
 8002326:	f002 fc2f 	bl	8004b88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f004 fadb 	bl	80068ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	4f54300a 	.word	0x4f54300a
 8002344:	4f54310a 	.word	0x4f54310a

08002348 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	333c      	adds	r3, #60	; 0x3c
 8002360:	3304      	adds	r3, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d90e      	bls.n	800239c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002384:	2b00      	cmp	r3, #0
 8002386:	d009      	beq.n	800239c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002394:	461a      	mov	r2, r3
 8002396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800239a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f004 fa93 	bl	80068c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d90c      	bls.n	80023c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d108      	bne.n	80023c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023bc:	461a      	mov	r2, r3
 80023be:	2101      	movs	r1, #1
 80023c0:	f002 fbe2 	bl	8004b88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	4f54300a 	.word	0x4f54300a

080023d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
 80023e0:	4613      	mov	r3, r2
 80023e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d107      	bne.n	8002402 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023f2:	883b      	ldrh	r3, [r7, #0]
 80023f4:	0419      	lsls	r1, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002400:	e028      	b.n	8002454 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4413      	add	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e00d      	b.n	8002432 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	3340      	adds	r3, #64	; 0x40
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	0c1b      	lsrs	r3, r3, #16
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	4413      	add	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	3301      	adds	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	3b01      	subs	r3, #1
 8002438:	429a      	cmp	r2, r3
 800243a:	d3ec      	bcc.n	8002416 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800243c:	883b      	ldrh	r3, [r7, #0]
 800243e:	0418      	lsls	r0, r3, #16
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	3b01      	subs	r3, #1
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	4302      	orrs	r2, r0
 800244c:	3340      	adds	r3, #64	; 0x40
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e25b      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d075      	beq.n	80025a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ba:	4ba3      	ldr	r3, [pc, #652]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d00c      	beq.n	80024e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c6:	4ba0      	ldr	r3, [pc, #640]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d112      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4b9d      	ldr	r3, [pc, #628]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024de:	d10b      	bne.n	80024f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	4b99      	ldr	r3, [pc, #612]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d05b      	beq.n	80025a4 <HAL_RCC_OscConfig+0x108>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d157      	bne.n	80025a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e236      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x74>
 8002502:	4b91      	ldr	r3, [pc, #580]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a90      	ldr	r2, [pc, #576]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e01d      	b.n	800254c <HAL_RCC_OscConfig+0xb0>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x98>
 800251a:	4b8b      	ldr	r3, [pc, #556]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a8a      	ldr	r2, [pc, #552]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b88      	ldr	r3, [pc, #544]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a87      	ldr	r2, [pc, #540]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0xb0>
 8002534:	4b84      	ldr	r3, [pc, #528]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a83      	ldr	r2, [pc, #524]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 800253a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b81      	ldr	r3, [pc, #516]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a80      	ldr	r2, [pc, #512]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe fb2c 	bl	8000bb0 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255c:	f7fe fb28 	bl	8000bb0 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e1fb      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b76      	ldr	r3, [pc, #472]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0xc0>
 800257a:	e014      	b.n	80025a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe fb18 	bl	8000bb0 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002584:	f7fe fb14 	bl	8000bb0 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e1e7      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0xe8>
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d063      	beq.n	800267a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025b2:	4b65      	ldr	r3, [pc, #404]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025be:	4b62      	ldr	r3, [pc, #392]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d11c      	bne.n	8002604 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d116      	bne.n	8002604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	4b5c      	ldr	r3, [pc, #368]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_RCC_OscConfig+0x152>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e1bb      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b56      	ldr	r3, [pc, #344]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4952      	ldr	r1, [pc, #328]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	e03a      	b.n	800267a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260c:	4b4f      	ldr	r3, [pc, #316]	; (800274c <HAL_RCC_OscConfig+0x2b0>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe facd 	bl	8000bb0 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261a:	f7fe fac9 	bl	8000bb0 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e19c      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	4b46      	ldr	r3, [pc, #280]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b43      	ldr	r3, [pc, #268]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4940      	ldr	r1, [pc, #256]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
 800264c:	e015      	b.n	800267a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264e:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_RCC_OscConfig+0x2b0>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe faac 	bl	8000bb0 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe faa8 	bl	8000bb0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e17b      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d030      	beq.n	80026e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d016      	beq.n	80026bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268e:	4b30      	ldr	r3, [pc, #192]	; (8002750 <HAL_RCC_OscConfig+0x2b4>)
 8002690:	2201      	movs	r2, #1
 8002692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fa8c 	bl	8000bb0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269c:	f7fe fa88 	bl	8000bb0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e15b      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x200>
 80026ba:	e015      	b.n	80026e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026bc:	4b24      	ldr	r3, [pc, #144]	; (8002750 <HAL_RCC_OscConfig+0x2b4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c2:	f7fe fa75 	bl	8000bb0 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ca:	f7fe fa71 	bl	8000bb0 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e144      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80026de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a0 	beq.w	8002836 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_OscConfig+0x2b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d121      	bne.n	8002776 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_RCC_OscConfig+0x2b8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_RCC_OscConfig+0x2b8>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273e:	f7fe fa37 	bl	8000bb0 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	e011      	b.n	800276a <HAL_RCC_OscConfig+0x2ce>
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	42470000 	.word	0x42470000
 8002750:	42470e80 	.word	0x42470e80
 8002754:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002758:	f7fe fa2a 	bl	8000bb0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0fd      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b81      	ldr	r3, [pc, #516]	; (8002970 <HAL_RCC_OscConfig+0x4d4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d106      	bne.n	800278c <HAL_RCC_OscConfig+0x2f0>
 800277e:	4b7d      	ldr	r3, [pc, #500]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	4a7c      	ldr	r2, [pc, #496]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6713      	str	r3, [r2, #112]	; 0x70
 800278a:	e01c      	b.n	80027c6 <HAL_RCC_OscConfig+0x32a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b05      	cmp	r3, #5
 8002792:	d10c      	bne.n	80027ae <HAL_RCC_OscConfig+0x312>
 8002794:	4b77      	ldr	r3, [pc, #476]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4a76      	ldr	r2, [pc, #472]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	6713      	str	r3, [r2, #112]	; 0x70
 80027a0:	4b74      	ldr	r3, [pc, #464]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a73      	ldr	r2, [pc, #460]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	e00b      	b.n	80027c6 <HAL_RCC_OscConfig+0x32a>
 80027ae:	4b71      	ldr	r3, [pc, #452]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a70      	ldr	r2, [pc, #448]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ba:	4b6e      	ldr	r3, [pc, #440]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a6d      	ldr	r2, [pc, #436]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027c0:	f023 0304 	bic.w	r3, r3, #4
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d015      	beq.n	80027fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7fe f9ef 	bl	8000bb0 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7fe f9eb 	bl	8000bb0 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e0bc      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	4b61      	ldr	r3, [pc, #388]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ee      	beq.n	80027d6 <HAL_RCC_OscConfig+0x33a>
 80027f8:	e014      	b.n	8002824 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7fe f9d9 	bl	8000bb0 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe f9d5 	bl	8000bb0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0a6      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002818:	4b56      	ldr	r3, [pc, #344]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ee      	bne.n	8002802 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002824:	7dfb      	ldrb	r3, [r7, #23]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d105      	bne.n	8002836 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282a:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8092 	beq.w	8002964 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002840:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b08      	cmp	r3, #8
 800284a:	d05c      	beq.n	8002906 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d141      	bne.n	80028d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002854:	4b48      	ldr	r3, [pc, #288]	; (8002978 <HAL_RCC_OscConfig+0x4dc>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7fe f9a9 	bl	8000bb0 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002862:	f7fe f9a5 	bl	8000bb0 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e078      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002874:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f0      	bne.n	8002862 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	019b      	lsls	r3, r3, #6
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	3b01      	subs	r3, #1
 800289a:	041b      	lsls	r3, r3, #16
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	061b      	lsls	r3, r3, #24
 80028a4:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028aa:	4b33      	ldr	r3, [pc, #204]	; (8002978 <HAL_RCC_OscConfig+0x4dc>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe f97e 	bl	8000bb0 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b8:	f7fe f97a 	bl	8000bb0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x41c>
 80028d6:	e045      	b.n	8002964 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_RCC_OscConfig+0x4dc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe f967 	bl	8000bb0 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe f963 	bl	8000bb0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e036      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f8:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x44a>
 8002904:	e02e      	b.n	8002964 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e029      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_OscConfig+0x4d8>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	429a      	cmp	r2, r3
 8002924:	d11c      	bne.n	8002960 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d115      	bne.n	8002960 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800293a:	4013      	ands	r3, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002940:	4293      	cmp	r3, r2
 8002942:	d10d      	bne.n	8002960 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d106      	bne.n	8002960 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40007000 	.word	0x40007000
 8002974:	40023800 	.word	0x40023800
 8002978:	42470060 	.word	0x42470060

0800297c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0cc      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4b68      	ldr	r3, [pc, #416]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d90c      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b63      	ldr	r3, [pc, #396]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0b8      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d0:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a58      	ldr	r2, [pc, #352]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e8:	4b53      	ldr	r3, [pc, #332]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a52      	ldr	r2, [pc, #328]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f4:	4b50      	ldr	r3, [pc, #320]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	494d      	ldr	r1, [pc, #308]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d044      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d119      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e07f      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e06f      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e067      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4934      	ldr	r1, [pc, #208]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a6c:	f7fe f8a0 	bl	8000bb0 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fe f89c 	bl	8000bb0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e04f      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d20c      	bcs.n	8002ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e032      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4916      	ldr	r1, [pc, #88]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	490e      	ldr	r1, [pc, #56]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b02:	f000 f821 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 8002b06:	4601      	mov	r1, r0
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	5cd3      	ldrb	r3, [r2, r3]
 8002b16:	fa21 f303 	lsr.w	r3, r1, r3
 8002b1a:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe f800 	bl	8000b28 <HAL_InitTick>

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023c00 	.word	0x40023c00
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	08007728 	.word	0x08007728
 8002b40:	20000000 	.word	0x20000000
 8002b44:	20000004 	.word	0x20000004

08002b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	2300      	movs	r3, #0
 8002b58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b5e:	4b63      	ldr	r3, [pc, #396]	; (8002cec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d007      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0x32>
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d008      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x38>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 80b4 	bne.w	8002cdc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b5e      	ldr	r3, [pc, #376]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b76:	60bb      	str	r3, [r7, #8]
       break;
 8002b78:	e0b3      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b7a:	4b5e      	ldr	r3, [pc, #376]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b7c:	60bb      	str	r3, [r7, #8]
      break;
 8002b7e:	e0b0      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b80:	4b5a      	ldr	r3, [pc, #360]	; (8002cec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8a:	4b58      	ldr	r3, [pc, #352]	; (8002cec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d04a      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b96:	4b55      	ldr	r3, [pc, #340]	; (8002cec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	f04f 0400 	mov.w	r4, #0
 8002ba0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	ea03 0501 	and.w	r5, r3, r1
 8002bac:	ea04 0602 	and.w	r6, r4, r2
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	4632      	mov	r2, r6
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	f04f 0400 	mov.w	r4, #0
 8002bbc:	0154      	lsls	r4, r2, #5
 8002bbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bc2:	014b      	lsls	r3, r1, #5
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	1b49      	subs	r1, r1, r5
 8002bca:	eb62 0206 	sbc.w	r2, r2, r6
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	0194      	lsls	r4, r2, #6
 8002bd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bdc:	018b      	lsls	r3, r1, #6
 8002bde:	1a5b      	subs	r3, r3, r1
 8002be0:	eb64 0402 	sbc.w	r4, r4, r2
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	00e2      	lsls	r2, r4, #3
 8002bee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bf2:	00d9      	lsls	r1, r3, #3
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4614      	mov	r4, r2
 8002bf8:	195b      	adds	r3, r3, r5
 8002bfa:	eb44 0406 	adc.w	r4, r4, r6
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	0262      	lsls	r2, r4, #9
 8002c08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c0c:	0259      	lsls	r1, r3, #9
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4614      	mov	r4, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	4621      	mov	r1, r4
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f04f 0400 	mov.w	r4, #0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4623      	mov	r3, r4
 8002c20:	f7fd fb26 	bl	8000270 <__aeabi_uldivmod>
 8002c24:	4603      	mov	r3, r0
 8002c26:	460c      	mov	r4, r1
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e049      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2c:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	f04f 0400 	mov.w	r4, #0
 8002c36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	ea03 0501 	and.w	r5, r3, r1
 8002c42:	ea04 0602 	and.w	r6, r4, r2
 8002c46:	4629      	mov	r1, r5
 8002c48:	4632      	mov	r2, r6
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f04f 0400 	mov.w	r4, #0
 8002c52:	0154      	lsls	r4, r2, #5
 8002c54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c58:	014b      	lsls	r3, r1, #5
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	1b49      	subs	r1, r1, r5
 8002c60:	eb62 0206 	sbc.w	r2, r2, r6
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	f04f 0400 	mov.w	r4, #0
 8002c6c:	0194      	lsls	r4, r2, #6
 8002c6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c72:	018b      	lsls	r3, r1, #6
 8002c74:	1a5b      	subs	r3, r3, r1
 8002c76:	eb64 0402 	sbc.w	r4, r4, r2
 8002c7a:	f04f 0100 	mov.w	r1, #0
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	00e2      	lsls	r2, r4, #3
 8002c84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c88:	00d9      	lsls	r1, r3, #3
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	195b      	adds	r3, r3, r5
 8002c90:	eb44 0406 	adc.w	r4, r4, r6
 8002c94:	f04f 0100 	mov.w	r1, #0
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	02a2      	lsls	r2, r4, #10
 8002c9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ca2:	0299      	lsls	r1, r3, #10
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4614      	mov	r4, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	4621      	mov	r1, r4
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f04f 0400 	mov.w	r4, #0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	f7fd fadb 	bl	8000270 <__aeabi_uldivmod>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	60bb      	str	r3, [r7, #8]
      break;
 8002cda:	e002      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cde:	60bb      	str	r3, [r7, #8]
      break;
 8002ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	00f42400 	.word	0x00f42400
 8002cf4:	007a1200 	.word	0x007a1200

08002cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000000 	.word	0x20000000

08002d10 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d035      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d38:	4b62      	ldr	r3, [pc, #392]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d3e:	f7fd ff37 	bl	8000bb0 <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d46:	f7fd ff33 	bl	8000bb0 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e0b0      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d58:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	019a      	lsls	r2, r3, #6
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	071b      	lsls	r3, r3, #28
 8002d70:	4955      	ldr	r1, [pc, #340]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d78:	4b52      	ldr	r3, [pc, #328]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d7e:	f7fd ff17 	bl	8000bb0 <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d86:	f7fd ff13 	bl	8000bb0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e090      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d98:	4b4b      	ldr	r3, [pc, #300]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8083 	beq.w	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a43      	ldr	r2, [pc, #268]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc2:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002dce:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a3e      	ldr	r2, [pc, #248]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dda:	f7fd fee9 	bl	8000bb0 <HAL_GetTick>
 8002dde:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002de2:	f7fd fee5 	bl	8000bb0 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e062      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e00:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d02f      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d028      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e1e:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e28:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e2e:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e34:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d114      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fd feb3 	bl	8000bb0 <HAL_GetTick>
 8002e4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fd feaf 	bl	8000bb0 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e02a      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ee      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e7c:	d10d      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e92:	490d      	ldr	r1, [pc, #52]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
 8002e98:	e005      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ea0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ea4:	6093      	str	r3, [r2, #8]
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ea8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb2:	4905      	ldr	r1, [pc, #20]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	42470068 	.word	0x42470068
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	42470e40 	.word	0x42470e40

08002ed4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0a4      	b.n	8003030 <HAL_RTC_Init+0x15c>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7f5b      	ldrb	r3, [r3, #29]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d126      	bne.n	8002f3e <HAL_RTC_Init+0x6a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4f      	ldr	r2, [pc, #316]	; (8003038 <HAL_RTC_Init+0x164>)
 8002efa:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a4f      	ldr	r2, [pc, #316]	; (800303c <HAL_RTC_Init+0x168>)
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4e      	ldr	r2, [pc, #312]	; (8003040 <HAL_RTC_Init+0x16c>)
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a4e      	ldr	r2, [pc, #312]	; (8003044 <HAL_RTC_Init+0x170>)
 8002f0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4d      	ldr	r2, [pc, #308]	; (8003048 <HAL_RTC_Init+0x174>)
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a4d      	ldr	r2, [pc, #308]	; (800304c <HAL_RTC_Init+0x178>)
 8002f18:	635a      	str	r2, [r3, #52]	; 0x34

    if(hrtc->MspInitCallback == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <HAL_RTC_Init+0x54>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <HAL_RTC_Init+0x17c>)
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3

    if(hrtc->MspDeInitCallback == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <HAL_RTC_Init+0x6a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a46      	ldr	r2, [pc, #280]	; (8003054 <HAL_RTC_Init+0x180>)
 8002f3c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2202      	movs	r2, #2
 8002f42:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	22ca      	movs	r2, #202	; 0xca
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2253      	movs	r2, #83	; 0x53
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fab8 	bl	80034ca <RTC_EnterInitMode>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RTC_Init+0x9e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	22ff      	movs	r2, #255	; 0xff
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e05e      	b.n	8003030 <HAL_RTC_Init+0x15c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f84:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6899      	ldr	r1, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68d2      	ldr	r2, [r2, #12]
 8002fac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6919      	ldr	r1, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	041a      	lsls	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10e      	bne.n	8002ffe <HAL_RTC_Init+0x12a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fa4a 	bl	800347a <HAL_RTC_WaitForSynchro>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RTC_Init+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	22ff      	movs	r2, #255	; 0xff
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e018      	b.n	8003030 <HAL_RTC_Init+0x15c>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699a      	ldr	r2, [r3, #24]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	22ff      	movs	r2, #255	; 0xff
 8003026:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800302e:	2300      	movs	r3, #0
  }
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	0800064d 	.word	0x0800064d
 800303c:	0800364f 	.word	0x0800364f
 8003040:	0800359b 	.word	0x0800359b
 8003044:	080035d7 	.word	0x080035d7
 8003048:	080035af 	.word	0x080035af
 800304c:	080035c3 	.word	0x080035c3
 8003050:	08000939 	.word	0x08000939
 8003054:	08000965 	.word	0x08000965

08003058 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	7f1b      	ldrb	r3, [r3, #28]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_RTC_SetTime+0x1c>
 8003070:	2302      	movs	r3, #2
 8003072:	e0aa      	b.n	80031ca <HAL_RTC_SetTime+0x172>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2202      	movs	r2, #2
 800307e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d126      	bne.n	80030d4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2200      	movs	r2, #0
 8003098:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fa3f 	bl	8003522 <RTC_ByteToBcd2>
 80030a4:	4603      	mov	r3, r0
 80030a6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	785b      	ldrb	r3, [r3, #1]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fa38 	bl	8003522 <RTC_ByteToBcd2>
 80030b2:	4603      	mov	r3, r0
 80030b4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030b6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	789b      	ldrb	r3, [r3, #2]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fa30 	bl	8003522 <RTC_ByteToBcd2>
 80030c2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80030c4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	78db      	ldrb	r3, [r3, #3]
 80030cc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e018      	b.n	8003106 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2200      	movs	r2, #0
 80030e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	785b      	ldrb	r3, [r3, #1]
 80030f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030f4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80030fa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	78db      	ldrb	r3, [r3, #3]
 8003100:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	22ca      	movs	r2, #202	; 0xca
 800310c:	625a      	str	r2, [r3, #36]	; 0x24
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2253      	movs	r2, #83	; 0x53
 8003114:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f9d7 	bl	80034ca <RTC_EnterInitMode>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	22ff      	movs	r2, #255	; 0xff
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2204      	movs	r2, #4
 800312e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e047      	b.n	80031ca <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003144:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003148:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003158:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6899      	ldr	r1, [r3, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	431a      	orrs	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003180:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d111      	bne.n	80031b4 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f972 	bl	800347a <HAL_RTC_WaitForSynchro>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	22ff      	movs	r2, #255	; 0xff
 80031a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2204      	movs	r2, #4
 80031a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e00a      	b.n	80031ca <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	22ff      	movs	r2, #255	; 0xff
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80031c8:	2300      	movs	r3, #0
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd90      	pop	{r4, r7, pc}

080031d2 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003204:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003208:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003214:	b2da      	uxtb	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003224:	b2da      	uxtb	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	0c1b      	lsrs	r3, r3, #16
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003242:	b2da      	uxtb	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d11a      	bne.n	8003284 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f983 	bl	800355e <RTC_Bcd2ToByte>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f97a 	bl	800355e <RTC_Bcd2ToByte>
 800326a:	4603      	mov	r3, r0
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	789b      	ldrb	r3, [r3, #2]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f971 	bl	800355e <RTC_Bcd2ToByte>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800328e:	b590      	push	{r4, r7, lr}
 8003290:	b087      	sub	sp, #28
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	7f1b      	ldrb	r3, [r3, #28]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_RTC_SetDate+0x1c>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e094      	b.n	80033d4 <HAL_RTC_SetDate+0x146>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2202      	movs	r2, #2
 80032b4:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10e      	bne.n	80032da <HAL_RTC_SetDate+0x4c>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	785b      	ldrb	r3, [r3, #1]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	785b      	ldrb	r3, [r3, #1]
 80032cc:	f023 0310 	bic.w	r3, r3, #16
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	330a      	adds	r3, #10
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d11c      	bne.n	800331a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	78db      	ldrb	r3, [r3, #3]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f91c 	bl	8003522 <RTC_ByteToBcd2>
 80032ea:	4603      	mov	r3, r0
 80032ec:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	785b      	ldrb	r3, [r3, #1]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f915 	bl	8003522 <RTC_ByteToBcd2>
 80032f8:	4603      	mov	r3, r0
 80032fa:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80032fc:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	789b      	ldrb	r3, [r3, #2]
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f90d 	bl	8003522 <RTC_ByteToBcd2>
 8003308:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800330a:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	e00e      	b.n	8003338 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	78db      	ldrb	r3, [r3, #3]
 800331e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	785b      	ldrb	r3, [r3, #1]
 8003324:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003326:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800332c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	22ca      	movs	r2, #202	; 0xca
 800333e:	625a      	str	r2, [r3, #36]	; 0x24
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2253      	movs	r2, #83	; 0x53
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f8be 	bl	80034ca <RTC_EnterInitMode>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00b      	beq.n	800336c <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	22ff      	movs	r2, #255	; 0xff
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2204      	movs	r2, #4
 8003360:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e033      	b.n	80033d4 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003376:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800337a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800338a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d111      	bne.n	80033be <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f86d 	bl	800347a <HAL_RTC_WaitForSynchro>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	22ff      	movs	r2, #255	; 0xff
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2204      	movs	r2, #4
 80033b2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00a      	b.n	80033d4 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	22ff      	movs	r2, #255	; 0xff
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80033d2:	2300      	movs	r3, #0
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	371c      	adds	r7, #28
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd90      	pop	{r4, r7, pc}

080033dc <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	0c1b      	lsrs	r3, r3, #16
 8003400:	b2da      	uxtb	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	b2da      	uxtb	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800341e:	b2da      	uxtb	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	0b5b      	lsrs	r3, r3, #13
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	b2da      	uxtb	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11a      	bne.n	8003470 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	78db      	ldrb	r3, [r3, #3]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f88d 	bl	800355e <RTC_Bcd2ToByte>
 8003444:	4603      	mov	r3, r0
 8003446:	461a      	mov	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f884 	bl	800355e <RTC_Bcd2ToByte>
 8003456:	4603      	mov	r3, r0
 8003458:	461a      	mov	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	789b      	ldrb	r3, [r3, #2]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 f87b 	bl	800355e <RTC_Bcd2ToByte>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003494:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003496:	f7fd fb8b 	bl	8000bb0 <HAL_GetTick>
 800349a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800349c:	e009      	b.n	80034b2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800349e:	f7fd fb87 	bl	8000bb0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ac:	d901      	bls.n	80034b2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e007      	b.n	80034c2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ee      	beq.n	800349e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d119      	bne.n	8003518 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ee:	f7fd fb5f 	bl	8000bb0 <HAL_GetTick>
 80034f2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80034f4:	e009      	b.n	800350a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80034f6:	f7fd fb5b 	bl	8000bb0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003504:	d901      	bls.n	800350a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e007      	b.n	800351a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ee      	beq.n	80034f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003530:	e005      	b.n	800353e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3301      	adds	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	3b0a      	subs	r3, #10
 800353c:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	2b09      	cmp	r3, #9
 8003542:	d8f6      	bhi.n	8003532 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	b2da      	uxtb	r2, r3
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	4313      	orrs	r3, r2
 8003550:	b2db      	uxtb	r3, r3
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	4413      	add	r3, r2
 800358c:	b2db      	uxtb	r3, r3
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_TimeStampEventCallback could be implemented in the user file
  */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper1EventCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper2EventCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b087      	sub	sp, #28
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3350      	adds	r3, #80	; 0x50
 8003600:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4413      	add	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3350      	adds	r3, #80	; 0x50
 8003632:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003662:	b084      	sub	sp, #16
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	f107 001c 	add.w	r0, r7, #28
 8003670:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	2b01      	cmp	r3, #1
 8003678:	d122      	bne.n	80036c0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800368e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d105      	bne.n	80036b4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f001 fac5 	bl	8004c44 <USB_CoreReset>
 80036ba:	4603      	mov	r3, r0
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	e01a      	b.n	80036f6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f001 fab9 	bl	8004c44 <USB_CoreReset>
 80036d2:	4603      	mov	r3, r0
 80036d4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
 80036e8:	e005      	b.n	80036f6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10b      	bne.n	8003714 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f043 0206 	orr.w	r2, r3, #6
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f043 0220 	orr.w	r2, r3, #32
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003720:	b004      	add	sp, #16
 8003722:	4770      	bx	lr

08003724 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	4613      	mov	r3, r2
 8003730:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d165      	bne.n	8003804 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4a41      	ldr	r2, [pc, #260]	; (8003840 <USB_SetTurnaroundTime+0x11c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d906      	bls.n	800374e <USB_SetTurnaroundTime+0x2a>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4a40      	ldr	r2, [pc, #256]	; (8003844 <USB_SetTurnaroundTime+0x120>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d802      	bhi.n	800374e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003748:	230f      	movs	r3, #15
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e062      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <USB_SetTurnaroundTime+0x120>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d906      	bls.n	8003764 <USB_SetTurnaroundTime+0x40>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4a3b      	ldr	r2, [pc, #236]	; (8003848 <USB_SetTurnaroundTime+0x124>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d802      	bhi.n	8003764 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800375e:	230e      	movs	r3, #14
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e057      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4a38      	ldr	r2, [pc, #224]	; (8003848 <USB_SetTurnaroundTime+0x124>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d906      	bls.n	800377a <USB_SetTurnaroundTime+0x56>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4a37      	ldr	r2, [pc, #220]	; (800384c <USB_SetTurnaroundTime+0x128>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d802      	bhi.n	800377a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003774:	230d      	movs	r3, #13
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	e04c      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4a33      	ldr	r2, [pc, #204]	; (800384c <USB_SetTurnaroundTime+0x128>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d906      	bls.n	8003790 <USB_SetTurnaroundTime+0x6c>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4a32      	ldr	r2, [pc, #200]	; (8003850 <USB_SetTurnaroundTime+0x12c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d802      	bhi.n	8003790 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800378a:	230c      	movs	r3, #12
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e041      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4a2f      	ldr	r2, [pc, #188]	; (8003850 <USB_SetTurnaroundTime+0x12c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d906      	bls.n	80037a6 <USB_SetTurnaroundTime+0x82>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4a2e      	ldr	r2, [pc, #184]	; (8003854 <USB_SetTurnaroundTime+0x130>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d802      	bhi.n	80037a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037a0:	230b      	movs	r3, #11
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e036      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <USB_SetTurnaroundTime+0x130>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d906      	bls.n	80037bc <USB_SetTurnaroundTime+0x98>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4a29      	ldr	r2, [pc, #164]	; (8003858 <USB_SetTurnaroundTime+0x134>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d802      	bhi.n	80037bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037b6:	230a      	movs	r3, #10
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e02b      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4a26      	ldr	r2, [pc, #152]	; (8003858 <USB_SetTurnaroundTime+0x134>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d906      	bls.n	80037d2 <USB_SetTurnaroundTime+0xae>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4a25      	ldr	r2, [pc, #148]	; (800385c <USB_SetTurnaroundTime+0x138>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d802      	bhi.n	80037d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037cc:	2309      	movs	r3, #9
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e020      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4a21      	ldr	r2, [pc, #132]	; (800385c <USB_SetTurnaroundTime+0x138>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d906      	bls.n	80037e8 <USB_SetTurnaroundTime+0xc4>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4a20      	ldr	r2, [pc, #128]	; (8003860 <USB_SetTurnaroundTime+0x13c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d802      	bhi.n	80037e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037e2:	2308      	movs	r3, #8
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e015      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <USB_SetTurnaroundTime+0x13c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d906      	bls.n	80037fe <USB_SetTurnaroundTime+0xda>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <USB_SetTurnaroundTime+0x140>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d802      	bhi.n	80037fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037f8:	2307      	movs	r3, #7
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	e00a      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037fe:	2306      	movs	r3, #6
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e007      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800380a:	2309      	movs	r3, #9
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e001      	b.n	8003814 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003810:	2309      	movs	r3, #9
 8003812:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	029b      	lsls	r3, r3, #10
 8003828:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800382c:	431a      	orrs	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	00d8acbf 	.word	0x00d8acbf
 8003844:	00e4e1bf 	.word	0x00e4e1bf
 8003848:	00f423ff 	.word	0x00f423ff
 800384c:	0106737f 	.word	0x0106737f
 8003850:	011a499f 	.word	0x011a499f
 8003854:	01312cff 	.word	0x01312cff
 8003858:	014ca43f 	.word	0x014ca43f
 800385c:	016e35ff 	.word	0x016e35ff
 8003860:	01a6ab1f 	.word	0x01a6ab1f
 8003864:	01e847ff 	.word	0x01e847ff

08003868 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f043 0201 	orr.w	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 0201 	bic.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d106      	bne.n	80038d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	e00b      	b.n	80038f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	e001      	b.n	80038f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e003      	b.n	80038f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80038f0:	2032      	movs	r0, #50	; 0x32
 80038f2:	f7fd f969 	bl	8000bc8 <HAL_Delay>

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003900:	b084      	sub	sp, #16
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800390e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	e009      	b.n	8003934 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	3340      	adds	r3, #64	; 0x40
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	2200      	movs	r2, #0
 800392c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	3301      	adds	r3, #1
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b0e      	cmp	r3, #14
 8003938:	d9f2      	bls.n	8003920 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800393a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11c      	bne.n	800397a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800394e:	f043 0302 	orr.w	r3, r3, #2
 8003952:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	639a      	str	r2, [r3, #56]	; 0x38
 8003978:	e00b      	b.n	8003992 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003998:	461a      	mov	r2, r3
 800399a:	2300      	movs	r3, #0
 800399c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a4:	4619      	mov	r1, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ac:	461a      	mov	r2, r3
 80039ae:	680b      	ldr	r3, [r1, #0]
 80039b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d10c      	bne.n	80039d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039be:	2100      	movs	r1, #0
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f949 	bl	8003c58 <USB_SetDevSpeed>
 80039c6:	e008      	b.n	80039da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039c8:	2101      	movs	r1, #1
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f944 	bl	8003c58 <USB_SetDevSpeed>
 80039d0:	e003      	b.n	80039da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039d2:	2103      	movs	r1, #3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f93f 	bl	8003c58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039da:	2110      	movs	r1, #16
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8f3 	bl	8003bc8 <USB_FlushTxFifo>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f911 	bl	8003c14 <USB_FlushRxFifo>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a02:	461a      	mov	r2, r3
 8003a04:	2300      	movs	r3, #0
 8003a06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	e043      	b.n	8003aae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3c:	d118      	bne.n	8003a70 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a50:	461a      	mov	r2, r3
 8003a52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	e013      	b.n	8003a82 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e008      	b.n	8003a82 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2300      	movs	r3, #0
 8003a92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d3b7      	bcc.n	8003a26 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	e043      	b.n	8003b44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ad2:	d118      	bne.n	8003b06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e013      	b.n	8003b18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afc:	461a      	mov	r2, r3
 8003afe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	e008      	b.n	8003b18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b12:	461a      	mov	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	461a      	mov	r2, r3
 8003b26:	2300      	movs	r3, #0
 8003b28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b36:	461a      	mov	r2, r3
 8003b38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	3301      	adds	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3b7      	bcc.n	8003abc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f043 0210 	orr.w	r2, r3, #16
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <USB_DevInit+0x2c4>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f043 0208 	orr.w	r2, r3, #8
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d107      	bne.n	8003bb4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bc0:	b004      	add	sp, #16
 8003bc2:	4770      	bx	lr
 8003bc4:	803c3800 	.word	0x803c3800

08003bc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	019b      	lsls	r3, r3, #6
 8003bda:	f043 0220 	orr.w	r2, r3, #32
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3301      	adds	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <USB_FlushTxFifo+0x48>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e006      	b.n	8003c02 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d0f0      	beq.n	8003be2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	00030d40 	.word	0x00030d40

08003c14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2210      	movs	r2, #16
 8003c24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <USB_FlushRxFifo+0x40>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e006      	b.n	8003c46 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d0f0      	beq.n	8003c26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	00030d40 	.word	0x00030d40

08003c58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	68f9      	ldr	r1, [r7, #12]
 8003c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b087      	sub	sp, #28
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0306 	and.w	r3, r3, #6
 8003ca2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003caa:	2300      	movs	r3, #0
 8003cac:	75fb      	strb	r3, [r7, #23]
 8003cae:	e00a      	b.n	8003cc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d002      	beq.n	8003cbc <USB_GetDevSpeed+0x32>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d102      	bne.n	8003cc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	75fb      	strb	r3, [r7, #23]
 8003cc0:	e001      	b.n	8003cc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003cc2:	230f      	movs	r3, #15
 8003cc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d13a      	bne.n	8003d66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	2101      	movs	r1, #1
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	68f9      	ldr	r1, [r7, #12]
 8003d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d155      	bne.n	8003dd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	78db      	ldrb	r3, [r3, #3]
 8003d42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	059b      	lsls	r3, r3, #22
 8003d4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	0151      	lsls	r1, r2, #5
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	440a      	add	r2, r1
 8003d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e036      	b.n	8003dd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	2101      	movs	r1, #1
 8003d78:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11a      	bne.n	8003dd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	78db      	ldrb	r3, [r3, #3]
 8003db8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	0151      	lsls	r1, r2, #5
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	440a      	add	r2, r1
 8003dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d161      	bne.n	8003ec4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e16:	d11f      	bne.n	8003e58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	0151      	lsls	r1, r2, #5
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	440a      	add	r2, r1
 8003e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	2101      	movs	r1, #1
 8003e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	68f9      	ldr	r1, [r7, #12]
 8003e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e78:	4013      	ands	r3, r2
 8003e7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	0159      	lsls	r1, r3, #5
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	440b      	add	r3, r1
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4b35      	ldr	r3, [pc, #212]	; (8003f94 <USB_DeactivateEndpoint+0x1b0>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]
 8003ec2:	e060      	b.n	8003f86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eda:	d11f      	bne.n	8003f1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003efa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	43db      	mvns	r3, r3
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	2101      	movs	r1, #1
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f60:	4013      	ands	r3, r2
 8003f62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	0159      	lsls	r1, r3, #5
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	440b      	add	r3, r1
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <USB_DeactivateEndpoint+0x1b4>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	ec337800 	.word	0xec337800
 8003f98:	eff37800 	.word	0xeff37800

08003f9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	785b      	ldrb	r3, [r3, #1]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	f040 815c 	bne.w	8004276 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d132      	bne.n	800402c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fe4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fe8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	0151      	lsls	r1, r2, #5
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	440a      	add	r2, r1
 8004000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004004:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004008:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	0151      	lsls	r1, r2, #5
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	440a      	add	r2, r1
 8004020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004024:	0cdb      	lsrs	r3, r3, #19
 8004026:	04db      	lsls	r3, r3, #19
 8004028:	6113      	str	r3, [r2, #16]
 800402a:	e074      	b.n	8004116 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	0151      	lsls	r1, r2, #5
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	440a      	add	r2, r1
 8004042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004046:	0cdb      	lsrs	r3, r3, #19
 8004048:	04db      	lsls	r3, r3, #19
 800404a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	0151      	lsls	r1, r2, #5
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	440a      	add	r2, r1
 8004062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004066:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800406a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800406e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6959      	ldr	r1, [r3, #20]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	440b      	add	r3, r1
 8004088:	1e59      	subs	r1, r3, #1
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004092:	04d9      	lsls	r1, r3, #19
 8004094:	4b9d      	ldr	r3, [pc, #628]	; (800430c <USB_EPStartXfer+0x370>)
 8004096:	400b      	ands	r3, r1
 8004098:	69b9      	ldr	r1, [r7, #24]
 800409a:	0148      	lsls	r0, r1, #5
 800409c:	69f9      	ldr	r1, [r7, #28]
 800409e:	4401      	add	r1, r0
 80040a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040a4:	4313      	orrs	r3, r2
 80040a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040be:	69b9      	ldr	r1, [r7, #24]
 80040c0:	0148      	lsls	r0, r1, #5
 80040c2:	69f9      	ldr	r1, [r7, #28]
 80040c4:	4401      	add	r1, r0
 80040c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040ca:	4313      	orrs	r3, r2
 80040cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	78db      	ldrb	r3, [r3, #3]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d11f      	bne.n	8004116 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	0151      	lsls	r1, r2, #5
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	440a      	add	r2, r1
 80040ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	440a      	add	r2, r1
 800410c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004110:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004114:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d14b      	bne.n	80041b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004130:	461a      	mov	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	78db      	ldrb	r3, [r3, #3]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d128      	bne.n	8004192 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d110      	bne.n	8004172 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	0151      	lsls	r1, r2, #5
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	440a      	add	r2, r1
 8004166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800416a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	e00f      	b.n	8004192 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800418c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004190:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e12f      	b.n	8004414 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	78db      	ldrb	r3, [r3, #3]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d015      	beq.n	8004208 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8117 	beq.w	8004414 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	2101      	movs	r1, #1
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	69f9      	ldr	r1, [r7, #28]
 80041fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004202:	4313      	orrs	r3, r2
 8004204:	634b      	str	r3, [r1, #52]	; 0x34
 8004206:	e105      	b.n	8004414 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d110      	bne.n	800423a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	0151      	lsls	r1, r2, #5
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	440a      	add	r2, r1
 800422e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	e00f      	b.n	800425a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	68d9      	ldr	r1, [r3, #12]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	781a      	ldrb	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	b298      	uxth	r0, r3
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	4603      	mov	r3, r0
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fa2b 	bl	80046ca <USB_WritePacket>
 8004274:	e0ce      	b.n	8004414 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	440a      	add	r2, r1
 800428c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004290:	0cdb      	lsrs	r3, r3, #19
 8004292:	04db      	lsls	r3, r3, #19
 8004294:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	0151      	lsls	r1, r2, #5
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	440a      	add	r2, r1
 80042ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d126      	bne.n	8004310 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d8:	69b9      	ldr	r1, [r7, #24]
 80042da:	0148      	lsls	r0, r1, #5
 80042dc:	69f9      	ldr	r1, [r7, #28]
 80042de:	4401      	add	r1, r0
 80042e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042e4:	4313      	orrs	r3, r2
 80042e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	0151      	lsls	r1, r2, #5
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	440a      	add	r2, r1
 80042fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004302:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004306:	6113      	str	r3, [r2, #16]
 8004308:	e036      	b.n	8004378 <USB_EPStartXfer+0x3dc>
 800430a:	bf00      	nop
 800430c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4413      	add	r3, r2
 800431a:	1e5a      	subs	r2, r3, #1
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	8afb      	ldrh	r3, [r7, #22]
 8004336:	04d9      	lsls	r1, r3, #19
 8004338:	4b39      	ldr	r3, [pc, #228]	; (8004420 <USB_EPStartXfer+0x484>)
 800433a:	400b      	ands	r3, r1
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	0148      	lsls	r0, r1, #5
 8004340:	69f9      	ldr	r1, [r7, #28]
 8004342:	4401      	add	r1, r0
 8004344:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004348:	4313      	orrs	r3, r2
 800434a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	8af9      	ldrh	r1, [r7, #22]
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	0148      	lsls	r0, r1, #5
 800436c:	69f9      	ldr	r1, [r7, #28]
 800436e:	4401      	add	r1, r0
 8004370:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004374:	4313      	orrs	r3, r2
 8004376:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10d      	bne.n	800439a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	68d9      	ldr	r1, [r3, #12]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	460a      	mov	r2, r1
 8004398:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	78db      	ldrb	r3, [r3, #3]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d128      	bne.n	80043f4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d110      	bne.n	80043d4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	0151      	lsls	r1, r2, #5
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	440a      	add	r2, r1
 80043c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e00f      	b.n	80043f4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	0151      	lsls	r1, r2, #5
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	440a      	add	r2, r1
 800440a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800440e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004412:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	1ff80000 	.word	0x1ff80000

08004424 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	2b01      	cmp	r3, #1
 8004442:	f040 80cd 	bne.w	80045e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d132      	bne.n	80044b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	0151      	lsls	r1, r2, #5
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	440a      	add	r2, r1
 8004464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004468:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800446c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004470:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	440a      	add	r2, r1
 8004488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	0151      	lsls	r1, r2, #5
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	440a      	add	r2, r1
 80044a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ac:	0cdb      	lsrs	r3, r3, #19
 80044ae:	04db      	lsls	r3, r3, #19
 80044b0:	6113      	str	r3, [r2, #16]
 80044b2:	e04e      	b.n	8004552 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	0151      	lsls	r1, r2, #5
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	440a      	add	r2, r1
 80044ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ce:	0cdb      	lsrs	r3, r3, #19
 80044d0:	04db      	lsls	r3, r3, #19
 80044d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	0151      	lsls	r1, r2, #5
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	440a      	add	r2, r1
 80044ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	d903      	bls.n	800450c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	440a      	add	r2, r1
 8004522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004526:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800452a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004542:	6939      	ldr	r1, [r7, #16]
 8004544:	0148      	lsls	r0, r1, #5
 8004546:	6979      	ldr	r1, [r7, #20]
 8004548:	4401      	add	r1, r0
 800454a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800454e:	4313      	orrs	r3, r2
 8004550:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d11e      	bne.n	8004596 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456c:	461a      	mov	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	0151      	lsls	r1, r2, #5
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	440a      	add	r2, r1
 800458a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	e092      	b.n	80046bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	0151      	lsls	r1, r2, #5
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	440a      	add	r2, r1
 80045ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d07e      	beq.n	80046bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	2101      	movs	r1, #1
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	6979      	ldr	r1, [r7, #20]
 80045d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045da:	4313      	orrs	r3, r2
 80045dc:	634b      	str	r3, [r1, #52]	; 0x34
 80045de:	e06d      	b.n	80046bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045fa:	0cdb      	lsrs	r3, r3, #19
 80045fc:	04db      	lsls	r3, r3, #19
 80045fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800461e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004622:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	440a      	add	r2, r1
 800464a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004652:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466a:	6939      	ldr	r1, [r7, #16]
 800466c:	0148      	lsls	r0, r1, #5
 800466e:	6979      	ldr	r1, [r7, #20]
 8004670:	4401      	add	r1, r0
 8004672:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004676:	4313      	orrs	r3, r2
 8004678:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d10d      	bne.n	800469c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	68d9      	ldr	r1, [r3, #12]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004698:	460a      	mov	r2, r1
 800469a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b089      	sub	sp, #36	; 0x24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	4611      	mov	r1, r2
 80046d6:	461a      	mov	r2, r3
 80046d8:	460b      	mov	r3, r1
 80046da:	71fb      	strb	r3, [r7, #7]
 80046dc:	4613      	mov	r3, r2
 80046de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80046e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d11a      	bne.n	8004726 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046f0:	88bb      	ldrh	r3, [r7, #4]
 80046f2:	3303      	adds	r3, #3
 80046f4:	089b      	lsrs	r3, r3, #2
 80046f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	e00f      	b.n	800471e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	031a      	lsls	r2, r3, #12
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	4413      	add	r3, r2
 8004706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470a:	461a      	mov	r2, r3
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	3304      	adds	r3, #4
 8004716:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	3301      	adds	r3, #1
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	429a      	cmp	r2, r3
 8004724:	d3eb      	bcc.n	80046fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3724      	adds	r7, #36	; 0x24
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	; 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	3303      	adds	r3, #3
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e00b      	b.n	8004770 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	601a      	str	r2, [r3, #0]
    pDest++;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	3304      	adds	r3, #4
 8004768:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	3301      	adds	r3, #1
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	429a      	cmp	r2, r3
 8004776:	d3ef      	bcc.n	8004758 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004778:	69fb      	ldr	r3, [r7, #28]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3724      	adds	r7, #36	; 0x24
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d12c      	bne.n	80047fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db12      	blt.n	80047da <USB_EPSetStall+0x54>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00f      	beq.n	80047da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	0151      	lsls	r1, r2, #5
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	440a      	add	r2, r1
 80047f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e02b      	b.n	8004854 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	db12      	blt.n	8004834 <USB_EPSetStall+0xae>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00f      	beq.n	8004834 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	0151      	lsls	r1, r2, #5
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	440a      	add	r2, r1
 800482a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800482e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004832:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	440a      	add	r2, r1
 800484a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800484e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004852:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	785b      	ldrb	r3, [r3, #1]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d128      	bne.n	80048d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	0151      	lsls	r1, r2, #5
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	440a      	add	r2, r1
 8004894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800489c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	78db      	ldrb	r3, [r3, #3]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d003      	beq.n	80048ae <USB_EPClearStall+0x4c>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	78db      	ldrb	r3, [r3, #3]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d138      	bne.n	8004920 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e027      	b.n	8004920 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	78db      	ldrb	r3, [r3, #3]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d003      	beq.n	8004900 <USB_EPClearStall+0x9e>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	78db      	ldrb	r3, [r3, #3]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d10f      	bne.n	8004920 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800491a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	460b      	mov	r3, r1
 8004938:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800494c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004950:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004994:	f023 0303 	bic.w	r3, r3, #3
 8004998:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a8:	f023 0302 	bic.w	r3, r3, #2
 80049ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ea:	f043 0302 	orr.w	r3, r3, #2
 80049ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4013      	ands	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a16:	68fb      	ldr	r3, [r7, #12]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	4013      	ands	r3, r2
 8004a46:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	0c1b      	lsrs	r3, r3, #16
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	b29b      	uxth	r3, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004aba:	68bb      	ldr	r3, [r7, #8]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	01db      	lsls	r3, r3, #7
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4013      	ands	r3, r2
 8004b14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b16:	68bb      	ldr	r3, [r7, #8]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f003 0301 	and.w	r3, r3, #1
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b5e:	f023 0307 	bic.w	r3, r3, #7
 8004b62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	460b      	mov	r3, r1
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	333c      	adds	r3, #60	; 0x3c
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4a26      	ldr	r2, [pc, #152]	; (8004c40 <USB_EP0_OutStart+0xb8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d90a      	bls.n	8004bc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bbc:	d101      	bne.n	8004bc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e037      	b.n	8004c32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2300      	movs	r3, #0
 8004bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004be0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf0:	f043 0318 	orr.w	r3, r3, #24
 8004bf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c0a:	7afb      	ldrb	r3, [r7, #11]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10f      	bne.n	8004c30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004c2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	4f54300a 	.word	0x4f54300a

08004c44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3301      	adds	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <USB_CoreReset+0x64>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e01b      	b.n	8004c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	daf2      	bge.n	8004c50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f043 0201 	orr.w	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <USB_CoreReset+0x64>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e006      	b.n	8004c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d0f0      	beq.n	8004c7a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	00030d40 	.word	0x00030d40

08004cac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004cb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004cbc:	f002 f8d6 	bl	8006e6c <malloc>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d105      	bne.n	8004cd6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e066      	b.n	8004da4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7c1b      	ldrb	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d119      	bne.n	8004d1a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cea:	2202      	movs	r2, #2
 8004cec:	2181      	movs	r1, #129	; 0x81
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f001 ff43 	bl	8006b7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cfe:	2202      	movs	r2, #2
 8004d00:	2101      	movs	r1, #1
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f001 ff39 	bl	8006b7a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2210      	movs	r2, #16
 8004d14:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004d18:	e016      	b.n	8004d48 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d1a:	2340      	movs	r3, #64	; 0x40
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	2181      	movs	r1, #129	; 0x81
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f001 ff2a 	bl	8006b7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d2c:	2340      	movs	r3, #64	; 0x40
 8004d2e:	2202      	movs	r2, #2
 8004d30:	2101      	movs	r1, #1
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f001 ff21 	bl	8006b7a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2210      	movs	r2, #16
 8004d44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d48:	2308      	movs	r3, #8
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	2182      	movs	r1, #130	; 0x82
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 ff13 	bl	8006b7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7c1b      	ldrb	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d88:	2101      	movs	r1, #1
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f001 ffe4 	bl	8006d58 <USBD_LL_PrepareReceive>
 8004d90:	e007      	b.n	8004da2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d98:	2340      	movs	r3, #64	; 0x40
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f001 ffdb 	bl	8006d58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004dbc:	2181      	movs	r1, #129	; 0x81
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 ff01 	bl	8006bc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004dca:	2101      	movs	r1, #1
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f001 fefa 	bl	8006bc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004dda:	2182      	movs	r1, #130	; 0x82
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f001 fef2 	bl	8006bc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00e      	beq.n	8004e1a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f002 f835 	bl	8006e7c <free>
    pdev->pClassData = NULL;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e34:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d03a      	beq.n	8004ec4 <USBD_CDC_Setup+0xa0>
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	f040 8097 	bne.w	8004f82 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	88db      	ldrh	r3, [r3, #6]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d029      	beq.n	8004eb0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b25b      	sxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	da11      	bge.n	8004e8a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004e72:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	88d2      	ldrh	r2, [r2, #6]
 8004e78:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004e7a:	6939      	ldr	r1, [r7, #16]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	88db      	ldrh	r3, [r3, #6]
 8004e80:	461a      	mov	r2, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 fa6d 	bl	8006362 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004e88:	e082      	b.n	8004f90 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	785a      	ldrb	r2, [r3, #1]
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	88db      	ldrh	r3, [r3, #6]
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004ea0:	6939      	ldr	r1, [r7, #16]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	88db      	ldrh	r3, [r3, #6]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 fa86 	bl	80063ba <USBD_CtlPrepareRx>
    break;
 8004eae:	e06f      	b.n	8004f90 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	7850      	ldrb	r0, [r2, #1]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	6839      	ldr	r1, [r7, #0]
 8004ec0:	4798      	blx	r3
    break;
 8004ec2:	e065      	b.n	8004f90 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b0b      	cmp	r3, #11
 8004eca:	d84f      	bhi.n	8004f6c <USBD_CDC_Setup+0x148>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <USBD_CDC_Setup+0xb0>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004f05 	.word	0x08004f05
 8004ed8:	08004f7b 	.word	0x08004f7b
 8004edc:	08004f6d 	.word	0x08004f6d
 8004ee0:	08004f6d 	.word	0x08004f6d
 8004ee4:	08004f6d 	.word	0x08004f6d
 8004ee8:	08004f6d 	.word	0x08004f6d
 8004eec:	08004f6d 	.word	0x08004f6d
 8004ef0:	08004f6d 	.word	0x08004f6d
 8004ef4:	08004f6d 	.word	0x08004f6d
 8004ef8:	08004f6d 	.word	0x08004f6d
 8004efc:	08004f2d 	.word	0x08004f2d
 8004f00:	08004f55 	.word	0x08004f55
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d107      	bne.n	8004f1e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f0e:	f107 030c 	add.w	r3, r7, #12
 8004f12:	2202      	movs	r2, #2
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f001 fa23 	bl	8006362 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004f1c:	e030      	b.n	8004f80 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f001 f9ad 	bl	8006280 <USBD_CtlError>
        ret = USBD_FAIL;
 8004f26:	2303      	movs	r3, #3
 8004f28:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2a:	e029      	b.n	8004f80 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d107      	bne.n	8004f46 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f36:	f107 030f 	add.w	r3, r7, #15
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fa0f 	bl	8006362 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004f44:	e01c      	b.n	8004f80 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 f999 	bl	8006280 <USBD_CtlError>
        ret = USBD_FAIL;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	75fb      	strb	r3, [r7, #23]
      break;
 8004f52:	e015      	b.n	8004f80 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d00f      	beq.n	8004f7e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004f5e:	6839      	ldr	r1, [r7, #0]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f001 f98d 	bl	8006280 <USBD_CtlError>
        ret = USBD_FAIL;
 8004f66:	2303      	movs	r3, #3
 8004f68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f6a:	e008      	b.n	8004f7e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 f986 	bl	8006280 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f74:	2303      	movs	r3, #3
 8004f76:	75fb      	strb	r3, [r7, #23]
      break;
 8004f78:	e002      	b.n	8004f80 <USBD_CDC_Setup+0x15c>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e008      	b.n	8004f90 <USBD_CDC_Setup+0x16c>
      break;
 8004f7e:	bf00      	nop
    }
    break;
 8004f80:	e006      	b.n	8004f90 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f001 f97b 	bl	8006280 <USBD_CtlError>
    ret = USBD_FAIL;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	75fb      	strb	r3, [r7, #23]
    break;
 8004f8e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop

08004f9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004fae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e049      	b.n	8005052 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3318      	adds	r3, #24
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d029      	beq.n	8005030 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	3318      	adds	r3, #24
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	78f9      	ldrb	r1, [r7, #3]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	1a5b      	subs	r3, r3, r1
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4403      	add	r3, r0
 8004ffc:	3344      	adds	r3, #68	; 0x44
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	fbb2 f1f3 	udiv	r1, r2, r3
 8005004:	fb03 f301 	mul.w	r3, r3, r1
 8005008:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800500a:	2b00      	cmp	r3, #0
 800500c:	d110      	bne.n	8005030 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	3318      	adds	r3, #24
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005022:	78f9      	ldrb	r1, [r7, #3]
 8005024:	2300      	movs	r3, #0
 8005026:	2200      	movs	r2, #0
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f001 fe74 	bl	8006d16 <USBD_LL_Transmit>
 800502e:	e00f      	b.n	8005050 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800504c:	78fa      	ldrb	r2, [r7, #3]
 800504e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800506c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005078:	2303      	movs	r3, #3
 800507a:	e015      	b.n	80050a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f001 fe8a 	bl	8006d9a <USBD_LL_GetRxDataSize>
 8005086:	4602      	mov	r2, r0
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80050a2:	4611      	mov	r1, r2
 80050a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d015      	beq.n	80050f6 <USBD_CDC_EP0_RxReady+0x46>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80050d0:	2bff      	cmp	r3, #255	; 0xff
 80050d2:	d010      	beq.n	80050f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80050e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050ea:	b292      	uxth	r2, r2
 80050ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	22ff      	movs	r2, #255	; 0xff
 80050f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2243      	movs	r2, #67	; 0x43
 800510c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800510e:	4b03      	ldr	r3, [pc, #12]	; (800511c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	20000094 	.word	0x20000094

08005120 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2243      	movs	r2, #67	; 0x43
 800512c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800512e:	4b03      	ldr	r3, [pc, #12]	; (800513c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	20000050 	.word	0x20000050

08005140 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2243      	movs	r2, #67	; 0x43
 800514c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800514e:	4b03      	ldr	r3, [pc, #12]	; (800515c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	200000d8 	.word	0x200000d8

08005160 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	220a      	movs	r2, #10
 800516c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800516e:	4b03      	ldr	r3, [pc, #12]	; (800517c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005170:	4618      	mov	r0, r3
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	2000000c 	.word	0x2000000c

08005180 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005190:	2303      	movs	r3, #3
 8005192:	e004      	b.n	800519e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b087      	sub	sp, #28
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ec:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005212:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800521e:	2303      	movs	r3, #3
 8005220:	e016      	b.n	8005250 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	7c1b      	ldrb	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005234:	2101      	movs	r1, #1
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f001 fd8e 	bl	8006d58 <USBD_LL_PrepareReceive>
 800523c:	e007      	b.n	800524e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005244:	2340      	movs	r3, #64	; 0x40
 8005246:	2101      	movs	r1, #1
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f001 fd85 	bl	8006d58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800526c:	2303      	movs	r3, #3
 800526e:	e025      	b.n	80052bc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	79fa      	ldrb	r2, [r7, #7]
 80052ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f001 fbfb 	bl	8006aac <USBD_LL_Init>
 80052b6:	4603      	mov	r3, r0
 80052b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80052d8:	2303      	movs	r3, #3
 80052da:	e010      	b.n	80052fe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	f107 020e 	add.w	r2, r7, #14
 80052f0:	4610      	mov	r0, r2
 80052f2:	4798      	blx	r3
 80052f4:	4602      	mov	r2, r0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f001 fc18 	bl	8006b44 <USBD_LL_Start>
 8005314:	4603      	mov	r3, r0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005340:	2303      	movs	r3, #3
 8005342:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	78fa      	ldrb	r2, [r7, #3]
 8005358:	4611      	mov	r1, r2
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	4798      	blx	r3
 800535e:	4603      	mov	r3, r0
 8005360:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005362:	7bfb      	ldrb	r3, [r7, #15]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	4611      	mov	r1, r2
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
  }

  return USBD_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 ff2c 	bl	800620c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80053c2:	461a      	mov	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d00e      	beq.n	80053f6 <USBD_LL_SetupStage+0x5a>
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d302      	bcc.n	80053e2 <USBD_LL_SetupStage+0x46>
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d014      	beq.n	800540a <USBD_LL_SetupStage+0x6e>
 80053e0:	e01d      	b.n	800541e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053e8:	4619      	mov	r1, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa18 	bl	8005820 <USBD_StdDevReq>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
      break;
 80053f4:	e020      	b.n	8005438 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa7c 	bl	80058fc <USBD_StdItfReq>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
      break;
 8005408:	e016      	b.n	8005438 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fab8 	bl	8005988 <USBD_StdEPReq>
 8005418:	4603      	mov	r3, r0
 800541a:	73fb      	strb	r3, [r7, #15]
      break;
 800541c:	e00c      	b.n	8005438 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005424:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005428:	b2db      	uxtb	r3, r3
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 fbe9 	bl	8006c04 <USBD_LL_StallEP>
 8005432:	4603      	mov	r3, r0
 8005434:	73fb      	strb	r3, [r7, #15]
      break;
 8005436:	bf00      	nop
  }

  return ret;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b086      	sub	sp, #24
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	460b      	mov	r3, r1
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005450:	7afb      	ldrb	r3, [r7, #11]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d137      	bne.n	80054c6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800545c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005464:	2b03      	cmp	r3, #3
 8005466:	d14a      	bne.n	80054fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	d913      	bls.n	800549c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	1ad2      	subs	r2, r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	4293      	cmp	r3, r2
 800548c:	bf28      	it	cs
 800548e:	4613      	movcs	r3, r2
 8005490:	461a      	mov	r2, r3
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 ffad 	bl	80063f4 <USBD_CtlContinueRx>
 800549a:	e030      	b.n	80054fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d105      	bne.n	80054be <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 ffa9 	bl	8006416 <USBD_CtlSendStatus>
 80054c4:	e01b      	b.n	80054fe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d013      	beq.n	80054fa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d10e      	bne.n	80054fa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	7afa      	ldrb	r2, [r7, #11]
 80054e6:	4611      	mov	r1, r2
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	4798      	blx	r3
 80054ec:	4603      	mov	r3, r0
 80054ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
 80054f8:	e002      	b.n	8005500 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e000      	b.n	8005500 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	460b      	mov	r3, r1
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005516:	7afb      	ldrb	r3, [r7, #11]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d16a      	bne.n	80055f2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3314      	adds	r3, #20
 8005520:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005528:	2b02      	cmp	r3, #2
 800552a:	d155      	bne.n	80055d8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	429a      	cmp	r2, r3
 8005536:	d914      	bls.n	8005562 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	1ad2      	subs	r2, r2, r3
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	461a      	mov	r2, r3
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 ff22 	bl	8006398 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005554:	2300      	movs	r3, #0
 8005556:	2200      	movs	r2, #0
 8005558:	2100      	movs	r1, #0
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f001 fbfc 	bl	8006d58 <USBD_LL_PrepareReceive>
 8005560:	e03a      	b.n	80055d8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	429a      	cmp	r2, r3
 800556c:	d11c      	bne.n	80055a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005576:	429a      	cmp	r2, r3
 8005578:	d316      	bcc.n	80055a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005584:	429a      	cmp	r2, r3
 8005586:	d20f      	bcs.n	80055a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005588:	2200      	movs	r2, #0
 800558a:	2100      	movs	r1, #0
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 ff03 	bl	8006398 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800559a:	2300      	movs	r3, #0
 800559c:	2200      	movs	r2, #0
 800559e:	2100      	movs	r1, #0
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f001 fbd9 	bl	8006d58 <USBD_LL_PrepareReceive>
 80055a6:	e017      	b.n	80055d8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d105      	bne.n	80055ca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055ca:	2180      	movs	r1, #128	; 0x80
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f001 fb19 	bl	8006c04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 ff32 	bl	800643c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d123      	bne.n	800562a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fe9b 	bl	800531e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80055f0:	e01b      	b.n	800562a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d013      	beq.n	8005626 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005604:	2b03      	cmp	r3, #3
 8005606:	d10e      	bne.n	8005626 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	7afa      	ldrb	r2, [r7, #11]
 8005612:	4611      	mov	r1, r2
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	4798      	blx	r3
 8005618:	4603      	mov	r3, r0
 800561a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005622:	7dfb      	ldrb	r3, [r7, #23]
 8005624:	e002      	b.n	800562c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005626:	2303      	movs	r3, #3
 8005628:	e000      	b.n	800562c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6852      	ldr	r2, [r2, #4]
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	4611      	mov	r1, r2
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005678:	2340      	movs	r3, #64	; 0x40
 800567a:	2200      	movs	r2, #0
 800567c:	2100      	movs	r1, #0
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f001 fa7b 	bl	8006b7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2240      	movs	r2, #64	; 0x40
 8005690:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005694:	2340      	movs	r3, #64	; 0x40
 8005696:	2200      	movs	r2, #0
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 fa6d 	bl	8006b7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2240      	movs	r2, #64	; 0x40
 80056aa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2204      	movs	r2, #4
 80056ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800570e:	2b04      	cmp	r3, #4
 8005710:	d105      	bne.n	800571e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800573a:	2b03      	cmp	r3, #3
 800573c:	d10b      	bne.n	8005756 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	460b      	mov	r3, r1
 8005784:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d009      	beq.n	80057d8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6852      	ldr	r2, [r2, #4]
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	4611      	mov	r1, r2
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
  }

  return USBD_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b087      	sub	sp, #28
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	3301      	adds	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005800:	8a3b      	ldrh	r3, [r7, #16]
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	b21a      	sxth	r2, r3
 8005806:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800580a:	4313      	orrs	r3, r2
 800580c:	b21b      	sxth	r3, r3
 800580e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005810:	89fb      	ldrh	r3, [r7, #14]
}
 8005812:	4618      	mov	r0, r3
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005836:	2b20      	cmp	r3, #32
 8005838:	d004      	beq.n	8005844 <USBD_StdDevReq+0x24>
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d002      	beq.n	8005844 <USBD_StdDevReq+0x24>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <USBD_StdDevReq+0x38>
 8005842:	e050      	b.n	80058e6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
 8005852:	4603      	mov	r3, r0
 8005854:	73fb      	strb	r3, [r7, #15]
    break;
 8005856:	e04b      	b.n	80058f0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b09      	cmp	r3, #9
 800585e:	d83c      	bhi.n	80058da <USBD_StdDevReq+0xba>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <USBD_StdDevReq+0x48>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	080058bd 	.word	0x080058bd
 800586c:	080058d1 	.word	0x080058d1
 8005870:	080058db 	.word	0x080058db
 8005874:	080058c7 	.word	0x080058c7
 8005878:	080058db 	.word	0x080058db
 800587c:	0800589b 	.word	0x0800589b
 8005880:	08005891 	.word	0x08005891
 8005884:	080058db 	.word	0x080058db
 8005888:	080058b3 	.word	0x080058b3
 800588c:	080058a5 	.word	0x080058a5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9ce 	bl	8005c34 <USBD_GetDescriptor>
      break;
 8005898:	e024      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb33 	bl	8005f08 <USBD_SetAddress>
      break;
 80058a2:	e01f      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fb70 	bl	8005f8c <USBD_SetConfig>
 80058ac:	4603      	mov	r3, r0
 80058ae:	73fb      	strb	r3, [r7, #15]
      break;
 80058b0:	e018      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fc0d 	bl	80060d4 <USBD_GetConfig>
      break;
 80058ba:	e013      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fc3c 	bl	800613c <USBD_GetStatus>
      break;
 80058c4:	e00e      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fc6a 	bl	80061a2 <USBD_SetFeature>
      break;
 80058ce:	e009      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fc79 	bl	80061ca <USBD_ClrFeature>
      break;
 80058d8:	e004      	b.n	80058e4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80058da:	6839      	ldr	r1, [r7, #0]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fccf 	bl	8006280 <USBD_CtlError>
      break;
 80058e2:	bf00      	nop
    }
    break;
 80058e4:	e004      	b.n	80058f0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fcc9 	bl	8006280 <USBD_CtlError>
    break;
 80058ee:	bf00      	nop
  }

  return ret;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop

080058fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005912:	2b20      	cmp	r3, #32
 8005914:	d003      	beq.n	800591e <USBD_StdItfReq+0x22>
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d001      	beq.n	800591e <USBD_StdItfReq+0x22>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d12a      	bne.n	8005974 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005924:	3b01      	subs	r3, #1
 8005926:	2b02      	cmp	r3, #2
 8005928:	d81d      	bhi.n	8005966 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	889b      	ldrh	r3, [r3, #4]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d813      	bhi.n	800595c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
 8005942:	4603      	mov	r3, r0
 8005944:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	88db      	ldrh	r3, [r3, #6]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d110      	bne.n	8005970 <USBD_StdItfReq+0x74>
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10d      	bne.n	8005970 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fd5e 	bl	8006416 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800595a:	e009      	b.n	8005970 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fc8e 	bl	8006280 <USBD_CtlError>
      break;
 8005964:	e004      	b.n	8005970 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fc89 	bl	8006280 <USBD_CtlError>
      break;
 800596e:	e000      	b.n	8005972 <USBD_StdItfReq+0x76>
      break;
 8005970:	bf00      	nop
    }
    break;
 8005972:	e004      	b.n	800597e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fc82 	bl	8006280 <USBD_CtlError>
    break;
 800597c:	bf00      	nop
  }

  return ret;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	889b      	ldrh	r3, [r3, #4]
 800599a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d004      	beq.n	80059b2 <USBD_StdEPReq+0x2a>
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d002      	beq.n	80059b2 <USBD_StdEPReq+0x2a>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <USBD_StdEPReq+0x3e>
 80059b0:	e135      	b.n	8005c1e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	4798      	blx	r3
 80059c0:	4603      	mov	r3, r0
 80059c2:	73fb      	strb	r3, [r7, #15]
    break;
 80059c4:	e130      	b.n	8005c28 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	785b      	ldrb	r3, [r3, #1]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d03e      	beq.n	8005a4c <USBD_StdEPReq+0xc4>
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d002      	beq.n	80059d8 <USBD_StdEPReq+0x50>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d077      	beq.n	8005ac6 <USBD_StdEPReq+0x13e>
 80059d6:	e11c      	b.n	8005c12 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d002      	beq.n	80059e8 <USBD_StdEPReq+0x60>
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d015      	beq.n	8005a12 <USBD_StdEPReq+0x8a>
 80059e6:	e02b      	b.n	8005a40 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00c      	beq.n	8005a08 <USBD_StdEPReq+0x80>
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d009      	beq.n	8005a08 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 f903 	bl	8006c04 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059fe:	2180      	movs	r1, #128	; 0x80
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f001 f8ff 	bl	8006c04 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005a06:	e020      	b.n	8005a4a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fc38 	bl	8006280 <USBD_CtlError>
        break;
 8005a10:	e01b      	b.n	8005a4a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	885b      	ldrh	r3, [r3, #2]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10e      	bne.n	8005a38 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <USBD_StdEPReq+0xb0>
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	2b80      	cmp	r3, #128	; 0x80
 8005a24:	d008      	beq.n	8005a38 <USBD_StdEPReq+0xb0>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	88db      	ldrh	r3, [r3, #6]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a2e:	7bbb      	ldrb	r3, [r7, #14]
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 f8e6 	bl	8006c04 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fcec 	bl	8006416 <USBD_CtlSendStatus>

        break;
 8005a3e:	e004      	b.n	8005a4a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fc1c 	bl	8006280 <USBD_CtlError>
        break;
 8005a48:	bf00      	nop
      }
      break;
 8005a4a:	e0e7      	b.n	8005c1c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d002      	beq.n	8005a5c <USBD_StdEPReq+0xd4>
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d015      	beq.n	8005a86 <USBD_StdEPReq+0xfe>
 8005a5a:	e02d      	b.n	8005ab8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a5c:	7bbb      	ldrb	r3, [r7, #14]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <USBD_StdEPReq+0xf4>
 8005a62:	7bbb      	ldrb	r3, [r7, #14]
 8005a64:	2b80      	cmp	r3, #128	; 0x80
 8005a66:	d009      	beq.n	8005a7c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a68:	7bbb      	ldrb	r3, [r7, #14]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f001 f8c9 	bl	8006c04 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a72:	2180      	movs	r1, #128	; 0x80
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 f8c5 	bl	8006c04 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005a7a:	e023      	b.n	8005ac4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fbfe 	bl	8006280 <USBD_CtlError>
        break;
 8005a84:	e01e      	b.n	8005ac4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	885b      	ldrh	r3, [r3, #2]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d119      	bne.n	8005ac2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005a8e:	7bbb      	ldrb	r3, [r7, #14]
 8005a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a98:	7bbb      	ldrb	r3, [r7, #14]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f001 f8d0 	bl	8006c42 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fcb7 	bl	8006416 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	4798      	blx	r3
        }
        break;
 8005ab6:	e004      	b.n	8005ac2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fbe0 	bl	8006280 <USBD_CtlError>
        break;
 8005ac0:	e000      	b.n	8005ac4 <USBD_StdEPReq+0x13c>
        break;
 8005ac2:	bf00      	nop
      }
      break;
 8005ac4:	e0aa      	b.n	8005c1c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d002      	beq.n	8005ad6 <USBD_StdEPReq+0x14e>
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d032      	beq.n	8005b3a <USBD_StdEPReq+0x1b2>
 8005ad4:	e097      	b.n	8005c06 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ad6:	7bbb      	ldrb	r3, [r7, #14]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <USBD_StdEPReq+0x164>
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	2b80      	cmp	r3, #128	; 0x80
 8005ae0:	d004      	beq.n	8005aec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fbcb 	bl	8006280 <USBD_CtlError>
          break;
 8005aea:	e091      	b.n	8005c10 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	da0b      	bge.n	8005b0c <USBD_StdEPReq+0x184>
 8005af4:	7bbb      	ldrb	r3, [r7, #14]
 8005af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	3310      	adds	r3, #16
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	4413      	add	r3, r2
 8005b08:	3304      	adds	r3, #4
 8005b0a:	e00b      	b.n	8005b24 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005b0c:	7bbb      	ldrb	r3, [r7, #14]
 8005b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4413      	add	r3, r2
 8005b22:	3304      	adds	r3, #4
 8005b24:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fc15 	bl	8006362 <USBD_CtlSendData>
        break;
 8005b38:	e06a      	b.n	8005c10 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005b3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da11      	bge.n	8005b66 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	f003 020f 	and.w	r2, r3, #15
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	3324      	adds	r3, #36	; 0x24
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d117      	bne.n	8005b8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fb8e 	bl	8006280 <USBD_CtlError>
            break;
 8005b64:	e054      	b.n	8005c10 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b66:	7bbb      	ldrb	r3, [r7, #14]
 8005b68:	f003 020f 	and.w	r2, r3, #15
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fb7b 	bl	8006280 <USBD_CtlError>
            break;
 8005b8a:	e041      	b.n	8005c10 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	da0b      	bge.n	8005bac <USBD_StdEPReq+0x224>
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	3310      	adds	r3, #16
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3304      	adds	r3, #4
 8005baa:	e00b      	b.n	8005bc4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bc6:	7bbb      	ldrb	r3, [r7, #14]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <USBD_StdEPReq+0x24a>
 8005bcc:	7bbb      	ldrb	r3, [r7, #14]
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	d103      	bne.n	8005bda <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	e00e      	b.n	8005bf8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 f84e 	bl	8006c80 <USBD_LL_IsStallEP>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2201      	movs	r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	e002      	b.n	8005bf8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fbaf 	bl	8006362 <USBD_CtlSendData>
          break;
 8005c04:	e004      	b.n	8005c10 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fb39 	bl	8006280 <USBD_CtlError>
        break;
 8005c0e:	bf00      	nop
      }
      break;
 8005c10:	e004      	b.n	8005c1c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fb33 	bl	8006280 <USBD_CtlError>
      break;
 8005c1a:	bf00      	nop
    }
    break;
 8005c1c:	e004      	b.n	8005c28 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fb2d 	bl	8006280 <USBD_CtlError>
    break;
 8005c26:	bf00      	nop
  }

  return ret;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	885b      	ldrh	r3, [r3, #2]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	2b06      	cmp	r3, #6
 8005c56:	f200 8128 	bhi.w	8005eaa <USBD_GetDescriptor+0x276>
 8005c5a:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <USBD_GetDescriptor+0x2c>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005c7d 	.word	0x08005c7d
 8005c64:	08005c95 	.word	0x08005c95
 8005c68:	08005cd5 	.word	0x08005cd5
 8005c6c:	08005eab 	.word	0x08005eab
 8005c70:	08005eab 	.word	0x08005eab
 8005c74:	08005e4b 	.word	0x08005e4b
 8005c78:	08005e77 	.word	0x08005e77
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	7c12      	ldrb	r2, [r2, #16]
 8005c88:	f107 0108 	add.w	r1, r7, #8
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
 8005c90:	60f8      	str	r0, [r7, #12]
    break;
 8005c92:	e112      	b.n	8005eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	7c1b      	ldrb	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10d      	bne.n	8005cb8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	f107 0208 	add.w	r2, r7, #8
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
 8005cac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005cb6:	e100      	b.n	8005eba <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	f107 0208 	add.w	r2, r7, #8
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	4798      	blx	r3
 8005cc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	2202      	movs	r2, #2
 8005cd0:	701a      	strb	r2, [r3, #0]
    break;
 8005cd2:	e0f2      	b.n	8005eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	885b      	ldrh	r3, [r3, #2]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	f200 80ac 	bhi.w	8005e38 <USBD_GetDescriptor+0x204>
 8005ce0:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <USBD_GetDescriptor+0xb4>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005d01 	.word	0x08005d01
 8005cec:	08005d35 	.word	0x08005d35
 8005cf0:	08005d69 	.word	0x08005d69
 8005cf4:	08005d9d 	.word	0x08005d9d
 8005cf8:	08005dd1 	.word	0x08005dd1
 8005cfc:	08005e05 	.word	0x08005e05
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	7c12      	ldrb	r2, [r2, #16]
 8005d18:	f107 0108 	add.w	r1, r7, #8
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d22:	e091      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 faaa 	bl	8006280 <USBD_CtlError>
        err++;
 8005d2c:	7afb      	ldrb	r3, [r7, #11]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	72fb      	strb	r3, [r7, #11]
      break;
 8005d32:	e089      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	7c12      	ldrb	r2, [r2, #16]
 8005d4c:	f107 0108 	add.w	r1, r7, #8
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d56:	e077      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fa90 	bl	8006280 <USBD_CtlError>
        err++;
 8005d60:	7afb      	ldrb	r3, [r7, #11]
 8005d62:	3301      	adds	r3, #1
 8005d64:	72fb      	strb	r3, [r7, #11]
      break;
 8005d66:	e06f      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	7c12      	ldrb	r2, [r2, #16]
 8005d80:	f107 0108 	add.w	r1, r7, #8
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d8a:	e05d      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa76 	bl	8006280 <USBD_CtlError>
        err++;
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	3301      	adds	r3, #1
 8005d98:	72fb      	strb	r3, [r7, #11]
      break;
 8005d9a:	e055      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	7c12      	ldrb	r2, [r2, #16]
 8005db4:	f107 0108 	add.w	r1, r7, #8
 8005db8:	4610      	mov	r0, r2
 8005dba:	4798      	blx	r3
 8005dbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dbe:	e043      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa5c 	bl	8006280 <USBD_CtlError>
        err++;
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	72fb      	strb	r3, [r7, #11]
      break;
 8005dce:	e03b      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	7c12      	ldrb	r2, [r2, #16]
 8005de8:	f107 0108 	add.w	r1, r7, #8
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005df2:	e029      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fa42 	bl	8006280 <USBD_CtlError>
        err++;
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	72fb      	strb	r3, [r7, #11]
      break;
 8005e02:	e021      	b.n	8005e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	7c12      	ldrb	r2, [r2, #16]
 8005e1c:	f107 0108 	add.w	r1, r7, #8
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e26:	e00f      	b.n	8005e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa28 	bl	8006280 <USBD_CtlError>
        err++;
 8005e30:	7afb      	ldrb	r3, [r7, #11]
 8005e32:	3301      	adds	r3, #1
 8005e34:	72fb      	strb	r3, [r7, #11]
      break;
 8005e36:	e007      	b.n	8005e48 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa20 	bl	8006280 <USBD_CtlError>
      err++;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	3301      	adds	r3, #1
 8005e44:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005e46:	bf00      	nop
    }
    break;
 8005e48:	e037      	b.n	8005eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	7c1b      	ldrb	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d109      	bne.n	8005e66 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5a:	f107 0208 	add.w	r2, r7, #8
 8005e5e:	4610      	mov	r0, r2
 8005e60:	4798      	blx	r3
 8005e62:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005e64:	e029      	b.n	8005eba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa09 	bl	8006280 <USBD_CtlError>
      err++;
 8005e6e:	7afb      	ldrb	r3, [r7, #11]
 8005e70:	3301      	adds	r3, #1
 8005e72:	72fb      	strb	r3, [r7, #11]
    break;
 8005e74:	e021      	b.n	8005eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7c1b      	ldrb	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10d      	bne.n	8005e9a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	f107 0208 	add.w	r2, r7, #8
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4798      	blx	r3
 8005e8e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	2207      	movs	r2, #7
 8005e96:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005e98:	e00f      	b.n	8005eba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f9ef 	bl	8006280 <USBD_CtlError>
      err++;
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	72fb      	strb	r3, [r7, #11]
    break;
 8005ea8:	e007      	b.n	8005eba <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f9e7 	bl	8006280 <USBD_CtlError>
    err++;
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	72fb      	strb	r3, [r7, #11]
    break;
 8005eb8:	bf00      	nop
  }

  if (err != 0U)
 8005eba:	7afb      	ldrb	r3, [r7, #11]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d11e      	bne.n	8005efe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	88db      	ldrh	r3, [r3, #6]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d016      	beq.n	8005ef6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005ec8:	893b      	ldrh	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	88da      	ldrh	r2, [r3, #6]
 8005ed2:	893b      	ldrh	r3, [r7, #8]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	bf28      	it	cs
 8005ed8:	4613      	movcs	r3, r2
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ede:	893b      	ldrh	r3, [r7, #8]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fa3c 	bl	8006362 <USBD_CtlSendData>
 8005eea:	e009      	b.n	8005f00 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f9c6 	bl	8006280 <USBD_CtlError>
 8005ef4:	e004      	b.n	8005f00 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa8d 	bl	8006416 <USBD_CtlSendStatus>
 8005efc:	e000      	b.n	8005f00 <USBD_GetDescriptor+0x2cc>
    return;
 8005efe:	bf00      	nop
    }
  }
}
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop

08005f08 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	889b      	ldrh	r3, [r3, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d130      	bne.n	8005f7c <USBD_SetAddress+0x74>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	88db      	ldrh	r3, [r3, #6]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d12c      	bne.n	8005f7c <USBD_SetAddress+0x74>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	885b      	ldrh	r3, [r3, #2]
 8005f26:	2b7f      	cmp	r3, #127	; 0x7f
 8005f28:	d828      	bhi.n	8005f7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	885b      	ldrh	r3, [r3, #2]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d104      	bne.n	8005f4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f99c 	bl	8006280 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f48:	e01c      	b.n	8005f84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	7bfa      	ldrb	r2, [r7, #15]
 8005f4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 febe 	bl	8006cd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fa5a 	bl	8006416 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f70:	e008      	b.n	8005f84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7a:	e003      	b.n	8005f84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f97e 	bl	8006280 <USBD_CtlError>
  }
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	885b      	ldrh	r3, [r3, #2]
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	4b4b      	ldr	r3, [pc, #300]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fa4:	4b4a      	ldr	r3, [pc, #296]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d905      	bls.n	8005fb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f966 	bl	8006280 <USBD_CtlError>
    return USBD_FAIL;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e087      	b.n	80060c8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d002      	beq.n	8005fc8 <USBD_SetConfig+0x3c>
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d025      	beq.n	8006012 <USBD_SetConfig+0x86>
 8005fc6:	e071      	b.n	80060ac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005fc8:	4b41      	ldr	r3, [pc, #260]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01c      	beq.n	800600a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005fd0:	4b3f      	ldr	r3, [pc, #252]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fda:	4b3d      	ldr	r3, [pc, #244]	; (80060d0 <USBD_SetConfig+0x144>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff f9a7 	bl	8005334 <USBD_SetClassConfig>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d004      	beq.n	8005ffa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f944 	bl	8006280 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005ff8:	e065      	b.n	80060c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa0b 	bl	8006416 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2203      	movs	r2, #3
 8006004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006008:	e05d      	b.n	80060c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa03 	bl	8006416 <USBD_CtlSendStatus>
    break;
 8006010:	e059      	b.n	80060c6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006012:	4b2f      	ldr	r3, [pc, #188]	; (80060d0 <USBD_SetConfig+0x144>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d112      	bne.n	8006040 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006022:	4b2b      	ldr	r3, [pc, #172]	; (80060d0 <USBD_SetConfig+0x144>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800602c:	4b28      	ldr	r3, [pc, #160]	; (80060d0 <USBD_SetConfig+0x144>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff f99a 	bl	800536c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f9ec 	bl	8006416 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800603e:	e042      	b.n	80060c6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006040:	4b23      	ldr	r3, [pc, #140]	; (80060d0 <USBD_SetConfig+0x144>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	429a      	cmp	r2, r3
 800604c:	d02a      	beq.n	80060a4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff f988 	bl	800536c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800605c:	4b1c      	ldr	r3, [pc, #112]	; (80060d0 <USBD_SetConfig+0x144>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006066:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <USBD_SetConfig+0x144>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff f961 	bl	8005334 <USBD_SetClassConfig>
 8006072:	4603      	mov	r3, r0
 8006074:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00f      	beq.n	800609c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8fe 	bl	8006280 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff f96d 	bl	800536c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800609a:	e014      	b.n	80060c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f9ba 	bl	8006416 <USBD_CtlSendStatus>
    break;
 80060a2:	e010      	b.n	80060c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f9b6 	bl	8006416 <USBD_CtlSendStatus>
    break;
 80060aa:	e00c      	b.n	80060c6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f8e6 	bl	8006280 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060b4:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <USBD_SetConfig+0x144>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff f956 	bl	800536c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80060c0:	2303      	movs	r3, #3
 80060c2:	73fb      	strb	r3, [r7, #15]
    break;
 80060c4:	bf00      	nop
  }

  return ret;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20000208 	.word	0x20000208

080060d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	88db      	ldrh	r3, [r3, #6]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d004      	beq.n	80060f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f8c9 	bl	8006280 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80060ee:	e021      	b.n	8006134 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	db17      	blt.n	800612a <USBD_GetConfig+0x56>
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	dd02      	ble.n	8006104 <USBD_GetConfig+0x30>
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d00b      	beq.n	800611a <USBD_GetConfig+0x46>
 8006102:	e012      	b.n	800612a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3308      	adds	r3, #8
 800610e:	2201      	movs	r2, #1
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f925 	bl	8006362 <USBD_CtlSendData>
      break;
 8006118:	e00c      	b.n	8006134 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3304      	adds	r3, #4
 800611e:	2201      	movs	r2, #1
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f91d 	bl	8006362 <USBD_CtlSendData>
      break;
 8006128:	e004      	b.n	8006134 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f8a7 	bl	8006280 <USBD_CtlError>
      break;
 8006132:	bf00      	nop
}
 8006134:	bf00      	nop
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614c:	3b01      	subs	r3, #1
 800614e:	2b02      	cmp	r3, #2
 8006150:	d81e      	bhi.n	8006190 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	88db      	ldrh	r3, [r3, #6]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d004      	beq.n	8006164 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f88f 	bl	8006280 <USBD_CtlError>
      break;
 8006162:	e01a      	b.n	800619a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f043 0202 	orr.w	r2, r3, #2
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	330c      	adds	r3, #12
 8006184:	2202      	movs	r2, #2
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f8ea 	bl	8006362 <USBD_CtlSendData>
    break;
 800618e:	e004      	b.n	800619a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f874 	bl	8006280 <USBD_CtlError>
    break;
 8006198:	bf00      	nop
  }
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	885b      	ldrh	r3, [r3, #2]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d106      	bne.n	80061c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f92a 	bl	8006416 <USBD_CtlSendStatus>
  }
}
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061da:	3b01      	subs	r3, #1
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d80b      	bhi.n	80061f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	885b      	ldrh	r3, [r3, #2]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d10c      	bne.n	8006202 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f910 	bl	8006416 <USBD_CtlSendStatus>
      }
      break;
 80061f6:	e004      	b.n	8006202 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f840 	bl	8006280 <USBD_CtlError>
      break;
 8006200:	e000      	b.n	8006204 <USBD_ClrFeature+0x3a>
      break;
 8006202:	bf00      	nop
  }
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	781a      	ldrb	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	781a      	ldrb	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3301      	adds	r3, #1
 8006234:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7ff fad3 	bl	80057e2 <SWAPBYTE>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3301      	adds	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3301      	adds	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff fac6 	bl	80057e2 <SWAPBYTE>
 8006256:	4603      	mov	r3, r0
 8006258:	461a      	mov	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3301      	adds	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff fab9 	bl	80057e2 <SWAPBYTE>
 8006270:	4603      	mov	r3, r0
 8006272:	461a      	mov	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	80da      	strh	r2, [r3, #6]
}
 8006278:	bf00      	nop
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800628a:	2180      	movs	r1, #128	; 0x80
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fcb9 	bl	8006c04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006292:	2100      	movs	r1, #0
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fcb5 	bl	8006c04 <USBD_LL_StallEP>
}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b086      	sub	sp, #24
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d036      	beq.n	8006326 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80062bc:	6938      	ldr	r0, [r7, #16]
 80062be:	f000 f836 	bl	800632e <USBD_GetLen>
 80062c2:	4603      	mov	r3, r0
 80062c4:	3301      	adds	r3, #1
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	4413      	add	r3, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	7812      	ldrb	r2, [r2, #0]
 80062da:	701a      	strb	r2, [r3, #0]
  idx++;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	3301      	adds	r3, #1
 80062e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	4413      	add	r3, r2
 80062e8:	2203      	movs	r2, #3
 80062ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	3301      	adds	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80062f2:	e013      	b.n	800631c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4413      	add	r3, r2
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	7812      	ldrb	r2, [r2, #0]
 80062fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	3301      	adds	r3, #1
 8006304:	613b      	str	r3, [r7, #16]
    idx++;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
 8006308:	3301      	adds	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	4413      	add	r3, r2
 8006312:	2200      	movs	r2, #0
 8006314:	701a      	strb	r2, [r3, #0]
    idx++;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	3301      	adds	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e7      	bne.n	80062f4 <USBD_GetString+0x52>
 8006324:	e000      	b.n	8006328 <USBD_GetString+0x86>
    return;
 8006326:	bf00      	nop
  }
}
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800633e:	e005      	b.n	800634c <USBD_GetLen+0x1e>
  {
    len++;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	3301      	adds	r3, #1
 8006344:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	3301      	adds	r3, #1
 800634a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1f5      	bne.n	8006340 <USBD_GetLen+0x12>
  }

  return len;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2202      	movs	r2, #2
 8006372:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	2100      	movs	r1, #0
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fcc4 	bl	8006d16 <USBD_LL_Transmit>

  return USBD_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	2100      	movs	r1, #0
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fcb3 	bl	8006d16 <USBD_LL_Transmit>

  return USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2203      	movs	r2, #3
 80063ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	2100      	movs	r1, #0
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fcb7 	bl	8006d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	2100      	movs	r1, #0
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fca6 	bl	8006d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2204      	movs	r2, #4
 8006422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006426:	2300      	movs	r3, #0
 8006428:	2200      	movs	r2, #0
 800642a:	2100      	movs	r1, #0
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fc72 	bl	8006d16 <USBD_LL_Transmit>

  return USBD_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2205      	movs	r2, #5
 8006448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800644c:	2300      	movs	r3, #0
 800644e:	2200      	movs	r2, #0
 8006450:	2100      	movs	r1, #0
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fc80 	bl	8006d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006468:	2200      	movs	r2, #0
 800646a:	4912      	ldr	r1, [pc, #72]	; (80064b4 <MX_USB_DEVICE_Init+0x50>)
 800646c:	4812      	ldr	r0, [pc, #72]	; (80064b8 <MX_USB_DEVICE_Init+0x54>)
 800646e:	f7fe fef3 	bl	8005258 <USBD_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006478:	f7fa fa32 	bl	80008e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800647c:	490f      	ldr	r1, [pc, #60]	; (80064bc <MX_USB_DEVICE_Init+0x58>)
 800647e:	480e      	ldr	r0, [pc, #56]	; (80064b8 <MX_USB_DEVICE_Init+0x54>)
 8006480:	f7fe ff20 	bl	80052c4 <USBD_RegisterClass>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800648a:	f7fa fa29 	bl	80008e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800648e:	490c      	ldr	r1, [pc, #48]	; (80064c0 <MX_USB_DEVICE_Init+0x5c>)
 8006490:	4809      	ldr	r0, [pc, #36]	; (80064b8 <MX_USB_DEVICE_Init+0x54>)
 8006492:	f7fe fe75 	bl	8005180 <USBD_CDC_RegisterInterface>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800649c:	f7fa fa20 	bl	80008e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80064a0:	4805      	ldr	r0, [pc, #20]	; (80064b8 <MX_USB_DEVICE_Init+0x54>)
 80064a2:	f7fe ff30 	bl	8005306 <USBD_Start>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80064ac:	f7fa fa18 	bl	80008e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80064b0:	bf00      	nop
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20000130 	.word	0x20000130
 80064b8:	20000270 	.word	0x20000270
 80064bc:	20000018 	.word	0x20000018
 80064c0:	2000011c 	.word	0x2000011c

080064c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80064c8:	2200      	movs	r2, #0
 80064ca:	4905      	ldr	r1, [pc, #20]	; (80064e0 <CDC_Init_FS+0x1c>)
 80064cc:	4805      	ldr	r0, [pc, #20]	; (80064e4 <CDC_Init_FS+0x20>)
 80064ce:	f7fe fe6c 	bl	80051aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80064d2:	4905      	ldr	r1, [pc, #20]	; (80064e8 <CDC_Init_FS+0x24>)
 80064d4:	4803      	ldr	r0, [pc, #12]	; (80064e4 <CDC_Init_FS+0x20>)
 80064d6:	f7fe fe81 	bl	80051dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80064da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80064dc:	4618      	mov	r0, r3
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20000d40 	.word	0x20000d40
 80064e4:	20000270 	.word	0x20000270
 80064e8:	20000540 	.word	0x20000540

080064ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80064f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	6039      	str	r1, [r7, #0]
 8006506:	71fb      	strb	r3, [r7, #7]
 8006508:	4613      	mov	r3, r2
 800650a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	2b23      	cmp	r3, #35	; 0x23
 8006510:	d84a      	bhi.n	80065a8 <CDC_Control_FS+0xac>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <CDC_Control_FS+0x1c>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	080065a9 	.word	0x080065a9
 800651c:	080065a9 	.word	0x080065a9
 8006520:	080065a9 	.word	0x080065a9
 8006524:	080065a9 	.word	0x080065a9
 8006528:	080065a9 	.word	0x080065a9
 800652c:	080065a9 	.word	0x080065a9
 8006530:	080065a9 	.word	0x080065a9
 8006534:	080065a9 	.word	0x080065a9
 8006538:	080065a9 	.word	0x080065a9
 800653c:	080065a9 	.word	0x080065a9
 8006540:	080065a9 	.word	0x080065a9
 8006544:	080065a9 	.word	0x080065a9
 8006548:	080065a9 	.word	0x080065a9
 800654c:	080065a9 	.word	0x080065a9
 8006550:	080065a9 	.word	0x080065a9
 8006554:	080065a9 	.word	0x080065a9
 8006558:	080065a9 	.word	0x080065a9
 800655c:	080065a9 	.word	0x080065a9
 8006560:	080065a9 	.word	0x080065a9
 8006564:	080065a9 	.word	0x080065a9
 8006568:	080065a9 	.word	0x080065a9
 800656c:	080065a9 	.word	0x080065a9
 8006570:	080065a9 	.word	0x080065a9
 8006574:	080065a9 	.word	0x080065a9
 8006578:	080065a9 	.word	0x080065a9
 800657c:	080065a9 	.word	0x080065a9
 8006580:	080065a9 	.word	0x080065a9
 8006584:	080065a9 	.word	0x080065a9
 8006588:	080065a9 	.word	0x080065a9
 800658c:	080065a9 	.word	0x080065a9
 8006590:	080065a9 	.word	0x080065a9
 8006594:	080065a9 	.word	0x080065a9
 8006598:	080065a9 	.word	0x080065a9
 800659c:	080065a9 	.word	0x080065a9
 80065a0:	080065a9 	.word	0x080065a9
 80065a4:	080065a9 	.word	0x080065a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80065a8:	bf00      	nop
  }

  return (USBD_OK);
 80065aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	4805      	ldr	r0, [pc, #20]	; (80065dc <CDC_Receive_FS+0x24>)
 80065c6:	f7fe fe09 	bl	80051dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80065ca:	4804      	ldr	r0, [pc, #16]	; (80065dc <CDC_Receive_FS+0x24>)
 80065cc:	f7fe fe1a 	bl	8005204 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80065d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000270 	.word	0x20000270

080065e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80065f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	6039      	str	r1, [r7, #0]
 800660e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2212      	movs	r2, #18
 8006614:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006616:	4b03      	ldr	r3, [pc, #12]	; (8006624 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	2000014c 	.word	0x2000014c

08006628 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	6039      	str	r1, [r7, #0]
 8006632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2204      	movs	r2, #4
 8006638:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800663a:	4b03      	ldr	r3, [pc, #12]	; (8006648 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	20000160 	.word	0x20000160

0800664c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	6039      	str	r1, [r7, #0]
 8006656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d105      	bne.n	800666a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	4907      	ldr	r1, [pc, #28]	; (8006680 <USBD_FS_ProductStrDescriptor+0x34>)
 8006662:	4808      	ldr	r0, [pc, #32]	; (8006684 <USBD_FS_ProductStrDescriptor+0x38>)
 8006664:	f7ff fe1d 	bl	80062a2 <USBD_GetString>
 8006668:	e004      	b.n	8006674 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	4904      	ldr	r1, [pc, #16]	; (8006680 <USBD_FS_ProductStrDescriptor+0x34>)
 800666e:	4805      	ldr	r0, [pc, #20]	; (8006684 <USBD_FS_ProductStrDescriptor+0x38>)
 8006670:	f7ff fe17 	bl	80062a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006674:	4b02      	ldr	r3, [pc, #8]	; (8006680 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20001540 	.word	0x20001540
 8006684:	080076e0 	.word	0x080076e0

08006688 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	6039      	str	r1, [r7, #0]
 8006692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	4904      	ldr	r1, [pc, #16]	; (80066a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006698:	4804      	ldr	r0, [pc, #16]	; (80066ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800669a:	f7ff fe02 	bl	80062a2 <USBD_GetString>
  return USBD_StrDesc;
 800669e:	4b02      	ldr	r3, [pc, #8]	; (80066a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20001540 	.word	0x20001540
 80066ac:	080076f8 	.word	0x080076f8

080066b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	6039      	str	r1, [r7, #0]
 80066ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	221a      	movs	r2, #26
 80066c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80066c2:	f000 f843 	bl	800674c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80066c6:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20000164 	.word	0x20000164

080066d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d105      	bne.n	80066f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	4907      	ldr	r1, [pc, #28]	; (8006708 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066ea:	4808      	ldr	r0, [pc, #32]	; (800670c <USBD_FS_ConfigStrDescriptor+0x38>)
 80066ec:	f7ff fdd9 	bl	80062a2 <USBD_GetString>
 80066f0:	e004      	b.n	80066fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	4904      	ldr	r1, [pc, #16]	; (8006708 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066f6:	4805      	ldr	r0, [pc, #20]	; (800670c <USBD_FS_ConfigStrDescriptor+0x38>)
 80066f8:	f7ff fdd3 	bl	80062a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066fc:	4b02      	ldr	r3, [pc, #8]	; (8006708 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20001540 	.word	0x20001540
 800670c:	0800770c 	.word	0x0800770c

08006710 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	6039      	str	r1, [r7, #0]
 800671a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d105      	bne.n	800672e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	4907      	ldr	r1, [pc, #28]	; (8006744 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006726:	4808      	ldr	r0, [pc, #32]	; (8006748 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006728:	f7ff fdbb 	bl	80062a2 <USBD_GetString>
 800672c:	e004      	b.n	8006738 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	4904      	ldr	r1, [pc, #16]	; (8006744 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006732:	4805      	ldr	r0, [pc, #20]	; (8006748 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006734:	f7ff fdb5 	bl	80062a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006738:	4b02      	ldr	r3, [pc, #8]	; (8006744 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20001540 	.word	0x20001540
 8006748:	08007718 	.word	0x08007718

0800674c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006752:	4b0f      	ldr	r3, [pc, #60]	; (8006790 <Get_SerialNum+0x44>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006758:	4b0e      	ldr	r3, [pc, #56]	; (8006794 <Get_SerialNum+0x48>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800675e:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <Get_SerialNum+0x4c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4413      	add	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006772:	2208      	movs	r2, #8
 8006774:	4909      	ldr	r1, [pc, #36]	; (800679c <Get_SerialNum+0x50>)
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f814 	bl	80067a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800677c:	2204      	movs	r2, #4
 800677e:	4908      	ldr	r1, [pc, #32]	; (80067a0 <Get_SerialNum+0x54>)
 8006780:	68b8      	ldr	r0, [r7, #8]
 8006782:	f000 f80f 	bl	80067a4 <IntToUnicode>
  }
}
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	1fff7a10 	.word	0x1fff7a10
 8006794:	1fff7a14 	.word	0x1fff7a14
 8006798:	1fff7a18 	.word	0x1fff7a18
 800679c:	20000166 	.word	0x20000166
 80067a0:	20000176 	.word	0x20000176

080067a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]
 80067ba:	e027      	b.n	800680c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	0f1b      	lsrs	r3, r3, #28
 80067c0:	2b09      	cmp	r3, #9
 80067c2:	d80b      	bhi.n	80067dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	0f1b      	lsrs	r3, r3, #28
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	4619      	mov	r1, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	440b      	add	r3, r1
 80067d4:	3230      	adds	r2, #48	; 0x30
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e00a      	b.n	80067f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	0f1b      	lsrs	r3, r3, #28
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	4619      	mov	r1, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	440b      	add	r3, r1
 80067ec:	3237      	adds	r2, #55	; 0x37
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	3301      	adds	r3, #1
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	4413      	add	r3, r2
 8006802:	2200      	movs	r2, #0
 8006804:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	3301      	adds	r3, #1
 800680a:	75fb      	strb	r3, [r7, #23]
 800680c:	7dfa      	ldrb	r2, [r7, #23]
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	429a      	cmp	r2, r3
 8006812:	d3d3      	bcc.n	80067bc <IntToUnicode+0x18>
  }
}
 8006814:	bf00      	nop
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08a      	sub	sp, #40	; 0x28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006828:	f107 0314 	add.w	r3, r7, #20
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	609a      	str	r2, [r3, #8]
 8006834:	60da      	str	r2, [r3, #12]
 8006836:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006840:	d13a      	bne.n	80068b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	4b1e      	ldr	r3, [pc, #120]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	4a1d      	ldr	r2, [pc, #116]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 800684c:	f043 0301 	orr.w	r3, r3, #1
 8006850:	6313      	str	r3, [r2, #48]	; 0x30
 8006852:	4b1b      	ldr	r3, [pc, #108]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800685e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006864:	2302      	movs	r3, #2
 8006866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006868:	2300      	movs	r3, #0
 800686a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800686c:	2303      	movs	r3, #3
 800686e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006870:	230a      	movs	r3, #10
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006874:	f107 0314 	add.w	r3, r7, #20
 8006878:	4619      	mov	r1, r3
 800687a:	4812      	ldr	r0, [pc, #72]	; (80068c4 <HAL_PCD_MspInit+0xa4>)
 800687c:	f7fa fad8 	bl	8000e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006880:	4b0f      	ldr	r3, [pc, #60]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	4a0e      	ldr	r2, [pc, #56]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 8006886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688a:	6353      	str	r3, [r2, #52]	; 0x34
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 8006892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006894:	4a0a      	ldr	r2, [pc, #40]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 8006896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800689a:	6453      	str	r3, [r2, #68]	; 0x44
 800689c:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <HAL_PCD_MspInit+0xa0>)
 800689e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80068a8:	2200      	movs	r2, #0
 80068aa:	2100      	movs	r1, #0
 80068ac:	2043      	movs	r0, #67	; 0x43
 80068ae:	f7fa fa88 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80068b2:	2043      	movs	r0, #67	; 0x43
 80068b4:	f7fa faa1 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80068b8:	bf00      	nop
 80068ba:	3728      	adds	r7, #40	; 0x28
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40020000 	.word	0x40020000

080068c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068dc:	4619      	mov	r1, r3
 80068de:	4610      	mov	r0, r2
 80068e0:	f7fe fd5c 	bl	800539c <USBD_LL_SetupStage>
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80068fe:	78fa      	ldrb	r2, [r7, #3]
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	4613      	mov	r3, r2
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	78fb      	ldrb	r3, [r7, #3]
 8006914:	4619      	mov	r1, r3
 8006916:	f7fe fd94 	bl	8005442 <USBD_LL_DataOutStage>
}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	460b      	mov	r3, r1
 800692c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006934:	78fa      	ldrb	r2, [r7, #3]
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	4613      	mov	r3, r2
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	1a9b      	subs	r3, r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	3348      	adds	r3, #72	; 0x48
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	4619      	mov	r1, r3
 800694a:	f7fe fddd 	bl	8005508 <USBD_LL_DataInStage>
}
 800694e:	bf00      	nop
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe fee1 	bl	800572c <USBD_LL_SOF>
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d102      	bne.n	800698c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
 800698a:	e008      	b.n	800699e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d102      	bne.n	800699a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006994:	2301      	movs	r3, #1
 8006996:	73fb      	strb	r3, [r7, #15]
 8006998:	e001      	b.n	800699e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800699a:	f7f9 ffa1 	bl	80008e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069a4:	7bfa      	ldrb	r2, [r7, #15]
 80069a6:	4611      	mov	r1, r2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fe fe84 	bl	80056b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe fe3d 	bl	8005634 <USBD_LL_Reset>
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe fe7f 	bl	80056d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6812      	ldr	r2, [r2, #0]
 80069e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069ea:	f043 0301 	orr.w	r3, r3, #1
 80069ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80069f8:	4b04      	ldr	r3, [pc, #16]	; (8006a0c <HAL_PCD_SuspendCallback+0x48>)
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	4a03      	ldr	r2, [pc, #12]	; (8006a0c <HAL_PCD_SuspendCallback+0x48>)
 80069fe:	f043 0306 	orr.w	r3, r3, #6
 8006a02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a04:	bf00      	nop
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	e000ed00 	.word	0xe000ed00

08006a10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fe6e 	bl	8005700 <USBD_LL_Resume>
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a3e:	78fa      	ldrb	r2, [r7, #3]
 8006a40:	4611      	mov	r1, r2
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fe99 	bl	800577a <USBD_LL_IsoOUTIncomplete>
}
 8006a48:	bf00      	nop
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a62:	78fa      	ldrb	r2, [r7, #3]
 8006a64:	4611      	mov	r1, r2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fe7a 	bl	8005760 <USBD_LL_IsoINIncomplete>
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe fe86 	bl	8005794 <USBD_LL_DevConnected>
}
 8006a88:	bf00      	nop
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fe83 	bl	80057aa <USBD_LL_DevDisconnected>
}
 8006aa4:	bf00      	nop
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d13c      	bne.n	8006b36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006abc:	4a20      	ldr	r2, [pc, #128]	; (8006b40 <USBD_LL_Init+0x94>)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a1e      	ldr	r2, [pc, #120]	; (8006b40 <USBD_LL_Init+0x94>)
 8006ac8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006acc:	4b1c      	ldr	r3, [pc, #112]	; (8006b40 <USBD_LL_Init+0x94>)
 8006ace:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ad2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006ad4:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <USBD_LL_Init+0x94>)
 8006ad6:	2204      	movs	r2, #4
 8006ad8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006ada:	4b19      	ldr	r3, [pc, #100]	; (8006b40 <USBD_LL_Init+0x94>)
 8006adc:	2202      	movs	r2, #2
 8006ade:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ae0:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <USBD_LL_Init+0x94>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006ae6:	4b16      	ldr	r3, [pc, #88]	; (8006b40 <USBD_LL_Init+0x94>)
 8006ae8:	2202      	movs	r2, #2
 8006aea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006aec:	4b14      	ldr	r3, [pc, #80]	; (8006b40 <USBD_LL_Init+0x94>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006af2:	4b13      	ldr	r3, [pc, #76]	; (8006b40 <USBD_LL_Init+0x94>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006af8:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <USBD_LL_Init+0x94>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006afe:	4b10      	ldr	r3, [pc, #64]	; (8006b40 <USBD_LL_Init+0x94>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006b04:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <USBD_LL_Init+0x94>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006b0a:	480d      	ldr	r0, [pc, #52]	; (8006b40 <USBD_LL_Init+0x94>)
 8006b0c:	f7fa fb43 	bl	8001196 <HAL_PCD_Init>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006b16:	f7f9 fee3 	bl	80008e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006b1a:	2180      	movs	r1, #128	; 0x80
 8006b1c:	4808      	ldr	r0, [pc, #32]	; (8006b40 <USBD_LL_Init+0x94>)
 8006b1e:	f7fb fca0 	bl	8002462 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006b22:	2240      	movs	r2, #64	; 0x40
 8006b24:	2100      	movs	r1, #0
 8006b26:	4806      	ldr	r0, [pc, #24]	; (8006b40 <USBD_LL_Init+0x94>)
 8006b28:	f7fb fc54 	bl	80023d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006b2c:	2280      	movs	r2, #128	; 0x80
 8006b2e:	2101      	movs	r1, #1
 8006b30:	4803      	ldr	r0, [pc, #12]	; (8006b40 <USBD_LL_Init+0x94>)
 8006b32:	f7fb fc4f 	bl	80023d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20001740 	.word	0x20001740

08006b44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fa fc38 	bl	80013d0 <HAL_PCD_Start>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 f92a 	bl	8006dc0 <USBD_Get_USB_Status>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	4608      	mov	r0, r1
 8006b84:	4611      	mov	r1, r2
 8006b86:	461a      	mov	r2, r3
 8006b88:	4603      	mov	r3, r0
 8006b8a:	70fb      	strb	r3, [r7, #3]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70bb      	strb	r3, [r7, #2]
 8006b90:	4613      	mov	r3, r2
 8006b92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006ba2:	78bb      	ldrb	r3, [r7, #2]
 8006ba4:	883a      	ldrh	r2, [r7, #0]
 8006ba6:	78f9      	ldrb	r1, [r7, #3]
 8006ba8:	f7fb f81c 	bl	8001be4 <HAL_PCD_EP_Open>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 f904 	bl	8006dc0 <USBD_Get_USB_Status>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006be0:	78fa      	ldrb	r2, [r7, #3]
 8006be2:	4611      	mov	r1, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fb f865 	bl	8001cb4 <HAL_PCD_EP_Close>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 f8e5 	bl	8006dc0 <USBD_Get_USB_Status>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c1e:	78fa      	ldrb	r2, [r7, #3]
 8006c20:	4611      	mov	r1, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fb f93d 	bl	8001ea2 <HAL_PCD_EP_SetStall>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f8c6 	bl	8006dc0 <USBD_Get_USB_Status>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c5c:	78fa      	ldrb	r2, [r7, #3]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fb f982 	bl	8001f6a <HAL_PCD_EP_ClrStall>
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 f8a7 	bl	8006dc0 <USBD_Get_USB_Status>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	da0b      	bge.n	8006cb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ca2:	68f9      	ldr	r1, [r7, #12]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	333e      	adds	r3, #62	; 0x3e
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	e00b      	b.n	8006ccc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	1a9b      	subs	r3, r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006cca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cf2:	78fa      	ldrb	r2, [r7, #3]
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fa ff4f 	bl	8001b9a <HAL_PCD_SetAddress>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 f85c 	bl	8006dc0 <USBD_Get_USB_Status>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b086      	sub	sp, #24
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
 8006d22:	460b      	mov	r3, r1
 8006d24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006d34:	7af9      	ldrb	r1, [r7, #11]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	f7fb f868 	bl	8001e0e <HAL_PCD_EP_Transmit>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 f83b 	bl	8006dc0 <USBD_Get_USB_Status>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	460b      	mov	r3, r1
 8006d66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006d76:	7af9      	ldrb	r1, [r7, #11]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	f7fa ffe4 	bl	8001d48 <HAL_PCD_EP_Receive>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f81a 	bl	8006dc0 <USBD_Get_USB_Status>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d90:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006dac:	78fa      	ldrb	r2, [r7, #3]
 8006dae:	4611      	mov	r1, r2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fb f814 	bl	8001dde <HAL_PCD_EP_GetRxCount>
 8006db6:	4603      	mov	r3, r0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d817      	bhi.n	8006e04 <USBD_Get_USB_Status+0x44>
 8006dd4:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <USBD_Get_USB_Status+0x1c>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006df3 	.word	0x08006df3
 8006de4:	08006df9 	.word	0x08006df9
 8006de8:	08006dff 	.word	0x08006dff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]
    break;
 8006df0:	e00b      	b.n	8006e0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006df2:	2303      	movs	r3, #3
 8006df4:	73fb      	strb	r3, [r7, #15]
    break;
 8006df6:	e008      	b.n	8006e0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8006dfc:	e005      	b.n	8006e0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	73fb      	strb	r3, [r7, #15]
    break;
 8006e02:	e002      	b.n	8006e0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006e04:	2303      	movs	r3, #3
 8006e06:	73fb      	strb	r3, [r7, #15]
    break;
 8006e08:	bf00      	nop
  }
  return usb_status;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <__errno>:
 8006e18:	4b01      	ldr	r3, [pc, #4]	; (8006e20 <__errno+0x8>)
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20000180 	.word	0x20000180

08006e24 <__libc_init_array>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	4e0d      	ldr	r6, [pc, #52]	; (8006e5c <__libc_init_array+0x38>)
 8006e28:	4c0d      	ldr	r4, [pc, #52]	; (8006e60 <__libc_init_array+0x3c>)
 8006e2a:	1ba4      	subs	r4, r4, r6
 8006e2c:	10a4      	asrs	r4, r4, #2
 8006e2e:	2500      	movs	r5, #0
 8006e30:	42a5      	cmp	r5, r4
 8006e32:	d109      	bne.n	8006e48 <__libc_init_array+0x24>
 8006e34:	4e0b      	ldr	r6, [pc, #44]	; (8006e64 <__libc_init_array+0x40>)
 8006e36:	4c0c      	ldr	r4, [pc, #48]	; (8006e68 <__libc_init_array+0x44>)
 8006e38:	f000 fc36 	bl	80076a8 <_init>
 8006e3c:	1ba4      	subs	r4, r4, r6
 8006e3e:	10a4      	asrs	r4, r4, #2
 8006e40:	2500      	movs	r5, #0
 8006e42:	42a5      	cmp	r5, r4
 8006e44:	d105      	bne.n	8006e52 <__libc_init_array+0x2e>
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e4c:	4798      	blx	r3
 8006e4e:	3501      	adds	r5, #1
 8006e50:	e7ee      	b.n	8006e30 <__libc_init_array+0xc>
 8006e52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e56:	4798      	blx	r3
 8006e58:	3501      	adds	r5, #1
 8006e5a:	e7f2      	b.n	8006e42 <__libc_init_array+0x1e>
 8006e5c:	08007774 	.word	0x08007774
 8006e60:	08007774 	.word	0x08007774
 8006e64:	08007774 	.word	0x08007774
 8006e68:	08007778 	.word	0x08007778

08006e6c <malloc>:
 8006e6c:	4b02      	ldr	r3, [pc, #8]	; (8006e78 <malloc+0xc>)
 8006e6e:	4601      	mov	r1, r0
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	f000 b861 	b.w	8006f38 <_malloc_r>
 8006e76:	bf00      	nop
 8006e78:	20000180 	.word	0x20000180

08006e7c <free>:
 8006e7c:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <free+0xc>)
 8006e7e:	4601      	mov	r1, r0
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	f000 b80b 	b.w	8006e9c <_free_r>
 8006e86:	bf00      	nop
 8006e88:	20000180 	.word	0x20000180

08006e8c <memset>:
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <memset+0xa>
 8006e94:	4770      	bx	lr
 8006e96:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9a:	e7f9      	b.n	8006e90 <memset+0x4>

08006e9c <_free_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	d045      	beq.n	8006f30 <_free_r+0x94>
 8006ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ea8:	1f0c      	subs	r4, r1, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	bfb8      	it	lt
 8006eae:	18e4      	addlt	r4, r4, r3
 8006eb0:	f000 f8cc 	bl	800704c <__malloc_lock>
 8006eb4:	4a1f      	ldr	r2, [pc, #124]	; (8006f34 <_free_r+0x98>)
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	4610      	mov	r0, r2
 8006eba:	b933      	cbnz	r3, 8006eca <_free_r+0x2e>
 8006ebc:	6063      	str	r3, [r4, #4]
 8006ebe:	6014      	str	r4, [r2, #0]
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ec6:	f000 b8c2 	b.w	800704e <__malloc_unlock>
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	d90c      	bls.n	8006ee8 <_free_r+0x4c>
 8006ece:	6821      	ldr	r1, [r4, #0]
 8006ed0:	1862      	adds	r2, r4, r1
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	bf04      	itt	eq
 8006ed6:	681a      	ldreq	r2, [r3, #0]
 8006ed8:	685b      	ldreq	r3, [r3, #4]
 8006eda:	6063      	str	r3, [r4, #4]
 8006edc:	bf04      	itt	eq
 8006ede:	1852      	addeq	r2, r2, r1
 8006ee0:	6022      	streq	r2, [r4, #0]
 8006ee2:	6004      	str	r4, [r0, #0]
 8006ee4:	e7ec      	b.n	8006ec0 <_free_r+0x24>
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	b10a      	cbz	r2, 8006ef0 <_free_r+0x54>
 8006eec:	42a2      	cmp	r2, r4
 8006eee:	d9fa      	bls.n	8006ee6 <_free_r+0x4a>
 8006ef0:	6819      	ldr	r1, [r3, #0]
 8006ef2:	1858      	adds	r0, r3, r1
 8006ef4:	42a0      	cmp	r0, r4
 8006ef6:	d10b      	bne.n	8006f10 <_free_r+0x74>
 8006ef8:	6820      	ldr	r0, [r4, #0]
 8006efa:	4401      	add	r1, r0
 8006efc:	1858      	adds	r0, r3, r1
 8006efe:	4282      	cmp	r2, r0
 8006f00:	6019      	str	r1, [r3, #0]
 8006f02:	d1dd      	bne.n	8006ec0 <_free_r+0x24>
 8006f04:	6810      	ldr	r0, [r2, #0]
 8006f06:	6852      	ldr	r2, [r2, #4]
 8006f08:	605a      	str	r2, [r3, #4]
 8006f0a:	4401      	add	r1, r0
 8006f0c:	6019      	str	r1, [r3, #0]
 8006f0e:	e7d7      	b.n	8006ec0 <_free_r+0x24>
 8006f10:	d902      	bls.n	8006f18 <_free_r+0x7c>
 8006f12:	230c      	movs	r3, #12
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	e7d3      	b.n	8006ec0 <_free_r+0x24>
 8006f18:	6820      	ldr	r0, [r4, #0]
 8006f1a:	1821      	adds	r1, r4, r0
 8006f1c:	428a      	cmp	r2, r1
 8006f1e:	bf04      	itt	eq
 8006f20:	6811      	ldreq	r1, [r2, #0]
 8006f22:	6852      	ldreq	r2, [r2, #4]
 8006f24:	6062      	str	r2, [r4, #4]
 8006f26:	bf04      	itt	eq
 8006f28:	1809      	addeq	r1, r1, r0
 8006f2a:	6021      	streq	r1, [r4, #0]
 8006f2c:	605c      	str	r4, [r3, #4]
 8006f2e:	e7c7      	b.n	8006ec0 <_free_r+0x24>
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	2000020c 	.word	0x2000020c

08006f38 <_malloc_r>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	1ccd      	adds	r5, r1, #3
 8006f3c:	f025 0503 	bic.w	r5, r5, #3
 8006f40:	3508      	adds	r5, #8
 8006f42:	2d0c      	cmp	r5, #12
 8006f44:	bf38      	it	cc
 8006f46:	250c      	movcc	r5, #12
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	db01      	blt.n	8006f52 <_malloc_r+0x1a>
 8006f4e:	42a9      	cmp	r1, r5
 8006f50:	d903      	bls.n	8006f5a <_malloc_r+0x22>
 8006f52:	230c      	movs	r3, #12
 8006f54:	6033      	str	r3, [r6, #0]
 8006f56:	2000      	movs	r0, #0
 8006f58:	bd70      	pop	{r4, r5, r6, pc}
 8006f5a:	f000 f877 	bl	800704c <__malloc_lock>
 8006f5e:	4a21      	ldr	r2, [pc, #132]	; (8006fe4 <_malloc_r+0xac>)
 8006f60:	6814      	ldr	r4, [r2, #0]
 8006f62:	4621      	mov	r1, r4
 8006f64:	b991      	cbnz	r1, 8006f8c <_malloc_r+0x54>
 8006f66:	4c20      	ldr	r4, [pc, #128]	; (8006fe8 <_malloc_r+0xb0>)
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	b91b      	cbnz	r3, 8006f74 <_malloc_r+0x3c>
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	f000 f83d 	bl	8006fec <_sbrk_r>
 8006f72:	6020      	str	r0, [r4, #0]
 8006f74:	4629      	mov	r1, r5
 8006f76:	4630      	mov	r0, r6
 8006f78:	f000 f838 	bl	8006fec <_sbrk_r>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d124      	bne.n	8006fca <_malloc_r+0x92>
 8006f80:	230c      	movs	r3, #12
 8006f82:	6033      	str	r3, [r6, #0]
 8006f84:	4630      	mov	r0, r6
 8006f86:	f000 f862 	bl	800704e <__malloc_unlock>
 8006f8a:	e7e4      	b.n	8006f56 <_malloc_r+0x1e>
 8006f8c:	680b      	ldr	r3, [r1, #0]
 8006f8e:	1b5b      	subs	r3, r3, r5
 8006f90:	d418      	bmi.n	8006fc4 <_malloc_r+0x8c>
 8006f92:	2b0b      	cmp	r3, #11
 8006f94:	d90f      	bls.n	8006fb6 <_malloc_r+0x7e>
 8006f96:	600b      	str	r3, [r1, #0]
 8006f98:	50cd      	str	r5, [r1, r3]
 8006f9a:	18cc      	adds	r4, r1, r3
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f000 f856 	bl	800704e <__malloc_unlock>
 8006fa2:	f104 000b 	add.w	r0, r4, #11
 8006fa6:	1d23      	adds	r3, r4, #4
 8006fa8:	f020 0007 	bic.w	r0, r0, #7
 8006fac:	1ac3      	subs	r3, r0, r3
 8006fae:	d0d3      	beq.n	8006f58 <_malloc_r+0x20>
 8006fb0:	425a      	negs	r2, r3
 8006fb2:	50e2      	str	r2, [r4, r3]
 8006fb4:	e7d0      	b.n	8006f58 <_malloc_r+0x20>
 8006fb6:	428c      	cmp	r4, r1
 8006fb8:	684b      	ldr	r3, [r1, #4]
 8006fba:	bf16      	itet	ne
 8006fbc:	6063      	strne	r3, [r4, #4]
 8006fbe:	6013      	streq	r3, [r2, #0]
 8006fc0:	460c      	movne	r4, r1
 8006fc2:	e7eb      	b.n	8006f9c <_malloc_r+0x64>
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	6849      	ldr	r1, [r1, #4]
 8006fc8:	e7cc      	b.n	8006f64 <_malloc_r+0x2c>
 8006fca:	1cc4      	adds	r4, r0, #3
 8006fcc:	f024 0403 	bic.w	r4, r4, #3
 8006fd0:	42a0      	cmp	r0, r4
 8006fd2:	d005      	beq.n	8006fe0 <_malloc_r+0xa8>
 8006fd4:	1a21      	subs	r1, r4, r0
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f000 f808 	bl	8006fec <_sbrk_r>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d0cf      	beq.n	8006f80 <_malloc_r+0x48>
 8006fe0:	6025      	str	r5, [r4, #0]
 8006fe2:	e7db      	b.n	8006f9c <_malloc_r+0x64>
 8006fe4:	2000020c 	.word	0x2000020c
 8006fe8:	20000210 	.word	0x20000210

08006fec <_sbrk_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4c06      	ldr	r4, [pc, #24]	; (8007008 <_sbrk_r+0x1c>)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	6023      	str	r3, [r4, #0]
 8006ff8:	f7f9 fcfe 	bl	80009f8 <_sbrk>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_sbrk_r+0x1a>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	b103      	cbz	r3, 8007006 <_sbrk_r+0x1a>
 8007004:	602b      	str	r3, [r5, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20001b48 	.word	0x20001b48

0800700c <siprintf>:
 800700c:	b40e      	push	{r1, r2, r3}
 800700e:	b500      	push	{lr}
 8007010:	b09c      	sub	sp, #112	; 0x70
 8007012:	ab1d      	add	r3, sp, #116	; 0x74
 8007014:	9002      	str	r0, [sp, #8]
 8007016:	9006      	str	r0, [sp, #24]
 8007018:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800701c:	4809      	ldr	r0, [pc, #36]	; (8007044 <siprintf+0x38>)
 800701e:	9107      	str	r1, [sp, #28]
 8007020:	9104      	str	r1, [sp, #16]
 8007022:	4909      	ldr	r1, [pc, #36]	; (8007048 <siprintf+0x3c>)
 8007024:	f853 2b04 	ldr.w	r2, [r3], #4
 8007028:	9105      	str	r1, [sp, #20]
 800702a:	6800      	ldr	r0, [r0, #0]
 800702c:	9301      	str	r3, [sp, #4]
 800702e:	a902      	add	r1, sp, #8
 8007030:	f000 f868 	bl	8007104 <_svfiprintf_r>
 8007034:	9b02      	ldr	r3, [sp, #8]
 8007036:	2200      	movs	r2, #0
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	b01c      	add	sp, #112	; 0x70
 800703c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007040:	b003      	add	sp, #12
 8007042:	4770      	bx	lr
 8007044:	20000180 	.word	0x20000180
 8007048:	ffff0208 	.word	0xffff0208

0800704c <__malloc_lock>:
 800704c:	4770      	bx	lr

0800704e <__malloc_unlock>:
 800704e:	4770      	bx	lr

08007050 <__ssputs_r>:
 8007050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007054:	688e      	ldr	r6, [r1, #8]
 8007056:	429e      	cmp	r6, r3
 8007058:	4682      	mov	sl, r0
 800705a:	460c      	mov	r4, r1
 800705c:	4690      	mov	r8, r2
 800705e:	4699      	mov	r9, r3
 8007060:	d837      	bhi.n	80070d2 <__ssputs_r+0x82>
 8007062:	898a      	ldrh	r2, [r1, #12]
 8007064:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007068:	d031      	beq.n	80070ce <__ssputs_r+0x7e>
 800706a:	6825      	ldr	r5, [r4, #0]
 800706c:	6909      	ldr	r1, [r1, #16]
 800706e:	1a6f      	subs	r7, r5, r1
 8007070:	6965      	ldr	r5, [r4, #20]
 8007072:	2302      	movs	r3, #2
 8007074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007078:	fb95 f5f3 	sdiv	r5, r5, r3
 800707c:	f109 0301 	add.w	r3, r9, #1
 8007080:	443b      	add	r3, r7
 8007082:	429d      	cmp	r5, r3
 8007084:	bf38      	it	cc
 8007086:	461d      	movcc	r5, r3
 8007088:	0553      	lsls	r3, r2, #21
 800708a:	d530      	bpl.n	80070ee <__ssputs_r+0x9e>
 800708c:	4629      	mov	r1, r5
 800708e:	f7ff ff53 	bl	8006f38 <_malloc_r>
 8007092:	4606      	mov	r6, r0
 8007094:	b950      	cbnz	r0, 80070ac <__ssputs_r+0x5c>
 8007096:	230c      	movs	r3, #12
 8007098:	f8ca 3000 	str.w	r3, [sl]
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a2:	81a3      	strh	r3, [r4, #12]
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ac:	463a      	mov	r2, r7
 80070ae:	6921      	ldr	r1, [r4, #16]
 80070b0:	f000 faa8 	bl	8007604 <memcpy>
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	6126      	str	r6, [r4, #16]
 80070c2:	6165      	str	r5, [r4, #20]
 80070c4:	443e      	add	r6, r7
 80070c6:	1bed      	subs	r5, r5, r7
 80070c8:	6026      	str	r6, [r4, #0]
 80070ca:	60a5      	str	r5, [r4, #8]
 80070cc:	464e      	mov	r6, r9
 80070ce:	454e      	cmp	r6, r9
 80070d0:	d900      	bls.n	80070d4 <__ssputs_r+0x84>
 80070d2:	464e      	mov	r6, r9
 80070d4:	4632      	mov	r2, r6
 80070d6:	4641      	mov	r1, r8
 80070d8:	6820      	ldr	r0, [r4, #0]
 80070da:	f000 fa9e 	bl	800761a <memmove>
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	1b9b      	subs	r3, r3, r6
 80070e2:	60a3      	str	r3, [r4, #8]
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	441e      	add	r6, r3
 80070e8:	6026      	str	r6, [r4, #0]
 80070ea:	2000      	movs	r0, #0
 80070ec:	e7dc      	b.n	80070a8 <__ssputs_r+0x58>
 80070ee:	462a      	mov	r2, r5
 80070f0:	f000 faac 	bl	800764c <_realloc_r>
 80070f4:	4606      	mov	r6, r0
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d1e2      	bne.n	80070c0 <__ssputs_r+0x70>
 80070fa:	6921      	ldr	r1, [r4, #16]
 80070fc:	4650      	mov	r0, sl
 80070fe:	f7ff fecd 	bl	8006e9c <_free_r>
 8007102:	e7c8      	b.n	8007096 <__ssputs_r+0x46>

08007104 <_svfiprintf_r>:
 8007104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	461d      	mov	r5, r3
 800710a:	898b      	ldrh	r3, [r1, #12]
 800710c:	061f      	lsls	r7, r3, #24
 800710e:	b09d      	sub	sp, #116	; 0x74
 8007110:	4680      	mov	r8, r0
 8007112:	460c      	mov	r4, r1
 8007114:	4616      	mov	r6, r2
 8007116:	d50f      	bpl.n	8007138 <_svfiprintf_r+0x34>
 8007118:	690b      	ldr	r3, [r1, #16]
 800711a:	b96b      	cbnz	r3, 8007138 <_svfiprintf_r+0x34>
 800711c:	2140      	movs	r1, #64	; 0x40
 800711e:	f7ff ff0b 	bl	8006f38 <_malloc_r>
 8007122:	6020      	str	r0, [r4, #0]
 8007124:	6120      	str	r0, [r4, #16]
 8007126:	b928      	cbnz	r0, 8007134 <_svfiprintf_r+0x30>
 8007128:	230c      	movs	r3, #12
 800712a:	f8c8 3000 	str.w	r3, [r8]
 800712e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007132:	e0c8      	b.n	80072c6 <_svfiprintf_r+0x1c2>
 8007134:	2340      	movs	r3, #64	; 0x40
 8007136:	6163      	str	r3, [r4, #20]
 8007138:	2300      	movs	r3, #0
 800713a:	9309      	str	r3, [sp, #36]	; 0x24
 800713c:	2320      	movs	r3, #32
 800713e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007142:	2330      	movs	r3, #48	; 0x30
 8007144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007148:	9503      	str	r5, [sp, #12]
 800714a:	f04f 0b01 	mov.w	fp, #1
 800714e:	4637      	mov	r7, r6
 8007150:	463d      	mov	r5, r7
 8007152:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007156:	b10b      	cbz	r3, 800715c <_svfiprintf_r+0x58>
 8007158:	2b25      	cmp	r3, #37	; 0x25
 800715a:	d13e      	bne.n	80071da <_svfiprintf_r+0xd6>
 800715c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007160:	d00b      	beq.n	800717a <_svfiprintf_r+0x76>
 8007162:	4653      	mov	r3, sl
 8007164:	4632      	mov	r2, r6
 8007166:	4621      	mov	r1, r4
 8007168:	4640      	mov	r0, r8
 800716a:	f7ff ff71 	bl	8007050 <__ssputs_r>
 800716e:	3001      	adds	r0, #1
 8007170:	f000 80a4 	beq.w	80072bc <_svfiprintf_r+0x1b8>
 8007174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007176:	4453      	add	r3, sl
 8007178:	9309      	str	r3, [sp, #36]	; 0x24
 800717a:	783b      	ldrb	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 809d 	beq.w	80072bc <_svfiprintf_r+0x1b8>
 8007182:	2300      	movs	r3, #0
 8007184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	9307      	str	r3, [sp, #28]
 8007190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007194:	931a      	str	r3, [sp, #104]	; 0x68
 8007196:	462f      	mov	r7, r5
 8007198:	2205      	movs	r2, #5
 800719a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800719e:	4850      	ldr	r0, [pc, #320]	; (80072e0 <_svfiprintf_r+0x1dc>)
 80071a0:	f7f9 f816 	bl	80001d0 <memchr>
 80071a4:	9b04      	ldr	r3, [sp, #16]
 80071a6:	b9d0      	cbnz	r0, 80071de <_svfiprintf_r+0xda>
 80071a8:	06d9      	lsls	r1, r3, #27
 80071aa:	bf44      	itt	mi
 80071ac:	2220      	movmi	r2, #32
 80071ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071b2:	071a      	lsls	r2, r3, #28
 80071b4:	bf44      	itt	mi
 80071b6:	222b      	movmi	r2, #43	; 0x2b
 80071b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071bc:	782a      	ldrb	r2, [r5, #0]
 80071be:	2a2a      	cmp	r2, #42	; 0x2a
 80071c0:	d015      	beq.n	80071ee <_svfiprintf_r+0xea>
 80071c2:	9a07      	ldr	r2, [sp, #28]
 80071c4:	462f      	mov	r7, r5
 80071c6:	2000      	movs	r0, #0
 80071c8:	250a      	movs	r5, #10
 80071ca:	4639      	mov	r1, r7
 80071cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071d0:	3b30      	subs	r3, #48	; 0x30
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	d94d      	bls.n	8007272 <_svfiprintf_r+0x16e>
 80071d6:	b1b8      	cbz	r0, 8007208 <_svfiprintf_r+0x104>
 80071d8:	e00f      	b.n	80071fa <_svfiprintf_r+0xf6>
 80071da:	462f      	mov	r7, r5
 80071dc:	e7b8      	b.n	8007150 <_svfiprintf_r+0x4c>
 80071de:	4a40      	ldr	r2, [pc, #256]	; (80072e0 <_svfiprintf_r+0x1dc>)
 80071e0:	1a80      	subs	r0, r0, r2
 80071e2:	fa0b f000 	lsl.w	r0, fp, r0
 80071e6:	4318      	orrs	r0, r3
 80071e8:	9004      	str	r0, [sp, #16]
 80071ea:	463d      	mov	r5, r7
 80071ec:	e7d3      	b.n	8007196 <_svfiprintf_r+0x92>
 80071ee:	9a03      	ldr	r2, [sp, #12]
 80071f0:	1d11      	adds	r1, r2, #4
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	9103      	str	r1, [sp, #12]
 80071f6:	2a00      	cmp	r2, #0
 80071f8:	db01      	blt.n	80071fe <_svfiprintf_r+0xfa>
 80071fa:	9207      	str	r2, [sp, #28]
 80071fc:	e004      	b.n	8007208 <_svfiprintf_r+0x104>
 80071fe:	4252      	negs	r2, r2
 8007200:	f043 0302 	orr.w	r3, r3, #2
 8007204:	9207      	str	r2, [sp, #28]
 8007206:	9304      	str	r3, [sp, #16]
 8007208:	783b      	ldrb	r3, [r7, #0]
 800720a:	2b2e      	cmp	r3, #46	; 0x2e
 800720c:	d10c      	bne.n	8007228 <_svfiprintf_r+0x124>
 800720e:	787b      	ldrb	r3, [r7, #1]
 8007210:	2b2a      	cmp	r3, #42	; 0x2a
 8007212:	d133      	bne.n	800727c <_svfiprintf_r+0x178>
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	1d1a      	adds	r2, r3, #4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	9203      	str	r2, [sp, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	bfb8      	it	lt
 8007220:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007224:	3702      	adds	r7, #2
 8007226:	9305      	str	r3, [sp, #20]
 8007228:	4d2e      	ldr	r5, [pc, #184]	; (80072e4 <_svfiprintf_r+0x1e0>)
 800722a:	7839      	ldrb	r1, [r7, #0]
 800722c:	2203      	movs	r2, #3
 800722e:	4628      	mov	r0, r5
 8007230:	f7f8 ffce 	bl	80001d0 <memchr>
 8007234:	b138      	cbz	r0, 8007246 <_svfiprintf_r+0x142>
 8007236:	2340      	movs	r3, #64	; 0x40
 8007238:	1b40      	subs	r0, r0, r5
 800723a:	fa03 f000 	lsl.w	r0, r3, r0
 800723e:	9b04      	ldr	r3, [sp, #16]
 8007240:	4303      	orrs	r3, r0
 8007242:	3701      	adds	r7, #1
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	7839      	ldrb	r1, [r7, #0]
 8007248:	4827      	ldr	r0, [pc, #156]	; (80072e8 <_svfiprintf_r+0x1e4>)
 800724a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800724e:	2206      	movs	r2, #6
 8007250:	1c7e      	adds	r6, r7, #1
 8007252:	f7f8 ffbd 	bl	80001d0 <memchr>
 8007256:	2800      	cmp	r0, #0
 8007258:	d038      	beq.n	80072cc <_svfiprintf_r+0x1c8>
 800725a:	4b24      	ldr	r3, [pc, #144]	; (80072ec <_svfiprintf_r+0x1e8>)
 800725c:	bb13      	cbnz	r3, 80072a4 <_svfiprintf_r+0x1a0>
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	3307      	adds	r3, #7
 8007262:	f023 0307 	bic.w	r3, r3, #7
 8007266:	3308      	adds	r3, #8
 8007268:	9303      	str	r3, [sp, #12]
 800726a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726c:	444b      	add	r3, r9
 800726e:	9309      	str	r3, [sp, #36]	; 0x24
 8007270:	e76d      	b.n	800714e <_svfiprintf_r+0x4a>
 8007272:	fb05 3202 	mla	r2, r5, r2, r3
 8007276:	2001      	movs	r0, #1
 8007278:	460f      	mov	r7, r1
 800727a:	e7a6      	b.n	80071ca <_svfiprintf_r+0xc6>
 800727c:	2300      	movs	r3, #0
 800727e:	3701      	adds	r7, #1
 8007280:	9305      	str	r3, [sp, #20]
 8007282:	4619      	mov	r1, r3
 8007284:	250a      	movs	r5, #10
 8007286:	4638      	mov	r0, r7
 8007288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800728c:	3a30      	subs	r2, #48	; 0x30
 800728e:	2a09      	cmp	r2, #9
 8007290:	d903      	bls.n	800729a <_svfiprintf_r+0x196>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0c8      	beq.n	8007228 <_svfiprintf_r+0x124>
 8007296:	9105      	str	r1, [sp, #20]
 8007298:	e7c6      	b.n	8007228 <_svfiprintf_r+0x124>
 800729a:	fb05 2101 	mla	r1, r5, r1, r2
 800729e:	2301      	movs	r3, #1
 80072a0:	4607      	mov	r7, r0
 80072a2:	e7f0      	b.n	8007286 <_svfiprintf_r+0x182>
 80072a4:	ab03      	add	r3, sp, #12
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	4622      	mov	r2, r4
 80072aa:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <_svfiprintf_r+0x1ec>)
 80072ac:	a904      	add	r1, sp, #16
 80072ae:	4640      	mov	r0, r8
 80072b0:	f3af 8000 	nop.w
 80072b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80072b8:	4681      	mov	r9, r0
 80072ba:	d1d6      	bne.n	800726a <_svfiprintf_r+0x166>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	065b      	lsls	r3, r3, #25
 80072c0:	f53f af35 	bmi.w	800712e <_svfiprintf_r+0x2a>
 80072c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072c6:	b01d      	add	sp, #116	; 0x74
 80072c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072cc:	ab03      	add	r3, sp, #12
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	4622      	mov	r2, r4
 80072d2:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <_svfiprintf_r+0x1ec>)
 80072d4:	a904      	add	r1, sp, #16
 80072d6:	4640      	mov	r0, r8
 80072d8:	f000 f882 	bl	80073e0 <_printf_i>
 80072dc:	e7ea      	b.n	80072b4 <_svfiprintf_r+0x1b0>
 80072de:	bf00      	nop
 80072e0:	08007738 	.word	0x08007738
 80072e4:	0800773e 	.word	0x0800773e
 80072e8:	08007742 	.word	0x08007742
 80072ec:	00000000 	.word	0x00000000
 80072f0:	08007051 	.word	0x08007051

080072f4 <_printf_common>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	4691      	mov	r9, r2
 80072fa:	461f      	mov	r7, r3
 80072fc:	688a      	ldr	r2, [r1, #8]
 80072fe:	690b      	ldr	r3, [r1, #16]
 8007300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007304:	4293      	cmp	r3, r2
 8007306:	bfb8      	it	lt
 8007308:	4613      	movlt	r3, r2
 800730a:	f8c9 3000 	str.w	r3, [r9]
 800730e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007312:	4606      	mov	r6, r0
 8007314:	460c      	mov	r4, r1
 8007316:	b112      	cbz	r2, 800731e <_printf_common+0x2a>
 8007318:	3301      	adds	r3, #1
 800731a:	f8c9 3000 	str.w	r3, [r9]
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	0699      	lsls	r1, r3, #26
 8007322:	bf42      	ittt	mi
 8007324:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007328:	3302      	addmi	r3, #2
 800732a:	f8c9 3000 	strmi.w	r3, [r9]
 800732e:	6825      	ldr	r5, [r4, #0]
 8007330:	f015 0506 	ands.w	r5, r5, #6
 8007334:	d107      	bne.n	8007346 <_printf_common+0x52>
 8007336:	f104 0a19 	add.w	sl, r4, #25
 800733a:	68e3      	ldr	r3, [r4, #12]
 800733c:	f8d9 2000 	ldr.w	r2, [r9]
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	42ab      	cmp	r3, r5
 8007344:	dc28      	bgt.n	8007398 <_printf_common+0xa4>
 8007346:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	3300      	adds	r3, #0
 800734e:	bf18      	it	ne
 8007350:	2301      	movne	r3, #1
 8007352:	0692      	lsls	r2, r2, #26
 8007354:	d42d      	bmi.n	80073b2 <_printf_common+0xbe>
 8007356:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800735a:	4639      	mov	r1, r7
 800735c:	4630      	mov	r0, r6
 800735e:	47c0      	blx	r8
 8007360:	3001      	adds	r0, #1
 8007362:	d020      	beq.n	80073a6 <_printf_common+0xb2>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	68e5      	ldr	r5, [r4, #12]
 8007368:	f8d9 2000 	ldr.w	r2, [r9]
 800736c:	f003 0306 	and.w	r3, r3, #6
 8007370:	2b04      	cmp	r3, #4
 8007372:	bf08      	it	eq
 8007374:	1aad      	subeq	r5, r5, r2
 8007376:	68a3      	ldr	r3, [r4, #8]
 8007378:	6922      	ldr	r2, [r4, #16]
 800737a:	bf0c      	ite	eq
 800737c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007380:	2500      	movne	r5, #0
 8007382:	4293      	cmp	r3, r2
 8007384:	bfc4      	itt	gt
 8007386:	1a9b      	subgt	r3, r3, r2
 8007388:	18ed      	addgt	r5, r5, r3
 800738a:	f04f 0900 	mov.w	r9, #0
 800738e:	341a      	adds	r4, #26
 8007390:	454d      	cmp	r5, r9
 8007392:	d11a      	bne.n	80073ca <_printf_common+0xd6>
 8007394:	2000      	movs	r0, #0
 8007396:	e008      	b.n	80073aa <_printf_common+0xb6>
 8007398:	2301      	movs	r3, #1
 800739a:	4652      	mov	r2, sl
 800739c:	4639      	mov	r1, r7
 800739e:	4630      	mov	r0, r6
 80073a0:	47c0      	blx	r8
 80073a2:	3001      	adds	r0, #1
 80073a4:	d103      	bne.n	80073ae <_printf_common+0xba>
 80073a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ae:	3501      	adds	r5, #1
 80073b0:	e7c3      	b.n	800733a <_printf_common+0x46>
 80073b2:	18e1      	adds	r1, r4, r3
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	2030      	movs	r0, #48	; 0x30
 80073b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073bc:	4422      	add	r2, r4
 80073be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073c6:	3302      	adds	r3, #2
 80073c8:	e7c5      	b.n	8007356 <_printf_common+0x62>
 80073ca:	2301      	movs	r3, #1
 80073cc:	4622      	mov	r2, r4
 80073ce:	4639      	mov	r1, r7
 80073d0:	4630      	mov	r0, r6
 80073d2:	47c0      	blx	r8
 80073d4:	3001      	adds	r0, #1
 80073d6:	d0e6      	beq.n	80073a6 <_printf_common+0xb2>
 80073d8:	f109 0901 	add.w	r9, r9, #1
 80073dc:	e7d8      	b.n	8007390 <_printf_common+0x9c>
	...

080073e0 <_printf_i>:
 80073e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80073e8:	460c      	mov	r4, r1
 80073ea:	7e09      	ldrb	r1, [r1, #24]
 80073ec:	b085      	sub	sp, #20
 80073ee:	296e      	cmp	r1, #110	; 0x6e
 80073f0:	4617      	mov	r7, r2
 80073f2:	4606      	mov	r6, r0
 80073f4:	4698      	mov	r8, r3
 80073f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073f8:	f000 80b3 	beq.w	8007562 <_printf_i+0x182>
 80073fc:	d822      	bhi.n	8007444 <_printf_i+0x64>
 80073fe:	2963      	cmp	r1, #99	; 0x63
 8007400:	d036      	beq.n	8007470 <_printf_i+0x90>
 8007402:	d80a      	bhi.n	800741a <_printf_i+0x3a>
 8007404:	2900      	cmp	r1, #0
 8007406:	f000 80b9 	beq.w	800757c <_printf_i+0x19c>
 800740a:	2958      	cmp	r1, #88	; 0x58
 800740c:	f000 8083 	beq.w	8007516 <_printf_i+0x136>
 8007410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007414:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007418:	e032      	b.n	8007480 <_printf_i+0xa0>
 800741a:	2964      	cmp	r1, #100	; 0x64
 800741c:	d001      	beq.n	8007422 <_printf_i+0x42>
 800741e:	2969      	cmp	r1, #105	; 0x69
 8007420:	d1f6      	bne.n	8007410 <_printf_i+0x30>
 8007422:	6820      	ldr	r0, [r4, #0]
 8007424:	6813      	ldr	r3, [r2, #0]
 8007426:	0605      	lsls	r5, r0, #24
 8007428:	f103 0104 	add.w	r1, r3, #4
 800742c:	d52a      	bpl.n	8007484 <_printf_i+0xa4>
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6011      	str	r1, [r2, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	da03      	bge.n	800743e <_printf_i+0x5e>
 8007436:	222d      	movs	r2, #45	; 0x2d
 8007438:	425b      	negs	r3, r3
 800743a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800743e:	486f      	ldr	r0, [pc, #444]	; (80075fc <_printf_i+0x21c>)
 8007440:	220a      	movs	r2, #10
 8007442:	e039      	b.n	80074b8 <_printf_i+0xd8>
 8007444:	2973      	cmp	r1, #115	; 0x73
 8007446:	f000 809d 	beq.w	8007584 <_printf_i+0x1a4>
 800744a:	d808      	bhi.n	800745e <_printf_i+0x7e>
 800744c:	296f      	cmp	r1, #111	; 0x6f
 800744e:	d020      	beq.n	8007492 <_printf_i+0xb2>
 8007450:	2970      	cmp	r1, #112	; 0x70
 8007452:	d1dd      	bne.n	8007410 <_printf_i+0x30>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	f043 0320 	orr.w	r3, r3, #32
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	e003      	b.n	8007466 <_printf_i+0x86>
 800745e:	2975      	cmp	r1, #117	; 0x75
 8007460:	d017      	beq.n	8007492 <_printf_i+0xb2>
 8007462:	2978      	cmp	r1, #120	; 0x78
 8007464:	d1d4      	bne.n	8007410 <_printf_i+0x30>
 8007466:	2378      	movs	r3, #120	; 0x78
 8007468:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800746c:	4864      	ldr	r0, [pc, #400]	; (8007600 <_printf_i+0x220>)
 800746e:	e055      	b.n	800751c <_printf_i+0x13c>
 8007470:	6813      	ldr	r3, [r2, #0]
 8007472:	1d19      	adds	r1, r3, #4
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6011      	str	r1, [r2, #0]
 8007478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800747c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007480:	2301      	movs	r3, #1
 8007482:	e08c      	b.n	800759e <_printf_i+0x1be>
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6011      	str	r1, [r2, #0]
 8007488:	f010 0f40 	tst.w	r0, #64	; 0x40
 800748c:	bf18      	it	ne
 800748e:	b21b      	sxthne	r3, r3
 8007490:	e7cf      	b.n	8007432 <_printf_i+0x52>
 8007492:	6813      	ldr	r3, [r2, #0]
 8007494:	6825      	ldr	r5, [r4, #0]
 8007496:	1d18      	adds	r0, r3, #4
 8007498:	6010      	str	r0, [r2, #0]
 800749a:	0628      	lsls	r0, r5, #24
 800749c:	d501      	bpl.n	80074a2 <_printf_i+0xc2>
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	e002      	b.n	80074a8 <_printf_i+0xc8>
 80074a2:	0668      	lsls	r0, r5, #25
 80074a4:	d5fb      	bpl.n	800749e <_printf_i+0xbe>
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	4854      	ldr	r0, [pc, #336]	; (80075fc <_printf_i+0x21c>)
 80074aa:	296f      	cmp	r1, #111	; 0x6f
 80074ac:	bf14      	ite	ne
 80074ae:	220a      	movne	r2, #10
 80074b0:	2208      	moveq	r2, #8
 80074b2:	2100      	movs	r1, #0
 80074b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074b8:	6865      	ldr	r5, [r4, #4]
 80074ba:	60a5      	str	r5, [r4, #8]
 80074bc:	2d00      	cmp	r5, #0
 80074be:	f2c0 8095 	blt.w	80075ec <_printf_i+0x20c>
 80074c2:	6821      	ldr	r1, [r4, #0]
 80074c4:	f021 0104 	bic.w	r1, r1, #4
 80074c8:	6021      	str	r1, [r4, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d13d      	bne.n	800754a <_printf_i+0x16a>
 80074ce:	2d00      	cmp	r5, #0
 80074d0:	f040 808e 	bne.w	80075f0 <_printf_i+0x210>
 80074d4:	4665      	mov	r5, ip
 80074d6:	2a08      	cmp	r2, #8
 80074d8:	d10b      	bne.n	80074f2 <_printf_i+0x112>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	07db      	lsls	r3, r3, #31
 80074de:	d508      	bpl.n	80074f2 <_printf_i+0x112>
 80074e0:	6923      	ldr	r3, [r4, #16]
 80074e2:	6862      	ldr	r2, [r4, #4]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	bfde      	ittt	le
 80074e8:	2330      	movle	r3, #48	; 0x30
 80074ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074ee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80074f2:	ebac 0305 	sub.w	r3, ip, r5
 80074f6:	6123      	str	r3, [r4, #16]
 80074f8:	f8cd 8000 	str.w	r8, [sp]
 80074fc:	463b      	mov	r3, r7
 80074fe:	aa03      	add	r2, sp, #12
 8007500:	4621      	mov	r1, r4
 8007502:	4630      	mov	r0, r6
 8007504:	f7ff fef6 	bl	80072f4 <_printf_common>
 8007508:	3001      	adds	r0, #1
 800750a:	d14d      	bne.n	80075a8 <_printf_i+0x1c8>
 800750c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007510:	b005      	add	sp, #20
 8007512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007516:	4839      	ldr	r0, [pc, #228]	; (80075fc <_printf_i+0x21c>)
 8007518:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800751c:	6813      	ldr	r3, [r2, #0]
 800751e:	6821      	ldr	r1, [r4, #0]
 8007520:	1d1d      	adds	r5, r3, #4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6015      	str	r5, [r2, #0]
 8007526:	060a      	lsls	r2, r1, #24
 8007528:	d50b      	bpl.n	8007542 <_printf_i+0x162>
 800752a:	07ca      	lsls	r2, r1, #31
 800752c:	bf44      	itt	mi
 800752e:	f041 0120 	orrmi.w	r1, r1, #32
 8007532:	6021      	strmi	r1, [r4, #0]
 8007534:	b91b      	cbnz	r3, 800753e <_printf_i+0x15e>
 8007536:	6822      	ldr	r2, [r4, #0]
 8007538:	f022 0220 	bic.w	r2, r2, #32
 800753c:	6022      	str	r2, [r4, #0]
 800753e:	2210      	movs	r2, #16
 8007540:	e7b7      	b.n	80074b2 <_printf_i+0xd2>
 8007542:	064d      	lsls	r5, r1, #25
 8007544:	bf48      	it	mi
 8007546:	b29b      	uxthmi	r3, r3
 8007548:	e7ef      	b.n	800752a <_printf_i+0x14a>
 800754a:	4665      	mov	r5, ip
 800754c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007550:	fb02 3311 	mls	r3, r2, r1, r3
 8007554:	5cc3      	ldrb	r3, [r0, r3]
 8007556:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800755a:	460b      	mov	r3, r1
 800755c:	2900      	cmp	r1, #0
 800755e:	d1f5      	bne.n	800754c <_printf_i+0x16c>
 8007560:	e7b9      	b.n	80074d6 <_printf_i+0xf6>
 8007562:	6813      	ldr	r3, [r2, #0]
 8007564:	6825      	ldr	r5, [r4, #0]
 8007566:	6961      	ldr	r1, [r4, #20]
 8007568:	1d18      	adds	r0, r3, #4
 800756a:	6010      	str	r0, [r2, #0]
 800756c:	0628      	lsls	r0, r5, #24
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	d501      	bpl.n	8007576 <_printf_i+0x196>
 8007572:	6019      	str	r1, [r3, #0]
 8007574:	e002      	b.n	800757c <_printf_i+0x19c>
 8007576:	066a      	lsls	r2, r5, #25
 8007578:	d5fb      	bpl.n	8007572 <_printf_i+0x192>
 800757a:	8019      	strh	r1, [r3, #0]
 800757c:	2300      	movs	r3, #0
 800757e:	6123      	str	r3, [r4, #16]
 8007580:	4665      	mov	r5, ip
 8007582:	e7b9      	b.n	80074f8 <_printf_i+0x118>
 8007584:	6813      	ldr	r3, [r2, #0]
 8007586:	1d19      	adds	r1, r3, #4
 8007588:	6011      	str	r1, [r2, #0]
 800758a:	681d      	ldr	r5, [r3, #0]
 800758c:	6862      	ldr	r2, [r4, #4]
 800758e:	2100      	movs	r1, #0
 8007590:	4628      	mov	r0, r5
 8007592:	f7f8 fe1d 	bl	80001d0 <memchr>
 8007596:	b108      	cbz	r0, 800759c <_printf_i+0x1bc>
 8007598:	1b40      	subs	r0, r0, r5
 800759a:	6060      	str	r0, [r4, #4]
 800759c:	6863      	ldr	r3, [r4, #4]
 800759e:	6123      	str	r3, [r4, #16]
 80075a0:	2300      	movs	r3, #0
 80075a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a6:	e7a7      	b.n	80074f8 <_printf_i+0x118>
 80075a8:	6923      	ldr	r3, [r4, #16]
 80075aa:	462a      	mov	r2, r5
 80075ac:	4639      	mov	r1, r7
 80075ae:	4630      	mov	r0, r6
 80075b0:	47c0      	blx	r8
 80075b2:	3001      	adds	r0, #1
 80075b4:	d0aa      	beq.n	800750c <_printf_i+0x12c>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	079b      	lsls	r3, r3, #30
 80075ba:	d413      	bmi.n	80075e4 <_printf_i+0x204>
 80075bc:	68e0      	ldr	r0, [r4, #12]
 80075be:	9b03      	ldr	r3, [sp, #12]
 80075c0:	4298      	cmp	r0, r3
 80075c2:	bfb8      	it	lt
 80075c4:	4618      	movlt	r0, r3
 80075c6:	e7a3      	b.n	8007510 <_printf_i+0x130>
 80075c8:	2301      	movs	r3, #1
 80075ca:	464a      	mov	r2, r9
 80075cc:	4639      	mov	r1, r7
 80075ce:	4630      	mov	r0, r6
 80075d0:	47c0      	blx	r8
 80075d2:	3001      	adds	r0, #1
 80075d4:	d09a      	beq.n	800750c <_printf_i+0x12c>
 80075d6:	3501      	adds	r5, #1
 80075d8:	68e3      	ldr	r3, [r4, #12]
 80075da:	9a03      	ldr	r2, [sp, #12]
 80075dc:	1a9b      	subs	r3, r3, r2
 80075de:	42ab      	cmp	r3, r5
 80075e0:	dcf2      	bgt.n	80075c8 <_printf_i+0x1e8>
 80075e2:	e7eb      	b.n	80075bc <_printf_i+0x1dc>
 80075e4:	2500      	movs	r5, #0
 80075e6:	f104 0919 	add.w	r9, r4, #25
 80075ea:	e7f5      	b.n	80075d8 <_printf_i+0x1f8>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1ac      	bne.n	800754a <_printf_i+0x16a>
 80075f0:	7803      	ldrb	r3, [r0, #0]
 80075f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075fa:	e76c      	b.n	80074d6 <_printf_i+0xf6>
 80075fc:	08007749 	.word	0x08007749
 8007600:	0800775a 	.word	0x0800775a

08007604 <memcpy>:
 8007604:	b510      	push	{r4, lr}
 8007606:	1e43      	subs	r3, r0, #1
 8007608:	440a      	add	r2, r1
 800760a:	4291      	cmp	r1, r2
 800760c:	d100      	bne.n	8007610 <memcpy+0xc>
 800760e:	bd10      	pop	{r4, pc}
 8007610:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007618:	e7f7      	b.n	800760a <memcpy+0x6>

0800761a <memmove>:
 800761a:	4288      	cmp	r0, r1
 800761c:	b510      	push	{r4, lr}
 800761e:	eb01 0302 	add.w	r3, r1, r2
 8007622:	d807      	bhi.n	8007634 <memmove+0x1a>
 8007624:	1e42      	subs	r2, r0, #1
 8007626:	4299      	cmp	r1, r3
 8007628:	d00a      	beq.n	8007640 <memmove+0x26>
 800762a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800762e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007632:	e7f8      	b.n	8007626 <memmove+0xc>
 8007634:	4283      	cmp	r3, r0
 8007636:	d9f5      	bls.n	8007624 <memmove+0xa>
 8007638:	1881      	adds	r1, r0, r2
 800763a:	1ad2      	subs	r2, r2, r3
 800763c:	42d3      	cmn	r3, r2
 800763e:	d100      	bne.n	8007642 <memmove+0x28>
 8007640:	bd10      	pop	{r4, pc}
 8007642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007646:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800764a:	e7f7      	b.n	800763c <memmove+0x22>

0800764c <_realloc_r>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	4607      	mov	r7, r0
 8007650:	4614      	mov	r4, r2
 8007652:	460e      	mov	r6, r1
 8007654:	b921      	cbnz	r1, 8007660 <_realloc_r+0x14>
 8007656:	4611      	mov	r1, r2
 8007658:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800765c:	f7ff bc6c 	b.w	8006f38 <_malloc_r>
 8007660:	b922      	cbnz	r2, 800766c <_realloc_r+0x20>
 8007662:	f7ff fc1b 	bl	8006e9c <_free_r>
 8007666:	4625      	mov	r5, r4
 8007668:	4628      	mov	r0, r5
 800766a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800766c:	f000 f814 	bl	8007698 <_malloc_usable_size_r>
 8007670:	42a0      	cmp	r0, r4
 8007672:	d20f      	bcs.n	8007694 <_realloc_r+0x48>
 8007674:	4621      	mov	r1, r4
 8007676:	4638      	mov	r0, r7
 8007678:	f7ff fc5e 	bl	8006f38 <_malloc_r>
 800767c:	4605      	mov	r5, r0
 800767e:	2800      	cmp	r0, #0
 8007680:	d0f2      	beq.n	8007668 <_realloc_r+0x1c>
 8007682:	4631      	mov	r1, r6
 8007684:	4622      	mov	r2, r4
 8007686:	f7ff ffbd 	bl	8007604 <memcpy>
 800768a:	4631      	mov	r1, r6
 800768c:	4638      	mov	r0, r7
 800768e:	f7ff fc05 	bl	8006e9c <_free_r>
 8007692:	e7e9      	b.n	8007668 <_realloc_r+0x1c>
 8007694:	4635      	mov	r5, r6
 8007696:	e7e7      	b.n	8007668 <_realloc_r+0x1c>

08007698 <_malloc_usable_size_r>:
 8007698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800769c:	1f18      	subs	r0, r3, #4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bfbc      	itt	lt
 80076a2:	580b      	ldrlt	r3, [r1, r0]
 80076a4:	18c0      	addlt	r0, r0, r3
 80076a6:	4770      	bx	lr

080076a8 <_init>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	bf00      	nop
 80076ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ae:	bc08      	pop	{r3}
 80076b0:	469e      	mov	lr, r3
 80076b2:	4770      	bx	lr

080076b4 <_fini>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	bf00      	nop
 80076b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ba:	bc08      	pop	{r3}
 80076bc:	469e      	mov	lr, r3
 80076be:	4770      	bx	lr
