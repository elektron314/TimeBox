
TimeBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007808  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a44  08007a44  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a4c  08007a4c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001974  200001e4  08007c38  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b58  08007c38  00021b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001548b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000319a  00000000  00000000  0003569f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  00038840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  000395d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d66  00000000  00000000  0003a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed1c  00000000  00000000  0005df5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9c89  00000000  00000000  0006cc7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136903  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b8  00000000  00000000  00136980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007980 	.word	0x08007980

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007980 	.word	0x08007980

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SetTime>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SetTime (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	/** Initialize RTC and set the Time and Date*/
	sTime.Hours = 2;
 8000576:	2302      	movs	r3, #2
 8000578:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 6;
 800057a:	2306      	movs	r3, #6
 800057c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2201      	movs	r2, #1
 800058e:	4619      	mov	r1, r3
 8000590:	4812      	ldr	r0, [pc, #72]	; (80005dc <SetTime+0x6c>)
 8000592:	f002 fe61 	bl	8003258 <HAL_RTC_SetTime>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SetTime+0x30>
	{
	Error_Handler();
 800059c:	f000 f9d2 	bl	8000944 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80005a0:	2303      	movs	r3, #3
 80005a2:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_FEBRUARY;
 80005a4:	2302      	movs	r3, #2
 80005a6:	707b      	strb	r3, [r7, #1]
	sDate.Date = 10;
 80005a8:	230a      	movs	r3, #10
 80005aa:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 21;
 80005ac:	2315      	movs	r3, #21
 80005ae:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	2201      	movs	r2, #1
 80005b4:	4619      	mov	r1, r3
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <SetTime+0x6c>)
 80005b8:	f002 ff69 	bl	800348e <HAL_RTC_SetDate>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SetTime+0x56>
	{
	Error_Handler();
 80005c2:	f000 f9bf 	bl	8000944 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80005c6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80005ca:	2101      	movs	r1, #1
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <SetTime+0x6c>)
 80005ce:	f003 f90c 	bl	80037ea <HAL_RTCEx_BKUPWrite>
}
 80005d2:	bf00      	nop
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000214 	.word	0x20000214

080005e0 <GetTimeDate>:
//	Error_Handler();
//	}
//}

void GetTimeDate (void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af02      	add	r7, sp, #8
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 80005e6:	463b      	mov	r3, r7
 80005e8:	2201      	movs	r2, #1
 80005ea:	4619      	mov	r1, r3
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <GetTimeDate+0x58>)
 80005ee:	f002 fef0 	bl	80033d2 <HAL_RTC_GetTime>
	/* Get the RTC Curret Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2201      	movs	r2, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	480f      	ldr	r0, [pc, #60]	; (8000638 <GetTimeDate+0x58>)
 80005fc:	f002 ffee 	bl	80035dc <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000600:	783b      	ldrb	r3, [r7, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	787b      	ldrb	r3, [r7, #1]
 8000606:	4619      	mov	r1, r3
 8000608:	78bb      	ldrb	r3, [r7, #2]
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	460b      	mov	r3, r1
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <GetTimeDate+0x5c>)
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <GetTimeDate+0x60>)
 8000612:	f006 fe51 	bl	80072b8 <siprintf>

	/* Display date Format: yy-mm-dd */
	sprintf((char*)date,"%02d-%02d-%02d",2000+gDate.Year, gDate.Month, gDate.Date);
 8000616:	7dfb      	ldrb	r3, [r7, #23]
 8000618:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800061c:	7d7b      	ldrb	r3, [r7, #21]
 800061e:	4619      	mov	r1, r3
 8000620:	7dbb      	ldrb	r3, [r7, #22]
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	460b      	mov	r3, r1
 8000626:	4907      	ldr	r1, [pc, #28]	; (8000644 <GetTimeDate+0x64>)
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <GetTimeDate+0x68>)
 800062a:	f006 fe45 	bl	80072b8 <siprintf>
}
 800062e:	bf00      	nop
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000214 	.word	0x20000214
 800063c:	08007998 	.word	0x08007998
 8000640:	20000260 	.word	0x20000260
 8000644:	080079a8 	.word	0x080079a8
 8000648:	2000026c 	.word	0x2000026c

0800064c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	alarm = 1;
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000200 	.word	0x20000200

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fafa 	bl	8000c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f82e 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 f8d6 	bl	8000828 <MX_GPIO_Init>
  MX_RTC_Init();
 800067c:	f000 f8ae 	bl	80007dc <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000680:	f006 f820 	bl	80066c4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000684:	2101      	movs	r1, #1
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <main+0x5c>)
 8000688:	f003 f8c9 	bl	800381e <HAL_RTCEx_BKUPRead>
 800068c:	4602      	mov	r2, r0
 800068e:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8000692:	429a      	cmp	r2, r3
 8000694:	d001      	beq.n	800069a <main+0x2e>
  {
	  SetTime();
 8000696:	f7ff ff6b 	bl	8000570 <SetTime>

//	!!
//	  if I upload conf. from cubemxconfigurator I need to delete set time from MX_RTC_Init()!
//	  !!

	  GetTimeDate();
 800069a:	f7ff ffa1 	bl	80005e0 <GetTimeDate>
	  HAL_Delay(1000);
 800069e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a2:	f000 fb53 	bl	8000d4c <HAL_Delay>
	  strncpy(TimeToSend, time, 8);
 80006a6:	2208      	movs	r2, #8
 80006a8:	4908      	ldr	r1, [pc, #32]	; (80006cc <main+0x60>)
 80006aa:	4809      	ldr	r0, [pc, #36]	; (80006d0 <main+0x64>)
 80006ac:	f006 fe24 	bl	80072f8 <strncpy>
	  TimeToSend[8] = '\r';
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <main+0x64>)
 80006b2:	220d      	movs	r2, #13
 80006b4:	721a      	strb	r2, [r3, #8]
	  TimeToSend[9] = '\n';
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <main+0x64>)
 80006b8:	220a      	movs	r2, #10
 80006ba:	725a      	strb	r2, [r3, #9]
	  CDC_Transmit_FS(TimeToSend, 10);
 80006bc:	210a      	movs	r1, #10
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <main+0x64>)
 80006c0:	f006 f8be 	bl	8006840 <CDC_Transmit_FS>
	  GetTimeDate();
 80006c4:	e7e9      	b.n	800069a <main+0x2e>
 80006c6:	bf00      	nop
 80006c8:	20000214 	.word	0x20000214
 80006cc:	20000260 	.word	0x20000260
 80006d0:	20000254 	.word	0x20000254

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b098      	sub	sp, #96	; 0x60
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f006 fd28 	bl	8007138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <SystemClock_Config+0x100>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	4a31      	ldr	r2, [pc, #196]	; (80007d4 <SystemClock_Config+0x100>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6413      	str	r3, [r2, #64]	; 0x40
 8000716:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <SystemClock_Config+0x100>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <SystemClock_Config+0x104>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a2b      	ldr	r2, [pc, #172]	; (80007d8 <SystemClock_Config+0x104>)
 800072c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <SystemClock_Config+0x104>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800073e:	2307      	movs	r3, #7
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000758:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800075e:	2304      	movs	r3, #4
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000762:	2348      	movs	r3, #72	; 0x48
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800076a:	2303      	movs	r3, #3
 800076c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000772:	4618      	mov	r0, r3
 8000774:	f001 ff92 	bl	800269c <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800077e:	f000 f8e1 	bl	8000944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000786:	2300      	movs	r3, #0
 8000788:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f002 f9ed 	bl	8002b7c <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80007a8:	f000 f8cc 	bl	8000944 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007ac:	2302      	movs	r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fba8 	bl	8002f10 <HAL_RCCEx_PeriphCLKConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80007c6:	f000 f8bd 	bl	8000944 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3760      	adds	r7, #96	; 0x60
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_RTC_Init+0x44>)
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <MX_RTC_Init+0x48>)
 80007e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_RTC_Init+0x44>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_RTC_Init+0x44>)
 80007ee:	227f      	movs	r2, #127	; 0x7f
 80007f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_RTC_Init+0x44>)
 80007f4:	22ff      	movs	r2, #255	; 0xff
 80007f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_RTC_Init+0x44>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_RTC_Init+0x44>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_RTC_Init+0x44>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_RTC_Init+0x44>)
 800080c:	f002 fc62 	bl	80030d4 <HAL_RTC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000816:	f000 f895 	bl	8000944 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000214 	.word	0x20000214
 8000824:	40002800 	.word	0x40002800

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b3c      	ldr	r3, [pc, #240]	; (8000934 <MX_GPIO_Init+0x10c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a3b      	ldr	r2, [pc, #236]	; (8000934 <MX_GPIO_Init+0x10c>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b39      	ldr	r3, [pc, #228]	; (8000934 <MX_GPIO_Init+0x10c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b35      	ldr	r3, [pc, #212]	; (8000934 <MX_GPIO_Init+0x10c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a34      	ldr	r2, [pc, #208]	; (8000934 <MX_GPIO_Init+0x10c>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b32      	ldr	r3, [pc, #200]	; (8000934 <MX_GPIO_Init+0x10c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <MX_GPIO_Init+0x10c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a2d      	ldr	r2, [pc, #180]	; (8000934 <MX_GPIO_Init+0x10c>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <MX_GPIO_Init+0x10c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b27      	ldr	r3, [pc, #156]	; (8000934 <MX_GPIO_Init+0x10c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a26      	ldr	r2, [pc, #152]	; (8000934 <MX_GPIO_Init+0x10c>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b24      	ldr	r3, [pc, #144]	; (8000934 <MX_GPIO_Init+0x10c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_GPIO_Init+0x10c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a1f      	ldr	r2, [pc, #124]	; (8000934 <MX_GPIO_Init+0x10c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_GPIO_Init+0x10c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80008d0:	4819      	ldr	r0, [pc, #100]	; (8000938 <MX_GPIO_Init+0x110>)
 80008d2:	f000 fd09 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 80008d6:	2318      	movs	r3, #24
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_GPIO_Init+0x114>)
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4815      	ldr	r0, [pc, #84]	; (8000940 <MX_GPIO_Init+0x118>)
 80008ea:	f000 fb63 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80008ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_GPIO_Init+0x110>)
 8000908:	f000 fb54 	bl	8000fb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2102      	movs	r1, #2
 8000910:	2009      	movs	r0, #9
 8000912:	f000 fb18 	bl	8000f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000916:	2009      	movs	r0, #9
 8000918:	f000 fb31 	bl	8000f7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2102      	movs	r1, #2
 8000920:	200a      	movs	r0, #10
 8000922:	f000 fb10 	bl	8000f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000926:	200a      	movs	r0, #10
 8000928:	f000 fb29 	bl	8000f7e <HAL_NVIC_EnableIRQ>

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40021400 	.word	0x40021400
 800093c:	10110000 	.word	0x10110000
 8000940:	40021000 	.word	0x40021000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094a:	e7fe      	b.n	800094a <Error_Handler+0x6>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <HAL_RTC_MspInit+0x24>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d102      	bne.n	80009b4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_RTC_MspInit+0x28>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	40002800 	.word	0x40002800
 80009c4:	42470e3c 	.word	0x42470e3c

080009c8 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a05      	ldr	r2, [pc, #20]	; (80009ec <HAL_RTC_MspDeInit+0x24>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d102      	bne.n	80009e0 <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_RTC_MspDeInit+0x28>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	40002800 	.word	0x40002800
 80009f0:	42470e3c 	.word	0x42470e3c

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f964 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	if (HAL_GetTick() - JitterButtonK0 > 300)
 8000a4e:	f000 f971 	bl	8000d34 <HAL_GetTick>
 8000a52:	4602      	mov	r2, r0
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <EXTI3_IRQHandler+0x84>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000a5e:	d92d      	bls.n	8000abc <EXTI3_IRQHandler+0x74>
	{
		JitterButtonK0 = HAL_GetTick();
 8000a60:	f000 f968 	bl	8000d34 <HAL_GetTick>
 8000a64:	4603      	mov	r3, r0
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <EXTI3_IRQHandler+0x84>)
 8000a6a:	701a      	strb	r2, [r3, #0]

//		here is our action on KEY1 button
		RTC_TimeTypeDef gTime;
		RTC_TimeTypeDef sTime;

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2201      	movs	r2, #1
 8000a72:	4619      	mov	r1, r3
 8000a74:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <EXTI3_IRQHandler+0x88>)
 8000a76:	f002 fcac 	bl	80033d2 <HAL_RTC_GetTime>
		sTime.Hours = gTime.Hours;
 8000a7a:	7d3b      	ldrb	r3, [r7, #20]
 8000a7c:	703b      	strb	r3, [r7, #0]
		sTime.Minutes = gTime.Minutes;
 8000a7e:	7d7b      	ldrb	r3, [r7, #21]
 8000a80:	707b      	strb	r3, [r7, #1]
		sTime.Seconds = gTime.Seconds-3;
 8000a82:	7dbb      	ldrb	r3, [r7, #22]
 8000a84:	3b03      	subs	r3, #3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	70bb      	strb	r3, [r7, #2]

		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <EXTI3_IRQHandler+0x88>)
 8000a92:	f002 fbe1 	bl	8003258 <HAL_RTC_SetTime>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <EXTI3_IRQHandler+0x58>
		{
		  Error_Handler();
 8000a9c:	f7ff ff52 	bl	8000944 <Error_Handler>
		}

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <EXTI3_IRQHandler+0x8c>)
 8000aa6:	f000 fc38 	bl	800131a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000aaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aae:	f000 f94d 	bl	8000d4c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab6:	4807      	ldr	r0, [pc, #28]	; (8000ad4 <EXTI3_IRQHandler+0x8c>)
 8000ab8:	f000 fc2f 	bl	800131a <HAL_GPIO_TogglePin>
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000abc:	2008      	movs	r0, #8
 8000abe:	f000 fc47 	bl	8001350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000201 	.word	0x20000201
 8000ad0:	20000214 	.word	0x20000214
 8000ad4:	40021400 	.word	0x40021400

08000ad8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	if (HAL_GetTick() - JitterButtonK1 > 300)
 8000ade:	f000 f929 	bl	8000d34 <HAL_GetTick>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <EXTI4_IRQHandler+0x84>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000aee:	d92d      	bls.n	8000b4c <EXTI4_IRQHandler+0x74>
	{
		JitterButtonK1 = HAL_GetTick();
 8000af0:	f000 f920 	bl	8000d34 <HAL_GetTick>
 8000af4:	4603      	mov	r3, r0
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <EXTI4_IRQHandler+0x84>)
 8000afa:	701a      	strb	r2, [r3, #0]

//		here is our action on KEY1 button
		RTC_TimeTypeDef gTime;
		RTC_TimeTypeDef sTime;

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2201      	movs	r2, #1
 8000b02:	4619      	mov	r1, r3
 8000b04:	4816      	ldr	r0, [pc, #88]	; (8000b60 <EXTI4_IRQHandler+0x88>)
 8000b06:	f002 fc64 	bl	80033d2 <HAL_RTC_GetTime>
		sTime.Hours = gTime.Hours;
 8000b0a:	7d3b      	ldrb	r3, [r7, #20]
 8000b0c:	703b      	strb	r3, [r7, #0]
		sTime.Minutes = gTime.Minutes;
 8000b0e:	7d7b      	ldrb	r3, [r7, #21]
 8000b10:	707b      	strb	r3, [r7, #1]
		sTime.Seconds = gTime.Seconds+5;
 8000b12:	7dbb      	ldrb	r3, [r7, #22]
 8000b14:	3305      	adds	r3, #5
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	70bb      	strb	r3, [r7, #2]

		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480f      	ldr	r0, [pc, #60]	; (8000b60 <EXTI4_IRQHandler+0x88>)
 8000b22:	f002 fb99 	bl	8003258 <HAL_RTC_SetTime>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <EXTI4_IRQHandler+0x58>
		{
		  Error_Handler();
 8000b2c:	f7ff ff0a 	bl	8000944 <Error_Handler>
		}

		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <EXTI4_IRQHandler+0x8c>)
 8000b36:	f000 fbf0 	bl	800131a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000b3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3e:	f000 f905 	bl	8000d4c <HAL_Delay>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000b42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <EXTI4_IRQHandler+0x8c>)
 8000b48:	f000 fbe7 	bl	800131a <HAL_GPIO_TogglePin>
	}

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b4c:	2010      	movs	r0, #16
 8000b4e:	f000 fbff 	bl	8001350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	; 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000202 	.word	0x20000202
 8000b60:	20000214 	.word	0x20000214
 8000b64:	40021400 	.word	0x40021400

08000b68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <OTG_FS_IRQHandler+0x10>)
 8000b6e:	f000 fd62 	bl	8001636 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000174c 	.word	0x2000174c

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f006 fa8a 	bl	80070c4 <__errno>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20020000 	.word	0x20020000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	20000204 	.word	0x20000204
 8000be4:	20001b58 	.word	0x20001b58

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <SystemInit+0x28>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <SystemInit+0x28>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SystemInit+0x28>)
 8000bfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c02:	609a      	str	r2, [r3, #8]
#endif
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c1a:	e003      	b.n	8000c24 <LoopCopyDataInit>

08000c1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c22:	3104      	adds	r1, #4

08000c24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c2c:	d3f6      	bcc.n	8000c1c <CopyDataInit>
  ldr  r2, =_sbss
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c30:	e002      	b.n	8000c38 <LoopFillZerobss>

08000c32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c34:	f842 3b04 	str.w	r3, [r2], #4

08000c38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c3c:	d3f9      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c3e:	f7ff ffd3 	bl	8000be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c42:	f006 fa45 	bl	80070d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c46:	f7ff fd11 	bl	800066c <main>
  bx  lr    
 8000c4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c50:	08007a54 	.word	0x08007a54
  ldr  r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c58:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000c5c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000c60:	20001b58 	.word	0x20001b58

08000c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC_IRQHandler>
	...

08000c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <HAL_Init+0x40>)
 8000c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_Init+0x40>)
 8000c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_Init+0x40>)
 8000c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f94d 	bl	8000f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 f808 	bl	8000cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9c:	f7ff fe56 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023c00 	.word	0x40023c00

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x54>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_InitTick+0x58>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f965 	bl	8000f9a <HAL_SYSTICK_Config>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00e      	b.n	8000cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d80a      	bhi.n	8000cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce8:	f000 f92d 	bl	8000f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cec:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <HAL_InitTick+0x5c>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e000      	b.n	8000cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000004 	.word	0x20000004

08000d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x20>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x24>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_IncTick+0x24>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000278 	.word	0x20000278

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000278 	.word	0x20000278

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d54:	f7ff ffee 	bl	8000d34 <HAL_GetTick>
 8000d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d64:	d005      	beq.n	8000d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_Delay+0x40>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d72:	bf00      	nop
 8000d74:	f7ff ffde 	bl	8000d34 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d8f7      	bhi.n	8000d74 <HAL_Delay+0x28>
  {
  }
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000008 	.word	0x20000008

08000d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	60d3      	str	r3, [r2, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	f003 0307 	and.w	r3, r3, #7
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db0b      	blt.n	8000e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 021f 	and.w	r2, r3, #31
 8000e0c:	4907      	ldr	r1, [pc, #28]	; (8000e2c <__NVIC_EnableIRQ+0x38>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	2001      	movs	r0, #1
 8000e16:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	; (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000efc:	d301      	bcc.n	8000f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00f      	b.n	8000f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <SysTick_Config+0x40>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f10:	f7ff ff8e 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <SysTick_Config+0x40>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1a:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <SysTick_Config+0x40>)
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	e000e010 	.word	0xe000e010

08000f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ff29 	bl	8000d90 <__NVIC_SetPriorityGrouping>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f58:	f7ff ff3e 	bl	8000dd8 <__NVIC_GetPriorityGrouping>
 8000f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	68b9      	ldr	r1, [r7, #8]
 8000f62:	6978      	ldr	r0, [r7, #20]
 8000f64:	f7ff ff8e 	bl	8000e84 <NVIC_EncodePriority>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff5d 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff31 	bl	8000df4 <__NVIC_EnableIRQ>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffa2 	bl	8000eec <SysTick_Config>
 8000fa8:	4603      	mov	r3, r0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	e16b      	b.n	80012a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 815a 	bne.w	80012a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d00b      	beq.n	800100e <HAL_GPIO_Init+0x5a>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d007      	beq.n	800100e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001002:	2b11      	cmp	r3, #17
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b12      	cmp	r3, #18
 800100c:	d130      	bne.n	8001070 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f003 0201 	and.w	r2, r3, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0xfc>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b12      	cmp	r3, #18
 80010ae:	d123      	bne.n	80010f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	69b9      	ldr	r1, [r7, #24]
 80010f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0203 	and.w	r2, r3, #3
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80b4 	beq.w	80012a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <HAL_GPIO_Init+0x308>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a5e      	ldr	r2, [pc, #376]	; (80012bc <HAL_GPIO_Init+0x308>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b5c      	ldr	r3, [pc, #368]	; (80012bc <HAL_GPIO_Init+0x308>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001156:	4a5a      	ldr	r2, [pc, #360]	; (80012c0 <HAL_GPIO_Init+0x30c>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a51      	ldr	r2, [pc, #324]	; (80012c4 <HAL_GPIO_Init+0x310>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d02b      	beq.n	80011da <HAL_GPIO_Init+0x226>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a50      	ldr	r2, [pc, #320]	; (80012c8 <HAL_GPIO_Init+0x314>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d025      	beq.n	80011d6 <HAL_GPIO_Init+0x222>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4f      	ldr	r2, [pc, #316]	; (80012cc <HAL_GPIO_Init+0x318>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d01f      	beq.n	80011d2 <HAL_GPIO_Init+0x21e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <HAL_GPIO_Init+0x31c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x21a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <HAL_GPIO_Init+0x320>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x216>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4c      	ldr	r2, [pc, #304]	; (80012d8 <HAL_GPIO_Init+0x324>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x212>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4b      	ldr	r2, [pc, #300]	; (80012dc <HAL_GPIO_Init+0x328>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x20e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4a      	ldr	r2, [pc, #296]	; (80012e0 <HAL_GPIO_Init+0x32c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x20a>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00e      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011be:	2308      	movs	r3, #8
 80011c0:	e00c      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00a      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011c6:	2305      	movs	r3, #5
 80011c8:	e008      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e004      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011da:	2300      	movs	r3, #0
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	4093      	lsls	r3, r2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ec:	4934      	ldr	r1, [pc, #208]	; (80012c0 <HAL_GPIO_Init+0x30c>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <HAL_GPIO_Init+0x330>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121e:	4a31      	ldr	r2, [pc, #196]	; (80012e4 <HAL_GPIO_Init+0x330>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <HAL_GPIO_Init+0x330>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001248:	4a26      	ldr	r2, [pc, #152]	; (80012e4 <HAL_GPIO_Init+0x330>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_GPIO_Init+0x330>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <HAL_GPIO_Init+0x330>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_GPIO_Init+0x330>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <HAL_GPIO_Init+0x330>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	f67f ae90 	bls.w	8000fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b0:	bf00      	nop
 80012b2:	3724      	adds	r7, #36	; 0x24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40021c00 	.word	0x40021c00
 80012e4:	40013c00 	.word	0x40013c00

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001304:	e003      	b.n	800130e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	401a      	ands	r2, r3
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	429a      	cmp	r2, r3
 8001332:	d104      	bne.n	800133e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	041a      	lsls	r2, r3, #16
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800133c:	e002      	b.n	8001344 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f806 	bl	8001380 <HAL_GPIO_EXTI_Callback>
  }
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40013c00 	.word	0x40013c00

08001380 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001398:	b08f      	sub	sp, #60	; 0x3c
 800139a:	af0a      	add	r7, sp, #40	; 0x28
 800139c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e10f      	b.n	80015c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d106      	bne.n	80013c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f005 fb82 	bl	8006acc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2203      	movs	r2, #3
 80013cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fb4f 	bl	8003a8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	687e      	ldr	r6, [r7, #4]
 80013f4:	466d      	mov	r5, sp
 80013f6:	f106 0410 	add.w	r4, r6, #16
 80013fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001406:	e885 0003 	stmia.w	r5, {r0, r1}
 800140a:	1d33      	adds	r3, r6, #4
 800140c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f002 fa27 	bl	8003862 <USB_CoreInit>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2202      	movs	r2, #2
 800141e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e0d0      	b.n	80015c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fb3d 	bl	8003aac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e04a      	b.n	80014ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	333d      	adds	r3, #61	; 0x3d
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	333c      	adds	r3, #60	; 0x3c
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	b298      	uxth	r0, r3
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	3342      	adds	r3, #66	; 0x42
 8001474:	4602      	mov	r2, r0
 8001476:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	1a9b      	subs	r3, r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	333f      	adds	r3, #63	; 0x3f
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	3344      	adds	r3, #68	; 0x44
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	3348      	adds	r3, #72	; 0x48
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3350      	adds	r3, #80	; 0x50
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	3301      	adds	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3af      	bcc.n	8001438 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e044      	b.n	8001568 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	3301      	adds	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3b5      	bcc.n	80014de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	687e      	ldr	r6, [r7, #4]
 800157a:	466d      	mov	r5, sp
 800157c:	f106 0410 	add.w	r4, r6, #16
 8001580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001588:	e894 0003 	ldmia.w	r4, {r0, r1}
 800158c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001590:	1d33      	adds	r3, r6, #4
 8001592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f002 fab3 	bl	8003b00 <USB_DevInit>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e00d      	b.n	80015c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 fafb 	bl	8004bbc <USB_DevDisconnect>

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_PCD_Start+0x1c>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e020      	b.n	800162e <HAL_PCD_Start+0x5e>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d109      	bne.n	8001610 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001600:	2b01      	cmp	r3, #1
 8001602:	d005      	beq.n	8001610 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001608:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fa27 	bl	8003a68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f003 faab 	bl	8004b7a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001636:	b590      	push	{r4, r7, lr}
 8001638:	b08d      	sub	sp, #52	; 0x34
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fb69 	bl	8004d24 <USB_GetMode>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	f040 839d 	bne.w	8001d94 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f003 facd 	bl	8004bfe <USB_ReadInterrupts>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8393 	beq.w	8001d92 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fac4 	bl	8004bfe <USB_ReadInterrupts>
 8001676:	4603      	mov	r3, r0
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b02      	cmp	r3, #2
 800167e:	d107      	bne.n	8001690 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f002 0202 	and.w	r2, r2, #2
 800168e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f003 fab2 	bl	8004bfe <USB_ReadInterrupts>
 800169a:	4603      	mov	r3, r0
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d161      	bne.n	8001768 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0210 	bic.w	r2, r2, #16
 80016b2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	f003 020f 	and.w	r2, r3, #15
 80016c0:	4613      	mov	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	3304      	adds	r3, #4
 80016d2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	0c5b      	lsrs	r3, r3, #17
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d124      	bne.n	800172a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d035      	beq.n	8001758 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	091b      	lsrs	r3, r3, #4
 80016f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	6a38      	ldr	r0, [r7, #32]
 8001700:	f003 f918 	bl	8004934 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001710:	441a      	add	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	699a      	ldr	r2, [r3, #24]
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001722:	441a      	add	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	619a      	str	r2, [r3, #24]
 8001728:	e016      	b.n	8001758 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	0c5b      	lsrs	r3, r3, #17
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	2b06      	cmp	r3, #6
 8001734:	d110      	bne.n	8001758 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800173c:	2208      	movs	r2, #8
 800173e:	4619      	mov	r1, r3
 8001740:	6a38      	ldr	r0, [r7, #32]
 8001742:	f003 f8f7 	bl	8004934 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	699a      	ldr	r2, [r3, #24]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001752:	441a      	add	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699a      	ldr	r2, [r3, #24]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0210 	orr.w	r2, r2, #16
 8001766:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f003 fa46 	bl	8004bfe <USB_ReadInterrupts>
 8001772:	4603      	mov	r3, r0
 8001774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001778:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800177c:	d16e      	bne.n	800185c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fa4c 	bl	8004c24 <USB_ReadDevAllOutEpInterrupt>
 800178c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800178e:	e062      	b.n	8001856 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d057      	beq.n	800184a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 fa71 	bl	8004c8c <USB_ReadDevOutEPInterrupt>
 80017aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00c      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	015a      	lsls	r2, r3, #5
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017c2:	461a      	mov	r2, r3
 80017c4:	2301      	movs	r3, #1
 80017c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fdb0 	bl	8002330 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00c      	beq.n	80017f4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e6:	461a      	mov	r2, r3
 80017e8:	2308      	movs	r3, #8
 80017ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 feaa 	bl	8002548 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d008      	beq.n	8001810 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	4413      	add	r3, r2
 8001806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800180a:	461a      	mov	r2, r3
 800180c:	2310      	movs	r3, #16
 800180e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4413      	add	r3, r2
 8001822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001826:	461a      	mov	r2, r3
 8001828:	2320      	movs	r3, #32
 800182a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001842:	461a      	mov	r2, r3
 8001844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001848:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	3301      	adds	r3, #1
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001852:	085b      	lsrs	r3, r3, #1
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	d199      	bne.n	8001790 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f003 f9cc 	bl	8004bfe <USB_ReadInterrupts>
 8001866:	4603      	mov	r3, r0
 8001868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001870:	f040 80c0 	bne.w	80019f4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 f9ed 	bl	8004c58 <USB_ReadDevAllInEpInterrupt>
 800187e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001884:	e0b2      	b.n	80019ec <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80a7 	beq.w	80019e0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f003 fa13 	bl	8004cc8 <USB_ReadDevInEPInterrupt>
 80018a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d057      	beq.n	800195e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	2201      	movs	r2, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69f9      	ldr	r1, [r7, #28]
 80018ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018ce:	4013      	ands	r3, r2
 80018d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	015a      	lsls	r2, r3, #5
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018de:	461a      	mov	r2, r3
 80018e0:	2301      	movs	r3, #1
 80018e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d132      	bne.n	8001952 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	3348      	adds	r3, #72	; 0x48
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4403      	add	r3, r0
 800190c:	3344      	adds	r3, #68	; 0x44
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4419      	add	r1, r3
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4403      	add	r3, r0
 8001920:	3348      	adds	r3, #72	; 0x48
 8001922:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	2b00      	cmp	r3, #0
 8001928:	d113      	bne.n	8001952 <HAL_PCD_IRQHandler+0x31c>
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	3350      	adds	r3, #80	; 0x50
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d108      	bne.n	8001952 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800194a:	461a      	mov	r2, r3
 800194c:	2101      	movs	r1, #1
 800194e:	f003 fa1b 	bl	8004d88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4619      	mov	r1, r3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f005 f938 	bl	8006bce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001974:	461a      	mov	r2, r3
 8001976:	2308      	movs	r3, #8
 8001978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001990:	461a      	mov	r2, r3
 8001992:	2310      	movs	r3, #16
 8001994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ac:	461a      	mov	r2, r3
 80019ae:	2340      	movs	r3, #64	; 0x40
 80019b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c8:	461a      	mov	r2, r3
 80019ca:	2302      	movs	r3, #2
 80019cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fc1b 	bl	8002216 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	3301      	adds	r3, #1
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f47f af49 	bne.w	8001886 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 f900 	bl	8004bfe <USB_ReadInterrupts>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a08:	d122      	bne.n	8001a50 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d108      	bne.n	8001a3a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a30:	2100      	movs	r1, #0
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fe26 	bl	8002684 <HAL_PCDEx_LPM_Callback>
 8001a38:	e002      	b.n	8001a40 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f005 f93e 	bl	8006cbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f003 f8d2 	bl	8004bfe <USB_ReadInterrupts>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a64:	d112      	bne.n	8001a8c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d102      	bne.n	8001a7c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f005 f8fa 	bl	8006c70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a8a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 f8b4 	bl	8004bfe <USB_ReadInterrupts>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa0:	f040 80c7 	bne.w	8001c32 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2110      	movs	r1, #16
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 f982 	bl	8003dc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac8:	e056      	b.n	8001b78 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	015a      	lsls	r2, r3, #5
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001adc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aee:	0151      	lsls	r1, r2, #5
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	440a      	add	r2, r1
 8001af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001af8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001afc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	015a      	lsls	r2, r3, #5
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b0e:	0151      	lsls	r1, r2, #5
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	440a      	add	r2, r1
 8001b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b30:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b42:	0151      	lsls	r1, r2, #5
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	440a      	add	r2, r1
 8001b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b54:	015a      	lsls	r2, r3, #5
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b62:	0151      	lsls	r1, r2, #5
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	440a      	add	r2, r1
 8001b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b70:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	3301      	adds	r3, #1
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d3a3      	bcc.n	8001aca <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b90:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b94:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d016      	beq.n	8001bcc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bae:	f043 030b 	orr.w	r3, r3, #11
 8001bb2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc4:	f043 030b 	orr.w	r3, r3, #11
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	e015      	b.n	8001bf8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bde:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001be2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf2:	f043 030b 	orr.w	r3, r3, #11
 8001bf6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f003 f8b3 	bl	8004d88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 ffe1 	bl	8004bfe <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c46:	d124      	bne.n	8001c92 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 f877 	bl	8004d40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 f917 	bl	8003e8a <USB_GetDevSpeed>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681c      	ldr	r4, [r3, #0]
 8001c68:	f001 f946 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8001c6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	4620      	mov	r0, r4
 8001c78:	f001 fe54 	bl	8003924 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f004 ffce 	bl	8006c1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 ffb1 	bl	8004bfe <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d10a      	bne.n	8001cbc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f004 ffab 	bl	8006c02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f002 0208 	and.w	r2, r2, #8
 8001cba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 ff9c 	bl	8004bfe <USB_ReadInterrupts>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f005 f80d 	bl	8006cfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f002 ff81 	bl	8004bfe <USB_ReadInterrupts>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d06:	d10f      	bne.n	8001d28 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f004 ffe0 	bl	8006cd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 ff66 	bl	8004bfe <USB_ReadInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3c:	d10a      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f004 ffee 	bl	8006d20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 ff50 	bl	8004bfe <USB_ReadInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d115      	bne.n	8001d94 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f004 ffde 	bl	8006d3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6859      	ldr	r1, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	e000      	b.n	8001d94 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001d92:	bf00      	nop
    }
  }
}
 8001d94:	3734      	adds	r7, #52	; 0x34
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd90      	pop	{r4, r7, pc}

08001d9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_PCD_SetAddress+0x1a>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e013      	b.n	8001ddc <HAL_PCD_SetAddress+0x42>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 feae 	bl	8004b2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	70fb      	strb	r3, [r7, #3]
 8001df6:	460b      	mov	r3, r1
 8001df8:	803b      	strh	r3, [r7, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	da0f      	bge.n	8001e2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 020f 	and.w	r2, r3, #15
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	3338      	adds	r3, #56	; 0x38
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	705a      	strb	r2, [r3, #1]
 8001e28:	e00f      	b.n	8001e4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e56:	883a      	ldrh	r2, [r7, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	78ba      	ldrb	r2, [r7, #2]
 8001e60:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d004      	beq.n	8001e74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e74:	78bb      	ldrb	r3, [r7, #2]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d102      	bne.n	8001e80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_PCD_EP_Open+0xaa>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e00e      	b.n	8001eac <HAL_PCD_EP_Open+0xc8>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 f819 	bl	8003ed4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	da0f      	bge.n	8001ee8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 020f 	and.w	r2, r3, #15
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	3338      	adds	r3, #56	; 0x38
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	3304      	adds	r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	705a      	strb	r2, [r3, #1]
 8001ee6:	e00f      	b.n	8001f08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	f003 020f 	and.w	r2, r3, #15
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	3304      	adds	r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_PCD_EP_Close+0x6e>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e00e      	b.n	8001f40 <HAL_PCD_EP_Close+0x8c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68f9      	ldr	r1, [r7, #12]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f002 f857 	bl	8003fe4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	460b      	mov	r3, r1
 8001f56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f58:	7afb      	ldrb	r3, [r7, #11]
 8001f5a:	f003 020f 	and.w	r2, r3, #15
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3304      	adds	r3, #4
 8001f70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2200      	movs	r2, #0
 8001f88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8a:	7afb      	ldrb	r3, [r7, #11]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d102      	bne.n	8001fa4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	6979      	ldr	r1, [r7, #20]
 8001fbc:	f002 fb32 	bl	8004624 <USB_EP0StartXfer>
 8001fc0:	e008      	b.n	8001fd4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	6979      	ldr	r1, [r7, #20]
 8001fd0:	f002 f8e4 	bl	800419c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	f003 020f 	and.w	r2, r3, #15
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002000:	681b      	ldr	r3, [r3, #0]
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	460b      	mov	r3, r1
 800201c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201e:	7afb      	ldrb	r3, [r7, #11]
 8002020:	f003 020f 	and.w	r2, r3, #15
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	3338      	adds	r3, #56	; 0x38
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	3304      	adds	r3, #4
 8002034:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2201      	movs	r2, #1
 800204c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800204e:	7afb      	ldrb	r3, [r7, #11]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	b2da      	uxtb	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d102      	bne.n	8002068 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002068:	7afb      	ldrb	r3, [r7, #11]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	6979      	ldr	r1, [r7, #20]
 8002080:	f002 fad0 	bl	8004624 <USB_EP0StartXfer>
 8002084:	e008      	b.n	8002098 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	6979      	ldr	r1, [r7, #20]
 8002094:	f002 f882 	bl	800419c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 020f 	and.w	r2, r3, #15
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d901      	bls.n	80020c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e050      	b.n	8002162 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	da0f      	bge.n	80020e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	f003 020f 	and.w	r2, r3, #15
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	3338      	adds	r3, #56	; 0x38
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	3304      	adds	r3, #4
 80020de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	705a      	strb	r2, [r3, #1]
 80020e6:	e00d      	b.n	8002104 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	3304      	adds	r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_PCD_EP_SetStall+0x82>
 8002120:	2302      	movs	r3, #2
 8002122:	e01e      	b.n	8002162 <HAL_PCD_EP_SetStall+0xc0>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	4618      	mov	r0, r3
 8002134:	f002 fc27 	bl	8004986 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10a      	bne.n	8002158 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	b2d9      	uxtb	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002152:	461a      	mov	r2, r3
 8002154:	f002 fe18 	bl	8004d88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	d901      	bls.n	8002188 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e042      	b.n	800220e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800218c:	2b00      	cmp	r3, #0
 800218e:	da0f      	bge.n	80021b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	f003 020f 	and.w	r2, r3, #15
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	3338      	adds	r3, #56	; 0x38
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	3304      	adds	r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	705a      	strb	r2, [r3, #1]
 80021ae:	e00f      	b.n	80021d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	f003 020f 	and.w	r2, r3, #15
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	3304      	adds	r3, #4
 80021c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_PCD_EP_ClrStall+0x86>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e00e      	b.n	800220e <HAL_PCD_EP_ClrStall+0xa4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68f9      	ldr	r1, [r7, #12]
 80021fe:	4618      	mov	r0, r3
 8002200:	f002 fc2f 	bl	8004a62 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b08a      	sub	sp, #40	; 0x28
 800221a:	af02      	add	r7, sp, #8
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	3338      	adds	r3, #56	; 0x38
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	3304      	adds	r3, #4
 800223c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	429a      	cmp	r2, r3
 8002248:	d901      	bls.n	800224e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e06c      	b.n	8002328 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	429a      	cmp	r2, r3
 8002262:	d902      	bls.n	800226a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3303      	adds	r3, #3
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002272:	e02b      	b.n	80022cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	429a      	cmp	r2, r3
 8002288:	d902      	bls.n	8002290 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	3303      	adds	r3, #3
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	68d9      	ldr	r1, [r3, #12]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	4603      	mov	r3, r0
 80022ae:	6978      	ldr	r0, [r7, #20]
 80022b0:	f002 fb0b 	bl	80048ca <USB_WritePacket>

    ep->xfer_buff  += len;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	441a      	add	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	441a      	add	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d809      	bhi.n	80022f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d203      	bcs.n	80022f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1be      	bne.n	8002274 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d811      	bhi.n	8002326 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	2201      	movs	r2, #1
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	43db      	mvns	r3, r3
 800231c:	6939      	ldr	r1, [r7, #16]
 800231e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002322:	4013      	ands	r3, r2
 8002324:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	333c      	adds	r3, #60	; 0x3c
 8002348:	3304      	adds	r3, #4
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b01      	cmp	r3, #1
 8002364:	f040 80a0 	bne.w	80024a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d015      	beq.n	800239e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4a72      	ldr	r2, [pc, #456]	; (8002540 <PCD_EP_OutXfrComplete_int+0x210>)
 8002376:	4293      	cmp	r3, r2
 8002378:	f240 80dd 	bls.w	8002536 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80d7 	beq.w	8002536 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002394:	461a      	mov	r2, r3
 8002396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800239a:	6093      	str	r3, [r2, #8]
 800239c:	e0cb      	b.n	8002536 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d009      	beq.n	80023bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b4:	461a      	mov	r2, r3
 80023b6:	2320      	movs	r3, #32
 80023b8:	6093      	str	r3, [r2, #8]
 80023ba:	e0bc      	b.n	8002536 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 80b7 	bne.w	8002536 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4a5d      	ldr	r2, [pc, #372]	; (8002540 <PCD_EP_OutXfrComplete_int+0x210>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d90f      	bls.n	80023f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e6:	461a      	mov	r2, r3
 80023e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ec:	6093      	str	r3, [r2, #8]
 80023ee:	e0a2      	b.n	8002536 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002402:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	0159      	lsls	r1, r3, #5
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	440b      	add	r3, r1
 800240c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002416:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4403      	add	r3, r0
 8002426:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800242a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4403      	add	r3, r0
 800244e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4419      	add	r1, r3
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4403      	add	r3, r0
 8002464:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002468:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d114      	bne.n	800249a <PCD_EP_OutXfrComplete_int+0x16a>
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d108      	bne.n	800249a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002492:	461a      	mov	r2, r3
 8002494:	2101      	movs	r1, #1
 8002496:	f002 fc77 	bl	8004d88 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	4619      	mov	r1, r3
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f004 fb79 	bl	8006b98 <HAL_PCD_DataOutStageCallback>
 80024a6:	e046      	b.n	8002536 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a26      	ldr	r2, [pc, #152]	; (8002544 <PCD_EP_OutXfrComplete_int+0x214>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d124      	bne.n	80024fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c6:	461a      	mov	r2, r3
 80024c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024cc:	6093      	str	r3, [r2, #8]
 80024ce:	e032      	b.n	8002536 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e6:	461a      	mov	r2, r3
 80024e8:	2320      	movs	r3, #32
 80024ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4619      	mov	r1, r3
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f004 fb50 	bl	8006b98 <HAL_PCD_DataOutStageCallback>
 80024f8:	e01d      	b.n	8002536 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d114      	bne.n	800252a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d108      	bne.n	800252a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002522:	461a      	mov	r2, r3
 8002524:	2100      	movs	r1, #0
 8002526:	f002 fc2f 	bl	8004d88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4619      	mov	r1, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f004 fb31 	bl	8006b98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	4f54300a 	.word	0x4f54300a
 8002544:	4f54310a 	.word	0x4f54310a

08002548 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	333c      	adds	r3, #60	; 0x3c
 8002560:	3304      	adds	r3, #4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d90e      	bls.n	800259c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002594:	461a      	mov	r2, r3
 8002596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800259a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f004 fae9 	bl	8006b74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d90c      	bls.n	80025c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d108      	bne.n	80025c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025bc:	461a      	mov	r2, r3
 80025be:	2101      	movs	r1, #1
 80025c0:	f002 fbe2 	bl	8004d88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	4f54300a 	.word	0x4f54300a

080025d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	70fb      	strb	r3, [r7, #3]
 80025e0:	4613      	mov	r3, r2
 80025e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d107      	bne.n	8002602 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025f2:	883b      	ldrh	r3, [r7, #0]
 80025f4:	0419      	lsls	r1, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002600:	e028      	b.n	8002654 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	4413      	add	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e00d      	b.n	8002632 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	3340      	adds	r3, #64	; 0x40
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4413      	add	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	3301      	adds	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	3b01      	subs	r3, #1
 8002638:	429a      	cmp	r2, r3
 800263a:	d3ec      	bcc.n	8002616 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800263c:	883b      	ldrh	r3, [r7, #0]
 800263e:	0418      	lsls	r0, r3, #16
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	3b01      	subs	r3, #1
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	4302      	orrs	r2, r0
 800264c:	3340      	adds	r3, #64	; 0x40
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e25b      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d075      	beq.n	80027a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ba:	4ba3      	ldr	r3, [pc, #652]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d00c      	beq.n	80026e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c6:	4ba0      	ldr	r3, [pc, #640]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d112      	bne.n	80026f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d2:	4b9d      	ldr	r3, [pc, #628]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026de:	d10b      	bne.n	80026f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	4b99      	ldr	r3, [pc, #612]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d05b      	beq.n	80027a4 <HAL_RCC_OscConfig+0x108>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d157      	bne.n	80027a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e236      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002700:	d106      	bne.n	8002710 <HAL_RCC_OscConfig+0x74>
 8002702:	4b91      	ldr	r3, [pc, #580]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a90      	ldr	r2, [pc, #576]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e01d      	b.n	800274c <HAL_RCC_OscConfig+0xb0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x98>
 800271a:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a8a      	ldr	r2, [pc, #552]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b88      	ldr	r3, [pc, #544]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a87      	ldr	r2, [pc, #540]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0xb0>
 8002734:	4b84      	ldr	r3, [pc, #528]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a83      	ldr	r2, [pc, #524]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 800273a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b81      	ldr	r3, [pc, #516]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a80      	ldr	r2, [pc, #512]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d013      	beq.n	800277c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7fe faee 	bl	8000d34 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe faea 	bl	8000d34 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e1fb      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b76      	ldr	r3, [pc, #472]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0xc0>
 800277a:	e014      	b.n	80027a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe fada 	bl	8000d34 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fad6 	bl	8000d34 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e1e7      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002796:	4b6c      	ldr	r3, [pc, #432]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0xe8>
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d063      	beq.n	800287a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027b2:	4b65      	ldr	r3, [pc, #404]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027be:	4b62      	ldr	r3, [pc, #392]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d11c      	bne.n	8002804 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ca:	4b5f      	ldr	r3, [pc, #380]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d116      	bne.n	8002804 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	4b5c      	ldr	r3, [pc, #368]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_RCC_OscConfig+0x152>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e1bb      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ee:	4b56      	ldr	r3, [pc, #344]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4952      	ldr	r1, [pc, #328]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	e03a      	b.n	800287a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d020      	beq.n	800284e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280c:	4b4f      	ldr	r3, [pc, #316]	; (800294c <HAL_RCC_OscConfig+0x2b0>)
 800280e:	2201      	movs	r2, #1
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7fe fa8f 	bl	8000d34 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281a:	f7fe fa8b 	bl	8000d34 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e19c      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282c:	4b46      	ldr	r3, [pc, #280]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002838:	4b43      	ldr	r3, [pc, #268]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4940      	ldr	r1, [pc, #256]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	4313      	orrs	r3, r2
 800284a:	600b      	str	r3, [r1, #0]
 800284c:	e015      	b.n	800287a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284e:	4b3f      	ldr	r3, [pc, #252]	; (800294c <HAL_RCC_OscConfig+0x2b0>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe fa6e 	bl	8000d34 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285c:	f7fe fa6a 	bl	8000d34 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e17b      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286e:	4b36      	ldr	r3, [pc, #216]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d030      	beq.n	80028e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d016      	beq.n	80028bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800288e:	4b30      	ldr	r3, [pc, #192]	; (8002950 <HAL_RCC_OscConfig+0x2b4>)
 8002890:	2201      	movs	r2, #1
 8002892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe fa4e 	bl	8000d34 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289c:	f7fe fa4a 	bl	8000d34 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e15b      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x200>
 80028ba:	e015      	b.n	80028e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028bc:	4b24      	ldr	r3, [pc, #144]	; (8002950 <HAL_RCC_OscConfig+0x2b4>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c2:	f7fe fa37 	bl	8000d34 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ca:	f7fe fa33 	bl	8000d34 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e144      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80028de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a0 	beq.w	8002a36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10f      	bne.n	8002926 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002922:	2301      	movs	r3, #1
 8002924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x2b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d121      	bne.n	8002976 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_RCC_OscConfig+0x2b8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a07      	ldr	r2, [pc, #28]	; (8002954 <HAL_RCC_OscConfig+0x2b8>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293e:	f7fe f9f9 	bl	8000d34 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	e011      	b.n	800296a <HAL_RCC_OscConfig+0x2ce>
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	42470000 	.word	0x42470000
 8002950:	42470e80 	.word	0x42470e80
 8002954:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002958:	f7fe f9ec 	bl	8000d34 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0fd      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296a:	4b81      	ldr	r3, [pc, #516]	; (8002b70 <HAL_RCC_OscConfig+0x4d4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d106      	bne.n	800298c <HAL_RCC_OscConfig+0x2f0>
 800297e:	4b7d      	ldr	r3, [pc, #500]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a7c      	ldr	r2, [pc, #496]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
 800298a:	e01c      	b.n	80029c6 <HAL_RCC_OscConfig+0x32a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b05      	cmp	r3, #5
 8002992:	d10c      	bne.n	80029ae <HAL_RCC_OscConfig+0x312>
 8002994:	4b77      	ldr	r3, [pc, #476]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	4a76      	ldr	r2, [pc, #472]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6713      	str	r3, [r2, #112]	; 0x70
 80029a0:	4b74      	ldr	r3, [pc, #464]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	4a73      	ldr	r2, [pc, #460]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6713      	str	r3, [r2, #112]	; 0x70
 80029ac:	e00b      	b.n	80029c6 <HAL_RCC_OscConfig+0x32a>
 80029ae:	4b71      	ldr	r3, [pc, #452]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	4a70      	ldr	r2, [pc, #448]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ba:	4b6e      	ldr	r3, [pc, #440]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a6d      	ldr	r2, [pc, #436]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d015      	beq.n	80029fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ce:	f7fe f9b1 	bl	8000d34 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe f9ad 	bl	8000d34 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e0bc      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ee      	beq.n	80029d6 <HAL_RCC_OscConfig+0x33a>
 80029f8:	e014      	b.n	8002a24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fa:	f7fe f99b 	bl	8000d34 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7fe f997 	bl	8000d34 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e0a6      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a18:	4b56      	ldr	r3, [pc, #344]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ee      	bne.n	8002a02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d105      	bne.n	8002a36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2a:	4b52      	ldr	r3, [pc, #328]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a51      	ldr	r2, [pc, #324]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 8002a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8092 	beq.w	8002b64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a40:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d05c      	beq.n	8002b06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d141      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a54:	4b48      	ldr	r3, [pc, #288]	; (8002b78 <HAL_RCC_OscConfig+0x4dc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe f96b 	bl	8000d34 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a62:	f7fe f967 	bl	8000d34 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e078      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a74:	4b3f      	ldr	r3, [pc, #252]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	019b      	lsls	r3, r3, #6
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	041b      	lsls	r3, r3, #16
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	061b      	lsls	r3, r3, #24
 8002aa4:	4933      	ldr	r1, [pc, #204]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aaa:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <HAL_RCC_OscConfig+0x4dc>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe f940 	bl	8000d34 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe f93c 	bl	8000d34 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04d      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x41c>
 8002ad6:	e045      	b.n	8002b64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <HAL_RCC_OscConfig+0x4dc>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe f929 	bl	8000d34 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe f925 	bl	8000d34 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e036      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x44a>
 8002b04:	e02e      	b.n	8002b64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e029      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_RCC_OscConfig+0x4d8>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d11c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d115      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d10d      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d106      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40007000 	.word	0x40007000
 8002b74:	40023800 	.word	0x40023800
 8002b78:	42470060 	.word	0x42470060

08002b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0cc      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b90:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d90c      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b65      	ldr	r3, [pc, #404]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0b8      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd0:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be8:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a52      	ldr	r2, [pc, #328]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	494d      	ldr	r1, [pc, #308]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d044      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d119      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e07f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e067      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5a:	4b37      	ldr	r3, [pc, #220]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4934      	ldr	r1, [pc, #208]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe f862 	bl	8000d34 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe f85e 	bl	8000d34 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e04f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 020c 	and.w	r2, r3, #12
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1eb      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d20c      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e032      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4916      	ldr	r1, [pc, #88]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	490e      	ldr	r1, [pc, #56]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d02:	f000 f821 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002d06:	4601      	mov	r1, r0
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	5cd3      	ldrb	r3, [r2, r3]
 8002d16:	fa21 f303 	lsr.w	r3, r1, r3
 8002d1a:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd ffc2 	bl	8000cac <HAL_InitTick>

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023c00 	.word	0x40023c00
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	08007a00 	.word	0x08007a00
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000004 	.word	0x20000004

08002d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	2300      	movs	r3, #0
 8002d58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d5e:	4b63      	ldr	r3, [pc, #396]	; (8002eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d007      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x32>
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d008      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x38>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 80b4 	bne.w	8002edc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4b5e      	ldr	r3, [pc, #376]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d76:	60bb      	str	r3, [r7, #8]
       break;
 8002d78:	e0b3      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d7c:	60bb      	str	r3, [r7, #8]
      break;
 8002d7e:	e0b0      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d80:	4b5a      	ldr	r3, [pc, #360]	; (8002eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8a:	4b58      	ldr	r3, [pc, #352]	; (8002eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d04a      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d96:	4b55      	ldr	r3, [pc, #340]	; (8002eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	f04f 0400 	mov.w	r4, #0
 8002da0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	ea03 0501 	and.w	r5, r3, r1
 8002dac:	ea04 0602 	and.w	r6, r4, r2
 8002db0:	4629      	mov	r1, r5
 8002db2:	4632      	mov	r2, r6
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	f04f 0400 	mov.w	r4, #0
 8002dbc:	0154      	lsls	r4, r2, #5
 8002dbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dc2:	014b      	lsls	r3, r1, #5
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4622      	mov	r2, r4
 8002dc8:	1b49      	subs	r1, r1, r5
 8002dca:	eb62 0206 	sbc.w	r2, r2, r6
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	f04f 0400 	mov.w	r4, #0
 8002dd6:	0194      	lsls	r4, r2, #6
 8002dd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ddc:	018b      	lsls	r3, r1, #6
 8002dde:	1a5b      	subs	r3, r3, r1
 8002de0:	eb64 0402 	sbc.w	r4, r4, r2
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	00e2      	lsls	r2, r4, #3
 8002dee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002df2:	00d9      	lsls	r1, r3, #3
 8002df4:	460b      	mov	r3, r1
 8002df6:	4614      	mov	r4, r2
 8002df8:	195b      	adds	r3, r3, r5
 8002dfa:	eb44 0406 	adc.w	r4, r4, r6
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	0262      	lsls	r2, r4, #9
 8002e08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e0c:	0259      	lsls	r1, r3, #9
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4614      	mov	r4, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	4621      	mov	r1, r4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f04f 0400 	mov.w	r4, #0
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4623      	mov	r3, r4
 8002e20:	f7fd fa26 	bl	8000270 <__aeabi_uldivmod>
 8002e24:	4603      	mov	r3, r0
 8002e26:	460c      	mov	r4, r1
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	e049      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2c:	4b2f      	ldr	r3, [pc, #188]	; (8002eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	f04f 0400 	mov.w	r4, #0
 8002e36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	ea03 0501 	and.w	r5, r3, r1
 8002e42:	ea04 0602 	and.w	r6, r4, r2
 8002e46:	4629      	mov	r1, r5
 8002e48:	4632      	mov	r2, r6
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	f04f 0400 	mov.w	r4, #0
 8002e52:	0154      	lsls	r4, r2, #5
 8002e54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e58:	014b      	lsls	r3, r1, #5
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4622      	mov	r2, r4
 8002e5e:	1b49      	subs	r1, r1, r5
 8002e60:	eb62 0206 	sbc.w	r2, r2, r6
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	f04f 0400 	mov.w	r4, #0
 8002e6c:	0194      	lsls	r4, r2, #6
 8002e6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e72:	018b      	lsls	r3, r1, #6
 8002e74:	1a5b      	subs	r3, r3, r1
 8002e76:	eb64 0402 	sbc.w	r4, r4, r2
 8002e7a:	f04f 0100 	mov.w	r1, #0
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	00e2      	lsls	r2, r4, #3
 8002e84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e88:	00d9      	lsls	r1, r3, #3
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	195b      	adds	r3, r3, r5
 8002e90:	eb44 0406 	adc.w	r4, r4, r6
 8002e94:	f04f 0100 	mov.w	r1, #0
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	02a2      	lsls	r2, r4, #10
 8002e9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ea2:	0299      	lsls	r1, r3, #10
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4614      	mov	r4, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	4621      	mov	r1, r4
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f04f 0400 	mov.w	r4, #0
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4623      	mov	r3, r4
 8002eb6:	f7fd f9db 	bl	8000270 <__aeabi_uldivmod>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	0c1b      	lsrs	r3, r3, #16
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	60bb      	str	r3, [r7, #8]
      break;
 8002eda:	e002      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ede:	60bb      	str	r3, [r7, #8]
      break;
 8002ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	00f42400 	.word	0x00f42400
 8002ef4:	007a1200 	.word	0x007a1200

08002ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000000 	.word	0x20000000

08002f10 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d035      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f38:	4b62      	ldr	r3, [pc, #392]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f3e:	f7fd fef9 	bl	8000d34 <HAL_GetTick>
 8002f42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f46:	f7fd fef5 	bl	8000d34 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0b0      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f58:	4b5b      	ldr	r3, [pc, #364]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f0      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	019a      	lsls	r2, r3, #6
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	071b      	lsls	r3, r3, #28
 8002f70:	4955      	ldr	r1, [pc, #340]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f78:	4b52      	ldr	r3, [pc, #328]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f7e:	f7fd fed9 	bl	8000d34 <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f86:	f7fd fed5 	bl	8000d34 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e090      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f98:	4b4b      	ldr	r3, [pc, #300]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8083 	beq.w	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b44      	ldr	r3, [pc, #272]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	4a43      	ldr	r2, [pc, #268]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc2:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fce:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a3e      	ldr	r2, [pc, #248]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fda:	f7fd feab 	bl	8000d34 <HAL_GetTick>
 8002fde:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7fd fea7 	bl	8000d34 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e062      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ff4:	4b35      	ldr	r3, [pc, #212]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003000:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003008:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d02f      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	429a      	cmp	r2, r3
 800301c:	d028      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800301e:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003026:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800302e:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003034:	4a24      	ldr	r2, [pc, #144]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800303a:	4b23      	ldr	r3, [pc, #140]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d114      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003046:	f7fd fe75 	bl	8000d34 <HAL_GetTick>
 800304a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fd fe71 	bl	8000d34 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	; 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e02a      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003064:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0ee      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800307c:	d10d      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800308e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003092:	490d      	ldr	r1, [pc, #52]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003094:	4313      	orrs	r3, r2
 8003096:	608b      	str	r3, [r1, #8]
 8003098:	e005      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030a4:	6093      	str	r3, [r2, #8]
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b2:	4905      	ldr	r1, [pc, #20]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	42470068 	.word	0x42470068
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40007000 	.word	0x40007000
 80030d0:	42470e40 	.word	0x42470e40

080030d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e0a4      	b.n	8003230 <HAL_RTC_Init+0x15c>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	7f5b      	ldrb	r3, [r3, #29]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d126      	bne.n	800313e <HAL_RTC_Init+0x6a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4f      	ldr	r2, [pc, #316]	; (8003238 <HAL_RTC_Init+0x164>)
 80030fa:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a4f      	ldr	r2, [pc, #316]	; (800323c <HAL_RTC_Init+0x168>)
 8003100:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4e      	ldr	r2, [pc, #312]	; (8003240 <HAL_RTC_Init+0x16c>)
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a4e      	ldr	r2, [pc, #312]	; (8003244 <HAL_RTC_Init+0x170>)
 800310c:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4d      	ldr	r2, [pc, #308]	; (8003248 <HAL_RTC_Init+0x174>)
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a4d      	ldr	r2, [pc, #308]	; (800324c <HAL_RTC_Init+0x178>)
 8003118:	635a      	str	r2, [r3, #52]	; 0x34

    if(hrtc->MspInitCallback == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <HAL_RTC_Init+0x54>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4a      	ldr	r2, [pc, #296]	; (8003250 <HAL_RTC_Init+0x17c>)
 8003126:	639a      	str	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	4798      	blx	r3

    if(hrtc->MspDeInitCallback == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <HAL_RTC_Init+0x6a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a46      	ldr	r2, [pc, #280]	; (8003254 <HAL_RTC_Init+0x180>)
 800313c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	22ca      	movs	r2, #202	; 0xca
 800314a:	625a      	str	r2, [r3, #36]	; 0x24
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2253      	movs	r2, #83	; 0x53
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fab8 	bl	80036ca <RTC_EnterInitMode>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_RTC_Init+0x9e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	22ff      	movs	r2, #255	; 0xff
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2204      	movs	r2, #4
 800316c:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e05e      	b.n	8003230 <HAL_RTC_Init+0x15c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003184:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68d2      	ldr	r2, [r2, #12]
 80031ac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6919      	ldr	r1, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	041a      	lsls	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10e      	bne.n	80031fe <HAL_RTC_Init+0x12a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fa4a 	bl	800367a <HAL_RTC_WaitForSynchro>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_RTC_Init+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	22ff      	movs	r2, #255	; 0xff
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2204      	movs	r2, #4
 80031f8:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e018      	b.n	8003230 <HAL_RTC_Init+0x15c>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
  }
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	0800064d 	.word	0x0800064d
 800323c:	0800384f 	.word	0x0800384f
 8003240:	0800379b 	.word	0x0800379b
 8003244:	080037d7 	.word	0x080037d7
 8003248:	080037af 	.word	0x080037af
 800324c:	080037c3 	.word	0x080037c3
 8003250:	0800099d 	.word	0x0800099d
 8003254:	080009c9 	.word	0x080009c9

08003258 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	7f1b      	ldrb	r3, [r3, #28]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_RTC_SetTime+0x1c>
 8003270:	2302      	movs	r3, #2
 8003272:	e0aa      	b.n	80033ca <HAL_RTC_SetTime+0x172>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2202      	movs	r2, #2
 800327e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d126      	bne.n	80032d4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fa3f 	bl	8003722 <RTC_ByteToBcd2>
 80032a4:	4603      	mov	r3, r0
 80032a6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fa38 	bl	8003722 <RTC_ByteToBcd2>
 80032b2:	4603      	mov	r3, r0
 80032b4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80032b6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	789b      	ldrb	r3, [r3, #2]
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fa30 	bl	8003722 <RTC_ByteToBcd2>
 80032c2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80032c4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	78db      	ldrb	r3, [r3, #3]
 80032cc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	e018      	b.n	8003306 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2200      	movs	r2, #0
 80032e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	785b      	ldrb	r3, [r3, #1]
 80032f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80032f4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80032fa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	78db      	ldrb	r3, [r3, #3]
 8003300:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	22ca      	movs	r2, #202	; 0xca
 800330c:	625a      	str	r2, [r3, #36]	; 0x24
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2253      	movs	r2, #83	; 0x53
 8003314:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f9d7 	bl	80036ca <RTC_EnterInitMode>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	22ff      	movs	r2, #255	; 0xff
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2204      	movs	r2, #4
 800332e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e047      	b.n	80033ca <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003344:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003348:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003358:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6899      	ldr	r1, [r3, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003380:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f972 	bl	800367a <HAL_RTC_WaitForSynchro>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	22ff      	movs	r2, #255	; 0xff
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2204      	movs	r2, #4
 80033a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e00a      	b.n	80033ca <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	22ff      	movs	r2, #255	; 0xff
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80033c8:	2300      	movs	r3, #0
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd90      	pop	{r4, r7, pc}

080033d2 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003404:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003408:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	0a1b      	lsrs	r3, r3, #8
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	0c1b      	lsrs	r3, r3, #16
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11a      	bne.n	8003484 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f983 	bl	800375e <RTC_Bcd2ToByte>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 f97a 	bl	800375e <RTC_Bcd2ToByte>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	789b      	ldrb	r3, [r3, #2]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f971 	bl	800375e <RTC_Bcd2ToByte>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800348e:	b590      	push	{r4, r7, lr}
 8003490:	b087      	sub	sp, #28
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	7f1b      	ldrb	r3, [r3, #28]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_RTC_SetDate+0x1c>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e094      	b.n	80035d4 <HAL_RTC_SetDate+0x146>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2202      	movs	r2, #2
 80034b4:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10e      	bne.n	80034da <HAL_RTC_SetDate+0x4c>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	785b      	ldrb	r3, [r3, #1]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	785b      	ldrb	r3, [r3, #1]
 80034cc:	f023 0310 	bic.w	r3, r3, #16
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	330a      	adds	r3, #10
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d11c      	bne.n	800351a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	78db      	ldrb	r3, [r3, #3]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 f91c 	bl	8003722 <RTC_ByteToBcd2>
 80034ea:	4603      	mov	r3, r0
 80034ec:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	785b      	ldrb	r3, [r3, #1]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f915 	bl	8003722 <RTC_ByteToBcd2>
 80034f8:	4603      	mov	r3, r0
 80034fa:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80034fc:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	789b      	ldrb	r3, [r3, #2]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f90d 	bl	8003722 <RTC_ByteToBcd2>
 8003508:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800350a:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e00e      	b.n	8003538 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	78db      	ldrb	r3, [r3, #3]
 800351e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	785b      	ldrb	r3, [r3, #1]
 8003524:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003526:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800352c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	22ca      	movs	r2, #202	; 0xca
 800353e:	625a      	str	r2, [r3, #36]	; 0x24
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2253      	movs	r2, #83	; 0x53
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f8be 	bl	80036ca <RTC_EnterInitMode>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00b      	beq.n	800356c <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	22ff      	movs	r2, #255	; 0xff
 800355a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2204      	movs	r2, #4
 8003560:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e033      	b.n	80035d4 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003576:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800357a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800358a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d111      	bne.n	80035be <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f86d 	bl	800367a <HAL_RTC_WaitForSynchro>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	22ff      	movs	r2, #255	; 0xff
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2204      	movs	r2, #4
 80035b2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e00a      	b.n	80035d4 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	22ff      	movs	r2, #255	; 0xff
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
  }
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd90      	pop	{r4, r7, pc}

080035dc <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	0c1b      	lsrs	r3, r3, #16
 8003600:	b2da      	uxtb	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	0a1b      	lsrs	r3, r3, #8
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	b2da      	uxtb	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	0b5b      	lsrs	r3, r3, #13
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d11a      	bne.n	8003670 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	78db      	ldrb	r3, [r3, #3]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f88d 	bl	800375e <RTC_Bcd2ToByte>
 8003644:	4603      	mov	r3, r0
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	785b      	ldrb	r3, [r3, #1]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f884 	bl	800375e <RTC_Bcd2ToByte>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	789b      	ldrb	r3, [r3, #2]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f87b 	bl	800375e <RTC_Bcd2ToByte>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003694:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003696:	f7fd fb4d 	bl	8000d34 <HAL_GetTick>
 800369a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800369c:	e009      	b.n	80036b2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800369e:	f7fd fb49 	bl	8000d34 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ac:	d901      	bls.n	80036b2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e007      	b.n	80036c2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ee      	beq.n	800369e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d119      	bne.n	8003718 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036ee:	f7fd fb21 	bl	8000d34 <HAL_GetTick>
 80036f2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036f4:	e009      	b.n	800370a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036f6:	f7fd fb1d 	bl	8000d34 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003704:	d901      	bls.n	800370a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e007      	b.n	800371a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ee      	beq.n	80036f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	4603      	mov	r3, r0
 800372a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003730:	e005      	b.n	800373e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3301      	adds	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	3b0a      	subs	r3, #10
 800373c:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	2b09      	cmp	r3, #9
 8003742:	d8f6      	bhi.n	8003732 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	b2da      	uxtb	r2, r3
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	4313      	orrs	r3, r2
 8003750:	b2db      	uxtb	r3, r3
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4413      	add	r3, r2
 800378c:	b2db      	uxtb	r3, r3
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_TimeStampEventCallback could be implemented in the user file
  */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper1EventCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper2EventCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b087      	sub	sp, #28
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3350      	adds	r3, #80	; 0x50
 8003800:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4413      	add	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	601a      	str	r2, [r3, #0]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3350      	adds	r3, #80	; 0x50
 8003832:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003862:	b084      	sub	sp, #16
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	f107 001c 	add.w	r0, r7, #28
 8003870:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	2b01      	cmp	r3, #1
 8003878:	d122      	bne.n	80038c0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800388e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f001 fac5 	bl	8004e44 <USB_CoreReset>
 80038ba:	4603      	mov	r3, r0
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	e01a      	b.n	80038f6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f001 fab9 	bl	8004e44 <USB_CoreReset>
 80038d2:	4603      	mov	r3, r0
 80038d4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80038d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38
 80038e8:	e005      	b.n	80038f6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d10b      	bne.n	8003914 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f043 0206 	orr.w	r2, r3, #6
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003920:	b004      	add	sp, #16
 8003922:	4770      	bx	lr

08003924 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d165      	bne.n	8003a04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4a41      	ldr	r2, [pc, #260]	; (8003a40 <USB_SetTurnaroundTime+0x11c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d906      	bls.n	800394e <USB_SetTurnaroundTime+0x2a>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4a40      	ldr	r2, [pc, #256]	; (8003a44 <USB_SetTurnaroundTime+0x120>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d802      	bhi.n	800394e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003948:	230f      	movs	r3, #15
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e062      	b.n	8003a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4a3c      	ldr	r2, [pc, #240]	; (8003a44 <USB_SetTurnaroundTime+0x120>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d906      	bls.n	8003964 <USB_SetTurnaroundTime+0x40>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4a3b      	ldr	r2, [pc, #236]	; (8003a48 <USB_SetTurnaroundTime+0x124>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d802      	bhi.n	8003964 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800395e:	230e      	movs	r3, #14
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e057      	b.n	8003a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4a38      	ldr	r2, [pc, #224]	; (8003a48 <USB_SetTurnaroundTime+0x124>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d906      	bls.n	800397a <USB_SetTurnaroundTime+0x56>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4a37      	ldr	r2, [pc, #220]	; (8003a4c <USB_SetTurnaroundTime+0x128>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d802      	bhi.n	800397a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003974:	230d      	movs	r3, #13
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e04c      	b.n	8003a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4a33      	ldr	r2, [pc, #204]	; (8003a4c <USB_SetTurnaroundTime+0x128>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d906      	bls.n	8003990 <USB_SetTurnaroundTime+0x6c>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4a32      	ldr	r2, [pc, #200]	; (8003a50 <USB_SetTurnaroundTime+0x12c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d802      	bhi.n	8003990 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800398a:	230c      	movs	r3, #12
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e041      	b.n	8003a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4a2f      	ldr	r2, [pc, #188]	; (8003a50 <USB_SetTurnaroundTime+0x12c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d906      	bls.n	80039a6 <USB_SetTurnaroundTime+0x82>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4a2e      	ldr	r2, [pc, #184]	; (8003a54 <USB_SetTurnaroundTime+0x130>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d802      	bhi.n	80039a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80039a0:	230b      	movs	r3, #11
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e036      	b.n	8003a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <USB_SetTurnaroundTime+0x130>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d906      	bls.n	80039bc <USB_SetTurnaroundTime+0x98>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <USB_SetTurnaroundTime+0x134>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d802      	bhi.n	80039bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80039b6:	230a      	movs	r3, #10
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e02b      	b.n	8003a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <USB_SetTurnaroundTime+0x134>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d906      	bls.n	80039d2 <USB_SetTurnaroundTime+0xae>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4a25      	ldr	r2, [pc, #148]	; (8003a5c <USB_SetTurnaroundTime+0x138>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d802      	bhi.n	80039d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80039cc:	2309      	movs	r3, #9
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e020      	b.n	8003a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <USB_SetTurnaroundTime+0x138>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d906      	bls.n	80039e8 <USB_SetTurnaroundTime+0xc4>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4a20      	ldr	r2, [pc, #128]	; (8003a60 <USB_SetTurnaroundTime+0x13c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d802      	bhi.n	80039e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80039e2:	2308      	movs	r3, #8
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e015      	b.n	8003a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <USB_SetTurnaroundTime+0x13c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d906      	bls.n	80039fe <USB_SetTurnaroundTime+0xda>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <USB_SetTurnaroundTime+0x140>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d802      	bhi.n	80039fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80039f8:	2307      	movs	r3, #7
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	e00a      	b.n	8003a14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80039fe:	2306      	movs	r3, #6
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e007      	b.n	8003a14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a0a:	2309      	movs	r3, #9
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e001      	b.n	8003a14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a10:	2309      	movs	r3, #9
 8003a12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	029b      	lsls	r3, r3, #10
 8003a28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	00d8acbf 	.word	0x00d8acbf
 8003a44:	00e4e1bf 	.word	0x00e4e1bf
 8003a48:	00f423ff 	.word	0x00f423ff
 8003a4c:	0106737f 	.word	0x0106737f
 8003a50:	011a499f 	.word	0x011a499f
 8003a54:	01312cff 	.word	0x01312cff
 8003a58:	014ca43f 	.word	0x014ca43f
 8003a5c:	016e35ff 	.word	0x016e35ff
 8003a60:	01a6ab1f 	.word	0x01a6ab1f
 8003a64:	01e847ff 	.word	0x01e847ff

08003a68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f043 0201 	orr.w	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f023 0201 	bic.w	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d106      	bne.n	8003ad8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	e00b      	b.n	8003af0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	e001      	b.n	8003af0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e003      	b.n	8003af8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003af0:	2032      	movs	r0, #50	; 0x32
 8003af2:	f7fd f92b 	bl	8000d4c <HAL_Delay>

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b00:	b084      	sub	sp, #16
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	e009      	b.n	8003b34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	3340      	adds	r3, #64	; 0x40
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	3301      	adds	r3, #1
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b0e      	cmp	r3, #14
 8003b38:	d9f2      	bls.n	8003b20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d11c      	bne.n	8003b7a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b4e:	f043 0302 	orr.w	r3, r3, #2
 8003b52:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
 8003b78:	e00b      	b.n	8003b92 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bac:	461a      	mov	r2, r3
 8003bae:	680b      	ldr	r3, [r1, #0]
 8003bb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d10c      	bne.n	8003bd2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d104      	bne.n	8003bc8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f949 	bl	8003e58 <USB_SetDevSpeed>
 8003bc6:	e008      	b.n	8003bda <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003bc8:	2101      	movs	r1, #1
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f944 	bl	8003e58 <USB_SetDevSpeed>
 8003bd0:	e003      	b.n	8003bda <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003bd2:	2103      	movs	r1, #3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f93f 	bl	8003e58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003bda:	2110      	movs	r1, #16
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f8f3 	bl	8003dc8 <USB_FlushTxFifo>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f911 	bl	8003e14 <USB_FlushRxFifo>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c02:	461a      	mov	r2, r3
 8003c04:	2300      	movs	r3, #0
 8003c06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2300      	movs	r3, #0
 8003c12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	e043      	b.n	8003cae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c3c:	d118      	bne.n	8003c70 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c50:	461a      	mov	r2, r3
 8003c52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	e013      	b.n	8003c82 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c66:	461a      	mov	r2, r3
 8003c68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e008      	b.n	8003c82 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2300      	movs	r3, #0
 8003c80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2300      	movs	r3, #0
 8003c92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ca6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	3301      	adds	r3, #1
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d3b7      	bcc.n	8003c26 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	e043      	b.n	8003d44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cd2:	d118      	bne.n	8003d06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e013      	b.n	8003d18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	e008      	b.n	8003d18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d12:	461a      	mov	r2, r3
 8003d14:	2300      	movs	r3, #0
 8003d16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d24:	461a      	mov	r2, r3
 8003d26:	2300      	movs	r3, #0
 8003d28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	461a      	mov	r2, r3
 8003d38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	3301      	adds	r3, #1
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d3b7      	bcc.n	8003cbc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d105      	bne.n	8003d80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f043 0210 	orr.w	r2, r3, #16
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <USB_DevInit+0x2c4>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f043 0208 	orr.w	r2, r3, #8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d107      	bne.n	8003db4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dac:	f043 0304 	orr.w	r3, r3, #4
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dc0:	b004      	add	sp, #16
 8003dc2:	4770      	bx	lr
 8003dc4:	803c3800 	.word	0x803c3800

08003dc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3301      	adds	r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <USB_FlushTxFifo+0x48>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e006      	b.n	8003e02 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d0f0      	beq.n	8003de2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	00030d40 	.word	0x00030d40

08003e14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2210      	movs	r2, #16
 8003e24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <USB_FlushRxFifo+0x40>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e006      	b.n	8003e46 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d0f0      	beq.n	8003e26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	00030d40 	.word	0x00030d40

08003e58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	68f9      	ldr	r1, [r7, #12]
 8003e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b087      	sub	sp, #28
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0306 	and.w	r3, r3, #6
 8003ea2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d102      	bne.n	8003eb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
 8003eae:	e00a      	b.n	8003ec6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d002      	beq.n	8003ebc <USB_GetDevSpeed+0x32>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d102      	bne.n	8003ec2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	75fb      	strb	r3, [r7, #23]
 8003ec0:	e001      	b.n	8003ec6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003ec2:	230f      	movs	r3, #15
 8003ec4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d13a      	bne.n	8003f66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	2101      	movs	r1, #1
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	68f9      	ldr	r1, [r7, #12]
 8003f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d155      	bne.n	8003fd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	78db      	ldrb	r3, [r3, #3]
 8003f42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	059b      	lsls	r3, r3, #22
 8003f4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	e036      	b.n	8003fd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	2101      	movs	r1, #1
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	041b      	lsls	r3, r3, #16
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d11a      	bne.n	8003fd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	78db      	ldrb	r3, [r3, #3]
 8003fb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	0151      	lsls	r1, r2, #5
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d161      	bne.n	80040c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004016:	d11f      	bne.n	8004058 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	0151      	lsls	r1, r2, #5
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	440a      	add	r2, r1
 800402e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004032:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004036:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004056:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	2101      	movs	r1, #1
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	b29b      	uxth	r3, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	68f9      	ldr	r1, [r7, #12]
 8004074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004078:	4013      	ands	r3, r2
 800407a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	2101      	movs	r1, #1
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	b29b      	uxth	r3, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800409c:	4013      	ands	r3, r2
 800409e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	0159      	lsls	r1, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	440b      	add	r3, r1
 80040b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ba:	4619      	mov	r1, r3
 80040bc:	4b35      	ldr	r3, [pc, #212]	; (8004194 <USB_DeactivateEndpoint+0x1b0>)
 80040be:	4013      	ands	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]
 80040c2:	e060      	b.n	8004186 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040da:	d11f      	bne.n	800411c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	0151      	lsls	r1, r2, #5
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	440a      	add	r2, r1
 80040f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	0151      	lsls	r1, r2, #5
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	440a      	add	r2, r1
 8004112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004116:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800411a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f303 	lsl.w	r3, r1, r3
 8004132:	041b      	lsls	r3, r3, #16
 8004134:	43db      	mvns	r3, r3
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800413c:	4013      	ands	r3, r2
 800413e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	2101      	movs	r1, #1
 8004152:	fa01 f303 	lsl.w	r3, r1, r3
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	43db      	mvns	r3, r3
 800415a:	68f9      	ldr	r1, [r7, #12]
 800415c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004160:	4013      	ands	r3, r2
 8004162:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	0159      	lsls	r1, r3, #5
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	440b      	add	r3, r1
 800417a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417e:	4619      	mov	r1, r3
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <USB_DeactivateEndpoint+0x1b4>)
 8004182:	4013      	ands	r3, r2
 8004184:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	ec337800 	.word	0xec337800
 8004198:	eff37800 	.word	0xeff37800

0800419c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08a      	sub	sp, #40	; 0x28
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	785b      	ldrb	r3, [r3, #1]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	f040 815c 	bne.w	8004476 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d132      	bne.n	800422c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004204:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004208:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	0151      	lsls	r1, r2, #5
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	440a      	add	r2, r1
 8004220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004224:	0cdb      	lsrs	r3, r3, #19
 8004226:	04db      	lsls	r3, r3, #19
 8004228:	6113      	str	r3, [r2, #16]
 800422a:	e074      	b.n	8004316 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	0151      	lsls	r1, r2, #5
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	440a      	add	r2, r1
 8004242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004246:	0cdb      	lsrs	r3, r3, #19
 8004248:	04db      	lsls	r3, r3, #19
 800424a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	0151      	lsls	r1, r2, #5
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	440a      	add	r2, r1
 8004262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004266:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800426a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800426e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	6959      	ldr	r1, [r3, #20]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	440b      	add	r3, r1
 8004288:	1e59      	subs	r1, r3, #1
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004292:	04d9      	lsls	r1, r3, #19
 8004294:	4b9d      	ldr	r3, [pc, #628]	; (800450c <USB_EPStartXfer+0x370>)
 8004296:	400b      	ands	r3, r1
 8004298:	69b9      	ldr	r1, [r7, #24]
 800429a:	0148      	lsls	r0, r1, #5
 800429c:	69f9      	ldr	r1, [r7, #28]
 800429e:	4401      	add	r1, r0
 80042a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042a4:	4313      	orrs	r3, r2
 80042a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042be:	69b9      	ldr	r1, [r7, #24]
 80042c0:	0148      	lsls	r0, r1, #5
 80042c2:	69f9      	ldr	r1, [r7, #28]
 80042c4:	4401      	add	r1, r0
 80042c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042ca:	4313      	orrs	r3, r2
 80042cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	78db      	ldrb	r3, [r3, #3]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d11f      	bne.n	8004316 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	0151      	lsls	r1, r2, #5
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	440a      	add	r2, r1
 80042ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80042f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	0151      	lsls	r1, r2, #5
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	440a      	add	r2, r1
 800430c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004310:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004314:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d14b      	bne.n	80043b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d009      	beq.n	8004338 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004330:	461a      	mov	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	78db      	ldrb	r3, [r3, #3]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d128      	bne.n	8004392 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d110      	bne.n	8004372 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	0151      	lsls	r1, r2, #5
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	440a      	add	r2, r1
 8004366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800436a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e00f      	b.n	8004392 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	0151      	lsls	r1, r2, #5
 8004384:	69fa      	ldr	r2, [r7, #28]
 8004386:	440a      	add	r2, r1
 8004388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800438c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004390:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e12f      	b.n	8004614 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	78db      	ldrb	r3, [r3, #3]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d015      	beq.n	8004408 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8117 	beq.w	8004614 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	2101      	movs	r1, #1
 80043f8:	fa01 f303 	lsl.w	r3, r1, r3
 80043fc:	69f9      	ldr	r1, [r7, #28]
 80043fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004402:	4313      	orrs	r3, r2
 8004404:	634b      	str	r3, [r1, #52]	; 0x34
 8004406:	e105      	b.n	8004614 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d110      	bne.n	800443a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	0151      	lsls	r1, r2, #5
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	440a      	add	r2, r1
 800442e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004432:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	e00f      	b.n	800445a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	0151      	lsls	r1, r2, #5
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	440a      	add	r2, r1
 8004450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004458:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	68d9      	ldr	r1, [r3, #12]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	781a      	ldrb	r2, [r3, #0]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	b298      	uxth	r0, r3
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	4603      	mov	r3, r0
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fa2b 	bl	80048ca <USB_WritePacket>
 8004474:	e0ce      	b.n	8004614 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	0151      	lsls	r1, r2, #5
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	440a      	add	r2, r1
 800448c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004490:	0cdb      	lsrs	r3, r3, #19
 8004492:	04db      	lsls	r3, r3, #19
 8004494:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	0151      	lsls	r1, r2, #5
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	440a      	add	r2, r1
 80044ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d126      	bne.n	8004510 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d8:	69b9      	ldr	r1, [r7, #24]
 80044da:	0148      	lsls	r0, r1, #5
 80044dc:	69f9      	ldr	r1, [r7, #28]
 80044de:	4401      	add	r1, r0
 80044e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044e4:	4313      	orrs	r3, r2
 80044e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	0151      	lsls	r1, r2, #5
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	440a      	add	r2, r1
 80044fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004506:	6113      	str	r3, [r2, #16]
 8004508:	e036      	b.n	8004578 <USB_EPStartXfer+0x3dc>
 800450a:	bf00      	nop
 800450c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4413      	add	r3, r2
 800451a:	1e5a      	subs	r2, r3, #1
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	8afb      	ldrh	r3, [r7, #22]
 8004536:	04d9      	lsls	r1, r3, #19
 8004538:	4b39      	ldr	r3, [pc, #228]	; (8004620 <USB_EPStartXfer+0x484>)
 800453a:	400b      	ands	r3, r1
 800453c:	69b9      	ldr	r1, [r7, #24]
 800453e:	0148      	lsls	r0, r1, #5
 8004540:	69f9      	ldr	r1, [r7, #28]
 8004542:	4401      	add	r1, r0
 8004544:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004548:	4313      	orrs	r3, r2
 800454a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	8af9      	ldrh	r1, [r7, #22]
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004568:	69b9      	ldr	r1, [r7, #24]
 800456a:	0148      	lsls	r0, r1, #5
 800456c:	69f9      	ldr	r1, [r7, #28]
 800456e:	4401      	add	r1, r0
 8004570:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004574:	4313      	orrs	r3, r2
 8004576:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10d      	bne.n	800459a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	68d9      	ldr	r1, [r3, #12]
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004596:	460a      	mov	r2, r1
 8004598:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	78db      	ldrb	r3, [r3, #3]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d128      	bne.n	80045f4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d110      	bne.n	80045d4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e00f      	b.n	80045f4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	0151      	lsls	r1, r2, #5
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	440a      	add	r2, r1
 800460a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800460e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004612:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3720      	adds	r7, #32
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	1ff80000 	.word	0x1ff80000

08004624 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	4613      	mov	r3, r2
 8004630:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b01      	cmp	r3, #1
 8004642:	f040 80cd 	bne.w	80047e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d132      	bne.n	80046b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	0151      	lsls	r1, r2, #5
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	440a      	add	r2, r1
 8004664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004668:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800466c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	0151      	lsls	r1, r2, #5
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	440a      	add	r2, r1
 8004688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	0151      	lsls	r1, r2, #5
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	440a      	add	r2, r1
 80046a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ac:	0cdb      	lsrs	r3, r3, #19
 80046ae:	04db      	lsls	r3, r3, #19
 80046b0:	6113      	str	r3, [r2, #16]
 80046b2:	e04e      	b.n	8004752 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ce:	0cdb      	lsrs	r3, r3, #19
 80046d0:	04db      	lsls	r3, r3, #19
 80046d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	0151      	lsls	r1, r2, #5
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	440a      	add	r2, r1
 80046ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	429a      	cmp	r2, r3
 8004702:	d903      	bls.n	800470c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004726:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800472a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004742:	6939      	ldr	r1, [r7, #16]
 8004744:	0148      	lsls	r0, r1, #5
 8004746:	6979      	ldr	r1, [r7, #20]
 8004748:	4401      	add	r1, r0
 800474a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800474e:	4313      	orrs	r3, r2
 8004750:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d11e      	bne.n	8004796 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	461a      	mov	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	440a      	add	r2, r1
 800478a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	e092      	b.n	80048bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	0151      	lsls	r1, r2, #5
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	440a      	add	r2, r1
 80047ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d07e      	beq.n	80048bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	2101      	movs	r1, #1
 80047d0:	fa01 f303 	lsl.w	r3, r1, r3
 80047d4:	6979      	ldr	r1, [r7, #20]
 80047d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047da:	4313      	orrs	r3, r2
 80047dc:	634b      	str	r3, [r1, #52]	; 0x34
 80047de:	e06d      	b.n	80048bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	0151      	lsls	r1, r2, #5
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	440a      	add	r2, r1
 80047f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047fa:	0cdb      	lsrs	r3, r3, #19
 80047fc:	04db      	lsls	r3, r3, #19
 80047fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	0151      	lsls	r1, r2, #5
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	440a      	add	r2, r1
 8004816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800481a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800481e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004822:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	440a      	add	r2, r1
 800484a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800484e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004852:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486a:	6939      	ldr	r1, [r7, #16]
 800486c:	0148      	lsls	r0, r1, #5
 800486e:	6979      	ldr	r1, [r7, #20]
 8004870:	4401      	add	r1, r0
 8004872:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004876:	4313      	orrs	r3, r2
 8004878:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10d      	bne.n	800489c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d009      	beq.n	800489c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	68d9      	ldr	r1, [r3, #12]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004898:	460a      	mov	r2, r1
 800489a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	0151      	lsls	r1, r2, #5
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	440a      	add	r2, r1
 80048b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b089      	sub	sp, #36	; 0x24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	4611      	mov	r1, r2
 80048d6:	461a      	mov	r2, r3
 80048d8:	460b      	mov	r3, r1
 80048da:	71fb      	strb	r3, [r7, #7]
 80048dc:	4613      	mov	r3, r2
 80048de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80048e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d11a      	bne.n	8004926 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048f0:	88bb      	ldrh	r3, [r7, #4]
 80048f2:	3303      	adds	r3, #3
 80048f4:	089b      	lsrs	r3, r3, #2
 80048f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]
 80048fc:	e00f      	b.n	800491e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	031a      	lsls	r2, r3, #12
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	4413      	add	r3, r2
 8004906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490a:	461a      	mov	r2, r3
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3304      	adds	r3, #4
 8004916:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	3301      	adds	r3, #1
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	429a      	cmp	r2, r3
 8004924:	d3eb      	bcc.n	80048fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3724      	adds	r7, #36	; 0x24
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	; 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	3303      	adds	r3, #3
 800494e:	089b      	lsrs	r3, r3, #2
 8004950:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	e00b      	b.n	8004970 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	601a      	str	r2, [r3, #0]
    pDest++;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	3304      	adds	r3, #4
 8004968:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	3301      	adds	r3, #1
 800496e:	61bb      	str	r3, [r7, #24]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	429a      	cmp	r2, r3
 8004976:	d3ef      	bcc.n	8004958 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004978:	69fb      	ldr	r3, [r7, #28]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3724      	adds	r7, #36	; 0x24
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d12c      	bne.n	80049fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	db12      	blt.n	80049da <USB_EPSetStall+0x54>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00f      	beq.n	80049da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	e02b      	b.n	8004a54 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	db12      	blt.n	8004a34 <USB_EPSetStall+0xae>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00f      	beq.n	8004a34 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a32:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b085      	sub	sp, #20
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	785b      	ldrb	r3, [r3, #1]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d128      	bne.n	8004ad0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	78db      	ldrb	r3, [r3, #3]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d003      	beq.n	8004aae <USB_EPClearStall+0x4c>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	78db      	ldrb	r3, [r3, #3]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d138      	bne.n	8004b20 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e027      	b.n	8004b20 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	78db      	ldrb	r3, [r3, #3]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d003      	beq.n	8004b00 <USB_EPClearStall+0x9e>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	78db      	ldrb	r3, [r3, #3]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d10f      	bne.n	8004b20 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	0151      	lsls	r1, r2, #5
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	440a      	add	r2, r1
 8004b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	460b      	mov	r3, r1
 8004b38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b4c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b50:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b94:	f023 0303 	bic.w	r3, r3, #3
 8004b98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ba8:	f023 0302 	bic.w	r3, r3, #2
 8004bac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bea:	f043 0302 	orr.w	r3, r3, #2
 8004bee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4013      	ands	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c16:	68fb      	ldr	r3, [r7, #12]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	0c1b      	lsrs	r3, r3, #16
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	b29b      	uxth	r3, r3
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cba:	68bb      	ldr	r3, [r7, #8]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf8:	01db      	lsls	r3, r3, #7
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4013      	ands	r3, r2
 8004d14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d16:	68bb      	ldr	r3, [r7, #8]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f003 0301 	and.w	r3, r3, #1
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d5e:	f023 0307 	bic.w	r3, r3, #7
 8004d62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	460b      	mov	r3, r1
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	333c      	adds	r3, #60	; 0x3c
 8004d9e:	3304      	adds	r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <USB_EP0_OutStart+0xb8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d90a      	bls.n	8004dc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dbc:	d101      	bne.n	8004dc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e037      	b.n	8004e32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ddc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004de0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df0:	f043 0318 	orr.w	r3, r3, #24
 8004df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e0a:	7afb      	ldrb	r3, [r7, #11]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d10f      	bne.n	8004e30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	4f54300a 	.word	0x4f54300a

08004e44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a13      	ldr	r2, [pc, #76]	; (8004ea8 <USB_CoreReset+0x64>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d901      	bls.n	8004e62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e01b      	b.n	8004e9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	daf2      	bge.n	8004e50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f043 0201 	orr.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <USB_CoreReset+0x64>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d901      	bls.n	8004e8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e006      	b.n	8004e9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d0f0      	beq.n	8004e7a <USB_CoreReset+0x36>

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	00030d40 	.word	0x00030d40

08004eac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004eb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ebc:	f002 f92c 	bl	8007118 <malloc>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d105      	bne.n	8004ed6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e066      	b.n	8004fa4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	7c1b      	ldrb	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d119      	bne.n	8004f1a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eea:	2202      	movs	r2, #2
 8004eec:	2181      	movs	r1, #129	; 0x81
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f001 ff99 	bl	8006e26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004efe:	2202      	movs	r2, #2
 8004f00:	2101      	movs	r1, #1
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f001 ff8f 	bl	8006e26 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2210      	movs	r2, #16
 8004f14:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004f18:	e016      	b.n	8004f48 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f1a:	2340      	movs	r3, #64	; 0x40
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	2181      	movs	r1, #129	; 0x81
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f001 ff80 	bl	8006e26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f2c:	2340      	movs	r3, #64	; 0x40
 8004f2e:	2202      	movs	r2, #2
 8004f30:	2101      	movs	r1, #1
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f001 ff77 	bl	8006e26 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2210      	movs	r2, #16
 8004f44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f48:	2308      	movs	r3, #8
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	2182      	movs	r1, #130	; 0x82
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f001 ff69 	bl	8006e26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	7c1b      	ldrb	r3, [r3, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f88:	2101      	movs	r1, #1
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f002 f83a 	bl	8007004 <USBD_LL_PrepareReceive>
 8004f90:	e007      	b.n	8004fa2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f98:	2340      	movs	r3, #64	; 0x40
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f002 f831 	bl	8007004 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004fbc:	2181      	movs	r1, #129	; 0x81
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f001 ff57 	bl	8006e72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004fca:	2101      	movs	r1, #1
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f001 ff50 	bl	8006e72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004fda:	2182      	movs	r1, #130	; 0x82
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f001 ff48 	bl	8006e72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00e      	beq.n	800501a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800500c:	4618      	mov	r0, r3
 800500e:	f002 f88b 	bl	8007128 <free>
    pdev->pClassData = NULL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800501a:	7bfb      	ldrb	r3, [r7, #15]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005034:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800504a:	2b00      	cmp	r3, #0
 800504c:	d03a      	beq.n	80050c4 <USBD_CDC_Setup+0xa0>
 800504e:	2b20      	cmp	r3, #32
 8005050:	f040 8097 	bne.w	8005182 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	88db      	ldrh	r3, [r3, #6]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d029      	beq.n	80050b0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	b25b      	sxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	da11      	bge.n	800508a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005072:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	88d2      	ldrh	r2, [r2, #6]
 8005078:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800507a:	6939      	ldr	r1, [r7, #16]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	88db      	ldrh	r3, [r3, #6]
 8005080:	461a      	mov	r2, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f001 fa9d 	bl	80065c2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005088:	e082      	b.n	8005190 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	785a      	ldrb	r2, [r3, #1]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	88db      	ldrh	r3, [r3, #6]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80050a0:	6939      	ldr	r1, [r7, #16]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	88db      	ldrh	r3, [r3, #6]
 80050a6:	461a      	mov	r2, r3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f001 fab6 	bl	800661a <USBD_CtlPrepareRx>
    break;
 80050ae:	e06f      	b.n	8005190 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	7850      	ldrb	r0, [r2, #1]
 80050bc:	2200      	movs	r2, #0
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	4798      	blx	r3
    break;
 80050c2:	e065      	b.n	8005190 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b0b      	cmp	r3, #11
 80050ca:	d84f      	bhi.n	800516c <USBD_CDC_Setup+0x148>
 80050cc:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <USBD_CDC_Setup+0xb0>)
 80050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d2:	bf00      	nop
 80050d4:	08005105 	.word	0x08005105
 80050d8:	0800517b 	.word	0x0800517b
 80050dc:	0800516d 	.word	0x0800516d
 80050e0:	0800516d 	.word	0x0800516d
 80050e4:	0800516d 	.word	0x0800516d
 80050e8:	0800516d 	.word	0x0800516d
 80050ec:	0800516d 	.word	0x0800516d
 80050f0:	0800516d 	.word	0x0800516d
 80050f4:	0800516d 	.word	0x0800516d
 80050f8:	0800516d 	.word	0x0800516d
 80050fc:	0800512d 	.word	0x0800512d
 8005100:	08005155 	.word	0x08005155
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800510a:	2b03      	cmp	r3, #3
 800510c:	d107      	bne.n	800511e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800510e:	f107 030c 	add.w	r3, r7, #12
 8005112:	2202      	movs	r2, #2
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 fa53 	bl	80065c2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800511c:	e030      	b.n	8005180 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f001 f9dd 	bl	80064e0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005126:	2303      	movs	r3, #3
 8005128:	75fb      	strb	r3, [r7, #23]
      break;
 800512a:	e029      	b.n	8005180 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005132:	2b03      	cmp	r3, #3
 8005134:	d107      	bne.n	8005146 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005136:	f107 030f 	add.w	r3, r7, #15
 800513a:	2201      	movs	r2, #1
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f001 fa3f 	bl	80065c2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005144:	e01c      	b.n	8005180 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005146:	6839      	ldr	r1, [r7, #0]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f001 f9c9 	bl	80064e0 <USBD_CtlError>
        ret = USBD_FAIL;
 800514e:	2303      	movs	r3, #3
 8005150:	75fb      	strb	r3, [r7, #23]
      break;
 8005152:	e015      	b.n	8005180 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800515a:	2b03      	cmp	r3, #3
 800515c:	d00f      	beq.n	800517e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800515e:	6839      	ldr	r1, [r7, #0]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f001 f9bd 	bl	80064e0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005166:	2303      	movs	r3, #3
 8005168:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800516a:	e008      	b.n	800517e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f001 f9b6 	bl	80064e0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005174:	2303      	movs	r3, #3
 8005176:	75fb      	strb	r3, [r7, #23]
      break;
 8005178:	e002      	b.n	8005180 <USBD_CDC_Setup+0x15c>
      break;
 800517a:	bf00      	nop
 800517c:	e008      	b.n	8005190 <USBD_CDC_Setup+0x16c>
      break;
 800517e:	bf00      	nop
    }
    break;
 8005180:	e006      	b.n	8005190 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f001 f9ab 	bl	80064e0 <USBD_CtlError>
    ret = USBD_FAIL;
 800518a:	2303      	movs	r3, #3
 800518c:	75fb      	strb	r3, [r7, #23]
    break;
 800518e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop

0800519c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80051ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e049      	b.n	8005252 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80051c6:	78fa      	ldrb	r2, [r7, #3]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	3318      	adds	r3, #24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d029      	beq.n	8005230 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80051dc:	78fa      	ldrb	r2, [r7, #3]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	3318      	adds	r3, #24
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	78f9      	ldrb	r1, [r7, #3]
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	460b      	mov	r3, r1
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	1a5b      	subs	r3, r3, r1
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4403      	add	r3, r0
 80051fc:	3344      	adds	r3, #68	; 0x44
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	fbb2 f1f3 	udiv	r1, r2, r3
 8005204:	fb03 f301 	mul.w	r3, r3, r1
 8005208:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800520a:	2b00      	cmp	r3, #0
 800520c:	d110      	bne.n	8005230 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800520e:	78fa      	ldrb	r2, [r7, #3]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	3318      	adds	r3, #24
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005222:	78f9      	ldrb	r1, [r7, #3]
 8005224:	2300      	movs	r3, #0
 8005226:	2200      	movs	r2, #0
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f001 feca 	bl	8006fc2 <USBD_LL_Transmit>
 800522e:	e00f      	b.n	8005250 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2200      	movs	r2, #0
 8005234:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800526c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005278:	2303      	movs	r3, #3
 800527a:	e015      	b.n	80052a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	4619      	mov	r1, r3
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f001 fee0 	bl	8007046 <USBD_LL_GetRxDataSize>
 8005286:	4602      	mov	r2, r0
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80052a2:	4611      	mov	r1, r2
 80052a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d015      	beq.n	80052f6 <USBD_CDC_EP0_RxReady+0x46>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80052d0:	2bff      	cmp	r3, #255	; 0xff
 80052d2:	d010      	beq.n	80052f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80052e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80052ea:	b292      	uxth	r2, r2
 80052ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2243      	movs	r2, #67	; 0x43
 800530c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800530e:	4b03      	ldr	r3, [pc, #12]	; (800531c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	20000094 	.word	0x20000094

08005320 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2243      	movs	r2, #67	; 0x43
 800532c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800532e:	4b03      	ldr	r3, [pc, #12]	; (800533c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	20000050 	.word	0x20000050

08005340 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2243      	movs	r2, #67	; 0x43
 800534c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800534e:	4b03      	ldr	r3, [pc, #12]	; (800535c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	200000d8 	.word	0x200000d8

08005360 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	220a      	movs	r2, #10
 800536c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800536e:	4b03      	ldr	r3, [pc, #12]	; (800537c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	2000000c 	.word	0x2000000c

08005380 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005390:	2303      	movs	r3, #3
 8005392:	e004      	b.n	800539e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b087      	sub	sp, #28
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053ec:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005412:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005422:	2303      	movs	r3, #3
 8005424:	e01a      	b.n	800545c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800542c:	2b00      	cmp	r3, #0
 800542e:	d114      	bne.n	800545a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2201      	movs	r2, #1
 8005434:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800544e:	2181      	movs	r1, #129	; 0x81
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 fdb6 	bl	8006fc2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800545a:	7bfb      	ldrb	r3, [r7, #15]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005472:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800547e:	2303      	movs	r3, #3
 8005480:	e016      	b.n	80054b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	7c1b      	ldrb	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005494:	2101      	movs	r1, #1
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f001 fdb4 	bl	8007004 <USBD_LL_PrepareReceive>
 800549c:	e007      	b.n	80054ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054a4:	2340      	movs	r3, #64	; 0x40
 80054a6:	2101      	movs	r1, #1
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f001 fdab 	bl	8007004 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	4613      	mov	r3, r2
 80054c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e025      	b.n	800551c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	79fa      	ldrb	r2, [r7, #7]
 800550e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f001 fc21 	bl	8006d58 <USBD_LL_Init>
 8005516:	4603      	mov	r3, r0
 8005518:	75fb      	strb	r3, [r7, #23]

  return ret;
 800551a:	7dfb      	ldrb	r3, [r7, #23]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005538:	2303      	movs	r3, #3
 800553a:	e010      	b.n	800555e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	f107 020e 	add.w	r2, r7, #14
 8005550:	4610      	mov	r0, r2
 8005552:	4798      	blx	r3
 8005554:	4602      	mov	r2, r0
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f001 fc3e 	bl	8006df0 <USBD_LL_Start>
 8005574:	4603      	mov	r3, r0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80055a0:	2303      	movs	r3, #3
 80055a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	78fa      	ldrb	r2, [r7, #3]
 80055b8:	4611      	mov	r1, r2
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	4798      	blx	r3
 80055be:	4603      	mov	r3, r0
 80055c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	78fa      	ldrb	r2, [r7, #3]
 80055ec:	4611      	mov	r1, r2
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
  }

  return USBD_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 ff2c 	bl	800646c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	2b01      	cmp	r3, #1
 8005636:	d00e      	beq.n	8005656 <USBD_LL_SetupStage+0x5a>
 8005638:	2b01      	cmp	r3, #1
 800563a:	d302      	bcc.n	8005642 <USBD_LL_SetupStage+0x46>
 800563c:	2b02      	cmp	r3, #2
 800563e:	d014      	beq.n	800566a <USBD_LL_SetupStage+0x6e>
 8005640:	e01d      	b.n	800567e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fa18 	bl	8005a80 <USBD_StdDevReq>
 8005650:	4603      	mov	r3, r0
 8005652:	73fb      	strb	r3, [r7, #15]
      break;
 8005654:	e020      	b.n	8005698 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa7c 	bl	8005b5c <USBD_StdItfReq>
 8005664:	4603      	mov	r3, r0
 8005666:	73fb      	strb	r3, [r7, #15]
      break;
 8005668:	e016      	b.n	8005698 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fab8 	bl	8005be8 <USBD_StdEPReq>
 8005678:	4603      	mov	r3, r0
 800567a:	73fb      	strb	r3, [r7, #15]
      break;
 800567c:	e00c      	b.n	8005698 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005684:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005688:	b2db      	uxtb	r3, r3
 800568a:	4619      	mov	r1, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 fc0f 	bl	8006eb0 <USBD_LL_StallEP>
 8005692:	4603      	mov	r3, r0
 8005694:	73fb      	strb	r3, [r7, #15]
      break;
 8005696:	bf00      	nop
  }

  return ret;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b086      	sub	sp, #24
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	460b      	mov	r3, r1
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80056b0:	7afb      	ldrb	r3, [r7, #11]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d137      	bne.n	8005726 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80056bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d14a      	bne.n	800575e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d913      	bls.n	80056fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	1ad2      	subs	r2, r2, r3
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	4293      	cmp	r3, r2
 80056ec:	bf28      	it	cs
 80056ee:	4613      	movcs	r3, r2
 80056f0:	461a      	mov	r2, r3
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 ffad 	bl	8006654 <USBD_CtlContinueRx>
 80056fa:	e030      	b.n	800575e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800570e:	2b03      	cmp	r3, #3
 8005710:	d105      	bne.n	800571e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 ffa9 	bl	8006676 <USBD_CtlSendStatus>
 8005724:	e01b      	b.n	800575e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d013      	beq.n	800575a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005738:	2b03      	cmp	r3, #3
 800573a:	d10e      	bne.n	800575a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	7afa      	ldrb	r2, [r7, #11]
 8005746:	4611      	mov	r1, r2
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	4798      	blx	r3
 800574c:	4603      	mov	r3, r0
 800574e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005750:	7dfb      	ldrb	r3, [r7, #23]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	e002      	b.n	8005760 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800575a:	2303      	movs	r3, #3
 800575c:	e000      	b.n	8005760 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	460b      	mov	r3, r1
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005776:	7afb      	ldrb	r3, [r7, #11]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d16a      	bne.n	8005852 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3314      	adds	r3, #20
 8005780:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005788:	2b02      	cmp	r3, #2
 800578a:	d155      	bne.n	8005838 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	429a      	cmp	r2, r3
 8005796:	d914      	bls.n	80057c2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	1ad2      	subs	r2, r2, r3
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	461a      	mov	r2, r3
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 ff22 	bl	80065f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057b4:	2300      	movs	r3, #0
 80057b6:	2200      	movs	r2, #0
 80057b8:	2100      	movs	r1, #0
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f001 fc22 	bl	8007004 <USBD_LL_PrepareReceive>
 80057c0:	e03a      	b.n	8005838 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d11c      	bne.n	8005808 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d316      	bcc.n	8005808 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d20f      	bcs.n	8005808 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057e8:	2200      	movs	r2, #0
 80057ea:	2100      	movs	r1, #0
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 ff03 	bl	80065f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057fa:	2300      	movs	r3, #0
 80057fc:	2200      	movs	r2, #0
 80057fe:	2100      	movs	r1, #0
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f001 fbff 	bl	8007004 <USBD_LL_PrepareReceive>
 8005806:	e017      	b.n	8005838 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800581a:	2b03      	cmp	r3, #3
 800581c:	d105      	bne.n	800582a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800582a:	2180      	movs	r1, #128	; 0x80
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f001 fb3f 	bl	8006eb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 ff32 	bl	800669c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800583e:	2b01      	cmp	r3, #1
 8005840:	d123      	bne.n	800588a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f7ff fe9b 	bl	800557e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005850:	e01b      	b.n	800588a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d013      	beq.n	8005886 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005864:	2b03      	cmp	r3, #3
 8005866:	d10e      	bne.n	8005886 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	7afa      	ldrb	r2, [r7, #11]
 8005872:	4611      	mov	r1, r2
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	4798      	blx	r3
 8005878:	4603      	mov	r3, r0
 800587a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005882:	7dfb      	ldrb	r3, [r7, #23]
 8005884:	e002      	b.n	800588c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005886:	2303      	movs	r3, #3
 8005888:	e000      	b.n	800588c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d009      	beq.n	80058d8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6852      	ldr	r2, [r2, #4]
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	4611      	mov	r1, r2
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058d8:	2340      	movs	r3, #64	; 0x40
 80058da:	2200      	movs	r2, #0
 80058dc:	2100      	movs	r1, #0
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 faa1 	bl	8006e26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2240      	movs	r2, #64	; 0x40
 80058f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058f4:	2340      	movs	r3, #64	; 0x40
 80058f6:	2200      	movs	r2, #0
 80058f8:	2180      	movs	r1, #128	; 0x80
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 fa93 	bl	8006e26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2240      	movs	r2, #64	; 0x40
 800590a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	78fa      	ldrb	r2, [r7, #3]
 8005926:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2204      	movs	r2, #4
 800594e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800596e:	2b04      	cmp	r3, #4
 8005970:	d105      	bne.n	800597e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800599a:	2b03      	cmp	r3, #3
 800599c:	d10b      	bne.n	80059b6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d009      	beq.n	8005a38 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6852      	ldr	r2, [r2, #4]
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	4611      	mov	r1, r2
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	4798      	blx	r3
  }

  return USBD_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b087      	sub	sp, #28
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	3301      	adds	r3, #1
 8005a58:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005a60:	8a3b      	ldrh	r3, [r7, #16]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	b21a      	sxth	r2, r3
 8005a66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	b21b      	sxth	r3, r3
 8005a6e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005a70:	89fb      	ldrh	r3, [r7, #14]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	d004      	beq.n	8005aa4 <USBD_StdDevReq+0x24>
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d002      	beq.n	8005aa4 <USBD_StdDevReq+0x24>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <USBD_StdDevReq+0x38>
 8005aa2:	e050      	b.n	8005b46 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4798      	blx	r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8005ab6:	e04b      	b.n	8005b50 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b09      	cmp	r3, #9
 8005abe:	d83c      	bhi.n	8005b3a <USBD_StdDevReq+0xba>
 8005ac0:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <USBD_StdDevReq+0x48>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005b1d 	.word	0x08005b1d
 8005acc:	08005b31 	.word	0x08005b31
 8005ad0:	08005b3b 	.word	0x08005b3b
 8005ad4:	08005b27 	.word	0x08005b27
 8005ad8:	08005b3b 	.word	0x08005b3b
 8005adc:	08005afb 	.word	0x08005afb
 8005ae0:	08005af1 	.word	0x08005af1
 8005ae4:	08005b3b 	.word	0x08005b3b
 8005ae8:	08005b13 	.word	0x08005b13
 8005aec:	08005b05 	.word	0x08005b05
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f9ce 	bl	8005e94 <USBD_GetDescriptor>
      break;
 8005af8:	e024      	b.n	8005b44 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fb33 	bl	8006168 <USBD_SetAddress>
      break;
 8005b02:	e01f      	b.n	8005b44 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fb70 	bl	80061ec <USBD_SetConfig>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b10:	e018      	b.n	8005b44 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005b12:	6839      	ldr	r1, [r7, #0]
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fc0d 	bl	8006334 <USBD_GetConfig>
      break;
 8005b1a:	e013      	b.n	8005b44 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fc3c 	bl	800639c <USBD_GetStatus>
      break;
 8005b24:	e00e      	b.n	8005b44 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fc6a 	bl	8006402 <USBD_SetFeature>
      break;
 8005b2e:	e009      	b.n	8005b44 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fc79 	bl	800642a <USBD_ClrFeature>
      break;
 8005b38:	e004      	b.n	8005b44 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fccf 	bl	80064e0 <USBD_CtlError>
      break;
 8005b42:	bf00      	nop
    }
    break;
 8005b44:	e004      	b.n	8005b50 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fcc9 	bl	80064e0 <USBD_CtlError>
    break;
 8005b4e:	bf00      	nop
  }

  return ret;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop

08005b5c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d003      	beq.n	8005b7e <USBD_StdItfReq+0x22>
 8005b76:	2b40      	cmp	r3, #64	; 0x40
 8005b78:	d001      	beq.n	8005b7e <USBD_StdItfReq+0x22>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d12a      	bne.n	8005bd4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b84:	3b01      	subs	r3, #1
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d81d      	bhi.n	8005bc6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	889b      	ldrh	r3, [r3, #4]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d813      	bhi.n	8005bbc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	4798      	blx	r3
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	88db      	ldrh	r3, [r3, #6]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d110      	bne.n	8005bd0 <USBD_StdItfReq+0x74>
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10d      	bne.n	8005bd0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fd5e 	bl	8006676 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005bba:	e009      	b.n	8005bd0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fc8e 	bl	80064e0 <USBD_CtlError>
      break;
 8005bc4:	e004      	b.n	8005bd0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fc89 	bl	80064e0 <USBD_CtlError>
      break;
 8005bce:	e000      	b.n	8005bd2 <USBD_StdItfReq+0x76>
      break;
 8005bd0:	bf00      	nop
    }
    break;
 8005bd2:	e004      	b.n	8005bde <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005bd4:	6839      	ldr	r1, [r7, #0]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fc82 	bl	80064e0 <USBD_CtlError>
    break;
 8005bdc:	bf00      	nop
  }

  return ret;
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	889b      	ldrh	r3, [r3, #4]
 8005bfa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d004      	beq.n	8005c12 <USBD_StdEPReq+0x2a>
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	d002      	beq.n	8005c12 <USBD_StdEPReq+0x2a>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <USBD_StdEPReq+0x3e>
 8005c10:	e135      	b.n	8005e7e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
 8005c20:	4603      	mov	r3, r0
 8005c22:	73fb      	strb	r3, [r7, #15]
    break;
 8005c24:	e130      	b.n	8005e88 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d03e      	beq.n	8005cac <USBD_StdEPReq+0xc4>
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d002      	beq.n	8005c38 <USBD_StdEPReq+0x50>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d077      	beq.n	8005d26 <USBD_StdEPReq+0x13e>
 8005c36:	e11c      	b.n	8005e72 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d002      	beq.n	8005c48 <USBD_StdEPReq+0x60>
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d015      	beq.n	8005c72 <USBD_StdEPReq+0x8a>
 8005c46:	e02b      	b.n	8005ca0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00c      	beq.n	8005c68 <USBD_StdEPReq+0x80>
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d009      	beq.n	8005c68 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c54:	7bbb      	ldrb	r3, [r7, #14]
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 f929 	bl	8006eb0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c5e:	2180      	movs	r1, #128	; 0x80
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 f925 	bl	8006eb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005c66:	e020      	b.n	8005caa <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fc38 	bl	80064e0 <USBD_CtlError>
        break;
 8005c70:	e01b      	b.n	8005caa <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	885b      	ldrh	r3, [r3, #2]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10e      	bne.n	8005c98 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c7a:	7bbb      	ldrb	r3, [r7, #14]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <USBD_StdEPReq+0xb0>
 8005c80:	7bbb      	ldrb	r3, [r7, #14]
 8005c82:	2b80      	cmp	r3, #128	; 0x80
 8005c84:	d008      	beq.n	8005c98 <USBD_StdEPReq+0xb0>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	88db      	ldrh	r3, [r3, #6]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d104      	bne.n	8005c98 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c8e:	7bbb      	ldrb	r3, [r7, #14]
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 f90c 	bl	8006eb0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fcec 	bl	8006676 <USBD_CtlSendStatus>

        break;
 8005c9e:	e004      	b.n	8005caa <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fc1c 	bl	80064e0 <USBD_CtlError>
        break;
 8005ca8:	bf00      	nop
      }
      break;
 8005caa:	e0e7      	b.n	8005e7c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d002      	beq.n	8005cbc <USBD_StdEPReq+0xd4>
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d015      	beq.n	8005ce6 <USBD_StdEPReq+0xfe>
 8005cba:	e02d      	b.n	8005d18 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00c      	beq.n	8005cdc <USBD_StdEPReq+0xf4>
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	2b80      	cmp	r3, #128	; 0x80
 8005cc6:	d009      	beq.n	8005cdc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005cc8:	7bbb      	ldrb	r3, [r7, #14]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 f8ef 	bl	8006eb0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cd2:	2180      	movs	r1, #128	; 0x80
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f001 f8eb 	bl	8006eb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005cda:	e023      	b.n	8005d24 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fbfe 	bl	80064e0 <USBD_CtlError>
        break;
 8005ce4:	e01e      	b.n	8005d24 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	885b      	ldrh	r3, [r3, #2]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d119      	bne.n	8005d22 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005cee:	7bbb      	ldrb	r3, [r7, #14]
 8005cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005cf8:	7bbb      	ldrb	r3, [r7, #14]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f001 f8f6 	bl	8006eee <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fcb7 	bl	8006676 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	4798      	blx	r3
        }
        break;
 8005d16:	e004      	b.n	8005d22 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fbe0 	bl	80064e0 <USBD_CtlError>
        break;
 8005d20:	e000      	b.n	8005d24 <USBD_StdEPReq+0x13c>
        break;
 8005d22:	bf00      	nop
      }
      break;
 8005d24:	e0aa      	b.n	8005e7c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d002      	beq.n	8005d36 <USBD_StdEPReq+0x14e>
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d032      	beq.n	8005d9a <USBD_StdEPReq+0x1b2>
 8005d34:	e097      	b.n	8005e66 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d36:	7bbb      	ldrb	r3, [r7, #14]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d007      	beq.n	8005d4c <USBD_StdEPReq+0x164>
 8005d3c:	7bbb      	ldrb	r3, [r7, #14]
 8005d3e:	2b80      	cmp	r3, #128	; 0x80
 8005d40:	d004      	beq.n	8005d4c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fbcb 	bl	80064e0 <USBD_CtlError>
          break;
 8005d4a:	e091      	b.n	8005e70 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	da0b      	bge.n	8005d6c <USBD_StdEPReq+0x184>
 8005d54:	7bbb      	ldrb	r3, [r7, #14]
 8005d56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	3310      	adds	r3, #16
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4413      	add	r3, r2
 8005d68:	3304      	adds	r3, #4
 8005d6a:	e00b      	b.n	8005d84 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005d6c:	7bbb      	ldrb	r3, [r7, #14]
 8005d6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	4413      	add	r3, r2
 8005d82:	3304      	adds	r3, #4
 8005d84:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fc15 	bl	80065c2 <USBD_CtlSendData>
        break;
 8005d98:	e06a      	b.n	8005e70 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005d9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	da11      	bge.n	8005dc6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005da2:	7bbb      	ldrb	r3, [r7, #14]
 8005da4:	f003 020f 	and.w	r2, r3, #15
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	3324      	adds	r3, #36	; 0x24
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d117      	bne.n	8005dec <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fb8e 	bl	80064e0 <USBD_CtlError>
            break;
 8005dc4:	e054      	b.n	8005e70 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005dc6:	7bbb      	ldrb	r3, [r7, #14]
 8005dc8:	f003 020f 	and.w	r2, r3, #15
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fb7b 	bl	80064e0 <USBD_CtlError>
            break;
 8005dea:	e041      	b.n	8005e70 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	da0b      	bge.n	8005e0c <USBD_StdEPReq+0x224>
 8005df4:	7bbb      	ldrb	r3, [r7, #14]
 8005df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	3310      	adds	r3, #16
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4413      	add	r3, r2
 8005e08:	3304      	adds	r3, #4
 8005e0a:	e00b      	b.n	8005e24 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	4413      	add	r3, r2
 8005e22:	3304      	adds	r3, #4
 8005e24:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e26:	7bbb      	ldrb	r3, [r7, #14]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <USBD_StdEPReq+0x24a>
 8005e2c:	7bbb      	ldrb	r3, [r7, #14]
 8005e2e:	2b80      	cmp	r3, #128	; 0x80
 8005e30:	d103      	bne.n	8005e3a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	e00e      	b.n	8005e58 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f001 f874 	bl	8006f2c <USBD_LL_IsStallEP>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e002      	b.n	8005e58 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fbaf 	bl	80065c2 <USBD_CtlSendData>
          break;
 8005e64:	e004      	b.n	8005e70 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fb39 	bl	80064e0 <USBD_CtlError>
        break;
 8005e6e:	bf00      	nop
      }
      break;
 8005e70:	e004      	b.n	8005e7c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fb33 	bl	80064e0 <USBD_CtlError>
      break;
 8005e7a:	bf00      	nop
    }
    break;
 8005e7c:	e004      	b.n	8005e88 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fb2d 	bl	80064e0 <USBD_CtlError>
    break;
 8005e86:	bf00      	nop
  }

  return ret;
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	885b      	ldrh	r3, [r3, #2]
 8005eae:	0a1b      	lsrs	r3, r3, #8
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	2b06      	cmp	r3, #6
 8005eb6:	f200 8128 	bhi.w	800610a <USBD_GetDescriptor+0x276>
 8005eba:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <USBD_GetDescriptor+0x2c>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005edd 	.word	0x08005edd
 8005ec4:	08005ef5 	.word	0x08005ef5
 8005ec8:	08005f35 	.word	0x08005f35
 8005ecc:	0800610b 	.word	0x0800610b
 8005ed0:	0800610b 	.word	0x0800610b
 8005ed4:	080060ab 	.word	0x080060ab
 8005ed8:	080060d7 	.word	0x080060d7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	7c12      	ldrb	r2, [r2, #16]
 8005ee8:	f107 0108 	add.w	r1, r7, #8
 8005eec:	4610      	mov	r0, r2
 8005eee:	4798      	blx	r3
 8005ef0:	60f8      	str	r0, [r7, #12]
    break;
 8005ef2:	e112      	b.n	800611a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	7c1b      	ldrb	r3, [r3, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10d      	bne.n	8005f18 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	f107 0208 	add.w	r2, r7, #8
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4798      	blx	r3
 8005f0c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3301      	adds	r3, #1
 8005f12:	2202      	movs	r2, #2
 8005f14:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005f16:	e100      	b.n	800611a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	f107 0208 	add.w	r2, r7, #8
 8005f24:	4610      	mov	r0, r2
 8005f26:	4798      	blx	r3
 8005f28:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	2202      	movs	r2, #2
 8005f30:	701a      	strb	r2, [r3, #0]
    break;
 8005f32:	e0f2      	b.n	800611a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	885b      	ldrh	r3, [r3, #2]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	f200 80ac 	bhi.w	8006098 <USBD_GetDescriptor+0x204>
 8005f40:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <USBD_GetDescriptor+0xb4>)
 8005f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f46:	bf00      	nop
 8005f48:	08005f61 	.word	0x08005f61
 8005f4c:	08005f95 	.word	0x08005f95
 8005f50:	08005fc9 	.word	0x08005fc9
 8005f54:	08005ffd 	.word	0x08005ffd
 8005f58:	08006031 	.word	0x08006031
 8005f5c:	08006065 	.word	0x08006065
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	7c12      	ldrb	r2, [r2, #16]
 8005f78:	f107 0108 	add.w	r1, r7, #8
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	4798      	blx	r3
 8005f80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f82:	e091      	b.n	80060a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 faaa 	bl	80064e0 <USBD_CtlError>
        err++;
 8005f8c:	7afb      	ldrb	r3, [r7, #11]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	72fb      	strb	r3, [r7, #11]
      break;
 8005f92:	e089      	b.n	80060a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	7c12      	ldrb	r2, [r2, #16]
 8005fac:	f107 0108 	add.w	r1, r7, #8
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4798      	blx	r3
 8005fb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fb6:	e077      	b.n	80060a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa90 	bl	80064e0 <USBD_CtlError>
        err++;
 8005fc0:	7afb      	ldrb	r3, [r7, #11]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	72fb      	strb	r3, [r7, #11]
      break;
 8005fc6:	e06f      	b.n	80060a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	7c12      	ldrb	r2, [r2, #16]
 8005fe0:	f107 0108 	add.w	r1, r7, #8
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4798      	blx	r3
 8005fe8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fea:	e05d      	b.n	80060a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa76 	bl	80064e0 <USBD_CtlError>
        err++;
 8005ff4:	7afb      	ldrb	r3, [r7, #11]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	72fb      	strb	r3, [r7, #11]
      break;
 8005ffa:	e055      	b.n	80060a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	7c12      	ldrb	r2, [r2, #16]
 8006014:	f107 0108 	add.w	r1, r7, #8
 8006018:	4610      	mov	r0, r2
 800601a:	4798      	blx	r3
 800601c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800601e:	e043      	b.n	80060a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa5c 	bl	80064e0 <USBD_CtlError>
        err++;
 8006028:	7afb      	ldrb	r3, [r7, #11]
 800602a:	3301      	adds	r3, #1
 800602c:	72fb      	strb	r3, [r7, #11]
      break;
 800602e:	e03b      	b.n	80060a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00b      	beq.n	8006054 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	7c12      	ldrb	r2, [r2, #16]
 8006048:	f107 0108 	add.w	r1, r7, #8
 800604c:	4610      	mov	r0, r2
 800604e:	4798      	blx	r3
 8006050:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006052:	e029      	b.n	80060a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fa42 	bl	80064e0 <USBD_CtlError>
        err++;
 800605c:	7afb      	ldrb	r3, [r7, #11]
 800605e:	3301      	adds	r3, #1
 8006060:	72fb      	strb	r3, [r7, #11]
      break;
 8006062:	e021      	b.n	80060a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00b      	beq.n	8006088 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	7c12      	ldrb	r2, [r2, #16]
 800607c:	f107 0108 	add.w	r1, r7, #8
 8006080:	4610      	mov	r0, r2
 8006082:	4798      	blx	r3
 8006084:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006086:	e00f      	b.n	80060a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fa28 	bl	80064e0 <USBD_CtlError>
        err++;
 8006090:	7afb      	ldrb	r3, [r7, #11]
 8006092:	3301      	adds	r3, #1
 8006094:	72fb      	strb	r3, [r7, #11]
      break;
 8006096:	e007      	b.n	80060a8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa20 	bl	80064e0 <USBD_CtlError>
      err++;
 80060a0:	7afb      	ldrb	r3, [r7, #11]
 80060a2:	3301      	adds	r3, #1
 80060a4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80060a6:	bf00      	nop
    }
    break;
 80060a8:	e037      	b.n	800611a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	7c1b      	ldrb	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ba:	f107 0208 	add.w	r2, r7, #8
 80060be:	4610      	mov	r0, r2
 80060c0:	4798      	blx	r3
 80060c2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80060c4:	e029      	b.n	800611a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fa09 	bl	80064e0 <USBD_CtlError>
      err++;
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	3301      	adds	r3, #1
 80060d2:	72fb      	strb	r3, [r7, #11]
    break;
 80060d4:	e021      	b.n	800611a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	7c1b      	ldrb	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10d      	bne.n	80060fa <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	f107 0208 	add.w	r2, r7, #8
 80060ea:	4610      	mov	r0, r2
 80060ec:	4798      	blx	r3
 80060ee:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3301      	adds	r3, #1
 80060f4:	2207      	movs	r2, #7
 80060f6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80060f8:	e00f      	b.n	800611a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f9ef 	bl	80064e0 <USBD_CtlError>
      err++;
 8006102:	7afb      	ldrb	r3, [r7, #11]
 8006104:	3301      	adds	r3, #1
 8006106:	72fb      	strb	r3, [r7, #11]
    break;
 8006108:	e007      	b.n	800611a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f9e7 	bl	80064e0 <USBD_CtlError>
    err++;
 8006112:	7afb      	ldrb	r3, [r7, #11]
 8006114:	3301      	adds	r3, #1
 8006116:	72fb      	strb	r3, [r7, #11]
    break;
 8006118:	bf00      	nop
  }

  if (err != 0U)
 800611a:	7afb      	ldrb	r3, [r7, #11]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d11e      	bne.n	800615e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	88db      	ldrh	r3, [r3, #6]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d016      	beq.n	8006156 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006128:	893b      	ldrh	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00e      	beq.n	800614c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	88da      	ldrh	r2, [r3, #6]
 8006132:	893b      	ldrh	r3, [r7, #8]
 8006134:	4293      	cmp	r3, r2
 8006136:	bf28      	it	cs
 8006138:	4613      	movcs	r3, r2
 800613a:	b29b      	uxth	r3, r3
 800613c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800613e:	893b      	ldrh	r3, [r7, #8]
 8006140:	461a      	mov	r2, r3
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fa3c 	bl	80065c2 <USBD_CtlSendData>
 800614a:	e009      	b.n	8006160 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f9c6 	bl	80064e0 <USBD_CtlError>
 8006154:	e004      	b.n	8006160 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fa8d 	bl	8006676 <USBD_CtlSendStatus>
 800615c:	e000      	b.n	8006160 <USBD_GetDescriptor+0x2cc>
    return;
 800615e:	bf00      	nop
    }
  }
}
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop

08006168 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	889b      	ldrh	r3, [r3, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d130      	bne.n	80061dc <USBD_SetAddress+0x74>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	88db      	ldrh	r3, [r3, #6]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d12c      	bne.n	80061dc <USBD_SetAddress+0x74>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	885b      	ldrh	r3, [r3, #2]
 8006186:	2b7f      	cmp	r3, #127	; 0x7f
 8006188:	d828      	bhi.n	80061dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	885b      	ldrh	r3, [r3, #2]
 800618e:	b2db      	uxtb	r3, r3
 8006190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006194:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800619c:	2b03      	cmp	r3, #3
 800619e:	d104      	bne.n	80061aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f99c 	bl	80064e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a8:	e01c      	b.n	80061e4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	7bfa      	ldrb	r2, [r7, #15]
 80061ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fee4 	bl	8006f84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fa5a 	bl	8006676 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d0:	e008      	b.n	80061e4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061da:	e003      	b.n	80061e4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f97e 	bl	80064e0 <USBD_CtlError>
  }
}
 80061e4:	bf00      	nop
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	885b      	ldrh	r3, [r3, #2]
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	4b4b      	ldr	r3, [pc, #300]	; (8006330 <USBD_SetConfig+0x144>)
 8006202:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006204:	4b4a      	ldr	r3, [pc, #296]	; (8006330 <USBD_SetConfig+0x144>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d905      	bls.n	8006218 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f966 	bl	80064e0 <USBD_CtlError>
    return USBD_FAIL;
 8006214:	2303      	movs	r3, #3
 8006216:	e087      	b.n	8006328 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800621e:	2b02      	cmp	r3, #2
 8006220:	d002      	beq.n	8006228 <USBD_SetConfig+0x3c>
 8006222:	2b03      	cmp	r3, #3
 8006224:	d025      	beq.n	8006272 <USBD_SetConfig+0x86>
 8006226:	e071      	b.n	800630c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006228:	4b41      	ldr	r3, [pc, #260]	; (8006330 <USBD_SetConfig+0x144>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01c      	beq.n	800626a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006230:	4b3f      	ldr	r3, [pc, #252]	; (8006330 <USBD_SetConfig+0x144>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800623a:	4b3d      	ldr	r3, [pc, #244]	; (8006330 <USBD_SetConfig+0x144>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff f9a7 	bl	8005594 <USBD_SetClassConfig>
 8006246:	4603      	mov	r3, r0
 8006248:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f944 	bl	80064e0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006258:	e065      	b.n	8006326 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa0b 	bl	8006676 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2203      	movs	r2, #3
 8006264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006268:	e05d      	b.n	8006326 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fa03 	bl	8006676 <USBD_CtlSendStatus>
    break;
 8006270:	e059      	b.n	8006326 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006272:	4b2f      	ldr	r3, [pc, #188]	; (8006330 <USBD_SetConfig+0x144>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d112      	bne.n	80062a0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2202      	movs	r2, #2
 800627e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006282:	4b2b      	ldr	r3, [pc, #172]	; (8006330 <USBD_SetConfig+0x144>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800628c:	4b28      	ldr	r3, [pc, #160]	; (8006330 <USBD_SetConfig+0x144>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7ff f99a 	bl	80055cc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f9ec 	bl	8006676 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800629e:	e042      	b.n	8006326 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80062a0:	4b23      	ldr	r3, [pc, #140]	; (8006330 <USBD_SetConfig+0x144>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d02a      	beq.n	8006304 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff f988 	bl	80055cc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80062bc:	4b1c      	ldr	r3, [pc, #112]	; (8006330 <USBD_SetConfig+0x144>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80062c6:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <USBD_SetConfig+0x144>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff f961 	bl	8005594 <USBD_SetClassConfig>
 80062d2:	4603      	mov	r3, r0
 80062d4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00f      	beq.n	80062fc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f8fe 	bl	80064e0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff f96d 	bl	80055cc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2202      	movs	r2, #2
 80062f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80062fa:	e014      	b.n	8006326 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f9ba 	bl	8006676 <USBD_CtlSendStatus>
    break;
 8006302:	e010      	b.n	8006326 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f9b6 	bl	8006676 <USBD_CtlSendStatus>
    break;
 800630a:	e00c      	b.n	8006326 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f8e6 	bl	80064e0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006314:	4b06      	ldr	r3, [pc, #24]	; (8006330 <USBD_SetConfig+0x144>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff f956 	bl	80055cc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	73fb      	strb	r3, [r7, #15]
    break;
 8006324:	bf00      	nop
  }

  return ret;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20000208 	.word	0x20000208

08006334 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	88db      	ldrh	r3, [r3, #6]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d004      	beq.n	8006350 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f8c9 	bl	80064e0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800634e:	e021      	b.n	8006394 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006356:	2b01      	cmp	r3, #1
 8006358:	db17      	blt.n	800638a <USBD_GetConfig+0x56>
 800635a:	2b02      	cmp	r3, #2
 800635c:	dd02      	ble.n	8006364 <USBD_GetConfig+0x30>
 800635e:	2b03      	cmp	r3, #3
 8006360:	d00b      	beq.n	800637a <USBD_GetConfig+0x46>
 8006362:	e012      	b.n	800638a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3308      	adds	r3, #8
 800636e:	2201      	movs	r2, #1
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f925 	bl	80065c2 <USBD_CtlSendData>
      break;
 8006378:	e00c      	b.n	8006394 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3304      	adds	r3, #4
 800637e:	2201      	movs	r2, #1
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f91d 	bl	80065c2 <USBD_CtlSendData>
      break;
 8006388:	e004      	b.n	8006394 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f8a7 	bl	80064e0 <USBD_CtlError>
      break;
 8006392:	bf00      	nop
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ac:	3b01      	subs	r3, #1
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d81e      	bhi.n	80063f0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	88db      	ldrh	r3, [r3, #6]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d004      	beq.n	80063c4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f88f 	bl	80064e0 <USBD_CtlError>
      break;
 80063c2:	e01a      	b.n	80063fa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f043 0202 	orr.w	r2, r3, #2
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	330c      	adds	r3, #12
 80063e4:	2202      	movs	r2, #2
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f8ea 	bl	80065c2 <USBD_CtlSendData>
    break;
 80063ee:	e004      	b.n	80063fa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f874 	bl	80064e0 <USBD_CtlError>
    break;
 80063f8:	bf00      	nop
  }
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	885b      	ldrh	r3, [r3, #2]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d106      	bne.n	8006422 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f92a 	bl	8006676 <USBD_CtlSendStatus>
  }
}
 8006422:	bf00      	nop
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800643a:	3b01      	subs	r3, #1
 800643c:	2b02      	cmp	r3, #2
 800643e:	d80b      	bhi.n	8006458 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	885b      	ldrh	r3, [r3, #2]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d10c      	bne.n	8006462 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f910 	bl	8006676 <USBD_CtlSendStatus>
      }
      break;
 8006456:	e004      	b.n	8006462 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f840 	bl	80064e0 <USBD_CtlError>
      break;
 8006460:	e000      	b.n	8006464 <USBD_ClrFeature+0x3a>
      break;
 8006462:	bf00      	nop
  }
}
 8006464:	bf00      	nop
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	781a      	ldrb	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3301      	adds	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	781a      	ldrb	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3301      	adds	r3, #1
 8006494:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff fad3 	bl	8005a42 <SWAPBYTE>
 800649c:	4603      	mov	r3, r0
 800649e:	461a      	mov	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3301      	adds	r3, #1
 80064a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3301      	adds	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7ff fac6 	bl	8005a42 <SWAPBYTE>
 80064b6:	4603      	mov	r3, r0
 80064b8:	461a      	mov	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3301      	adds	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3301      	adds	r3, #1
 80064c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff fab9 	bl	8005a42 <SWAPBYTE>
 80064d0:	4603      	mov	r3, r0
 80064d2:	461a      	mov	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	80da      	strh	r2, [r3, #6]
}
 80064d8:	bf00      	nop
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80064ea:	2180      	movs	r1, #128	; 0x80
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fcdf 	bl	8006eb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80064f2:	2100      	movs	r1, #0
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fcdb 	bl	8006eb0 <USBD_LL_StallEP>
}
 80064fa:	bf00      	nop
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b086      	sub	sp, #24
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d036      	beq.n	8006586 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800651c:	6938      	ldr	r0, [r7, #16]
 800651e:	f000 f836 	bl	800658e <USBD_GetLen>
 8006522:	4603      	mov	r3, r0
 8006524:	3301      	adds	r3, #1
 8006526:	b29b      	uxth	r3, r3
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	4413      	add	r3, r2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	7812      	ldrb	r2, [r2, #0]
 800653a:	701a      	strb	r2, [r3, #0]
  idx++;
 800653c:	7dfb      	ldrb	r3, [r7, #23]
 800653e:	3301      	adds	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006542:	7dfb      	ldrb	r3, [r7, #23]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	4413      	add	r3, r2
 8006548:	2203      	movs	r2, #3
 800654a:	701a      	strb	r2, [r3, #0]
  idx++;
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	3301      	adds	r3, #1
 8006550:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006552:	e013      	b.n	800657c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	4413      	add	r3, r2
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	7812      	ldrb	r2, [r2, #0]
 800655e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	3301      	adds	r3, #1
 8006564:	613b      	str	r3, [r7, #16]
    idx++;
 8006566:	7dfb      	ldrb	r3, [r7, #23]
 8006568:	3301      	adds	r3, #1
 800656a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800656c:	7dfb      	ldrb	r3, [r7, #23]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	4413      	add	r3, r2
 8006572:	2200      	movs	r2, #0
 8006574:	701a      	strb	r2, [r3, #0]
    idx++;
 8006576:	7dfb      	ldrb	r3, [r7, #23]
 8006578:	3301      	adds	r3, #1
 800657a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e7      	bne.n	8006554 <USBD_GetString+0x52>
 8006584:	e000      	b.n	8006588 <USBD_GetString+0x86>
    return;
 8006586:	bf00      	nop
  }
}
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800659e:	e005      	b.n	80065ac <USBD_GetLen+0x1e>
  {
    len++;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	3301      	adds	r3, #1
 80065a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	3301      	adds	r3, #1
 80065aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f5      	bne.n	80065a0 <USBD_GetLen+0x12>
  }

  return len;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2202      	movs	r2, #2
 80065d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	2100      	movs	r1, #0
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fcea 	bl	8006fc2 <USBD_LL_Transmit>

  return USBD_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	2100      	movs	r1, #0
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fcd9 	bl	8006fc2 <USBD_LL_Transmit>

  return USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2203      	movs	r2, #3
 800662a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	2100      	movs	r1, #0
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 fcdd 	bl	8007004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	2100      	movs	r1, #0
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 fccc 	bl	8007004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2204      	movs	r2, #4
 8006682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006686:	2300      	movs	r3, #0
 8006688:	2200      	movs	r2, #0
 800668a:	2100      	movs	r1, #0
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fc98 	bl	8006fc2 <USBD_LL_Transmit>

  return USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2205      	movs	r2, #5
 80066a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066ac:	2300      	movs	r3, #0
 80066ae:	2200      	movs	r2, #0
 80066b0:	2100      	movs	r1, #0
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fca6 	bl	8007004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80066c8:	2200      	movs	r2, #0
 80066ca:	4912      	ldr	r1, [pc, #72]	; (8006714 <MX_USB_DEVICE_Init+0x50>)
 80066cc:	4812      	ldr	r0, [pc, #72]	; (8006718 <MX_USB_DEVICE_Init+0x54>)
 80066ce:	f7fe fef3 	bl	80054b8 <USBD_Init>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80066d8:	f7fa f934 	bl	8000944 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80066dc:	490f      	ldr	r1, [pc, #60]	; (800671c <MX_USB_DEVICE_Init+0x58>)
 80066de:	480e      	ldr	r0, [pc, #56]	; (8006718 <MX_USB_DEVICE_Init+0x54>)
 80066e0:	f7fe ff20 	bl	8005524 <USBD_RegisterClass>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80066ea:	f7fa f92b 	bl	8000944 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80066ee:	490c      	ldr	r1, [pc, #48]	; (8006720 <MX_USB_DEVICE_Init+0x5c>)
 80066f0:	4809      	ldr	r0, [pc, #36]	; (8006718 <MX_USB_DEVICE_Init+0x54>)
 80066f2:	f7fe fe45 	bl	8005380 <USBD_CDC_RegisterInterface>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80066fc:	f7fa f922 	bl	8000944 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006700:	4805      	ldr	r0, [pc, #20]	; (8006718 <MX_USB_DEVICE_Init+0x54>)
 8006702:	f7fe ff30 	bl	8005566 <USBD_Start>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800670c:	f7fa f91a 	bl	8000944 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006710:	bf00      	nop
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000130 	.word	0x20000130
 8006718:	2000027c 	.word	0x2000027c
 800671c:	20000018 	.word	0x20000018
 8006720:	2000011c 	.word	0x2000011c

08006724 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006728:	2200      	movs	r2, #0
 800672a:	4905      	ldr	r1, [pc, #20]	; (8006740 <CDC_Init_FS+0x1c>)
 800672c:	4805      	ldr	r0, [pc, #20]	; (8006744 <CDC_Init_FS+0x20>)
 800672e:	f7fe fe3c 	bl	80053aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006732:	4905      	ldr	r1, [pc, #20]	; (8006748 <CDC_Init_FS+0x24>)
 8006734:	4803      	ldr	r0, [pc, #12]	; (8006744 <CDC_Init_FS+0x20>)
 8006736:	f7fe fe51 	bl	80053dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800673a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800673c:	4618      	mov	r0, r3
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20000d4c 	.word	0x20000d4c
 8006744:	2000027c 	.word	0x2000027c
 8006748:	2000054c 	.word	0x2000054c

0800674c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006750:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006752:	4618      	mov	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	6039      	str	r1, [r7, #0]
 8006766:	71fb      	strb	r3, [r7, #7]
 8006768:	4613      	mov	r3, r2
 800676a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	2b23      	cmp	r3, #35	; 0x23
 8006770:	d84a      	bhi.n	8006808 <CDC_Control_FS+0xac>
 8006772:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <CDC_Control_FS+0x1c>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	08006809 	.word	0x08006809
 800677c:	08006809 	.word	0x08006809
 8006780:	08006809 	.word	0x08006809
 8006784:	08006809 	.word	0x08006809
 8006788:	08006809 	.word	0x08006809
 800678c:	08006809 	.word	0x08006809
 8006790:	08006809 	.word	0x08006809
 8006794:	08006809 	.word	0x08006809
 8006798:	08006809 	.word	0x08006809
 800679c:	08006809 	.word	0x08006809
 80067a0:	08006809 	.word	0x08006809
 80067a4:	08006809 	.word	0x08006809
 80067a8:	08006809 	.word	0x08006809
 80067ac:	08006809 	.word	0x08006809
 80067b0:	08006809 	.word	0x08006809
 80067b4:	08006809 	.word	0x08006809
 80067b8:	08006809 	.word	0x08006809
 80067bc:	08006809 	.word	0x08006809
 80067c0:	08006809 	.word	0x08006809
 80067c4:	08006809 	.word	0x08006809
 80067c8:	08006809 	.word	0x08006809
 80067cc:	08006809 	.word	0x08006809
 80067d0:	08006809 	.word	0x08006809
 80067d4:	08006809 	.word	0x08006809
 80067d8:	08006809 	.word	0x08006809
 80067dc:	08006809 	.word	0x08006809
 80067e0:	08006809 	.word	0x08006809
 80067e4:	08006809 	.word	0x08006809
 80067e8:	08006809 	.word	0x08006809
 80067ec:	08006809 	.word	0x08006809
 80067f0:	08006809 	.word	0x08006809
 80067f4:	08006809 	.word	0x08006809
 80067f8:	08006809 	.word	0x08006809
 80067fc:	08006809 	.word	0x08006809
 8006800:	08006809 	.word	0x08006809
 8006804:	08006809 	.word	0x08006809
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006808:	bf00      	nop
  }

  return (USBD_OK);
 800680a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	4805      	ldr	r0, [pc, #20]	; (800683c <CDC_Receive_FS+0x24>)
 8006826:	f7fe fdd9 	bl	80053dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800682a:	4804      	ldr	r0, [pc, #16]	; (800683c <CDC_Receive_FS+0x24>)
 800682c:	f7fe fe1a 	bl	8005464 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006830:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	2000027c 	.word	0x2000027c

08006840 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006850:	4b0d      	ldr	r3, [pc, #52]	; (8006888 <CDC_Transmit_FS+0x48>)
 8006852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006856:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006862:	2301      	movs	r3, #1
 8006864:	e00b      	b.n	800687e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006866:	887b      	ldrh	r3, [r7, #2]
 8006868:	461a      	mov	r2, r3
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	4806      	ldr	r0, [pc, #24]	; (8006888 <CDC_Transmit_FS+0x48>)
 800686e:	f7fe fd9c 	bl	80053aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006872:	4805      	ldr	r0, [pc, #20]	; (8006888 <CDC_Transmit_FS+0x48>)
 8006874:	f7fe fdc6 	bl	8005404 <USBD_CDC_TransmitPacket>
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800687c:	7bfb      	ldrb	r3, [r7, #15]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	2000027c 	.word	0x2000027c

0800688c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	4613      	mov	r3, r2
 8006898:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800689e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
	...

080068b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	6039      	str	r1, [r7, #0]
 80068ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2212      	movs	r2, #18
 80068c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80068c2:	4b03      	ldr	r3, [pc, #12]	; (80068d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	2000014c 	.word	0x2000014c

080068d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	4603      	mov	r3, r0
 80068dc:	6039      	str	r1, [r7, #0]
 80068de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2204      	movs	r2, #4
 80068e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80068e6:	4b03      	ldr	r3, [pc, #12]	; (80068f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	20000160 	.word	0x20000160

080068f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	6039      	str	r1, [r7, #0]
 8006902:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d105      	bne.n	8006916 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	4907      	ldr	r1, [pc, #28]	; (800692c <USBD_FS_ProductStrDescriptor+0x34>)
 800690e:	4808      	ldr	r0, [pc, #32]	; (8006930 <USBD_FS_ProductStrDescriptor+0x38>)
 8006910:	f7ff fdf7 	bl	8006502 <USBD_GetString>
 8006914:	e004      	b.n	8006920 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	4904      	ldr	r1, [pc, #16]	; (800692c <USBD_FS_ProductStrDescriptor+0x34>)
 800691a:	4805      	ldr	r0, [pc, #20]	; (8006930 <USBD_FS_ProductStrDescriptor+0x38>)
 800691c:	f7ff fdf1 	bl	8006502 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006920:	4b02      	ldr	r3, [pc, #8]	; (800692c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	2000154c 	.word	0x2000154c
 8006930:	080079b8 	.word	0x080079b8

08006934 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	6039      	str	r1, [r7, #0]
 800693e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	4904      	ldr	r1, [pc, #16]	; (8006954 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006944:	4804      	ldr	r0, [pc, #16]	; (8006958 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006946:	f7ff fddc 	bl	8006502 <USBD_GetString>
  return USBD_StrDesc;
 800694a:	4b02      	ldr	r3, [pc, #8]	; (8006954 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	2000154c 	.word	0x2000154c
 8006958:	080079d0 	.word	0x080079d0

0800695c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	4603      	mov	r3, r0
 8006964:	6039      	str	r1, [r7, #0]
 8006966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	221a      	movs	r2, #26
 800696c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800696e:	f000 f843 	bl	80069f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006972:	4b02      	ldr	r3, [pc, #8]	; (800697c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20000164 	.word	0x20000164

08006980 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	6039      	str	r1, [r7, #0]
 800698a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800698c:	79fb      	ldrb	r3, [r7, #7]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d105      	bne.n	800699e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	4907      	ldr	r1, [pc, #28]	; (80069b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006996:	4808      	ldr	r0, [pc, #32]	; (80069b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006998:	f7ff fdb3 	bl	8006502 <USBD_GetString>
 800699c:	e004      	b.n	80069a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	4904      	ldr	r1, [pc, #16]	; (80069b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069a2:	4805      	ldr	r0, [pc, #20]	; (80069b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069a4:	f7ff fdad 	bl	8006502 <USBD_GetString>
  }
  return USBD_StrDesc;
 80069a8:	4b02      	ldr	r3, [pc, #8]	; (80069b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	2000154c 	.word	0x2000154c
 80069b8:	080079e4 	.word	0x080079e4

080069bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	6039      	str	r1, [r7, #0]
 80069c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80069c8:	79fb      	ldrb	r3, [r7, #7]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d105      	bne.n	80069da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	4907      	ldr	r1, [pc, #28]	; (80069f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80069d2:	4808      	ldr	r0, [pc, #32]	; (80069f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069d4:	f7ff fd95 	bl	8006502 <USBD_GetString>
 80069d8:	e004      	b.n	80069e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	4904      	ldr	r1, [pc, #16]	; (80069f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80069de:	4805      	ldr	r0, [pc, #20]	; (80069f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069e0:	f7ff fd8f 	bl	8006502 <USBD_GetString>
  }
  return USBD_StrDesc;
 80069e4:	4b02      	ldr	r3, [pc, #8]	; (80069f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	2000154c 	.word	0x2000154c
 80069f4:	080079f0 	.word	0x080079f0

080069f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80069fe:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <Get_SerialNum+0x44>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a04:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <Get_SerialNum+0x48>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a0a:	4b0e      	ldr	r3, [pc, #56]	; (8006a44 <Get_SerialNum+0x4c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4413      	add	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a1e:	2208      	movs	r2, #8
 8006a20:	4909      	ldr	r1, [pc, #36]	; (8006a48 <Get_SerialNum+0x50>)
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f814 	bl	8006a50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a28:	2204      	movs	r2, #4
 8006a2a:	4908      	ldr	r1, [pc, #32]	; (8006a4c <Get_SerialNum+0x54>)
 8006a2c:	68b8      	ldr	r0, [r7, #8]
 8006a2e:	f000 f80f 	bl	8006a50 <IntToUnicode>
  }
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	1fff7a10 	.word	0x1fff7a10
 8006a40:	1fff7a14 	.word	0x1fff7a14
 8006a44:	1fff7a18 	.word	0x1fff7a18
 8006a48:	20000166 	.word	0x20000166
 8006a4c:	20000176 	.word	0x20000176

08006a50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a62:	2300      	movs	r3, #0
 8006a64:	75fb      	strb	r3, [r7, #23]
 8006a66:	e027      	b.n	8006ab8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	0f1b      	lsrs	r3, r3, #28
 8006a6c:	2b09      	cmp	r3, #9
 8006a6e:	d80b      	bhi.n	8006a88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	0f1b      	lsrs	r3, r3, #28
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	440b      	add	r3, r1
 8006a80:	3230      	adds	r2, #48	; 0x30
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	e00a      	b.n	8006a9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	0f1b      	lsrs	r3, r3, #28
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	4619      	mov	r1, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	440b      	add	r3, r1
 8006a98:	3237      	adds	r2, #55	; 0x37
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	4413      	add	r3, r2
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	75fb      	strb	r3, [r7, #23]
 8006ab8:	7dfa      	ldrb	r2, [r7, #23]
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d3d3      	bcc.n	8006a68 <IntToUnicode+0x18>
  }
}
 8006ac0:	bf00      	nop
 8006ac2:	371c      	adds	r7, #28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08a      	sub	sp, #40	; 0x28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ad4:	f107 0314 	add.w	r3, r7, #20
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	605a      	str	r2, [r3, #4]
 8006ade:	609a      	str	r2, [r3, #8]
 8006ae0:	60da      	str	r2, [r3, #12]
 8006ae2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aec:	d13a      	bne.n	8006b64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aee:	2300      	movs	r3, #0
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	4b1e      	ldr	r3, [pc, #120]	; (8006b6c <HAL_PCD_MspInit+0xa0>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	4a1d      	ldr	r2, [pc, #116]	; (8006b6c <HAL_PCD_MspInit+0xa0>)
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	6313      	str	r3, [r2, #48]	; 0x30
 8006afe:	4b1b      	ldr	r3, [pc, #108]	; (8006b6c <HAL_PCD_MspInit+0xa0>)
 8006b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b10:	2302      	movs	r3, #2
 8006b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b1c:	230a      	movs	r3, #10
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b20:	f107 0314 	add.w	r3, r7, #20
 8006b24:	4619      	mov	r1, r3
 8006b26:	4812      	ldr	r0, [pc, #72]	; (8006b70 <HAL_PCD_MspInit+0xa4>)
 8006b28:	f7fa fa44 	bl	8000fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b2c:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <HAL_PCD_MspInit+0xa0>)
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b30:	4a0e      	ldr	r2, [pc, #56]	; (8006b6c <HAL_PCD_MspInit+0xa0>)
 8006b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b36:	6353      	str	r3, [r2, #52]	; 0x34
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	4b0b      	ldr	r3, [pc, #44]	; (8006b6c <HAL_PCD_MspInit+0xa0>)
 8006b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b40:	4a0a      	ldr	r2, [pc, #40]	; (8006b6c <HAL_PCD_MspInit+0xa0>)
 8006b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b46:	6453      	str	r3, [r2, #68]	; 0x44
 8006b48:	4b08      	ldr	r3, [pc, #32]	; (8006b6c <HAL_PCD_MspInit+0xa0>)
 8006b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b54:	2200      	movs	r2, #0
 8006b56:	2100      	movs	r1, #0
 8006b58:	2043      	movs	r0, #67	; 0x43
 8006b5a:	f7fa f9f4 	bl	8000f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b5e:	2043      	movs	r0, #67	; 0x43
 8006b60:	f7fa fa0d 	bl	8000f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b64:	bf00      	nop
 8006b66:	3728      	adds	r7, #40	; 0x28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	40020000 	.word	0x40020000

08006b74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f7fe fd36 	bl	80055fc <USBD_LL_SetupStage>
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f7fe fd6e 	bl	80056a2 <USBD_LL_DataOutStage>
}
 8006bc6:	bf00      	nop
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006be0:	78fa      	ldrb	r2, [r7, #3]
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	4613      	mov	r3, r2
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	1a9b      	subs	r3, r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	3348      	adds	r3, #72	; 0x48
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	f7fe fdb7 	bl	8005768 <USBD_LL_DataInStage>
}
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe febb 	bl	800598c <USBD_LL_SOF>
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c26:	2301      	movs	r3, #1
 8006c28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]
 8006c36:	e008      	b.n	8006c4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d102      	bne.n	8006c46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006c40:	2301      	movs	r3, #1
 8006c42:	73fb      	strb	r3, [r7, #15]
 8006c44:	e001      	b.n	8006c4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006c46:	f7f9 fe7d 	bl	8000944 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c50:	7bfa      	ldrb	r2, [r7, #15]
 8006c52:	4611      	mov	r1, r2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe fe5e 	bl	8005916 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fe fe17 	bl	8005894 <USBD_LL_Reset>
}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fe59 	bl	8005936 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6812      	ldr	r2, [r2, #0]
 8006c92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c96:	f043 0301 	orr.w	r3, r3, #1
 8006c9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d005      	beq.n	8006cb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ca4:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <HAL_PCD_SuspendCallback+0x48>)
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	4a03      	ldr	r2, [pc, #12]	; (8006cb8 <HAL_PCD_SuspendCallback+0x48>)
 8006caa:	f043 0306 	orr.w	r3, r3, #6
 8006cae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	e000ed00 	.word	0xe000ed00

08006cbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fe fe48 	bl	8005960 <USBD_LL_Resume>
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cea:	78fa      	ldrb	r2, [r7, #3]
 8006cec:	4611      	mov	r1, r2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe fe73 	bl	80059da <USBD_LL_IsoOUTIncomplete>
}
 8006cf4:	bf00      	nop
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d0e:	78fa      	ldrb	r2, [r7, #3]
 8006d10:	4611      	mov	r1, r2
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe fe54 	bl	80059c0 <USBD_LL_IsoINIncomplete>
}
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fe fe60 	bl	80059f4 <USBD_LL_DevConnected>
}
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fe5d 	bl	8005a0a <USBD_LL_DevDisconnected>
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d13c      	bne.n	8006de2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006d68:	4a20      	ldr	r2, [pc, #128]	; (8006dec <USBD_LL_Init+0x94>)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1e      	ldr	r2, [pc, #120]	; (8006dec <USBD_LL_Init+0x94>)
 8006d74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006d78:	4b1c      	ldr	r3, [pc, #112]	; (8006dec <USBD_LL_Init+0x94>)
 8006d7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006d80:	4b1a      	ldr	r3, [pc, #104]	; (8006dec <USBD_LL_Init+0x94>)
 8006d82:	2204      	movs	r2, #4
 8006d84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006d86:	4b19      	ldr	r3, [pc, #100]	; (8006dec <USBD_LL_Init+0x94>)
 8006d88:	2202      	movs	r2, #2
 8006d8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006d8c:	4b17      	ldr	r3, [pc, #92]	; (8006dec <USBD_LL_Init+0x94>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d92:	4b16      	ldr	r3, [pc, #88]	; (8006dec <USBD_LL_Init+0x94>)
 8006d94:	2202      	movs	r2, #2
 8006d96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d98:	4b14      	ldr	r3, [pc, #80]	; (8006dec <USBD_LL_Init+0x94>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d9e:	4b13      	ldr	r3, [pc, #76]	; (8006dec <USBD_LL_Init+0x94>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006da4:	4b11      	ldr	r3, [pc, #68]	; (8006dec <USBD_LL_Init+0x94>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006daa:	4b10      	ldr	r3, [pc, #64]	; (8006dec <USBD_LL_Init+0x94>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006db0:	4b0e      	ldr	r3, [pc, #56]	; (8006dec <USBD_LL_Init+0x94>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006db6:	480d      	ldr	r0, [pc, #52]	; (8006dec <USBD_LL_Init+0x94>)
 8006db8:	f7fa faed 	bl	8001396 <HAL_PCD_Init>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006dc2:	f7f9 fdbf 	bl	8000944 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006dc6:	2180      	movs	r1, #128	; 0x80
 8006dc8:	4808      	ldr	r0, [pc, #32]	; (8006dec <USBD_LL_Init+0x94>)
 8006dca:	f7fb fc4a 	bl	8002662 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006dce:	2240      	movs	r2, #64	; 0x40
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4806      	ldr	r0, [pc, #24]	; (8006dec <USBD_LL_Init+0x94>)
 8006dd4:	f7fb fbfe 	bl	80025d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006dd8:	2280      	movs	r2, #128	; 0x80
 8006dda:	2101      	movs	r1, #1
 8006ddc:	4803      	ldr	r0, [pc, #12]	; (8006dec <USBD_LL_Init+0x94>)
 8006dde:	f7fb fbf9 	bl	80025d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	2000174c 	.word	0x2000174c

08006df0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fa fbe2 	bl	80015d0 <HAL_PCD_Start>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 f92a 	bl	800706c <USBD_Get_USB_Status>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	4608      	mov	r0, r1
 8006e30:	4611      	mov	r1, r2
 8006e32:	461a      	mov	r2, r3
 8006e34:	4603      	mov	r3, r0
 8006e36:	70fb      	strb	r3, [r7, #3]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	70bb      	strb	r3, [r7, #2]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006e4e:	78bb      	ldrb	r3, [r7, #2]
 8006e50:	883a      	ldrh	r2, [r7, #0]
 8006e52:	78f9      	ldrb	r1, [r7, #3]
 8006e54:	f7fa ffc6 	bl	8001de4 <HAL_PCD_EP_Open>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 f904 	bl	800706c <USBD_Get_USB_Status>
 8006e64:	4603      	mov	r3, r0
 8006e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e8c:	78fa      	ldrb	r2, [r7, #3]
 8006e8e:	4611      	mov	r1, r2
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fb f80f 	bl	8001eb4 <HAL_PCD_EP_Close>
 8006e96:	4603      	mov	r3, r0
 8006e98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 f8e5 	bl	800706c <USBD_Get_USB_Status>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006eca:	78fa      	ldrb	r2, [r7, #3]
 8006ecc:	4611      	mov	r1, r2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fb f8e7 	bl	80020a2 <HAL_PCD_EP_SetStall>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 f8c6 	bl	800706c <USBD_Get_USB_Status>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f08:	78fa      	ldrb	r2, [r7, #3]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fb f92c 	bl	800216a <HAL_PCD_EP_ClrStall>
 8006f12:	4603      	mov	r3, r0
 8006f14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 f8a7 	bl	800706c <USBD_Get_USB_Status>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	da0b      	bge.n	8006f60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f4e:	68f9      	ldr	r1, [r7, #12]
 8006f50:	4613      	mov	r3, r2
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	333e      	adds	r3, #62	; 0x3e
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	e00b      	b.n	8006f78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f66:	68f9      	ldr	r1, [r7, #12]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f9e:	78fa      	ldrb	r2, [r7, #3]
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fa fef9 	bl	8001d9a <HAL_PCD_SetAddress>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 f85c 	bl	800706c <USBD_Get_USB_Status>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b086      	sub	sp, #24
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006fe0:	7af9      	ldrb	r1, [r7, #11]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	f7fb f812 	bl	800200e <HAL_PCD_EP_Transmit>
 8006fea:	4603      	mov	r3, r0
 8006fec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 f83b 	bl	800706c <USBD_Get_USB_Status>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ffa:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	607a      	str	r2, [r7, #4]
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	460b      	mov	r3, r1
 8007012:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007022:	7af9      	ldrb	r1, [r7, #11]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	f7fa ff8e 	bl	8001f48 <HAL_PCD_EP_Receive>
 800702c:	4603      	mov	r3, r0
 800702e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 f81a 	bl	800706c <USBD_Get_USB_Status>
 8007038:	4603      	mov	r3, r0
 800703a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800703c:	7dbb      	ldrb	r3, [r7, #22]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007058:	78fa      	ldrb	r2, [r7, #3]
 800705a:	4611      	mov	r1, r2
 800705c:	4618      	mov	r0, r3
 800705e:	f7fa ffbe 	bl	8001fde <HAL_PCD_EP_GetRxCount>
 8007062:	4603      	mov	r3, r0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800707a:	79fb      	ldrb	r3, [r7, #7]
 800707c:	2b03      	cmp	r3, #3
 800707e:	d817      	bhi.n	80070b0 <USBD_Get_USB_Status+0x44>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <USBD_Get_USB_Status+0x1c>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	08007099 	.word	0x08007099
 800708c:	0800709f 	.word	0x0800709f
 8007090:	080070a5 	.word	0x080070a5
 8007094:	080070ab 	.word	0x080070ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]
    break;
 800709c:	e00b      	b.n	80070b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800709e:	2303      	movs	r3, #3
 80070a0:	73fb      	strb	r3, [r7, #15]
    break;
 80070a2:	e008      	b.n	80070b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070a4:	2301      	movs	r3, #1
 80070a6:	73fb      	strb	r3, [r7, #15]
    break;
 80070a8:	e005      	b.n	80070b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070aa:	2303      	movs	r3, #3
 80070ac:	73fb      	strb	r3, [r7, #15]
    break;
 80070ae:	e002      	b.n	80070b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80070b0:	2303      	movs	r3, #3
 80070b2:	73fb      	strb	r3, [r7, #15]
    break;
 80070b4:	bf00      	nop
  }
  return usb_status;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <__errno>:
 80070c4:	4b01      	ldr	r3, [pc, #4]	; (80070cc <__errno+0x8>)
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	20000180 	.word	0x20000180

080070d0 <__libc_init_array>:
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	4e0d      	ldr	r6, [pc, #52]	; (8007108 <__libc_init_array+0x38>)
 80070d4:	4c0d      	ldr	r4, [pc, #52]	; (800710c <__libc_init_array+0x3c>)
 80070d6:	1ba4      	subs	r4, r4, r6
 80070d8:	10a4      	asrs	r4, r4, #2
 80070da:	2500      	movs	r5, #0
 80070dc:	42a5      	cmp	r5, r4
 80070de:	d109      	bne.n	80070f4 <__libc_init_array+0x24>
 80070e0:	4e0b      	ldr	r6, [pc, #44]	; (8007110 <__libc_init_array+0x40>)
 80070e2:	4c0c      	ldr	r4, [pc, #48]	; (8007114 <__libc_init_array+0x44>)
 80070e4:	f000 fc4c 	bl	8007980 <_init>
 80070e8:	1ba4      	subs	r4, r4, r6
 80070ea:	10a4      	asrs	r4, r4, #2
 80070ec:	2500      	movs	r5, #0
 80070ee:	42a5      	cmp	r5, r4
 80070f0:	d105      	bne.n	80070fe <__libc_init_array+0x2e>
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070f8:	4798      	blx	r3
 80070fa:	3501      	adds	r5, #1
 80070fc:	e7ee      	b.n	80070dc <__libc_init_array+0xc>
 80070fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007102:	4798      	blx	r3
 8007104:	3501      	adds	r5, #1
 8007106:	e7f2      	b.n	80070ee <__libc_init_array+0x1e>
 8007108:	08007a4c 	.word	0x08007a4c
 800710c:	08007a4c 	.word	0x08007a4c
 8007110:	08007a4c 	.word	0x08007a4c
 8007114:	08007a50 	.word	0x08007a50

08007118 <malloc>:
 8007118:	4b02      	ldr	r3, [pc, #8]	; (8007124 <malloc+0xc>)
 800711a:	4601      	mov	r1, r0
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	f000 b861 	b.w	80071e4 <_malloc_r>
 8007122:	bf00      	nop
 8007124:	20000180 	.word	0x20000180

08007128 <free>:
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <free+0xc>)
 800712a:	4601      	mov	r1, r0
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	f000 b80b 	b.w	8007148 <_free_r>
 8007132:	bf00      	nop
 8007134:	20000180 	.word	0x20000180

08007138 <memset>:
 8007138:	4402      	add	r2, r0
 800713a:	4603      	mov	r3, r0
 800713c:	4293      	cmp	r3, r2
 800713e:	d100      	bne.n	8007142 <memset+0xa>
 8007140:	4770      	bx	lr
 8007142:	f803 1b01 	strb.w	r1, [r3], #1
 8007146:	e7f9      	b.n	800713c <memset+0x4>

08007148 <_free_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4605      	mov	r5, r0
 800714c:	2900      	cmp	r1, #0
 800714e:	d045      	beq.n	80071dc <_free_r+0x94>
 8007150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007154:	1f0c      	subs	r4, r1, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	bfb8      	it	lt
 800715a:	18e4      	addlt	r4, r4, r3
 800715c:	f000 f8e1 	bl	8007322 <__malloc_lock>
 8007160:	4a1f      	ldr	r2, [pc, #124]	; (80071e0 <_free_r+0x98>)
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	4610      	mov	r0, r2
 8007166:	b933      	cbnz	r3, 8007176 <_free_r+0x2e>
 8007168:	6063      	str	r3, [r4, #4]
 800716a:	6014      	str	r4, [r2, #0]
 800716c:	4628      	mov	r0, r5
 800716e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007172:	f000 b8d7 	b.w	8007324 <__malloc_unlock>
 8007176:	42a3      	cmp	r3, r4
 8007178:	d90c      	bls.n	8007194 <_free_r+0x4c>
 800717a:	6821      	ldr	r1, [r4, #0]
 800717c:	1862      	adds	r2, r4, r1
 800717e:	4293      	cmp	r3, r2
 8007180:	bf04      	itt	eq
 8007182:	681a      	ldreq	r2, [r3, #0]
 8007184:	685b      	ldreq	r3, [r3, #4]
 8007186:	6063      	str	r3, [r4, #4]
 8007188:	bf04      	itt	eq
 800718a:	1852      	addeq	r2, r2, r1
 800718c:	6022      	streq	r2, [r4, #0]
 800718e:	6004      	str	r4, [r0, #0]
 8007190:	e7ec      	b.n	800716c <_free_r+0x24>
 8007192:	4613      	mov	r3, r2
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	b10a      	cbz	r2, 800719c <_free_r+0x54>
 8007198:	42a2      	cmp	r2, r4
 800719a:	d9fa      	bls.n	8007192 <_free_r+0x4a>
 800719c:	6819      	ldr	r1, [r3, #0]
 800719e:	1858      	adds	r0, r3, r1
 80071a0:	42a0      	cmp	r0, r4
 80071a2:	d10b      	bne.n	80071bc <_free_r+0x74>
 80071a4:	6820      	ldr	r0, [r4, #0]
 80071a6:	4401      	add	r1, r0
 80071a8:	1858      	adds	r0, r3, r1
 80071aa:	4282      	cmp	r2, r0
 80071ac:	6019      	str	r1, [r3, #0]
 80071ae:	d1dd      	bne.n	800716c <_free_r+0x24>
 80071b0:	6810      	ldr	r0, [r2, #0]
 80071b2:	6852      	ldr	r2, [r2, #4]
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	4401      	add	r1, r0
 80071b8:	6019      	str	r1, [r3, #0]
 80071ba:	e7d7      	b.n	800716c <_free_r+0x24>
 80071bc:	d902      	bls.n	80071c4 <_free_r+0x7c>
 80071be:	230c      	movs	r3, #12
 80071c0:	602b      	str	r3, [r5, #0]
 80071c2:	e7d3      	b.n	800716c <_free_r+0x24>
 80071c4:	6820      	ldr	r0, [r4, #0]
 80071c6:	1821      	adds	r1, r4, r0
 80071c8:	428a      	cmp	r2, r1
 80071ca:	bf04      	itt	eq
 80071cc:	6811      	ldreq	r1, [r2, #0]
 80071ce:	6852      	ldreq	r2, [r2, #4]
 80071d0:	6062      	str	r2, [r4, #4]
 80071d2:	bf04      	itt	eq
 80071d4:	1809      	addeq	r1, r1, r0
 80071d6:	6021      	streq	r1, [r4, #0]
 80071d8:	605c      	str	r4, [r3, #4]
 80071da:	e7c7      	b.n	800716c <_free_r+0x24>
 80071dc:	bd38      	pop	{r3, r4, r5, pc}
 80071de:	bf00      	nop
 80071e0:	2000020c 	.word	0x2000020c

080071e4 <_malloc_r>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	1ccd      	adds	r5, r1, #3
 80071e8:	f025 0503 	bic.w	r5, r5, #3
 80071ec:	3508      	adds	r5, #8
 80071ee:	2d0c      	cmp	r5, #12
 80071f0:	bf38      	it	cc
 80071f2:	250c      	movcc	r5, #12
 80071f4:	2d00      	cmp	r5, #0
 80071f6:	4606      	mov	r6, r0
 80071f8:	db01      	blt.n	80071fe <_malloc_r+0x1a>
 80071fa:	42a9      	cmp	r1, r5
 80071fc:	d903      	bls.n	8007206 <_malloc_r+0x22>
 80071fe:	230c      	movs	r3, #12
 8007200:	6033      	str	r3, [r6, #0]
 8007202:	2000      	movs	r0, #0
 8007204:	bd70      	pop	{r4, r5, r6, pc}
 8007206:	f000 f88c 	bl	8007322 <__malloc_lock>
 800720a:	4a21      	ldr	r2, [pc, #132]	; (8007290 <_malloc_r+0xac>)
 800720c:	6814      	ldr	r4, [r2, #0]
 800720e:	4621      	mov	r1, r4
 8007210:	b991      	cbnz	r1, 8007238 <_malloc_r+0x54>
 8007212:	4c20      	ldr	r4, [pc, #128]	; (8007294 <_malloc_r+0xb0>)
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	b91b      	cbnz	r3, 8007220 <_malloc_r+0x3c>
 8007218:	4630      	mov	r0, r6
 800721a:	f000 f83d 	bl	8007298 <_sbrk_r>
 800721e:	6020      	str	r0, [r4, #0]
 8007220:	4629      	mov	r1, r5
 8007222:	4630      	mov	r0, r6
 8007224:	f000 f838 	bl	8007298 <_sbrk_r>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d124      	bne.n	8007276 <_malloc_r+0x92>
 800722c:	230c      	movs	r3, #12
 800722e:	6033      	str	r3, [r6, #0]
 8007230:	4630      	mov	r0, r6
 8007232:	f000 f877 	bl	8007324 <__malloc_unlock>
 8007236:	e7e4      	b.n	8007202 <_malloc_r+0x1e>
 8007238:	680b      	ldr	r3, [r1, #0]
 800723a:	1b5b      	subs	r3, r3, r5
 800723c:	d418      	bmi.n	8007270 <_malloc_r+0x8c>
 800723e:	2b0b      	cmp	r3, #11
 8007240:	d90f      	bls.n	8007262 <_malloc_r+0x7e>
 8007242:	600b      	str	r3, [r1, #0]
 8007244:	50cd      	str	r5, [r1, r3]
 8007246:	18cc      	adds	r4, r1, r3
 8007248:	4630      	mov	r0, r6
 800724a:	f000 f86b 	bl	8007324 <__malloc_unlock>
 800724e:	f104 000b 	add.w	r0, r4, #11
 8007252:	1d23      	adds	r3, r4, #4
 8007254:	f020 0007 	bic.w	r0, r0, #7
 8007258:	1ac3      	subs	r3, r0, r3
 800725a:	d0d3      	beq.n	8007204 <_malloc_r+0x20>
 800725c:	425a      	negs	r2, r3
 800725e:	50e2      	str	r2, [r4, r3]
 8007260:	e7d0      	b.n	8007204 <_malloc_r+0x20>
 8007262:	428c      	cmp	r4, r1
 8007264:	684b      	ldr	r3, [r1, #4]
 8007266:	bf16      	itet	ne
 8007268:	6063      	strne	r3, [r4, #4]
 800726a:	6013      	streq	r3, [r2, #0]
 800726c:	460c      	movne	r4, r1
 800726e:	e7eb      	b.n	8007248 <_malloc_r+0x64>
 8007270:	460c      	mov	r4, r1
 8007272:	6849      	ldr	r1, [r1, #4]
 8007274:	e7cc      	b.n	8007210 <_malloc_r+0x2c>
 8007276:	1cc4      	adds	r4, r0, #3
 8007278:	f024 0403 	bic.w	r4, r4, #3
 800727c:	42a0      	cmp	r0, r4
 800727e:	d005      	beq.n	800728c <_malloc_r+0xa8>
 8007280:	1a21      	subs	r1, r4, r0
 8007282:	4630      	mov	r0, r6
 8007284:	f000 f808 	bl	8007298 <_sbrk_r>
 8007288:	3001      	adds	r0, #1
 800728a:	d0cf      	beq.n	800722c <_malloc_r+0x48>
 800728c:	6025      	str	r5, [r4, #0]
 800728e:	e7db      	b.n	8007248 <_malloc_r+0x64>
 8007290:	2000020c 	.word	0x2000020c
 8007294:	20000210 	.word	0x20000210

08007298 <_sbrk_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4c06      	ldr	r4, [pc, #24]	; (80072b4 <_sbrk_r+0x1c>)
 800729c:	2300      	movs	r3, #0
 800729e:	4605      	mov	r5, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	6023      	str	r3, [r4, #0]
 80072a4:	f7f9 fc6a 	bl	8000b7c <_sbrk>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_sbrk_r+0x1a>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_sbrk_r+0x1a>
 80072b0:	602b      	str	r3, [r5, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	20001b54 	.word	0x20001b54

080072b8 <siprintf>:
 80072b8:	b40e      	push	{r1, r2, r3}
 80072ba:	b500      	push	{lr}
 80072bc:	b09c      	sub	sp, #112	; 0x70
 80072be:	ab1d      	add	r3, sp, #116	; 0x74
 80072c0:	9002      	str	r0, [sp, #8]
 80072c2:	9006      	str	r0, [sp, #24]
 80072c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072c8:	4809      	ldr	r0, [pc, #36]	; (80072f0 <siprintf+0x38>)
 80072ca:	9107      	str	r1, [sp, #28]
 80072cc:	9104      	str	r1, [sp, #16]
 80072ce:	4909      	ldr	r1, [pc, #36]	; (80072f4 <siprintf+0x3c>)
 80072d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d4:	9105      	str	r1, [sp, #20]
 80072d6:	6800      	ldr	r0, [r0, #0]
 80072d8:	9301      	str	r3, [sp, #4]
 80072da:	a902      	add	r1, sp, #8
 80072dc:	f000 f87e 	bl	80073dc <_svfiprintf_r>
 80072e0:	9b02      	ldr	r3, [sp, #8]
 80072e2:	2200      	movs	r2, #0
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	b01c      	add	sp, #112	; 0x70
 80072e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072ec:	b003      	add	sp, #12
 80072ee:	4770      	bx	lr
 80072f0:	20000180 	.word	0x20000180
 80072f4:	ffff0208 	.word	0xffff0208

080072f8 <strncpy>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	3901      	subs	r1, #1
 80072fc:	4604      	mov	r4, r0
 80072fe:	b902      	cbnz	r2, 8007302 <strncpy+0xa>
 8007300:	bd70      	pop	{r4, r5, r6, pc}
 8007302:	4623      	mov	r3, r4
 8007304:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007308:	f803 5b01 	strb.w	r5, [r3], #1
 800730c:	1e56      	subs	r6, r2, #1
 800730e:	b92d      	cbnz	r5, 800731c <strncpy+0x24>
 8007310:	4414      	add	r4, r2
 8007312:	42a3      	cmp	r3, r4
 8007314:	d0f4      	beq.n	8007300 <strncpy+0x8>
 8007316:	f803 5b01 	strb.w	r5, [r3], #1
 800731a:	e7fa      	b.n	8007312 <strncpy+0x1a>
 800731c:	461c      	mov	r4, r3
 800731e:	4632      	mov	r2, r6
 8007320:	e7ed      	b.n	80072fe <strncpy+0x6>

08007322 <__malloc_lock>:
 8007322:	4770      	bx	lr

08007324 <__malloc_unlock>:
 8007324:	4770      	bx	lr

08007326 <__ssputs_r>:
 8007326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800732a:	688e      	ldr	r6, [r1, #8]
 800732c:	429e      	cmp	r6, r3
 800732e:	4682      	mov	sl, r0
 8007330:	460c      	mov	r4, r1
 8007332:	4690      	mov	r8, r2
 8007334:	4699      	mov	r9, r3
 8007336:	d837      	bhi.n	80073a8 <__ssputs_r+0x82>
 8007338:	898a      	ldrh	r2, [r1, #12]
 800733a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800733e:	d031      	beq.n	80073a4 <__ssputs_r+0x7e>
 8007340:	6825      	ldr	r5, [r4, #0]
 8007342:	6909      	ldr	r1, [r1, #16]
 8007344:	1a6f      	subs	r7, r5, r1
 8007346:	6965      	ldr	r5, [r4, #20]
 8007348:	2302      	movs	r3, #2
 800734a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800734e:	fb95 f5f3 	sdiv	r5, r5, r3
 8007352:	f109 0301 	add.w	r3, r9, #1
 8007356:	443b      	add	r3, r7
 8007358:	429d      	cmp	r5, r3
 800735a:	bf38      	it	cc
 800735c:	461d      	movcc	r5, r3
 800735e:	0553      	lsls	r3, r2, #21
 8007360:	d530      	bpl.n	80073c4 <__ssputs_r+0x9e>
 8007362:	4629      	mov	r1, r5
 8007364:	f7ff ff3e 	bl	80071e4 <_malloc_r>
 8007368:	4606      	mov	r6, r0
 800736a:	b950      	cbnz	r0, 8007382 <__ssputs_r+0x5c>
 800736c:	230c      	movs	r3, #12
 800736e:	f8ca 3000 	str.w	r3, [sl]
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007378:	81a3      	strh	r3, [r4, #12]
 800737a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007382:	463a      	mov	r2, r7
 8007384:	6921      	ldr	r1, [r4, #16]
 8007386:	f000 faa9 	bl	80078dc <memcpy>
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	6126      	str	r6, [r4, #16]
 8007398:	6165      	str	r5, [r4, #20]
 800739a:	443e      	add	r6, r7
 800739c:	1bed      	subs	r5, r5, r7
 800739e:	6026      	str	r6, [r4, #0]
 80073a0:	60a5      	str	r5, [r4, #8]
 80073a2:	464e      	mov	r6, r9
 80073a4:	454e      	cmp	r6, r9
 80073a6:	d900      	bls.n	80073aa <__ssputs_r+0x84>
 80073a8:	464e      	mov	r6, r9
 80073aa:	4632      	mov	r2, r6
 80073ac:	4641      	mov	r1, r8
 80073ae:	6820      	ldr	r0, [r4, #0]
 80073b0:	f000 fa9f 	bl	80078f2 <memmove>
 80073b4:	68a3      	ldr	r3, [r4, #8]
 80073b6:	1b9b      	subs	r3, r3, r6
 80073b8:	60a3      	str	r3, [r4, #8]
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	441e      	add	r6, r3
 80073be:	6026      	str	r6, [r4, #0]
 80073c0:	2000      	movs	r0, #0
 80073c2:	e7dc      	b.n	800737e <__ssputs_r+0x58>
 80073c4:	462a      	mov	r2, r5
 80073c6:	f000 faad 	bl	8007924 <_realloc_r>
 80073ca:	4606      	mov	r6, r0
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d1e2      	bne.n	8007396 <__ssputs_r+0x70>
 80073d0:	6921      	ldr	r1, [r4, #16]
 80073d2:	4650      	mov	r0, sl
 80073d4:	f7ff feb8 	bl	8007148 <_free_r>
 80073d8:	e7c8      	b.n	800736c <__ssputs_r+0x46>
	...

080073dc <_svfiprintf_r>:
 80073dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	461d      	mov	r5, r3
 80073e2:	898b      	ldrh	r3, [r1, #12]
 80073e4:	061f      	lsls	r7, r3, #24
 80073e6:	b09d      	sub	sp, #116	; 0x74
 80073e8:	4680      	mov	r8, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	4616      	mov	r6, r2
 80073ee:	d50f      	bpl.n	8007410 <_svfiprintf_r+0x34>
 80073f0:	690b      	ldr	r3, [r1, #16]
 80073f2:	b96b      	cbnz	r3, 8007410 <_svfiprintf_r+0x34>
 80073f4:	2140      	movs	r1, #64	; 0x40
 80073f6:	f7ff fef5 	bl	80071e4 <_malloc_r>
 80073fa:	6020      	str	r0, [r4, #0]
 80073fc:	6120      	str	r0, [r4, #16]
 80073fe:	b928      	cbnz	r0, 800740c <_svfiprintf_r+0x30>
 8007400:	230c      	movs	r3, #12
 8007402:	f8c8 3000 	str.w	r3, [r8]
 8007406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800740a:	e0c8      	b.n	800759e <_svfiprintf_r+0x1c2>
 800740c:	2340      	movs	r3, #64	; 0x40
 800740e:	6163      	str	r3, [r4, #20]
 8007410:	2300      	movs	r3, #0
 8007412:	9309      	str	r3, [sp, #36]	; 0x24
 8007414:	2320      	movs	r3, #32
 8007416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800741a:	2330      	movs	r3, #48	; 0x30
 800741c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007420:	9503      	str	r5, [sp, #12]
 8007422:	f04f 0b01 	mov.w	fp, #1
 8007426:	4637      	mov	r7, r6
 8007428:	463d      	mov	r5, r7
 800742a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800742e:	b10b      	cbz	r3, 8007434 <_svfiprintf_r+0x58>
 8007430:	2b25      	cmp	r3, #37	; 0x25
 8007432:	d13e      	bne.n	80074b2 <_svfiprintf_r+0xd6>
 8007434:	ebb7 0a06 	subs.w	sl, r7, r6
 8007438:	d00b      	beq.n	8007452 <_svfiprintf_r+0x76>
 800743a:	4653      	mov	r3, sl
 800743c:	4632      	mov	r2, r6
 800743e:	4621      	mov	r1, r4
 8007440:	4640      	mov	r0, r8
 8007442:	f7ff ff70 	bl	8007326 <__ssputs_r>
 8007446:	3001      	adds	r0, #1
 8007448:	f000 80a4 	beq.w	8007594 <_svfiprintf_r+0x1b8>
 800744c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744e:	4453      	add	r3, sl
 8007450:	9309      	str	r3, [sp, #36]	; 0x24
 8007452:	783b      	ldrb	r3, [r7, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 809d 	beq.w	8007594 <_svfiprintf_r+0x1b8>
 800745a:	2300      	movs	r3, #0
 800745c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	9307      	str	r3, [sp, #28]
 8007468:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800746c:	931a      	str	r3, [sp, #104]	; 0x68
 800746e:	462f      	mov	r7, r5
 8007470:	2205      	movs	r2, #5
 8007472:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007476:	4850      	ldr	r0, [pc, #320]	; (80075b8 <_svfiprintf_r+0x1dc>)
 8007478:	f7f8 feaa 	bl	80001d0 <memchr>
 800747c:	9b04      	ldr	r3, [sp, #16]
 800747e:	b9d0      	cbnz	r0, 80074b6 <_svfiprintf_r+0xda>
 8007480:	06d9      	lsls	r1, r3, #27
 8007482:	bf44      	itt	mi
 8007484:	2220      	movmi	r2, #32
 8007486:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800748a:	071a      	lsls	r2, r3, #28
 800748c:	bf44      	itt	mi
 800748e:	222b      	movmi	r2, #43	; 0x2b
 8007490:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007494:	782a      	ldrb	r2, [r5, #0]
 8007496:	2a2a      	cmp	r2, #42	; 0x2a
 8007498:	d015      	beq.n	80074c6 <_svfiprintf_r+0xea>
 800749a:	9a07      	ldr	r2, [sp, #28]
 800749c:	462f      	mov	r7, r5
 800749e:	2000      	movs	r0, #0
 80074a0:	250a      	movs	r5, #10
 80074a2:	4639      	mov	r1, r7
 80074a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074a8:	3b30      	subs	r3, #48	; 0x30
 80074aa:	2b09      	cmp	r3, #9
 80074ac:	d94d      	bls.n	800754a <_svfiprintf_r+0x16e>
 80074ae:	b1b8      	cbz	r0, 80074e0 <_svfiprintf_r+0x104>
 80074b0:	e00f      	b.n	80074d2 <_svfiprintf_r+0xf6>
 80074b2:	462f      	mov	r7, r5
 80074b4:	e7b8      	b.n	8007428 <_svfiprintf_r+0x4c>
 80074b6:	4a40      	ldr	r2, [pc, #256]	; (80075b8 <_svfiprintf_r+0x1dc>)
 80074b8:	1a80      	subs	r0, r0, r2
 80074ba:	fa0b f000 	lsl.w	r0, fp, r0
 80074be:	4318      	orrs	r0, r3
 80074c0:	9004      	str	r0, [sp, #16]
 80074c2:	463d      	mov	r5, r7
 80074c4:	e7d3      	b.n	800746e <_svfiprintf_r+0x92>
 80074c6:	9a03      	ldr	r2, [sp, #12]
 80074c8:	1d11      	adds	r1, r2, #4
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	9103      	str	r1, [sp, #12]
 80074ce:	2a00      	cmp	r2, #0
 80074d0:	db01      	blt.n	80074d6 <_svfiprintf_r+0xfa>
 80074d2:	9207      	str	r2, [sp, #28]
 80074d4:	e004      	b.n	80074e0 <_svfiprintf_r+0x104>
 80074d6:	4252      	negs	r2, r2
 80074d8:	f043 0302 	orr.w	r3, r3, #2
 80074dc:	9207      	str	r2, [sp, #28]
 80074de:	9304      	str	r3, [sp, #16]
 80074e0:	783b      	ldrb	r3, [r7, #0]
 80074e2:	2b2e      	cmp	r3, #46	; 0x2e
 80074e4:	d10c      	bne.n	8007500 <_svfiprintf_r+0x124>
 80074e6:	787b      	ldrb	r3, [r7, #1]
 80074e8:	2b2a      	cmp	r3, #42	; 0x2a
 80074ea:	d133      	bne.n	8007554 <_svfiprintf_r+0x178>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	1d1a      	adds	r2, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	9203      	str	r2, [sp, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfb8      	it	lt
 80074f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80074fc:	3702      	adds	r7, #2
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	4d2e      	ldr	r5, [pc, #184]	; (80075bc <_svfiprintf_r+0x1e0>)
 8007502:	7839      	ldrb	r1, [r7, #0]
 8007504:	2203      	movs	r2, #3
 8007506:	4628      	mov	r0, r5
 8007508:	f7f8 fe62 	bl	80001d0 <memchr>
 800750c:	b138      	cbz	r0, 800751e <_svfiprintf_r+0x142>
 800750e:	2340      	movs	r3, #64	; 0x40
 8007510:	1b40      	subs	r0, r0, r5
 8007512:	fa03 f000 	lsl.w	r0, r3, r0
 8007516:	9b04      	ldr	r3, [sp, #16]
 8007518:	4303      	orrs	r3, r0
 800751a:	3701      	adds	r7, #1
 800751c:	9304      	str	r3, [sp, #16]
 800751e:	7839      	ldrb	r1, [r7, #0]
 8007520:	4827      	ldr	r0, [pc, #156]	; (80075c0 <_svfiprintf_r+0x1e4>)
 8007522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007526:	2206      	movs	r2, #6
 8007528:	1c7e      	adds	r6, r7, #1
 800752a:	f7f8 fe51 	bl	80001d0 <memchr>
 800752e:	2800      	cmp	r0, #0
 8007530:	d038      	beq.n	80075a4 <_svfiprintf_r+0x1c8>
 8007532:	4b24      	ldr	r3, [pc, #144]	; (80075c4 <_svfiprintf_r+0x1e8>)
 8007534:	bb13      	cbnz	r3, 800757c <_svfiprintf_r+0x1a0>
 8007536:	9b03      	ldr	r3, [sp, #12]
 8007538:	3307      	adds	r3, #7
 800753a:	f023 0307 	bic.w	r3, r3, #7
 800753e:	3308      	adds	r3, #8
 8007540:	9303      	str	r3, [sp, #12]
 8007542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007544:	444b      	add	r3, r9
 8007546:	9309      	str	r3, [sp, #36]	; 0x24
 8007548:	e76d      	b.n	8007426 <_svfiprintf_r+0x4a>
 800754a:	fb05 3202 	mla	r2, r5, r2, r3
 800754e:	2001      	movs	r0, #1
 8007550:	460f      	mov	r7, r1
 8007552:	e7a6      	b.n	80074a2 <_svfiprintf_r+0xc6>
 8007554:	2300      	movs	r3, #0
 8007556:	3701      	adds	r7, #1
 8007558:	9305      	str	r3, [sp, #20]
 800755a:	4619      	mov	r1, r3
 800755c:	250a      	movs	r5, #10
 800755e:	4638      	mov	r0, r7
 8007560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007564:	3a30      	subs	r2, #48	; 0x30
 8007566:	2a09      	cmp	r2, #9
 8007568:	d903      	bls.n	8007572 <_svfiprintf_r+0x196>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0c8      	beq.n	8007500 <_svfiprintf_r+0x124>
 800756e:	9105      	str	r1, [sp, #20]
 8007570:	e7c6      	b.n	8007500 <_svfiprintf_r+0x124>
 8007572:	fb05 2101 	mla	r1, r5, r1, r2
 8007576:	2301      	movs	r3, #1
 8007578:	4607      	mov	r7, r0
 800757a:	e7f0      	b.n	800755e <_svfiprintf_r+0x182>
 800757c:	ab03      	add	r3, sp, #12
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	4622      	mov	r2, r4
 8007582:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <_svfiprintf_r+0x1ec>)
 8007584:	a904      	add	r1, sp, #16
 8007586:	4640      	mov	r0, r8
 8007588:	f3af 8000 	nop.w
 800758c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007590:	4681      	mov	r9, r0
 8007592:	d1d6      	bne.n	8007542 <_svfiprintf_r+0x166>
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	065b      	lsls	r3, r3, #25
 8007598:	f53f af35 	bmi.w	8007406 <_svfiprintf_r+0x2a>
 800759c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800759e:	b01d      	add	sp, #116	; 0x74
 80075a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a4:	ab03      	add	r3, sp, #12
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	4622      	mov	r2, r4
 80075aa:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <_svfiprintf_r+0x1ec>)
 80075ac:	a904      	add	r1, sp, #16
 80075ae:	4640      	mov	r0, r8
 80075b0:	f000 f882 	bl	80076b8 <_printf_i>
 80075b4:	e7ea      	b.n	800758c <_svfiprintf_r+0x1b0>
 80075b6:	bf00      	nop
 80075b8:	08007a10 	.word	0x08007a10
 80075bc:	08007a16 	.word	0x08007a16
 80075c0:	08007a1a 	.word	0x08007a1a
 80075c4:	00000000 	.word	0x00000000
 80075c8:	08007327 	.word	0x08007327

080075cc <_printf_common>:
 80075cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	4691      	mov	r9, r2
 80075d2:	461f      	mov	r7, r3
 80075d4:	688a      	ldr	r2, [r1, #8]
 80075d6:	690b      	ldr	r3, [r1, #16]
 80075d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075dc:	4293      	cmp	r3, r2
 80075de:	bfb8      	it	lt
 80075e0:	4613      	movlt	r3, r2
 80075e2:	f8c9 3000 	str.w	r3, [r9]
 80075e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075ea:	4606      	mov	r6, r0
 80075ec:	460c      	mov	r4, r1
 80075ee:	b112      	cbz	r2, 80075f6 <_printf_common+0x2a>
 80075f0:	3301      	adds	r3, #1
 80075f2:	f8c9 3000 	str.w	r3, [r9]
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	0699      	lsls	r1, r3, #26
 80075fa:	bf42      	ittt	mi
 80075fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007600:	3302      	addmi	r3, #2
 8007602:	f8c9 3000 	strmi.w	r3, [r9]
 8007606:	6825      	ldr	r5, [r4, #0]
 8007608:	f015 0506 	ands.w	r5, r5, #6
 800760c:	d107      	bne.n	800761e <_printf_common+0x52>
 800760e:	f104 0a19 	add.w	sl, r4, #25
 8007612:	68e3      	ldr	r3, [r4, #12]
 8007614:	f8d9 2000 	ldr.w	r2, [r9]
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	42ab      	cmp	r3, r5
 800761c:	dc28      	bgt.n	8007670 <_printf_common+0xa4>
 800761e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007622:	6822      	ldr	r2, [r4, #0]
 8007624:	3300      	adds	r3, #0
 8007626:	bf18      	it	ne
 8007628:	2301      	movne	r3, #1
 800762a:	0692      	lsls	r2, r2, #26
 800762c:	d42d      	bmi.n	800768a <_printf_common+0xbe>
 800762e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007632:	4639      	mov	r1, r7
 8007634:	4630      	mov	r0, r6
 8007636:	47c0      	blx	r8
 8007638:	3001      	adds	r0, #1
 800763a:	d020      	beq.n	800767e <_printf_common+0xb2>
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	68e5      	ldr	r5, [r4, #12]
 8007640:	f8d9 2000 	ldr.w	r2, [r9]
 8007644:	f003 0306 	and.w	r3, r3, #6
 8007648:	2b04      	cmp	r3, #4
 800764a:	bf08      	it	eq
 800764c:	1aad      	subeq	r5, r5, r2
 800764e:	68a3      	ldr	r3, [r4, #8]
 8007650:	6922      	ldr	r2, [r4, #16]
 8007652:	bf0c      	ite	eq
 8007654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007658:	2500      	movne	r5, #0
 800765a:	4293      	cmp	r3, r2
 800765c:	bfc4      	itt	gt
 800765e:	1a9b      	subgt	r3, r3, r2
 8007660:	18ed      	addgt	r5, r5, r3
 8007662:	f04f 0900 	mov.w	r9, #0
 8007666:	341a      	adds	r4, #26
 8007668:	454d      	cmp	r5, r9
 800766a:	d11a      	bne.n	80076a2 <_printf_common+0xd6>
 800766c:	2000      	movs	r0, #0
 800766e:	e008      	b.n	8007682 <_printf_common+0xb6>
 8007670:	2301      	movs	r3, #1
 8007672:	4652      	mov	r2, sl
 8007674:	4639      	mov	r1, r7
 8007676:	4630      	mov	r0, r6
 8007678:	47c0      	blx	r8
 800767a:	3001      	adds	r0, #1
 800767c:	d103      	bne.n	8007686 <_printf_common+0xba>
 800767e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007686:	3501      	adds	r5, #1
 8007688:	e7c3      	b.n	8007612 <_printf_common+0x46>
 800768a:	18e1      	adds	r1, r4, r3
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	2030      	movs	r0, #48	; 0x30
 8007690:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007694:	4422      	add	r2, r4
 8007696:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800769a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800769e:	3302      	adds	r3, #2
 80076a0:	e7c5      	b.n	800762e <_printf_common+0x62>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4622      	mov	r2, r4
 80076a6:	4639      	mov	r1, r7
 80076a8:	4630      	mov	r0, r6
 80076aa:	47c0      	blx	r8
 80076ac:	3001      	adds	r0, #1
 80076ae:	d0e6      	beq.n	800767e <_printf_common+0xb2>
 80076b0:	f109 0901 	add.w	r9, r9, #1
 80076b4:	e7d8      	b.n	8007668 <_printf_common+0x9c>
	...

080076b8 <_printf_i>:
 80076b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80076c0:	460c      	mov	r4, r1
 80076c2:	7e09      	ldrb	r1, [r1, #24]
 80076c4:	b085      	sub	sp, #20
 80076c6:	296e      	cmp	r1, #110	; 0x6e
 80076c8:	4617      	mov	r7, r2
 80076ca:	4606      	mov	r6, r0
 80076cc:	4698      	mov	r8, r3
 80076ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076d0:	f000 80b3 	beq.w	800783a <_printf_i+0x182>
 80076d4:	d822      	bhi.n	800771c <_printf_i+0x64>
 80076d6:	2963      	cmp	r1, #99	; 0x63
 80076d8:	d036      	beq.n	8007748 <_printf_i+0x90>
 80076da:	d80a      	bhi.n	80076f2 <_printf_i+0x3a>
 80076dc:	2900      	cmp	r1, #0
 80076de:	f000 80b9 	beq.w	8007854 <_printf_i+0x19c>
 80076e2:	2958      	cmp	r1, #88	; 0x58
 80076e4:	f000 8083 	beq.w	80077ee <_printf_i+0x136>
 80076e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80076f0:	e032      	b.n	8007758 <_printf_i+0xa0>
 80076f2:	2964      	cmp	r1, #100	; 0x64
 80076f4:	d001      	beq.n	80076fa <_printf_i+0x42>
 80076f6:	2969      	cmp	r1, #105	; 0x69
 80076f8:	d1f6      	bne.n	80076e8 <_printf_i+0x30>
 80076fa:	6820      	ldr	r0, [r4, #0]
 80076fc:	6813      	ldr	r3, [r2, #0]
 80076fe:	0605      	lsls	r5, r0, #24
 8007700:	f103 0104 	add.w	r1, r3, #4
 8007704:	d52a      	bpl.n	800775c <_printf_i+0xa4>
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6011      	str	r1, [r2, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	da03      	bge.n	8007716 <_printf_i+0x5e>
 800770e:	222d      	movs	r2, #45	; 0x2d
 8007710:	425b      	negs	r3, r3
 8007712:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007716:	486f      	ldr	r0, [pc, #444]	; (80078d4 <_printf_i+0x21c>)
 8007718:	220a      	movs	r2, #10
 800771a:	e039      	b.n	8007790 <_printf_i+0xd8>
 800771c:	2973      	cmp	r1, #115	; 0x73
 800771e:	f000 809d 	beq.w	800785c <_printf_i+0x1a4>
 8007722:	d808      	bhi.n	8007736 <_printf_i+0x7e>
 8007724:	296f      	cmp	r1, #111	; 0x6f
 8007726:	d020      	beq.n	800776a <_printf_i+0xb2>
 8007728:	2970      	cmp	r1, #112	; 0x70
 800772a:	d1dd      	bne.n	80076e8 <_printf_i+0x30>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	f043 0320 	orr.w	r3, r3, #32
 8007732:	6023      	str	r3, [r4, #0]
 8007734:	e003      	b.n	800773e <_printf_i+0x86>
 8007736:	2975      	cmp	r1, #117	; 0x75
 8007738:	d017      	beq.n	800776a <_printf_i+0xb2>
 800773a:	2978      	cmp	r1, #120	; 0x78
 800773c:	d1d4      	bne.n	80076e8 <_printf_i+0x30>
 800773e:	2378      	movs	r3, #120	; 0x78
 8007740:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007744:	4864      	ldr	r0, [pc, #400]	; (80078d8 <_printf_i+0x220>)
 8007746:	e055      	b.n	80077f4 <_printf_i+0x13c>
 8007748:	6813      	ldr	r3, [r2, #0]
 800774a:	1d19      	adds	r1, r3, #4
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6011      	str	r1, [r2, #0]
 8007750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007758:	2301      	movs	r3, #1
 800775a:	e08c      	b.n	8007876 <_printf_i+0x1be>
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6011      	str	r1, [r2, #0]
 8007760:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007764:	bf18      	it	ne
 8007766:	b21b      	sxthne	r3, r3
 8007768:	e7cf      	b.n	800770a <_printf_i+0x52>
 800776a:	6813      	ldr	r3, [r2, #0]
 800776c:	6825      	ldr	r5, [r4, #0]
 800776e:	1d18      	adds	r0, r3, #4
 8007770:	6010      	str	r0, [r2, #0]
 8007772:	0628      	lsls	r0, r5, #24
 8007774:	d501      	bpl.n	800777a <_printf_i+0xc2>
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	e002      	b.n	8007780 <_printf_i+0xc8>
 800777a:	0668      	lsls	r0, r5, #25
 800777c:	d5fb      	bpl.n	8007776 <_printf_i+0xbe>
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	4854      	ldr	r0, [pc, #336]	; (80078d4 <_printf_i+0x21c>)
 8007782:	296f      	cmp	r1, #111	; 0x6f
 8007784:	bf14      	ite	ne
 8007786:	220a      	movne	r2, #10
 8007788:	2208      	moveq	r2, #8
 800778a:	2100      	movs	r1, #0
 800778c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007790:	6865      	ldr	r5, [r4, #4]
 8007792:	60a5      	str	r5, [r4, #8]
 8007794:	2d00      	cmp	r5, #0
 8007796:	f2c0 8095 	blt.w	80078c4 <_printf_i+0x20c>
 800779a:	6821      	ldr	r1, [r4, #0]
 800779c:	f021 0104 	bic.w	r1, r1, #4
 80077a0:	6021      	str	r1, [r4, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d13d      	bne.n	8007822 <_printf_i+0x16a>
 80077a6:	2d00      	cmp	r5, #0
 80077a8:	f040 808e 	bne.w	80078c8 <_printf_i+0x210>
 80077ac:	4665      	mov	r5, ip
 80077ae:	2a08      	cmp	r2, #8
 80077b0:	d10b      	bne.n	80077ca <_printf_i+0x112>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	07db      	lsls	r3, r3, #31
 80077b6:	d508      	bpl.n	80077ca <_printf_i+0x112>
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	6862      	ldr	r2, [r4, #4]
 80077bc:	429a      	cmp	r2, r3
 80077be:	bfde      	ittt	le
 80077c0:	2330      	movle	r3, #48	; 0x30
 80077c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077c6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80077ca:	ebac 0305 	sub.w	r3, ip, r5
 80077ce:	6123      	str	r3, [r4, #16]
 80077d0:	f8cd 8000 	str.w	r8, [sp]
 80077d4:	463b      	mov	r3, r7
 80077d6:	aa03      	add	r2, sp, #12
 80077d8:	4621      	mov	r1, r4
 80077da:	4630      	mov	r0, r6
 80077dc:	f7ff fef6 	bl	80075cc <_printf_common>
 80077e0:	3001      	adds	r0, #1
 80077e2:	d14d      	bne.n	8007880 <_printf_i+0x1c8>
 80077e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077e8:	b005      	add	sp, #20
 80077ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077ee:	4839      	ldr	r0, [pc, #228]	; (80078d4 <_printf_i+0x21c>)
 80077f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80077f4:	6813      	ldr	r3, [r2, #0]
 80077f6:	6821      	ldr	r1, [r4, #0]
 80077f8:	1d1d      	adds	r5, r3, #4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6015      	str	r5, [r2, #0]
 80077fe:	060a      	lsls	r2, r1, #24
 8007800:	d50b      	bpl.n	800781a <_printf_i+0x162>
 8007802:	07ca      	lsls	r2, r1, #31
 8007804:	bf44      	itt	mi
 8007806:	f041 0120 	orrmi.w	r1, r1, #32
 800780a:	6021      	strmi	r1, [r4, #0]
 800780c:	b91b      	cbnz	r3, 8007816 <_printf_i+0x15e>
 800780e:	6822      	ldr	r2, [r4, #0]
 8007810:	f022 0220 	bic.w	r2, r2, #32
 8007814:	6022      	str	r2, [r4, #0]
 8007816:	2210      	movs	r2, #16
 8007818:	e7b7      	b.n	800778a <_printf_i+0xd2>
 800781a:	064d      	lsls	r5, r1, #25
 800781c:	bf48      	it	mi
 800781e:	b29b      	uxthmi	r3, r3
 8007820:	e7ef      	b.n	8007802 <_printf_i+0x14a>
 8007822:	4665      	mov	r5, ip
 8007824:	fbb3 f1f2 	udiv	r1, r3, r2
 8007828:	fb02 3311 	mls	r3, r2, r1, r3
 800782c:	5cc3      	ldrb	r3, [r0, r3]
 800782e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007832:	460b      	mov	r3, r1
 8007834:	2900      	cmp	r1, #0
 8007836:	d1f5      	bne.n	8007824 <_printf_i+0x16c>
 8007838:	e7b9      	b.n	80077ae <_printf_i+0xf6>
 800783a:	6813      	ldr	r3, [r2, #0]
 800783c:	6825      	ldr	r5, [r4, #0]
 800783e:	6961      	ldr	r1, [r4, #20]
 8007840:	1d18      	adds	r0, r3, #4
 8007842:	6010      	str	r0, [r2, #0]
 8007844:	0628      	lsls	r0, r5, #24
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	d501      	bpl.n	800784e <_printf_i+0x196>
 800784a:	6019      	str	r1, [r3, #0]
 800784c:	e002      	b.n	8007854 <_printf_i+0x19c>
 800784e:	066a      	lsls	r2, r5, #25
 8007850:	d5fb      	bpl.n	800784a <_printf_i+0x192>
 8007852:	8019      	strh	r1, [r3, #0]
 8007854:	2300      	movs	r3, #0
 8007856:	6123      	str	r3, [r4, #16]
 8007858:	4665      	mov	r5, ip
 800785a:	e7b9      	b.n	80077d0 <_printf_i+0x118>
 800785c:	6813      	ldr	r3, [r2, #0]
 800785e:	1d19      	adds	r1, r3, #4
 8007860:	6011      	str	r1, [r2, #0]
 8007862:	681d      	ldr	r5, [r3, #0]
 8007864:	6862      	ldr	r2, [r4, #4]
 8007866:	2100      	movs	r1, #0
 8007868:	4628      	mov	r0, r5
 800786a:	f7f8 fcb1 	bl	80001d0 <memchr>
 800786e:	b108      	cbz	r0, 8007874 <_printf_i+0x1bc>
 8007870:	1b40      	subs	r0, r0, r5
 8007872:	6060      	str	r0, [r4, #4]
 8007874:	6863      	ldr	r3, [r4, #4]
 8007876:	6123      	str	r3, [r4, #16]
 8007878:	2300      	movs	r3, #0
 800787a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800787e:	e7a7      	b.n	80077d0 <_printf_i+0x118>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	462a      	mov	r2, r5
 8007884:	4639      	mov	r1, r7
 8007886:	4630      	mov	r0, r6
 8007888:	47c0      	blx	r8
 800788a:	3001      	adds	r0, #1
 800788c:	d0aa      	beq.n	80077e4 <_printf_i+0x12c>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	079b      	lsls	r3, r3, #30
 8007892:	d413      	bmi.n	80078bc <_printf_i+0x204>
 8007894:	68e0      	ldr	r0, [r4, #12]
 8007896:	9b03      	ldr	r3, [sp, #12]
 8007898:	4298      	cmp	r0, r3
 800789a:	bfb8      	it	lt
 800789c:	4618      	movlt	r0, r3
 800789e:	e7a3      	b.n	80077e8 <_printf_i+0x130>
 80078a0:	2301      	movs	r3, #1
 80078a2:	464a      	mov	r2, r9
 80078a4:	4639      	mov	r1, r7
 80078a6:	4630      	mov	r0, r6
 80078a8:	47c0      	blx	r8
 80078aa:	3001      	adds	r0, #1
 80078ac:	d09a      	beq.n	80077e4 <_printf_i+0x12c>
 80078ae:	3501      	adds	r5, #1
 80078b0:	68e3      	ldr	r3, [r4, #12]
 80078b2:	9a03      	ldr	r2, [sp, #12]
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	42ab      	cmp	r3, r5
 80078b8:	dcf2      	bgt.n	80078a0 <_printf_i+0x1e8>
 80078ba:	e7eb      	b.n	8007894 <_printf_i+0x1dc>
 80078bc:	2500      	movs	r5, #0
 80078be:	f104 0919 	add.w	r9, r4, #25
 80078c2:	e7f5      	b.n	80078b0 <_printf_i+0x1f8>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1ac      	bne.n	8007822 <_printf_i+0x16a>
 80078c8:	7803      	ldrb	r3, [r0, #0]
 80078ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078d2:	e76c      	b.n	80077ae <_printf_i+0xf6>
 80078d4:	08007a21 	.word	0x08007a21
 80078d8:	08007a32 	.word	0x08007a32

080078dc <memcpy>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	1e43      	subs	r3, r0, #1
 80078e0:	440a      	add	r2, r1
 80078e2:	4291      	cmp	r1, r2
 80078e4:	d100      	bne.n	80078e8 <memcpy+0xc>
 80078e6:	bd10      	pop	{r4, pc}
 80078e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078f0:	e7f7      	b.n	80078e2 <memcpy+0x6>

080078f2 <memmove>:
 80078f2:	4288      	cmp	r0, r1
 80078f4:	b510      	push	{r4, lr}
 80078f6:	eb01 0302 	add.w	r3, r1, r2
 80078fa:	d807      	bhi.n	800790c <memmove+0x1a>
 80078fc:	1e42      	subs	r2, r0, #1
 80078fe:	4299      	cmp	r1, r3
 8007900:	d00a      	beq.n	8007918 <memmove+0x26>
 8007902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007906:	f802 4f01 	strb.w	r4, [r2, #1]!
 800790a:	e7f8      	b.n	80078fe <memmove+0xc>
 800790c:	4283      	cmp	r3, r0
 800790e:	d9f5      	bls.n	80078fc <memmove+0xa>
 8007910:	1881      	adds	r1, r0, r2
 8007912:	1ad2      	subs	r2, r2, r3
 8007914:	42d3      	cmn	r3, r2
 8007916:	d100      	bne.n	800791a <memmove+0x28>
 8007918:	bd10      	pop	{r4, pc}
 800791a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800791e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007922:	e7f7      	b.n	8007914 <memmove+0x22>

08007924 <_realloc_r>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	4607      	mov	r7, r0
 8007928:	4614      	mov	r4, r2
 800792a:	460e      	mov	r6, r1
 800792c:	b921      	cbnz	r1, 8007938 <_realloc_r+0x14>
 800792e:	4611      	mov	r1, r2
 8007930:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007934:	f7ff bc56 	b.w	80071e4 <_malloc_r>
 8007938:	b922      	cbnz	r2, 8007944 <_realloc_r+0x20>
 800793a:	f7ff fc05 	bl	8007148 <_free_r>
 800793e:	4625      	mov	r5, r4
 8007940:	4628      	mov	r0, r5
 8007942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007944:	f000 f814 	bl	8007970 <_malloc_usable_size_r>
 8007948:	42a0      	cmp	r0, r4
 800794a:	d20f      	bcs.n	800796c <_realloc_r+0x48>
 800794c:	4621      	mov	r1, r4
 800794e:	4638      	mov	r0, r7
 8007950:	f7ff fc48 	bl	80071e4 <_malloc_r>
 8007954:	4605      	mov	r5, r0
 8007956:	2800      	cmp	r0, #0
 8007958:	d0f2      	beq.n	8007940 <_realloc_r+0x1c>
 800795a:	4631      	mov	r1, r6
 800795c:	4622      	mov	r2, r4
 800795e:	f7ff ffbd 	bl	80078dc <memcpy>
 8007962:	4631      	mov	r1, r6
 8007964:	4638      	mov	r0, r7
 8007966:	f7ff fbef 	bl	8007148 <_free_r>
 800796a:	e7e9      	b.n	8007940 <_realloc_r+0x1c>
 800796c:	4635      	mov	r5, r6
 800796e:	e7e7      	b.n	8007940 <_realloc_r+0x1c>

08007970 <_malloc_usable_size_r>:
 8007970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007974:	1f18      	subs	r0, r3, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	bfbc      	itt	lt
 800797a:	580b      	ldrlt	r3, [r1, r0]
 800797c:	18c0      	addlt	r0, r0, r3
 800797e:	4770      	bx	lr

08007980 <_init>:
 8007980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007982:	bf00      	nop
 8007984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007986:	bc08      	pop	{r3}
 8007988:	469e      	mov	lr, r3
 800798a:	4770      	bx	lr

0800798c <_fini>:
 800798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798e:	bf00      	nop
 8007990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007992:	bc08      	pop	{r3}
 8007994:	469e      	mov	lr, r3
 8007996:	4770      	bx	lr
