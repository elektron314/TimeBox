
TimeBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08004eb8  08004eb8  00014eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005030  08005030  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005038  08005038  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08005040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001f0  08005230  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08005230  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b776  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c84  00000000  00000000  0002b996  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0002d620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  0002df78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002158f  00000000  00000000  0002e800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008905  00000000  00000000  0004fd8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9a00  00000000  00000000  00058694  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122094  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002af4  00000000  00000000  00122110  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ea0 	.word	0x08004ea0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08004ea0 	.word	0x08004ea0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2uiz>:
 80005f8:	004a      	lsls	r2, r1, #1
 80005fa:	d211      	bcs.n	8000620 <__aeabi_d2uiz+0x28>
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d211      	bcs.n	8000626 <__aeabi_d2uiz+0x2e>
 8000602:	d50d      	bpl.n	8000620 <__aeabi_d2uiz+0x28>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d40e      	bmi.n	800062c <__aeabi_d2uiz+0x34>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	fa23 f002 	lsr.w	r0, r3, r2
 800061e:	4770      	bx	lr
 8000620:	f04f 0000 	mov.w	r0, #0
 8000624:	4770      	bx	lr
 8000626:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800062a:	d102      	bne.n	8000632 <__aeabi_d2uiz+0x3a>
 800062c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000648:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800064c:	f000 b972 	b.w	8000934 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	4688      	mov	r8, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14b      	bne.n	800070e <__udivmoddi4+0xa6>
 8000676:	428a      	cmp	r2, r1
 8000678:	4615      	mov	r5, r2
 800067a:	d967      	bls.n	800074c <__udivmoddi4+0xe4>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0720 	rsb	r7, r2, #32
 8000686:	fa01 f302 	lsl.w	r3, r1, r2
 800068a:	fa20 f707 	lsr.w	r7, r0, r7
 800068e:	4095      	lsls	r5, r2
 8000690:	ea47 0803 	orr.w	r8, r7, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbb8 f7fe 	udiv	r7, r8, lr
 80006a0:	fa1f fc85 	uxth.w	ip, r5
 80006a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006ac:	fb07 f10c 	mul.w	r1, r7, ip
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18eb      	adds	r3, r5, r3
 80006b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80006ba:	f080 811b 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8118 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006c4:	3f02      	subs	r7, #2
 80006c6:	442b      	add	r3, r5
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006dc:	45a4      	cmp	ip, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	192c      	adds	r4, r5, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006e6:	f080 8107 	bcs.w	80008f8 <__udivmoddi4+0x290>
 80006ea:	45a4      	cmp	ip, r4
 80006ec:	f240 8104 	bls.w	80008f8 <__udivmoddi4+0x290>
 80006f0:	3802      	subs	r0, #2
 80006f2:	442c      	add	r4, r5
 80006f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006f8:	eba4 040c 	sub.w	r4, r4, ip
 80006fc:	2700      	movs	r7, #0
 80006fe:	b11e      	cbz	r6, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c6 4300 	strd	r4, r3, [r6]
 8000708:	4639      	mov	r1, r7
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d909      	bls.n	8000726 <__udivmoddi4+0xbe>
 8000712:	2e00      	cmp	r6, #0
 8000714:	f000 80eb 	beq.w	80008ee <__udivmoddi4+0x286>
 8000718:	2700      	movs	r7, #0
 800071a:	e9c6 0100 	strd	r0, r1, [r6]
 800071e:	4638      	mov	r0, r7
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	fab3 f783 	clz	r7, r3
 800072a:	2f00      	cmp	r7, #0
 800072c:	d147      	bne.n	80007be <__udivmoddi4+0x156>
 800072e:	428b      	cmp	r3, r1
 8000730:	d302      	bcc.n	8000738 <__udivmoddi4+0xd0>
 8000732:	4282      	cmp	r2, r0
 8000734:	f200 80fa 	bhi.w	800092c <__udivmoddi4+0x2c4>
 8000738:	1a84      	subs	r4, r0, r2
 800073a:	eb61 0303 	sbc.w	r3, r1, r3
 800073e:	2001      	movs	r0, #1
 8000740:	4698      	mov	r8, r3
 8000742:	2e00      	cmp	r6, #0
 8000744:	d0e0      	beq.n	8000708 <__udivmoddi4+0xa0>
 8000746:	e9c6 4800 	strd	r4, r8, [r6]
 800074a:	e7dd      	b.n	8000708 <__udivmoddi4+0xa0>
 800074c:	b902      	cbnz	r2, 8000750 <__udivmoddi4+0xe8>
 800074e:	deff      	udf	#255	; 0xff
 8000750:	fab2 f282 	clz	r2, r2
 8000754:	2a00      	cmp	r2, #0
 8000756:	f040 808f 	bne.w	8000878 <__udivmoddi4+0x210>
 800075a:	1b49      	subs	r1, r1, r5
 800075c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000760:	fa1f f885 	uxth.w	r8, r5
 8000764:	2701      	movs	r7, #1
 8000766:	fbb1 fcfe 	udiv	ip, r1, lr
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000770:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000774:	fb08 f10c 	mul.w	r1, r8, ip
 8000778:	4299      	cmp	r1, r3
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x124>
 800077c:	18eb      	adds	r3, r5, r3
 800077e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x122>
 8000784:	4299      	cmp	r1, r3
 8000786:	f200 80cd 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 800078a:	4684      	mov	ip, r0
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	b2a3      	uxth	r3, r4
 8000790:	fbb1 f0fe 	udiv	r0, r1, lr
 8000794:	fb0e 1410 	mls	r4, lr, r0, r1
 8000798:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800079c:	fb08 f800 	mul.w	r8, r8, r0
 80007a0:	45a0      	cmp	r8, r4
 80007a2:	d907      	bls.n	80007b4 <__udivmoddi4+0x14c>
 80007a4:	192c      	adds	r4, r5, r4
 80007a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x14a>
 80007ac:	45a0      	cmp	r8, r4
 80007ae:	f200 80b6 	bhi.w	800091e <__udivmoddi4+0x2b6>
 80007b2:	4618      	mov	r0, r3
 80007b4:	eba4 0408 	sub.w	r4, r4, r8
 80007b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007bc:	e79f      	b.n	80006fe <__udivmoddi4+0x96>
 80007be:	f1c7 0c20 	rsb	ip, r7, #32
 80007c2:	40bb      	lsls	r3, r7
 80007c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007cc:	fa01 f407 	lsl.w	r4, r1, r7
 80007d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007dc:	4325      	orrs	r5, r4
 80007de:	fbb3 f9f8 	udiv	r9, r3, r8
 80007e2:	0c2c      	lsrs	r4, r5, #16
 80007e4:	fb08 3319 	mls	r3, r8, r9, r3
 80007e8:	fa1f fa8e 	uxth.w	sl, lr
 80007ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007f0:	fb09 f40a 	mul.w	r4, r9, sl
 80007f4:	429c      	cmp	r4, r3
 80007f6:	fa02 f207 	lsl.w	r2, r2, r7
 80007fa:	fa00 f107 	lsl.w	r1, r0, r7
 80007fe:	d90b      	bls.n	8000818 <__udivmoddi4+0x1b0>
 8000800:	eb1e 0303 	adds.w	r3, lr, r3
 8000804:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000808:	f080 8087 	bcs.w	800091a <__udivmoddi4+0x2b2>
 800080c:	429c      	cmp	r4, r3
 800080e:	f240 8084 	bls.w	800091a <__udivmoddi4+0x2b2>
 8000812:	f1a9 0902 	sub.w	r9, r9, #2
 8000816:	4473      	add	r3, lr
 8000818:	1b1b      	subs	r3, r3, r4
 800081a:	b2ad      	uxth	r5, r5
 800081c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000820:	fb08 3310 	mls	r3, r8, r0, r3
 8000824:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000828:	fb00 fa0a 	mul.w	sl, r0, sl
 800082c:	45a2      	cmp	sl, r4
 800082e:	d908      	bls.n	8000842 <__udivmoddi4+0x1da>
 8000830:	eb1e 0404 	adds.w	r4, lr, r4
 8000834:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000838:	d26b      	bcs.n	8000912 <__udivmoddi4+0x2aa>
 800083a:	45a2      	cmp	sl, r4
 800083c:	d969      	bls.n	8000912 <__udivmoddi4+0x2aa>
 800083e:	3802      	subs	r0, #2
 8000840:	4474      	add	r4, lr
 8000842:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000846:	fba0 8902 	umull	r8, r9, r0, r2
 800084a:	eba4 040a 	sub.w	r4, r4, sl
 800084e:	454c      	cmp	r4, r9
 8000850:	46c2      	mov	sl, r8
 8000852:	464b      	mov	r3, r9
 8000854:	d354      	bcc.n	8000900 <__udivmoddi4+0x298>
 8000856:	d051      	beq.n	80008fc <__udivmoddi4+0x294>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d069      	beq.n	8000930 <__udivmoddi4+0x2c8>
 800085c:	ebb1 050a 	subs.w	r5, r1, sl
 8000860:	eb64 0403 	sbc.w	r4, r4, r3
 8000864:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000868:	40fd      	lsrs	r5, r7
 800086a:	40fc      	lsrs	r4, r7
 800086c:	ea4c 0505 	orr.w	r5, ip, r5
 8000870:	e9c6 5400 	strd	r5, r4, [r6]
 8000874:	2700      	movs	r7, #0
 8000876:	e747      	b.n	8000708 <__udivmoddi4+0xa0>
 8000878:	f1c2 0320 	rsb	r3, r2, #32
 800087c:	fa20 f703 	lsr.w	r7, r0, r3
 8000880:	4095      	lsls	r5, r2
 8000882:	fa01 f002 	lsl.w	r0, r1, r2
 8000886:	fa21 f303 	lsr.w	r3, r1, r3
 800088a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800088e:	4338      	orrs	r0, r7
 8000890:	0c01      	lsrs	r1, r0, #16
 8000892:	fbb3 f7fe 	udiv	r7, r3, lr
 8000896:	fa1f f885 	uxth.w	r8, r5
 800089a:	fb0e 3317 	mls	r3, lr, r7, r3
 800089e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a2:	fb07 f308 	mul.w	r3, r7, r8
 80008a6:	428b      	cmp	r3, r1
 80008a8:	fa04 f402 	lsl.w	r4, r4, r2
 80008ac:	d907      	bls.n	80008be <__udivmoddi4+0x256>
 80008ae:	1869      	adds	r1, r5, r1
 80008b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80008b4:	d22f      	bcs.n	8000916 <__udivmoddi4+0x2ae>
 80008b6:	428b      	cmp	r3, r1
 80008b8:	d92d      	bls.n	8000916 <__udivmoddi4+0x2ae>
 80008ba:	3f02      	subs	r7, #2
 80008bc:	4429      	add	r1, r5
 80008be:	1acb      	subs	r3, r1, r3
 80008c0:	b281      	uxth	r1, r0
 80008c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ce:	fb00 f308 	mul.w	r3, r0, r8
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d907      	bls.n	80008e6 <__udivmoddi4+0x27e>
 80008d6:	1869      	adds	r1, r5, r1
 80008d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80008dc:	d217      	bcs.n	800090e <__udivmoddi4+0x2a6>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d915      	bls.n	800090e <__udivmoddi4+0x2a6>
 80008e2:	3802      	subs	r0, #2
 80008e4:	4429      	add	r1, r5
 80008e6:	1ac9      	subs	r1, r1, r3
 80008e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008ec:	e73b      	b.n	8000766 <__udivmoddi4+0xfe>
 80008ee:	4637      	mov	r7, r6
 80008f0:	4630      	mov	r0, r6
 80008f2:	e709      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f4:	4607      	mov	r7, r0
 80008f6:	e6e7      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f8:	4618      	mov	r0, r3
 80008fa:	e6fb      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008fc:	4541      	cmp	r1, r8
 80008fe:	d2ab      	bcs.n	8000858 <__udivmoddi4+0x1f0>
 8000900:	ebb8 0a02 	subs.w	sl, r8, r2
 8000904:	eb69 020e 	sbc.w	r2, r9, lr
 8000908:	3801      	subs	r0, #1
 800090a:	4613      	mov	r3, r2
 800090c:	e7a4      	b.n	8000858 <__udivmoddi4+0x1f0>
 800090e:	4660      	mov	r0, ip
 8000910:	e7e9      	b.n	80008e6 <__udivmoddi4+0x27e>
 8000912:	4618      	mov	r0, r3
 8000914:	e795      	b.n	8000842 <__udivmoddi4+0x1da>
 8000916:	4667      	mov	r7, ip
 8000918:	e7d1      	b.n	80008be <__udivmoddi4+0x256>
 800091a:	4681      	mov	r9, r0
 800091c:	e77c      	b.n	8000818 <__udivmoddi4+0x1b0>
 800091e:	3802      	subs	r0, #2
 8000920:	442c      	add	r4, r5
 8000922:	e747      	b.n	80007b4 <__udivmoddi4+0x14c>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	442b      	add	r3, r5
 800092a:	e72f      	b.n	800078c <__udivmoddi4+0x124>
 800092c:	4638      	mov	r0, r7
 800092e:	e708      	b.n	8000742 <__udivmoddi4+0xda>
 8000930:	4637      	mov	r7, r6
 8000932:	e6e9      	b.n	8000708 <__udivmoddi4+0xa0>

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <TurnHexIntoDec>:
/* USER CODE BEGIN 0 */

//Time is storing in format that being in Hex visually looks like the real time in decimals
//So this function translate this format into real decimal number of time digits
uint8_t TurnHexIntoDec(uint8_t hex)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	return ((hex & 0x000F) + ((hex >> 4) & 0x000F)*10);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	f003 030f 	and.w	r3, r3, #15
 8000948:	b2da      	uxtb	r2, r3
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	091b      	lsrs	r3, r3, #4
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	0089      	lsls	r1, r1, #2
 8000954:	440b      	add	r3, r1
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4413      	add	r3, r2
 800095c:	b2db      	uxtb	r3, r3
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <TurnDecIntoHex>:

uint8_t TurnDecIntoHex(uint8_t dec)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	return ((((uint8_t)(floor(dec/10))) << 4) + dec%10);
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a11      	ldr	r2, [pc, #68]	; (80009c0 <TurnDecIntoHex+0x54>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	08db      	lsrs	r3, r3, #3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fdce 	bl	8000524 <__aeabi_i2d>
 8000988:	4603      	mov	r3, r0
 800098a:	460c      	mov	r4, r1
 800098c:	4618      	mov	r0, r3
 800098e:	4621      	mov	r1, r4
 8000990:	f7ff fe32 	bl	80005f8 <__aeabi_d2uiz>
 8000994:	4603      	mov	r3, r0
 8000996:	b2db      	uxtb	r3, r3
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	b2d8      	uxtb	r0, r3
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <TurnDecIntoHex+0x54>)
 80009a0:	fba3 1302 	umull	r1, r3, r3, r2
 80009a4:	08d9      	lsrs	r1, r3, #3
 80009a6:	460b      	mov	r3, r1
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	440b      	add	r3, r1
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4403      	add	r3, r0
 80009b4:	b2db      	uxtb	r3, r3
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd90      	pop	{r4, r7, pc}
 80009be:	bf00      	nop
 80009c0:	cccccccd 	.word	0xcccccccd

080009c4 <HappyToggling>:

void HappyToggling(uint8_t longetivity)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
	uint8_t TogglingDelay = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	73fb      	strb	r3, [r7, #15]
	for (TogglingDelay = 0; TogglingDelay < longetivity; TogglingDelay++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	73fb      	strb	r3, [r7, #15]
 80009d6:	e00b      	b.n	80009f0 <HappyToggling+0x2c>
	{
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80009d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <HappyToggling+0x3c>)
 80009de:	f001 fa72 	bl	8001ec6 <HAL_GPIO_TogglePin>
	  HAL_Delay(TogglingDelay);
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 ff35 	bl	8001854 <HAL_Delay>
	for (TogglingDelay = 0; TogglingDelay < longetivity; TogglingDelay++)
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	3301      	adds	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	7bfa      	ldrb	r2, [r7, #15]
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d3ef      	bcc.n	80009d8 <HappyToggling+0x14>
	}
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40021400 	.word	0x40021400

08000a04 <SetTime>:

void SetTime(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	/** Initialize RTC and set the Time and Date*/
	sTime.Hours = 0x23;
 8000a0a:	2323      	movs	r3, #35	; 0x23
 8000a0c:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x25;
 8000a0e:	2325      	movs	r3, #37	; 0x25
 8000a10:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2201      	movs	r2, #1
 8000a22:	4619      	mov	r1, r3
 8000a24:	4812      	ldr	r0, [pc, #72]	; (8000a70 <SetTime+0x6c>)
 8000a26:	f002 f893 	bl	8002b50 <HAL_RTC_SetTime>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SetTime+0x30>
	{
		Error_Handler();
 8000a30:	f000 fc00 	bl	8001234 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000a34:	2304      	movs	r3, #4
 8000a36:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_FEBRUARY;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x25;
 8000a3c:	2325      	movs	r3, #37	; 0x25
 8000a3e:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x21;
 8000a40:	2321      	movs	r3, #33	; 0x21
 8000a42:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	2201      	movs	r2, #1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <SetTime+0x6c>)
 8000a4c:	f002 f99b 	bl	8002d86 <HAL_RTC_SetDate>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SetTime+0x56>
	{
		Error_Handler();
 8000a56:	f000 fbed 	bl	8001234 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000a5a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <SetTime+0x6c>)
 8000a62:	f002 fd4f 	bl	8003504 <HAL_RTCEx_BKUPWrite>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200002ac 	.word	0x200002ac

08000a74 <SetAlarmFunc>:

void SetAlarmFunc(uint8_t SetInHours, uint8_t SetInMinutes, uint8_t SetInDate, uint8_t SetInSeconds)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b08d      	sub	sp, #52	; 0x34
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4608      	mov	r0, r1
 8000a7e:	4611      	mov	r1, r2
 8000a80:	461a      	mov	r2, r3
 8000a82:	4623      	mov	r3, r4
 8000a84:	71fb      	strb	r3, [r7, #7]
 8000a86:	4603      	mov	r3, r0
 8000a88:	71bb      	strb	r3, [r7, #6]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	717b      	strb	r3, [r7, #5]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	713b      	strb	r3, [r7, #4]
	RTC_AlarmTypeDef sAlarm;

	sAlarm.AlarmTime.Hours = TurnDecIntoHex(SetInHours);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff69 	bl	800096c <TurnDecIntoHex>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = TurnDecIntoHex(SetInMinutes);
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff63 	bl	800096c <TurnDecIntoHex>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = TurnDecIntoHex(SetInSeconds);
 8000aaa:	793b      	ldrb	r3, [r7, #4]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5d 	bl	800096c <TurnDecIntoHex>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = TurnDecIntoHex(SetInDate);
 8000ace:	797b      	ldrb	r3, [r7, #5]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff4b 	bl	800096c <TurnDecIntoHex>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8000adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <SetAlarmFunc+0x90>)
 8000aec:	f002 fa42 	bl	8002f74 <HAL_RTC_SetAlarm_IT>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SetAlarmFunc+0x86>
	{
	Error_Handler();
 8000af6:	f000 fb9d 	bl	8001234 <Error_Handler>
	}
}
 8000afa:	bf00      	nop
 8000afc:	3734      	adds	r7, #52	; 0x34
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd90      	pop	{r4, r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200002ac 	.word	0x200002ac

08000b08 <GetTimeDate>:

void GetTimeDate(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af02      	add	r7, sp, #8
//	RTC_DateTypeDef gDate;
//	RTC_TimeTypeDef gTime;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4913      	ldr	r1, [pc, #76]	; (8000b60 <GetTimeDate+0x58>)
 8000b12:	4814      	ldr	r0, [pc, #80]	; (8000b64 <GetTimeDate+0x5c>)
 8000b14:	f002 f8d9 	bl	8002cca <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4913      	ldr	r1, [pc, #76]	; (8000b68 <GetTimeDate+0x60>)
 8000b1c:	4811      	ldr	r0, [pc, #68]	; (8000b64 <GetTimeDate+0x5c>)
 8000b1e:	f002 f9d9 	bl	8002ed4 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	sprintf((char*)time,"%02x:%02x:%02x",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <GetTimeDate+0x58>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <GetTimeDate+0x58>)
 8000b2a:	785b      	ldrb	r3, [r3, #1]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <GetTimeDate+0x58>)
 8000b30:	789b      	ldrb	r3, [r3, #2]
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	460b      	mov	r3, r1
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <GetTimeDate+0x64>)
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <GetTimeDate+0x68>)
 8000b3a:	f003 fd0b 	bl	8004554 <siprintf>

	/* Display date Format: yy-mm-dd */
	sprintf((char*)date,"%02x-%02x-%02x",gDate.Year, gDate.Month, gDate.Date);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <GetTimeDate+0x60>)
 8000b40:	78db      	ldrb	r3, [r3, #3]
 8000b42:	461a      	mov	r2, r3
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <GetTimeDate+0x60>)
 8000b46:	785b      	ldrb	r3, [r3, #1]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <GetTimeDate+0x60>)
 8000b4c:	789b      	ldrb	r3, [r3, #2]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	460b      	mov	r3, r1
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <GetTimeDate+0x6c>)
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <GetTimeDate+0x70>)
 8000b56:	f003 fcfd 	bl	8004554 <siprintf>
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000254 	.word	0x20000254
 8000b64:	200002ac 	.word	0x200002ac
 8000b68:	2000021c 	.word	0x2000021c
 8000b6c:	08004eb8 	.word	0x08004eb8
 8000b70:	200002ec 	.word	0x200002ec
 8000b74:	08004ec8 	.word	0x08004ec8
 8000b78:	20000304 	.word	0x20000304

08000b7c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	alarm = 1;
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	2000024c 	.word	0x2000024c

08000b9c <IsAlarmSetBeforeNow>:

uint8_t IsAlarmSetBeforeNow(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	GetTimeDate();
 8000ba0:	f7ff ffb2 	bl	8000b08 <GetTimeDate>
	HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000baa:	4924      	ldr	r1, [pc, #144]	; (8000c3c <IsAlarmSetBeforeNow+0xa0>)
 8000bac:	4824      	ldr	r0, [pc, #144]	; (8000c40 <IsAlarmSetBeforeNow+0xa4>)
 8000bae:	f002 fb19 	bl	80031e4 <HAL_RTC_GetAlarm>
	if (gAlarm.AlarmTime.Seconds < gDate.Month)
 8000bb2:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <IsAlarmSetBeforeNow+0xa0>)
 8000bb4:	789a      	ldrb	r2, [r3, #2]
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <IsAlarmSetBeforeNow+0xa8>)
 8000bb8:	785b      	ldrb	r3, [r3, #1]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d201      	bcs.n	8000bc2 <IsAlarmSetBeforeNow+0x26>
	{
		return 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e03a      	b.n	8000c38 <IsAlarmSetBeforeNow+0x9c>
	} else if (gAlarm.AlarmTime.Seconds > gDate.Month)
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <IsAlarmSetBeforeNow+0xa0>)
 8000bc4:	789a      	ldrb	r2, [r3, #2]
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <IsAlarmSetBeforeNow+0xa8>)
 8000bc8:	785b      	ldrb	r3, [r3, #1]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d901      	bls.n	8000bd2 <IsAlarmSetBeforeNow+0x36>
	{
		return 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e032      	b.n	8000c38 <IsAlarmSetBeforeNow+0x9c>
	} else
	{
		if (gAlarm.AlarmDateWeekDay < gDate.Date)
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <IsAlarmSetBeforeNow+0xa0>)
 8000bd4:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <IsAlarmSetBeforeNow+0xa8>)
 8000bda:	789b      	ldrb	r3, [r3, #2]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d201      	bcs.n	8000be4 <IsAlarmSetBeforeNow+0x48>
		{
			return 1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e029      	b.n	8000c38 <IsAlarmSetBeforeNow+0x9c>
		} else if (gAlarm.AlarmDateWeekDay > gDate.Date)
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <IsAlarmSetBeforeNow+0xa0>)
 8000be6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <IsAlarmSetBeforeNow+0xa8>)
 8000bec:	789b      	ldrb	r3, [r3, #2]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d901      	bls.n	8000bf6 <IsAlarmSetBeforeNow+0x5a>
		{
			return 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e020      	b.n	8000c38 <IsAlarmSetBeforeNow+0x9c>
		} else
		{
			if (gAlarm.AlarmTime.Hours < gTime.Hours)
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <IsAlarmSetBeforeNow+0xa0>)
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <IsAlarmSetBeforeNow+0xac>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d201      	bcs.n	8000c06 <IsAlarmSetBeforeNow+0x6a>
			{
				return 1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e018      	b.n	8000c38 <IsAlarmSetBeforeNow+0x9c>
			} else if (gAlarm.AlarmTime.Hours > gTime.Hours)
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <IsAlarmSetBeforeNow+0xa0>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <IsAlarmSetBeforeNow+0xac>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d901      	bls.n	8000c16 <IsAlarmSetBeforeNow+0x7a>
			{
				return 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e010      	b.n	8000c38 <IsAlarmSetBeforeNow+0x9c>
			} else
			{
				if (gAlarm.AlarmTime.Minutes < gTime.Minutes)
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <IsAlarmSetBeforeNow+0xa0>)
 8000c18:	785a      	ldrb	r2, [r3, #1]
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <IsAlarmSetBeforeNow+0xac>)
 8000c1c:	785b      	ldrb	r3, [r3, #1]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d201      	bcs.n	8000c26 <IsAlarmSetBeforeNow+0x8a>
				{
					return 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e008      	b.n	8000c38 <IsAlarmSetBeforeNow+0x9c>
				} else if (gAlarm.AlarmTime.Minutes > gTime.Minutes)
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <IsAlarmSetBeforeNow+0xa0>)
 8000c28:	785a      	ldrb	r2, [r3, #1]
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <IsAlarmSetBeforeNow+0xac>)
 8000c2c:	785b      	ldrb	r3, [r3, #1]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d901      	bls.n	8000c36 <IsAlarmSetBeforeNow+0x9a>
				{
					return 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <IsAlarmSetBeforeNow+0x9c>
				} else
				{
					return 1;
 8000c36:	2301      	movs	r3, #1
				}
			}
		}
	}
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000224 	.word	0x20000224
 8000c40:	200002ac 	.word	0x200002ac
 8000c44:	2000021c 	.word	0x2000021c
 8000c48:	20000254 	.word	0x20000254

08000c4c <Rewind5Sec>:

void Rewind5Sec(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
	if (K0isPressed)
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <Rewind5Sec+0x7c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d031      	beq.n	8000cbe <Rewind5Sec+0x72>
	{
		RTC_TimeTypeDef gTime;

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481a      	ldr	r0, [pc, #104]	; (8000ccc <Rewind5Sec+0x80>)
 8000c62:	f002 f832 	bl	8002cca <HAL_RTC_GetTime>
		gTime.Seconds = TurnDecIntoHex(TurnHexIntoDec(gTime.Seconds)-5);
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe65 	bl	8000938 <TurnHexIntoDec>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	3b05      	subs	r3, #5
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fe79 	bl	800096c <TurnDecIntoHex>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71bb      	strb	r3, [r7, #6]
		gTime.Hours = TurnDecIntoHex(TurnHexIntoDec(gTime.Hours)-1);
 8000c7e:	793b      	ldrb	r3, [r7, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fe59 	bl	8000938 <TurnHexIntoDec>
 8000c86:	4603      	mov	r3, r0
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fe6d 	bl	800096c <TurnDecIntoHex>
 8000c92:	4603      	mov	r3, r0
 8000c94:	713b      	strb	r3, [r7, #4]

		if (HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <Rewind5Sec+0x80>)
 8000c9e:	f001 ff57 	bl	8002b50 <HAL_RTC_SetTime>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <Rewind5Sec+0x60>
		{
		  Error_Handler();
 8000ca8:	f000 fac4 	bl	8001234 <Error_Handler>
		}

		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000cac:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <Rewind5Sec+0x80>)
 8000cb4:	f002 fc26 	bl	8003504 <HAL_RTCEx_BKUPWrite>

		K0isPressed = 0;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <Rewind5Sec+0x7c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
	}
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200002a8 	.word	0x200002a8
 8000ccc:	200002ac 	.word	0x200002ac

08000cd0 <Forwardd5Sec>:

void Forwardd5Sec(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
	if (K1isPressed)
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <Forwardd5Sec+0x7c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d031      	beq.n	8000d42 <Forwardd5Sec+0x72>
	{
		RTC_TimeTypeDef gTime;

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	481a      	ldr	r0, [pc, #104]	; (8000d50 <Forwardd5Sec+0x80>)
 8000ce6:	f001 fff0 	bl	8002cca <HAL_RTC_GetTime>
		gTime.Seconds = TurnDecIntoHex(TurnHexIntoDec(gTime.Seconds)+5);
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fe23 	bl	8000938 <TurnHexIntoDec>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	3305      	adds	r3, #5
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe37 	bl	800096c <TurnDecIntoHex>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71bb      	strb	r3, [r7, #6]
		gTime.Hours = TurnDecIntoHex(TurnHexIntoDec(gTime.Hours)-1);
 8000d02:	793b      	ldrb	r3, [r7, #4]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fe17 	bl	8000938 <TurnHexIntoDec>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fe2b 	bl	800096c <TurnDecIntoHex>
 8000d16:	4603      	mov	r3, r0
 8000d18:	713b      	strb	r3, [r7, #4]

		if (HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480b      	ldr	r0, [pc, #44]	; (8000d50 <Forwardd5Sec+0x80>)
 8000d22:	f001 ff15 	bl	8002b50 <HAL_RTC_SetTime>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <Forwardd5Sec+0x60>
		{
		  Error_Handler();
 8000d2c:	f000 fa82 	bl	8001234 <Error_Handler>
		}

		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000d30:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000d34:	2101      	movs	r1, #1
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <Forwardd5Sec+0x80>)
 8000d38:	f002 fbe4 	bl	8003504 <HAL_RTCEx_BKUPWrite>
		K1isPressed = 0;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <Forwardd5Sec+0x7c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
	}
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200002a9 	.word	0x200002a9
 8000d50:	200002ac 	.word	0x200002ac

08000d54 <ToDoOnAlarm>:

void ToDoOnAlarm (void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	Alarmed = 1;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <ToDoOnAlarm+0x1c>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
	AlarmSetFlag = 0;
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <ToDoOnAlarm+0x20>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
	HappyToggling(100);
 8000d64:	2064      	movs	r0, #100	; 0x64
 8000d66:	f7ff fe2d 	bl	80009c4 <HappyToggling>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000250 	.word	0x20000250
 8000d74:	20000220 	.word	0x20000220

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f000 fcf7 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d82:	f000 f8dd 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f000 f9a1 	bl	80010cc <MX_GPIO_Init>
  MX_RTC_Init();
 8000d8a:	f000 f94f 	bl	800102c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000d8e:	f000 f973 	bl	8001078 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000d92:	2101      	movs	r1, #1
 8000d94:	4855      	ldr	r0, [pc, #340]	; (8000eec <main+0x174>)
 8000d96:	f002 fbcf 	bl	8003538 <HAL_RTCEx_BKUPRead>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d001      	beq.n	8000da8 <main+0x30>
  {
	  SetTime();
 8000da4:	f7ff fe2e 	bl	8000a04 <SetTime>
  }

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000da8:	4b51      	ldr	r3, [pc, #324]	; (8000ef0 <main+0x178>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	4b50      	ldr	r3, [pc, #320]	; (8000ef0 <main+0x178>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0220 	orr.w	r2, r2, #32
 8000db6:	60da      	str	r2, [r3, #12]

  if (IsAlarmSetBeforeNow())
 8000db8:	f7ff fef0 	bl	8000b9c <IsAlarmSetBeforeNow>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d011      	beq.n	8000de6 <main+0x6e>
  {
	  HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc8:	484a      	ldr	r0, [pc, #296]	; (8000ef4 <main+0x17c>)
 8000dca:	f001 f863 	bl	8001e94 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart1, OpenMessage, 4, 10);
 8000dce:	230a      	movs	r3, #10
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	4949      	ldr	r1, [pc, #292]	; (8000ef8 <main+0x180>)
 8000dd4:	4846      	ldr	r0, [pc, #280]	; (8000ef0 <main+0x178>)
 8000dd6:	f002 fc1e 	bl	8003616 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de0:	4844      	ldr	r0, [pc, #272]	; (8000ef4 <main+0x17c>)
 8000de2:	f001 f857 	bl	8001e94 <HAL_GPIO_WritePin>

//	!!
//	if I upload confifugartion from CubeMX Configurator I need to delete set time from MX_RTC_Init()!
//	!!

	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000de6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dea:	4844      	ldr	r0, [pc, #272]	; (8000efc <main+0x184>)
 8000dec:	f001 f86b 	bl	8001ec6 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000df0:	20c8      	movs	r0, #200	; 0xc8
 8000df2:	f000 fd2f 	bl	8001854 <HAL_Delay>

	  if (SetAlarm)
 8000df6:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <main+0x188>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d013      	beq.n	8000e28 <main+0xb0>
	  {
		  SetAlarmFunc(SetHours, SetMinutes, SetDate, SetSeconds);
 8000e00:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <main+0x18c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2d8      	uxtb	r0, r3
 8000e06:	4b40      	ldr	r3, [pc, #256]	; (8000f08 <main+0x190>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2d9      	uxtb	r1, r3
 8000e0c:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <main+0x194>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <main+0x198>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f7ff fe2c 	bl	8000a74 <SetAlarmFunc>
		  AlarmSetFlag = 1;
 8000e1c:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <main+0x19c>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
		  SetAlarm = 0;
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <main+0x188>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
	  }

	  GetTimeDate();
 8000e28:	f7ff fe6e 	bl	8000b08 <GetTimeDate>

	  if (GetAlarm)
 8000e2c:	4b3a      	ldr	r3, [pc, #232]	; (8000f18 <main+0x1a0>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d01e      	beq.n	8000e74 <main+0xfc>
	  {
		  GetAlarm = 0;
 8000e36:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <main+0x1a0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
		  Alarmed = 0;
 8000e3c:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <main+0x1a4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
		  HAL_RTC_GetAlarm(&hrtc, &gAlarm, RTC_ALARM_A, RTC_FORMAT_BCD);
 8000e42:	2301      	movs	r3, #1
 8000e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e48:	4935      	ldr	r1, [pc, #212]	; (8000f20 <main+0x1a8>)
 8000e4a:	4828      	ldr	r0, [pc, #160]	; (8000eec <main+0x174>)
 8000e4c:	f002 f9ca 	bl	80031e4 <HAL_RTC_GetAlarm>
		  GetAlarmHours = TurnHexIntoDec(gAlarm.AlarmTime.Hours);
 8000e50:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <main+0x1a8>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fd6f 	bl	8000938 <TurnHexIntoDec>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <main+0x1ac>)
 8000e60:	701a      	strb	r2, [r3, #0]
		  GetAlarmMinutes = TurnHexIntoDec(gAlarm.AlarmTime.Minutes);
 8000e62:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <main+0x1a8>)
 8000e64:	785b      	ldrb	r3, [r3, #1]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fd66 	bl	8000938 <TurnHexIntoDec>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <main+0x1b0>)
 8000e72:	701a      	strb	r2, [r3, #0]
	  }

	  if (alarm)
 8000e74:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <main+0x1b4>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d004      	beq.n	8000e86 <main+0x10e>
	  {
		  ToDoOnAlarm();
 8000e7c:	f7ff ff6a 	bl	8000d54 <ToDoOnAlarm>
		  alarm = 0;
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <main+0x1b4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
	  }

//	  1000 milliseconds is just a time, taken from nothing, during that RX interrupts will be disabled
	  NowTime = HAL_GetTick();
 8000e86:	f000 fcd9 	bl	800183c <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <main+0x1b8>)
 8000e8e:	601a      	str	r2, [r3, #0]
	  if ((IgnoringFlag == 1) && ((NowTime - StartIgnoringTimer) > 1000))
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <main+0x1bc>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d123      	bne.n	8000ee0 <main+0x168>
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <main+0x1b8>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <main+0x1c0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ea6:	d91b      	bls.n	8000ee0 <main+0x168>
//	  if (NowTime - StartIgnoringTimer > 1000)
	  {
		  CharCounter = 0;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <main+0x1c4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
		  IgnoringFlag = 0;
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <main+0x1bc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
		  __HAL_UART_CLEAR_OREFLAG(&huart1);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <main+0x178>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <main+0x178>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <main+0x178>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <main+0x178>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f042 0220 	orr.w	r2, r2, #32
 8000ed8:	60da      	str	r2, [r3, #12]

//		  happy toggling after starting receive again
		  HappyToggling(50);
 8000eda:	2032      	movs	r0, #50	; 0x32
 8000edc:	f7ff fd72 	bl	80009c4 <HappyToggling>
	  }

	  Rewind5Sec();
 8000ee0:	f7ff feb4 	bl	8000c4c <Rewind5Sec>
	  Forwardd5Sec();
 8000ee4:	f7ff fef4 	bl	8000cd0 <Forwardd5Sec>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000ee8:	e77d      	b.n	8000de6 <main+0x6e>
 8000eea:	bf00      	nop
 8000eec:	200002ac 	.word	0x200002ac
 8000ef0:	20000268 	.word	0x20000268
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	40021400 	.word	0x40021400
 8000f00:	2000024d 	.word	0x2000024d
 8000f04:	2000030f 	.word	0x2000030f
 8000f08:	20000221 	.word	0x20000221
 8000f0c:	2000024e 	.word	0x2000024e
 8000f10:	2000024f 	.word	0x2000024f
 8000f14:	20000220 	.word	0x20000220
 8000f18:	20000222 	.word	0x20000222
 8000f1c:	20000250 	.word	0x20000250
 8000f20:	20000224 	.word	0x20000224
 8000f24:	2000030d 	.word	0x2000030d
 8000f28:	2000030e 	.word	0x2000030e
 8000f2c:	2000024c 	.word	0x2000024c
 8000f30:	20000300 	.word	0x20000300
 8000f34:	20000223 	.word	0x20000223
 8000f38:	200002f8 	.word	0x200002f8
 8000f3c:	200002f5 	.word	0x200002f5

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b098      	sub	sp, #96	; 0x60
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f4a:	2230      	movs	r2, #48	; 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 faf8 	bl	8004544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <SystemClock_Config+0xe4>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a2a      	ldr	r2, [pc, #168]	; (8001024 <SystemClock_Config+0xe4>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b28      	ldr	r3, [pc, #160]	; (8001024 <SystemClock_Config+0xe4>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <SystemClock_Config+0xe8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a24      	ldr	r2, [pc, #144]	; (8001028 <SystemClock_Config+0xe8>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b22      	ldr	r3, [pc, #136]	; (8001028 <SystemClock_Config+0xe8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000faa:	2306      	movs	r3, #6
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb6:	2310      	movs	r3, #16
 8000fb8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 ffbe 	bl	8001f44 <HAL_RCC_OscConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fce:	f000 f931 	bl	8001234 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fa19 	bl	8002424 <HAL_RCC_ClockConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ff8:	f000 f91c 	bl	8001234 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001004:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fbfc 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001016:	f000 f90d 	bl	8001234 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3760      	adds	r7, #96	; 0x60
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_RTC_Init+0x44>)
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <MX_RTC_Init+0x48>)
 8001034:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_RTC_Init+0x44>)
 8001038:	2200      	movs	r2, #0
 800103a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_RTC_Init+0x44>)
 800103e:	227f      	movs	r2, #127	; 0x7f
 8001040:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_RTC_Init+0x44>)
 8001044:	22ff      	movs	r2, #255	; 0xff
 8001046:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_RTC_Init+0x44>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_RTC_Init+0x44>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_RTC_Init+0x44>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_RTC_Init+0x44>)
 800105c:	f001 fcb6 	bl	80029cc <HAL_RTC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001066:	f000 f8e5 	bl	8001234 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200002ac 	.word	0x200002ac
 8001074:	40002800 	.word	0x40002800

08001078 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_USART1_UART_Init+0x4c>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <MX_USART1_UART_Init+0x50>)
 8001080:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_USART1_UART_Init+0x4c>)
 8001084:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001088:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_USART1_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_USART1_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_USART1_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_USART1_UART_Init+0x4c>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_USART1_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_USART1_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_USART1_UART_Init+0x4c>)
 80010b0:	f002 fa64 	bl	800357c <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ba:	f000 f8bb 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000268 	.word	0x20000268
 80010c8:	40011000 	.word	0x40011000

080010cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <MX_GPIO_Init+0x154>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <MX_GPIO_Init+0x154>)
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <MX_GPIO_Init+0x154>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	4b47      	ldr	r3, [pc, #284]	; (8001220 <MX_GPIO_Init+0x154>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a46      	ldr	r2, [pc, #280]	; (8001220 <MX_GPIO_Init+0x154>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b44      	ldr	r3, [pc, #272]	; (8001220 <MX_GPIO_Init+0x154>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b40      	ldr	r3, [pc, #256]	; (8001220 <MX_GPIO_Init+0x154>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a3f      	ldr	r2, [pc, #252]	; (8001220 <MX_GPIO_Init+0x154>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <MX_GPIO_Init+0x154>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b39      	ldr	r3, [pc, #228]	; (8001220 <MX_GPIO_Init+0x154>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a38      	ldr	r2, [pc, #224]	; (8001220 <MX_GPIO_Init+0x154>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b36      	ldr	r3, [pc, #216]	; (8001220 <MX_GPIO_Init+0x154>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <MX_GPIO_Init+0x154>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a31      	ldr	r2, [pc, #196]	; (8001220 <MX_GPIO_Init+0x154>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <MX_GPIO_Init+0x154>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <MX_GPIO_Init+0x154>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a2a      	ldr	r2, [pc, #168]	; (8001220 <MX_GPIO_Init+0x154>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <MX_GPIO_Init+0x154>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001190:	4824      	ldr	r0, [pc, #144]	; (8001224 <MX_GPIO_Init+0x158>)
 8001192:	f000 fe7f 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OpenDoor_GPIO_Port, OpenDoor_Pin, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119c:	4822      	ldr	r0, [pc, #136]	; (8001228 <MX_GPIO_Init+0x15c>)
 800119e:	f000 fe79 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 80011a2:	2318      	movs	r3, #24
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <MX_GPIO_Init+0x160>)
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	481e      	ldr	r0, [pc, #120]	; (8001230 <MX_GPIO_Init+0x164>)
 80011b6:	f000 fcd3 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80011ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011c0:	2311      	movs	r3, #17
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <MX_GPIO_Init+0x158>)
 80011d4:	f000 fcc4 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : OpenDoor_Pin */
  GPIO_InitStruct.Pin = OpenDoor_Pin;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011de:	2311      	movs	r3, #17
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OpenDoor_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <MX_GPIO_Init+0x15c>)
 80011f2:	f000 fcb5 	bl	8001b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2102      	movs	r1, #2
 80011fa:	2009      	movs	r0, #9
 80011fc:	f000 fc49 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001200:	2009      	movs	r0, #9
 8001202:	f000 fc62 	bl	8001aca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2102      	movs	r1, #2
 800120a:	200a      	movs	r0, #10
 800120c:	f000 fc41 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001210:	200a      	movs	r0, #10
 8001212:	f000 fc5a 	bl	8001aca <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40021400 	.word	0x40021400
 8001228:	40020400 	.word	0x40020400
 800122c:	10110000 	.word	0x10110000
 8001230:	40021000 	.word	0x40021000

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123a:	e7fe      	b.n	800123a <Error_Handler+0x6>

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_MspInit+0x4c>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <HAL_MspInit+0x4c>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_MspInit+0x4c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_MspInit+0x4c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_MspInit+0x4c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_MspInit+0x4c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_RTC_MspInit+0x30>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10a      	bne.n	80012b4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_RTC_MspInit+0x34>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2029      	movs	r0, #41	; 0x29
 80012aa:	f000 fbf2 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80012ae:	2029      	movs	r0, #41	; 0x29
 80012b0:	f000 fc0b 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40002800 	.word	0x40002800
 80012c0:	42470e3c 	.word	0x42470e3c

080012c4 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_RTC_MspDeInit+0x28>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d105      	bne.n	80012e2 <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_RTC_MspDeInit+0x2c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 80012dc:	2029      	movs	r0, #41	; 0x29
 80012de:	f000 fc02 	bl	8001ae6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40002800 	.word	0x40002800
 80012f0:	42470e3c 	.word	0x42470e3c

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <HAL_UART_MspInit+0x94>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d134      	bne.n	8001380 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_UART_MspInit+0x98>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a1b      	ldr	r2, [pc, #108]	; (800138c <HAL_UART_MspInit+0x98>)
 8001320:	f043 0310 	orr.w	r3, r3, #16
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_UART_MspInit+0x98>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_UART_MspInit+0x98>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a14      	ldr	r2, [pc, #80]	; (800138c <HAL_UART_MspInit+0x98>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_UART_MspInit+0x98>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800134e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001360:	2307      	movs	r3, #7
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4809      	ldr	r0, [pc, #36]	; (8001390 <HAL_UART_MspInit+0x9c>)
 800136c:	f000 fbf8 	bl	8001b60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	2025      	movs	r0, #37	; 0x25
 8001376:	f000 fb8c 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800137a:	2025      	movs	r0, #37	; 0x25
 800137c:	f000 fba5 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40011000 	.word	0x40011000
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <NMI_Handler+0x4>

0800139a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler+0x4>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e0:	f000 fa18 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

//	jitter solver
	if (HAL_GetTick() - JitterButtonK1 > 300)
 80013ec:	f000 fa26 	bl	800183c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <EXTI3_IRQHandler+0x34>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013fc:	d908      	bls.n	8001410 <EXTI3_IRQHandler+0x28>
	{
		JitterButtonK1 = HAL_GetTick();
 80013fe:	f000 fa1d 	bl	800183c <HAL_GetTick>
 8001402:	4603      	mov	r3, r0
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <EXTI3_IRQHandler+0x34>)
 8001408:	701a      	strb	r2, [r3, #0]

//		here is our action on KEY1 button
		K1isPressed = 1;
 800140a:	4b05      	ldr	r3, [pc, #20]	; (8001420 <EXTI3_IRQHandler+0x38>)
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001410:	2008      	movs	r0, #8
 8001412:	f000 fd73 	bl	8001efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000020d 	.word	0x2000020d
 8001420:	200002a9 	.word	0x200002a9

08001424 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

//	jitter solver
	if (HAL_GetTick() - JitterButtonK0 > 300)
 8001428:	f000 fa08 	bl	800183c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <EXTI4_IRQHandler+0x34>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001438:	d908      	bls.n	800144c <EXTI4_IRQHandler+0x28>
	{
		JitterButtonK0 = HAL_GetTick();
 800143a:	f000 f9ff 	bl	800183c <HAL_GetTick>
 800143e:	4603      	mov	r3, r0
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <EXTI4_IRQHandler+0x34>)
 8001444:	701a      	strb	r2, [r3, #0]

//		here is our action on KEY0 button
		K0isPressed = 1;
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <EXTI4_IRQHandler+0x38>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800144c:	2010      	movs	r0, #16
 800144e:	f000 fd55 	bl	8001efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000020c 	.word	0x2000020c
 800145c:	200002a8 	.word	0x200002a8

08001460 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001466:	4871      	ldr	r0, [pc, #452]	; (800162c <USART1_IRQHandler+0x1cc>)
 8001468:	f002 fa14 	bl	8003894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  HAL_UART_Receive(&huart1, RxData, 1, 10);
 800146c:	230a      	movs	r3, #10
 800146e:	2201      	movs	r2, #1
 8001470:	496f      	ldr	r1, [pc, #444]	; (8001630 <USART1_IRQHandler+0x1d0>)
 8001472:	486e      	ldr	r0, [pc, #440]	; (800162c <USART1_IRQHandler+0x1cc>)
 8001474:	f002 f968 	bl	8003748 <HAL_UART_Receive>
  Buffer[CharCounter] = *RxData;
 8001478:	4b6e      	ldr	r3, [pc, #440]	; (8001634 <USART1_IRQHandler+0x1d4>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b6c      	ldr	r3, [pc, #432]	; (8001630 <USART1_IRQHandler+0x1d0>)
 8001480:	7819      	ldrb	r1, [r3, #0]
 8001482:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <USART1_IRQHandler+0x1d8>)
 8001484:	5499      	strb	r1, [r3, r2]
  CharCounter++;
 8001486:	4b6b      	ldr	r3, [pc, #428]	; (8001634 <USART1_IRQHandler+0x1d4>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b69      	ldr	r3, [pc, #420]	; (8001634 <USART1_IRQHandler+0x1d4>)
 8001490:	701a      	strb	r2, [r3, #0]

  if (CharCounter == strlen(OpenMessage))
 8001492:	4b68      	ldr	r3, [pc, #416]	; (8001634 <USART1_IRQHandler+0x1d4>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461c      	mov	r4, r3
 8001498:	4868      	ldr	r0, [pc, #416]	; (800163c <USART1_IRQHandler+0x1dc>)
 800149a:	f7fe fe99 	bl	80001d0 <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	429c      	cmp	r4, r3
 80014a2:	d132      	bne.n	800150a <USART1_IRQHandler+0xaa>
  {
	  StartIgnoringTimer = HAL_GetTick();
 80014a4:	f000 f9ca 	bl	800183c <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	4b65      	ldr	r3, [pc, #404]	; (8001640 <USART1_IRQHandler+0x1e0>)
 80014ac:	601a      	str	r2, [r3, #0]
	  uint8_t loop;
	  for (loop = 0; loop < CharCounter; loop++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	e023      	b.n	80014fc <USART1_IRQHandler+0x9c>
	  {
		  if (Buffer[loop] == OpenMessage[loop])
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4a60      	ldr	r2, [pc, #384]	; (8001638 <USART1_IRQHandler+0x1d8>)
 80014b8:	5cd2      	ldrb	r2, [r2, r3]
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	495f      	ldr	r1, [pc, #380]	; (800163c <USART1_IRQHandler+0x1dc>)
 80014be:	5ccb      	ldrb	r3, [r1, r3]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d121      	bne.n	8001508 <USART1_IRQHandler+0xa8>
		  {
			  if (loop == CharCounter-1)
 80014c4:	79fa      	ldrb	r2, [r7, #7]
 80014c6:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <USART1_IRQHandler+0x1d4>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d112      	bne.n	80014f6 <USART1_IRQHandler+0x96>
			  {
				  IgnoringFlag = 1;
 80014d0:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <USART1_IRQHandler+0x1e4>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
				  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 80014d6:	4b55      	ldr	r3, [pc, #340]	; (800162c <USART1_IRQHandler+0x1cc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	4b53      	ldr	r3, [pc, #332]	; (800162c <USART1_IRQHandler+0x1cc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0220 	bic.w	r2, r2, #32
 80014e4:	60da      	str	r2, [r3, #12]
				  HAL_UART_Transmit(&huart1, Buffer, CharCounter, 10);
 80014e6:	4b53      	ldr	r3, [pc, #332]	; (8001634 <USART1_IRQHandler+0x1d4>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	230a      	movs	r3, #10
 80014ee:	4952      	ldr	r1, [pc, #328]	; (8001638 <USART1_IRQHandler+0x1d8>)
 80014f0:	484e      	ldr	r0, [pc, #312]	; (800162c <USART1_IRQHandler+0x1cc>)
 80014f2:	f002 f890 	bl	8003616 <HAL_UART_Transmit>
	  for (loop = 0; loop < CharCounter; loop++)
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	3301      	adds	r3, #1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4b4d      	ldr	r3, [pc, #308]	; (8001634 <USART1_IRQHandler+0x1d4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	79fa      	ldrb	r2, [r7, #7]
 8001502:	429a      	cmp	r2, r3
 8001504:	d3d6      	bcc.n	80014b4 <USART1_IRQHandler+0x54>
 8001506:	e000      	b.n	800150a <USART1_IRQHandler+0xaa>
			  }
			  continue;
		  }
		  else
			  break;
 8001508:	bf00      	nop
	  }
  }

  if (CharCounter == strlen(SetMessage))
 800150a:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <USART1_IRQHandler+0x1d4>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461c      	mov	r4, r3
 8001510:	484d      	ldr	r0, [pc, #308]	; (8001648 <USART1_IRQHandler+0x1e8>)
 8001512:	f7fe fe5d 	bl	80001d0 <strlen>
 8001516:	4603      	mov	r3, r0
 8001518:	429c      	cmp	r4, r3
 800151a:	f040 8082 	bne.w	8001622 <USART1_IRQHandler+0x1c2>
  {
	  uint8_t loop;
	  for (loop = 0; loop < CharCounter; loop++)
 800151e:	2300      	movs	r3, #0
 8001520:	71bb      	strb	r3, [r7, #6]
 8001522:	e077      	b.n	8001614 <USART1_IRQHandler+0x1b4>
	  {
		  if isdigit((uint8_t)Buffer[loop])
 8001524:	f002 ffee 	bl	8004504 <__locale_ctype_ptr>
 8001528:	4601      	mov	r1, r0
 800152a:	79bb      	ldrb	r3, [r7, #6]
 800152c:	4a42      	ldr	r2, [pc, #264]	; (8001638 <USART1_IRQHandler+0x1d8>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	3301      	adds	r3, #1
 8001532:	440b      	add	r3, r1
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b00      	cmp	r3, #0
 800153c:	d070      	beq.n	8001620 <USART1_IRQHandler+0x1c0>
		  {
			  if (loop == CharCounter-1)
 800153e:	79ba      	ldrb	r2, [r7, #6]
 8001540:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <USART1_IRQHandler+0x1d4>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	3b01      	subs	r3, #1
 8001546:	429a      	cmp	r2, r3
 8001548:	d161      	bne.n	800160e <USART1_IRQHandler+0x1ae>
			  {
				  IgnoringFlag = 1;
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <USART1_IRQHandler+0x1e4>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
				  __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8001550:	4b36      	ldr	r3, [pc, #216]	; (800162c <USART1_IRQHandler+0x1cc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	4b35      	ldr	r3, [pc, #212]	; (800162c <USART1_IRQHandler+0x1cc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0220 	bic.w	r2, r2, #32
 800155e:	60da      	str	r2, [r3, #12]
				  HAL_UART_Transmit(&huart1, Buffer, CharCounter, 10);
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <USART1_IRQHandler+0x1d4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b29a      	uxth	r2, r3
 8001566:	230a      	movs	r3, #10
 8001568:	4933      	ldr	r1, [pc, #204]	; (8001638 <USART1_IRQHandler+0x1d8>)
 800156a:	4830      	ldr	r0, [pc, #192]	; (800162c <USART1_IRQHandler+0x1cc>)
 800156c:	f002 f853 	bl	8003616 <HAL_UART_Transmit>

//				  check if all the received numbers are valid to set for alarm
				  Hstr[0] = (uint8_t)Buffer[0];
 8001570:	4b31      	ldr	r3, [pc, #196]	; (8001638 <USART1_IRQHandler+0x1d8>)
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	4b35      	ldr	r3, [pc, #212]	; (800164c <USART1_IRQHandler+0x1ec>)
 8001576:	701a      	strb	r2, [r3, #0]
				  Hstr[1] = (uint8_t)Buffer[1];
 8001578:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <USART1_IRQHandler+0x1d8>)
 800157a:	785a      	ldrb	r2, [r3, #1]
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <USART1_IRQHandler+0x1ec>)
 800157e:	705a      	strb	r2, [r3, #1]
				  SetHours = atoi(Hstr);
 8001580:	4832      	ldr	r0, [pc, #200]	; (800164c <USART1_IRQHandler+0x1ec>)
 8001582:	f002 ff8d 	bl	80044a0 <atoi>
 8001586:	4603      	mov	r3, r0
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b31      	ldr	r3, [pc, #196]	; (8001650 <USART1_IRQHandler+0x1f0>)
 800158c:	701a      	strb	r2, [r3, #0]
				  if ( (SetHours >= 0) && (SetHours <= 23) )
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <USART1_IRQHandler+0x1f0>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b17      	cmp	r3, #23
 8001594:	d83b      	bhi.n	800160e <USART1_IRQHandler+0x1ae>
				  {
					  Mstr[0] = (uint8_t)Buffer[2];
 8001596:	4b28      	ldr	r3, [pc, #160]	; (8001638 <USART1_IRQHandler+0x1d8>)
 8001598:	789a      	ldrb	r2, [r3, #2]
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <USART1_IRQHandler+0x1f4>)
 800159c:	701a      	strb	r2, [r3, #0]
					  Mstr[1] = (uint8_t)Buffer[3];
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <USART1_IRQHandler+0x1d8>)
 80015a0:	78da      	ldrb	r2, [r3, #3]
 80015a2:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <USART1_IRQHandler+0x1f4>)
 80015a4:	705a      	strb	r2, [r3, #1]
					  SetMinutes = atoi(Mstr);
 80015a6:	482b      	ldr	r0, [pc, #172]	; (8001654 <USART1_IRQHandler+0x1f4>)
 80015a8:	f002 ff7a 	bl	80044a0 <atoi>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <USART1_IRQHandler+0x1f8>)
 80015b2:	701a      	strb	r2, [r3, #0]
					  if ( (SetMinutes >= 0) && (SetMinutes <= 59) )
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <USART1_IRQHandler+0x1f8>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b3b      	cmp	r3, #59	; 0x3b
 80015ba:	d828      	bhi.n	800160e <USART1_IRQHandler+0x1ae>
					  {
						  Dstr[0] = (uint8_t)Buffer[4];
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <USART1_IRQHandler+0x1d8>)
 80015be:	791a      	ldrb	r2, [r3, #4]
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <USART1_IRQHandler+0x1fc>)
 80015c2:	701a      	strb	r2, [r3, #0]
						  Dstr[1] = (uint8_t)Buffer[5];
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <USART1_IRQHandler+0x1d8>)
 80015c6:	795a      	ldrb	r2, [r3, #5]
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <USART1_IRQHandler+0x1fc>)
 80015ca:	705a      	strb	r2, [r3, #1]
						  SetDate = atoi(Dstr);
 80015cc:	4823      	ldr	r0, [pc, #140]	; (800165c <USART1_IRQHandler+0x1fc>)
 80015ce:	f002 ff67 	bl	80044a0 <atoi>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <USART1_IRQHandler+0x200>)
 80015d8:	701a      	strb	r2, [r3, #0]
						  if ( (SetDate >= 1) && (SetDate <= 30) )
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <USART1_IRQHandler+0x200>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d015      	beq.n	800160e <USART1_IRQHandler+0x1ae>
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <USART1_IRQHandler+0x200>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b1e      	cmp	r3, #30
 80015e8:	d811      	bhi.n	800160e <USART1_IRQHandler+0x1ae>
						  {
							  Sstr[0] = (uint8_t)Buffer[6];
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <USART1_IRQHandler+0x1d8>)
 80015ec:	799a      	ldrb	r2, [r3, #6]
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <USART1_IRQHandler+0x204>)
 80015f0:	701a      	strb	r2, [r3, #0]
							  Sstr[1] = (uint8_t)Buffer[7];
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <USART1_IRQHandler+0x1d8>)
 80015f4:	79da      	ldrb	r2, [r3, #7]
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <USART1_IRQHandler+0x204>)
 80015f8:	705a      	strb	r2, [r3, #1]
							  SetSeconds = atoi(Sstr);
 80015fa:	481a      	ldr	r0, [pc, #104]	; (8001664 <USART1_IRQHandler+0x204>)
 80015fc:	f002 ff50 	bl	80044a0 <atoi>
 8001600:	4603      	mov	r3, r0
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <USART1_IRQHandler+0x208>)
 8001606:	701a      	strb	r2, [r3, #0]
							  SetAlarm = 1;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <USART1_IRQHandler+0x20c>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
	  for (loop = 0; loop < CharCounter; loop++)
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	3301      	adds	r3, #1
 8001612:	71bb      	strb	r3, [r7, #6]
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <USART1_IRQHandler+0x1d4>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	79ba      	ldrb	r2, [r7, #6]
 800161a:	429a      	cmp	r2, r3
 800161c:	d382      	bcc.n	8001524 <USART1_IRQHandler+0xc4>
			  break;
	  }
  }

  /* USER CODE END USART1_IRQn 1 */
}
 800161e:	e000      	b.n	8001622 <USART1_IRQHandler+0x1c2>
			  break;
 8001620:	bf00      	nop
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bd90      	pop	{r4, r7, pc}
 800162a:	bf00      	nop
 800162c:	20000268 	.word	0x20000268
 8001630:	2000031c 	.word	0x2000031c
 8001634:	200002f5 	.word	0x200002f5
 8001638:	200002fc 	.word	0x200002fc
 800163c:	20000000 	.word	0x20000000
 8001640:	200002f8 	.word	0x200002f8
 8001644:	20000223 	.word	0x20000223
 8001648:	20000008 	.word	0x20000008
 800164c:	20000320 	.word	0x20000320
 8001650:	2000030f 	.word	0x2000030f
 8001654:	20000318 	.word	0x20000318
 8001658:	20000221 	.word	0x20000221
 800165c:	20000314 	.word	0x20000314
 8001660:	2000024e 	.word	0x2000024e
 8001664:	20000310 	.word	0x20000310
 8001668:	2000024f 	.word	0x2000024f
 800166c:	2000024d 	.word	0x2000024d

08001670 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <RTC_Alarm_IRQHandler+0x10>)
 8001676:	f001 fe45 	bl	8003304 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200002ac 	.word	0x200002ac

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f002 fef8 	bl	80044a8 <__errno>
 80016b8:	4602      	mov	r2, r0
 80016ba:	230c      	movs	r3, #12
 80016bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20020000 	.word	0x20020000
 80016e4:	00000400 	.word	0x00000400
 80016e8:	20000210 	.word	0x20000210
 80016ec:	20000330 	.word	0x20000330

080016f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <SystemInit+0x28>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	4a07      	ldr	r2, [pc, #28]	; (8001718 <SystemInit+0x28>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SystemInit+0x28>)
 8001706:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800170a:	609a      	str	r2, [r3, #8]
#endif
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001754 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001720:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001722:	e003      	b.n	800172c <LoopCopyDataInit>

08001724 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001726:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001728:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800172a:	3104      	adds	r1, #4

0800172c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800172c:	480b      	ldr	r0, [pc, #44]	; (800175c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001730:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001732:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001734:	d3f6      	bcc.n	8001724 <CopyDataInit>
  ldr  r2, =_sbss
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001738:	e002      	b.n	8001740 <LoopFillZerobss>

0800173a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800173a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800173c:	f842 3b04 	str.w	r3, [r2], #4

08001740 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001742:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001744:	d3f9      	bcc.n	800173a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001746:	f7ff ffd3 	bl	80016f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174a:	f002 feb3 	bl	80044b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7ff fb13 	bl	8000d78 <main>
  bx  lr    
 8001752:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001754:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001758:	08005040 	.word	0x08005040
  ldr  r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001760:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8001764:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8001768:	2000032c 	.word	0x2000032c

0800176c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC_IRQHandler>
	...

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <HAL_Init+0x40>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_Init+0x40>)
 8001786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x40>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f96f 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fd4a 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f995 	bl	8001b02 <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f0:	f000 f94f 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000014 	.word	0x20000014
 800180c:	2000001c 	.word	0x2000001c
 8001810:	20000018 	.word	0x20000018

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	2000001c 	.word	0x2000001c
 8001838:	20000324 	.word	0x20000324

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000324 	.word	0x20000324

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff ffee 	bl	800183c <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_Delay+0x40>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffde 	bl	800183c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000001c 	.word	0x2000001c

08001898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <__NVIC_GetPriorityGrouping+0x18>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 0307 	and.w	r3, r3, #7
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	db0b      	blt.n	8001926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	4907      	ldr	r1, [pc, #28]	; (8001934 <__NVIC_EnableIRQ+0x38>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	2001      	movs	r0, #1
 800191e:	fa00 f202 	lsl.w	r2, r0, r2
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db10      	blt.n	800196c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4909      	ldr	r1, [pc, #36]	; (8001978 <__NVIC_DisableIRQ+0x40>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	3320      	adds	r3, #32
 8001960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001964:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001968:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff07 	bl	8001898 <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff1c 	bl	80018e0 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff0f 	bl	80018fc <__NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff1f 	bl	8001938 <__NVIC_DisableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ff94 	bl	8001a38 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d004      	beq.n	8001b38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e00c      	b.n	8001b52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2205      	movs	r2, #5
 8001b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e16b      	b.n	8001e54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f040 815a 	bne.w	8001e4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d00b      	beq.n	8001bba <HAL_GPIO_Init+0x5a>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d007      	beq.n	8001bba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bae:	2b11      	cmp	r3, #17
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b12      	cmp	r3, #18
 8001bb8:	d130      	bne.n	8001c1c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 0201 	and.w	r2, r3, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0xfc>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b12      	cmp	r3, #18
 8001c5a:	d123      	bne.n	8001ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	08da      	lsrs	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3208      	adds	r2, #8
 8001c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	220f      	movs	r2, #15
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	69b9      	ldr	r1, [r7, #24]
 8001ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0203 	and.w	r2, r3, #3
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80b4 	beq.w	8001e4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b5f      	ldr	r3, [pc, #380]	; (8001e68 <HAL_GPIO_Init+0x308>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a5e      	ldr	r2, [pc, #376]	; (8001e68 <HAL_GPIO_Init+0x308>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b5c      	ldr	r3, [pc, #368]	; (8001e68 <HAL_GPIO_Init+0x308>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d02:	4a5a      	ldr	r2, [pc, #360]	; (8001e6c <HAL_GPIO_Init+0x30c>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a51      	ldr	r2, [pc, #324]	; (8001e70 <HAL_GPIO_Init+0x310>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d02b      	beq.n	8001d86 <HAL_GPIO_Init+0x226>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a50      	ldr	r2, [pc, #320]	; (8001e74 <HAL_GPIO_Init+0x314>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d025      	beq.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4f      	ldr	r2, [pc, #316]	; (8001e78 <HAL_GPIO_Init+0x318>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01f      	beq.n	8001d7e <HAL_GPIO_Init+0x21e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4e      	ldr	r2, [pc, #312]	; (8001e7c <HAL_GPIO_Init+0x31c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d019      	beq.n	8001d7a <HAL_GPIO_Init+0x21a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <HAL_GPIO_Init+0x320>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <HAL_GPIO_Init+0x216>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4c      	ldr	r2, [pc, #304]	; (8001e84 <HAL_GPIO_Init+0x324>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00d      	beq.n	8001d72 <HAL_GPIO_Init+0x212>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4b      	ldr	r2, [pc, #300]	; (8001e88 <HAL_GPIO_Init+0x328>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <HAL_GPIO_Init+0x20e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4a      	ldr	r2, [pc, #296]	; (8001e8c <HAL_GPIO_Init+0x32c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_GPIO_Init+0x20a>
 8001d66:	2307      	movs	r3, #7
 8001d68:	e00e      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	e00c      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d6e:	2306      	movs	r3, #6
 8001d70:	e00a      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d72:	2305      	movs	r3, #5
 8001d74:	e008      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d76:	2304      	movs	r3, #4
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e004      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e002      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d86:	2300      	movs	r3, #0
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	f002 0203 	and.w	r2, r2, #3
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	4093      	lsls	r3, r2
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d98:	4934      	ldr	r1, [pc, #208]	; (8001e6c <HAL_GPIO_Init+0x30c>)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da6:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dca:	4a31      	ldr	r2, [pc, #196]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df4:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1e:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e48:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b0f      	cmp	r3, #15
 8001e58:	f67f ae90 	bls.w	8001b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3724      	adds	r7, #36	; 0x24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40013800 	.word	0x40013800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40020400 	.word	0x40020400
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020c00 	.word	0x40020c00
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40021400 	.word	0x40021400
 8001e88:	40021800 	.word	0x40021800
 8001e8c:	40021c00 	.word	0x40021c00
 8001e90:	40013c00 	.word	0x40013c00

08001e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb0:	e003      	b.n	8001eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	041a      	lsls	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	887b      	ldrh	r3, [r7, #2]
 8001ed8:	401a      	ands	r2, r3
 8001eda:	887b      	ldrh	r3, [r7, #2]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d104      	bne.n	8001eea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	041a      	lsls	r2, r3, #16
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f806 	bl	8001f2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40013c00 	.word	0x40013c00

08001f2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e25b      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d075      	beq.n	800204e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f62:	4ba3      	ldr	r3, [pc, #652]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d00c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f6e:	4ba0      	ldr	r3, [pc, #640]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d112      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7a:	4b9d      	ldr	r3, [pc, #628]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f86:	d10b      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	4b99      	ldr	r3, [pc, #612]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d05b      	beq.n	800204c <HAL_RCC_OscConfig+0x108>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d157      	bne.n	800204c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e236      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa8:	d106      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x74>
 8001faa:	4b91      	ldr	r3, [pc, #580]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a90      	ldr	r2, [pc, #576]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e01d      	b.n	8001ff4 <HAL_RCC_OscConfig+0xb0>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x98>
 8001fc2:	4b8b      	ldr	r3, [pc, #556]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a8a      	ldr	r2, [pc, #552]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b88      	ldr	r3, [pc, #544]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a87      	ldr	r2, [pc, #540]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0xb0>
 8001fdc:	4b84      	ldr	r3, [pc, #528]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a83      	ldr	r2, [pc, #524]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b81      	ldr	r3, [pc, #516]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a80      	ldr	r2, [pc, #512]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fc1e 	bl	800183c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002004:	f7ff fc1a 	bl	800183c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	; 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1fb      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0xc0>
 8002022:	e014      	b.n	800204e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7ff fc0a 	bl	800183c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff fc06 	bl	800183c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1e7      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	4b6c      	ldr	r3, [pc, #432]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0xe8>
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d063      	beq.n	8002122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800205a:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002066:	4b62      	ldr	r3, [pc, #392]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800206e:	2b08      	cmp	r3, #8
 8002070:	d11c      	bne.n	80020ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002072:	4b5f      	ldr	r3, [pc, #380]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d116      	bne.n	80020ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	4b5c      	ldr	r3, [pc, #368]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_RCC_OscConfig+0x152>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e1bb      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002096:	4b56      	ldr	r3, [pc, #344]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4952      	ldr	r1, [pc, #328]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	e03a      	b.n	8002122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d020      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b4:	4b4f      	ldr	r3, [pc, #316]	; (80021f4 <HAL_RCC_OscConfig+0x2b0>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ba:	f7ff fbbf 	bl	800183c <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c2:	f7ff fbbb 	bl	800183c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e19c      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d4:	4b46      	ldr	r3, [pc, #280]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	4b43      	ldr	r3, [pc, #268]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4940      	ldr	r1, [pc, #256]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
 80020f4:	e015      	b.n	8002122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f6:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <HAL_RCC_OscConfig+0x2b0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7ff fb9e 	bl	800183c <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002104:	f7ff fb9a 	bl	800183c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e17b      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002116:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d030      	beq.n	8002190 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d016      	beq.n	8002164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002136:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <HAL_RCC_OscConfig+0x2b4>)
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7ff fb7e 	bl	800183c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002144:	f7ff fb7a 	bl	800183c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e15b      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x200>
 8002162:	e015      	b.n	8002190 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002164:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_OscConfig+0x2b4>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7ff fb67 	bl	800183c <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002172:	f7ff fb63 	bl	800183c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e144      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 8002186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f0      	bne.n	8002172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80a0 	beq.w	80022de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10f      	bne.n	80021ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ca:	2301      	movs	r3, #1
 80021cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_OscConfig+0x2b8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d121      	bne.n	800221e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_RCC_OscConfig+0x2b8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a07      	ldr	r2, [pc, #28]	; (80021fc <HAL_RCC_OscConfig+0x2b8>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e6:	f7ff fb29 	bl	800183c <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	e011      	b.n	8002212 <HAL_RCC_OscConfig+0x2ce>
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	42470000 	.word	0x42470000
 80021f8:	42470e80 	.word	0x42470e80
 80021fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002200:	f7ff fb1c 	bl	800183c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e0fd      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002212:	4b81      	ldr	r3, [pc, #516]	; (8002418 <HAL_RCC_OscConfig+0x4d4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d106      	bne.n	8002234 <HAL_RCC_OscConfig+0x2f0>
 8002226:	4b7d      	ldr	r3, [pc, #500]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222a:	4a7c      	ldr	r2, [pc, #496]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6713      	str	r3, [r2, #112]	; 0x70
 8002232:	e01c      	b.n	800226e <HAL_RCC_OscConfig+0x32a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b05      	cmp	r3, #5
 800223a:	d10c      	bne.n	8002256 <HAL_RCC_OscConfig+0x312>
 800223c:	4b77      	ldr	r3, [pc, #476]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	4a76      	ldr	r2, [pc, #472]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 8002242:	f043 0304 	orr.w	r3, r3, #4
 8002246:	6713      	str	r3, [r2, #112]	; 0x70
 8002248:	4b74      	ldr	r3, [pc, #464]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224c:	4a73      	ldr	r2, [pc, #460]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6713      	str	r3, [r2, #112]	; 0x70
 8002254:	e00b      	b.n	800226e <HAL_RCC_OscConfig+0x32a>
 8002256:	4b71      	ldr	r3, [pc, #452]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a70      	ldr	r2, [pc, #448]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
 8002262:	4b6e      	ldr	r3, [pc, #440]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	4a6d      	ldr	r2, [pc, #436]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 8002268:	f023 0304 	bic.w	r3, r3, #4
 800226c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d015      	beq.n	80022a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002276:	f7ff fae1 	bl	800183c <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7ff fadd 	bl	800183c <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f241 3288 	movw	r2, #5000	; 0x1388
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0bc      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002294:	4b61      	ldr	r3, [pc, #388]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0ee      	beq.n	800227e <HAL_RCC_OscConfig+0x33a>
 80022a0:	e014      	b.n	80022cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7ff facb 	bl	800183c <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7ff fac7 	bl	800183c <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0a6      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c0:	4b56      	ldr	r3, [pc, #344]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1ee      	bne.n	80022aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d105      	bne.n	80022de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d2:	4b52      	ldr	r3, [pc, #328]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a51      	ldr	r2, [pc, #324]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 80022d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8092 	beq.w	800240c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022e8:	4b4c      	ldr	r3, [pc, #304]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d05c      	beq.n	80023ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d141      	bne.n	8002380 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fc:	4b48      	ldr	r3, [pc, #288]	; (8002420 <HAL_RCC_OscConfig+0x4dc>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7ff fa9b 	bl	800183c <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230a:	f7ff fa97 	bl	800183c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e078      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231c:	4b3f      	ldr	r3, [pc, #252]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f0      	bne.n	800230a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	019b      	lsls	r3, r3, #6
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	085b      	lsrs	r3, r3, #1
 8002340:	3b01      	subs	r3, #1
 8002342:	041b      	lsls	r3, r3, #16
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	061b      	lsls	r3, r3, #24
 800234c:	4933      	ldr	r1, [pc, #204]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002352:	4b33      	ldr	r3, [pc, #204]	; (8002420 <HAL_RCC_OscConfig+0x4dc>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7ff fa70 	bl	800183c <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002360:	f7ff fa6c 	bl	800183c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e04d      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x41c>
 800237e:	e045      	b.n	800240c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002380:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x4dc>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7ff fa59 	bl	800183c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238e:	f7ff fa55 	bl	800183c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e036      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x44a>
 80023ac:	e02e      	b.n	800240c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e029      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <HAL_RCC_OscConfig+0x4d8>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d11c      	bne.n	8002408 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d115      	bne.n	8002408 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023e2:	4013      	ands	r3, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d10d      	bne.n	8002408 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d106      	bne.n	8002408 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40007000 	.word	0x40007000
 800241c:	40023800 	.word	0x40023800
 8002420:	42470060 	.word	0x42470060

08002424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0cc      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b68      	ldr	r3, [pc, #416]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d90c      	bls.n	8002460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b65      	ldr	r3, [pc, #404]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b63      	ldr	r3, [pc, #396]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0b8      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002478:	4b59      	ldr	r3, [pc, #356]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a58      	ldr	r2, [pc, #352]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002490:	4b53      	ldr	r3, [pc, #332]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a52      	ldr	r2, [pc, #328]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800249a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249c:	4b50      	ldr	r3, [pc, #320]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	494d      	ldr	r1, [pc, #308]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d044      	beq.n	8002544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d119      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e07f      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d003      	beq.n	80024e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e06f      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e067      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4934      	ldr	r1, [pc, #208]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002514:	f7ff f992 	bl	800183c <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7ff f98e 	bl	800183c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e04f      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 020c 	and.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d1eb      	bne.n	800251c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d20c      	bcs.n	800256c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e032      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4916      	ldr	r1, [pc, #88]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	490e      	ldr	r1, [pc, #56]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025aa:	f000 f821 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 80025ae:	4601      	mov	r1, r0
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	fa21 f303 	lsr.w	r3, r1, r3
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff f8f2 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023c00 	.word	0x40023c00
 80025e0:	40023800 	.word	0x40023800
 80025e4:	08004ed8 	.word	0x08004ed8
 80025e8:	20000014 	.word	0x20000014
 80025ec:	20000018 	.word	0x20000018

080025f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	2300      	movs	r3, #0
 8002600:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002606:	4b63      	ldr	r3, [pc, #396]	; (8002794 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b04      	cmp	r3, #4
 8002610:	d007      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x32>
 8002612:	2b08      	cmp	r3, #8
 8002614:	d008      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x38>
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 80b4 	bne.w	8002784 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800261c:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800261e:	60bb      	str	r3, [r7, #8]
       break;
 8002620:	e0b3      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002622:	4b5e      	ldr	r3, [pc, #376]	; (800279c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002624:	60bb      	str	r3, [r7, #8]
      break;
 8002626:	e0b0      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002628:	4b5a      	ldr	r3, [pc, #360]	; (8002794 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002630:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002632:	4b58      	ldr	r3, [pc, #352]	; (8002794 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d04a      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263e:	4b55      	ldr	r3, [pc, #340]	; (8002794 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	f04f 0400 	mov.w	r4, #0
 8002648:	f240 11ff 	movw	r1, #511	; 0x1ff
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	ea03 0501 	and.w	r5, r3, r1
 8002654:	ea04 0602 	and.w	r6, r4, r2
 8002658:	4629      	mov	r1, r5
 800265a:	4632      	mov	r2, r6
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	f04f 0400 	mov.w	r4, #0
 8002664:	0154      	lsls	r4, r2, #5
 8002666:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800266a:	014b      	lsls	r3, r1, #5
 800266c:	4619      	mov	r1, r3
 800266e:	4622      	mov	r2, r4
 8002670:	1b49      	subs	r1, r1, r5
 8002672:	eb62 0206 	sbc.w	r2, r2, r6
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	f04f 0400 	mov.w	r4, #0
 800267e:	0194      	lsls	r4, r2, #6
 8002680:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002684:	018b      	lsls	r3, r1, #6
 8002686:	1a5b      	subs	r3, r3, r1
 8002688:	eb64 0402 	sbc.w	r4, r4, r2
 800268c:	f04f 0100 	mov.w	r1, #0
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	00e2      	lsls	r2, r4, #3
 8002696:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800269a:	00d9      	lsls	r1, r3, #3
 800269c:	460b      	mov	r3, r1
 800269e:	4614      	mov	r4, r2
 80026a0:	195b      	adds	r3, r3, r5
 80026a2:	eb44 0406 	adc.w	r4, r4, r6
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	0262      	lsls	r2, r4, #9
 80026b0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80026b4:	0259      	lsls	r1, r3, #9
 80026b6:	460b      	mov	r3, r1
 80026b8:	4614      	mov	r4, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	4621      	mov	r1, r4
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f04f 0400 	mov.w	r4, #0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	f7fd ffb6 	bl	8000638 <__aeabi_uldivmod>
 80026cc:	4603      	mov	r3, r0
 80026ce:	460c      	mov	r4, r1
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	e049      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d4:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	f04f 0400 	mov.w	r4, #0
 80026de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	ea03 0501 	and.w	r5, r3, r1
 80026ea:	ea04 0602 	and.w	r6, r4, r2
 80026ee:	4629      	mov	r1, r5
 80026f0:	4632      	mov	r2, r6
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	f04f 0400 	mov.w	r4, #0
 80026fa:	0154      	lsls	r4, r2, #5
 80026fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002700:	014b      	lsls	r3, r1, #5
 8002702:	4619      	mov	r1, r3
 8002704:	4622      	mov	r2, r4
 8002706:	1b49      	subs	r1, r1, r5
 8002708:	eb62 0206 	sbc.w	r2, r2, r6
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	0194      	lsls	r4, r2, #6
 8002716:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800271a:	018b      	lsls	r3, r1, #6
 800271c:	1a5b      	subs	r3, r3, r1
 800271e:	eb64 0402 	sbc.w	r4, r4, r2
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	00e2      	lsls	r2, r4, #3
 800272c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002730:	00d9      	lsls	r1, r3, #3
 8002732:	460b      	mov	r3, r1
 8002734:	4614      	mov	r4, r2
 8002736:	195b      	adds	r3, r3, r5
 8002738:	eb44 0406 	adc.w	r4, r4, r6
 800273c:	f04f 0100 	mov.w	r1, #0
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	02a2      	lsls	r2, r4, #10
 8002746:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800274a:	0299      	lsls	r1, r3, #10
 800274c:	460b      	mov	r3, r1
 800274e:	4614      	mov	r4, r2
 8002750:	4618      	mov	r0, r3
 8002752:	4621      	mov	r1, r4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f04f 0400 	mov.w	r4, #0
 800275a:	461a      	mov	r2, r3
 800275c:	4623      	mov	r3, r4
 800275e:	f7fd ff6b 	bl	8000638 <__aeabi_uldivmod>
 8002762:	4603      	mov	r3, r0
 8002764:	460c      	mov	r4, r1
 8002766:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	3301      	adds	r3, #1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	60bb      	str	r3, [r7, #8]
      break;
 8002782:	e002      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002786:	60bb      	str	r3, [r7, #8]
      break;
 8002788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800278a:	68bb      	ldr	r3, [r7, #8]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	00f42400 	.word	0x00f42400
 800279c:	007a1200 	.word	0x007a1200

080027a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000014 	.word	0x20000014

080027b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027bc:	f7ff fff0 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027c0:	4601      	mov	r1, r0
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0a9b      	lsrs	r3, r3, #10
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4a03      	ldr	r2, [pc, #12]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	08004ee8 	.word	0x08004ee8

080027e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027e4:	f7ff ffdc 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027e8:	4601      	mov	r1, r0
 80027ea:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0b5b      	lsrs	r3, r3, #13
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4a03      	ldr	r2, [pc, #12]	; (8002804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	08004ee8 	.word	0x08004ee8

08002808 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800282c:	2b00      	cmp	r3, #0
 800282e:	d035      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002830:	4b62      	ldr	r3, [pc, #392]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002836:	f7ff f801 	bl	800183c <HAL_GetTick>
 800283a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800283e:	f7fe fffd 	bl	800183c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0b0      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002850:	4b5b      	ldr	r3, [pc, #364]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f0      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	019a      	lsls	r2, r3, #6
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	071b      	lsls	r3, r3, #28
 8002868:	4955      	ldr	r1, [pc, #340]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002870:	4b52      	ldr	r3, [pc, #328]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002876:	f7fe ffe1 	bl	800183c <HAL_GetTick>
 800287a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800287e:	f7fe ffdd 	bl	800183c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e090      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002890:	4b4b      	ldr	r3, [pc, #300]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8083 	beq.w	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a43      	ldr	r2, [pc, #268]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80028c6:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a3e      	ldr	r2, [pc, #248]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028d2:	f7fe ffb3 	bl	800183c <HAL_GetTick>
 80028d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028da:	f7fe ffaf 	bl	800183c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e062      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028ec:	4b35      	ldr	r3, [pc, #212]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028f8:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002900:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d02f      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	429a      	cmp	r2, r3
 8002914:	d028      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002916:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002920:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002926:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800292c:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d114      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe ff7d 	bl	800183c <HAL_GetTick>
 8002942:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002944:	e00a      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe ff79 	bl	800183c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e02a      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0ee      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002974:	d10d      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298a:	490d      	ldr	r1, [pc, #52]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]
 8002990:	e005      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002998:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800299c:	6093      	str	r3, [r2, #8]
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029aa:	4905      	ldr	r1, [pc, #20]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	42470068 	.word	0x42470068
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40007000 	.word	0x40007000
 80029c8:	42470e40 	.word	0x42470e40

080029cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0a4      	b.n	8002b28 <HAL_RTC_Init+0x15c>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7f5b      	ldrb	r3, [r3, #29]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d126      	bne.n	8002a36 <HAL_RTC_Init+0x6a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4f      	ldr	r2, [pc, #316]	; (8002b30 <HAL_RTC_Init+0x164>)
 80029f2:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a4f      	ldr	r2, [pc, #316]	; (8002b34 <HAL_RTC_Init+0x168>)
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4e      	ldr	r2, [pc, #312]	; (8002b38 <HAL_RTC_Init+0x16c>)
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a4e      	ldr	r2, [pc, #312]	; (8002b3c <HAL_RTC_Init+0x170>)
 8002a04:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4d      	ldr	r2, [pc, #308]	; (8002b40 <HAL_RTC_Init+0x174>)
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a4d      	ldr	r2, [pc, #308]	; (8002b44 <HAL_RTC_Init+0x178>)
 8002a10:	635a      	str	r2, [r3, #52]	; 0x34

    if(hrtc->MspInitCallback == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d102      	bne.n	8002a20 <HAL_RTC_Init+0x54>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4a      	ldr	r2, [pc, #296]	; (8002b48 <HAL_RTC_Init+0x17c>)
 8002a1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3

    if(hrtc->MspDeInitCallback == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <HAL_RTC_Init+0x6a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a46      	ldr	r2, [pc, #280]	; (8002b4c <HAL_RTC_Init+0x180>)
 8002a34:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	22ca      	movs	r2, #202	; 0xca
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2253      	movs	r2, #83	; 0x53
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fcc9 	bl	80033e4 <RTC_EnterInitMode>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RTC_Init+0x9e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2204      	movs	r2, #4
 8002a64:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e05e      	b.n	8002b28 <HAL_RTC_Init+0x15c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a7c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6899      	ldr	r1, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68d2      	ldr	r2, [r2, #12]
 8002aa4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6919      	ldr	r1, [r3, #16]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	041a      	lsls	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ac8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10e      	bne.n	8002af6 <HAL_RTC_Init+0x12a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fc5b 	bl	8003394 <HAL_RTC_WaitForSynchro>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RTC_Init+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	22ff      	movs	r2, #255	; 0xff
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2204      	movs	r2, #4
 8002af0:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e018      	b.n	8002b28 <HAL_RTC_Init+0x15c>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	22ff      	movs	r2, #255	; 0xff
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002b26:	2300      	movs	r3, #0
  }
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	08000b7d 	.word	0x08000b7d
 8002b34:	08003569 	.word	0x08003569
 8002b38:	080034b5 	.word	0x080034b5
 8002b3c:	080034f1 	.word	0x080034f1
 8002b40:	080034c9 	.word	0x080034c9
 8002b44:	080034dd 	.word	0x080034dd
 8002b48:	0800128d 	.word	0x0800128d
 8002b4c:	080012c5 	.word	0x080012c5

08002b50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	7f1b      	ldrb	r3, [r3, #28]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_RTC_SetTime+0x1c>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0aa      	b.n	8002cc2 <HAL_RTC_SetTime+0x172>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2202      	movs	r2, #2
 8002b76:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d126      	bne.n	8002bcc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fc50 	bl	800343c <RTC_ByteToBcd2>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fc49 	bl	800343c <RTC_ByteToBcd2>
 8002baa:	4603      	mov	r3, r0
 8002bac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002bae:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	789b      	ldrb	r3, [r3, #2]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fc41 	bl	800343c <RTC_ByteToBcd2>
 8002bba:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002bbc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	78db      	ldrb	r3, [r3, #3]
 8002bc4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e018      	b.n	8002bfe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	785b      	ldrb	r3, [r3, #1]
 8002bea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002bec:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002bf2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	78db      	ldrb	r3, [r3, #3]
 8002bf8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	22ca      	movs	r2, #202	; 0xca
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2253      	movs	r2, #83	; 0x53
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fbe8 	bl	80033e4 <RTC_EnterInitMode>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	22ff      	movs	r2, #255	; 0xff
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2204      	movs	r2, #4
 8002c26:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e047      	b.n	8002cc2 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002c3c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002c40:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c50:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6899      	ldr	r1, [r3, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c78:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d111      	bne.n	8002cac <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fb83 	bl	8003394 <HAL_RTC_WaitForSynchro>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	22ff      	movs	r2, #255	; 0xff
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e00a      	b.n	8002cc2 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	22ff      	movs	r2, #255	; 0xff
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}

08002cca <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002cfc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d00:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	0c1b      	lsrs	r3, r3, #16
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11a      	bne.n	8002d7c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fb94 	bl	8003478 <RTC_Bcd2ToByte>
 8002d50:	4603      	mov	r3, r0
 8002d52:	461a      	mov	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fb8b 	bl	8003478 <RTC_Bcd2ToByte>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	789b      	ldrb	r3, [r3, #2]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fb82 	bl	8003478 <RTC_Bcd2ToByte>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461a      	mov	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d86:	b590      	push	{r4, r7, lr}
 8002d88:	b087      	sub	sp, #28
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	7f1b      	ldrb	r3, [r3, #28]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_RTC_SetDate+0x1c>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e094      	b.n	8002ecc <HAL_RTC_SetDate+0x146>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2202      	movs	r2, #2
 8002dac:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10e      	bne.n	8002dd2 <HAL_RTC_SetDate+0x4c>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	f023 0310 	bic.w	r3, r3, #16
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	330a      	adds	r3, #10
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d11c      	bne.n	8002e12 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	78db      	ldrb	r3, [r3, #3]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fb2d 	bl	800343c <RTC_ByteToBcd2>
 8002de2:	4603      	mov	r3, r0
 8002de4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	785b      	ldrb	r3, [r3, #1]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fb26 	bl	800343c <RTC_ByteToBcd2>
 8002df0:	4603      	mov	r3, r0
 8002df2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002df4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	789b      	ldrb	r3, [r3, #2]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fb1e 	bl	800343c <RTC_ByteToBcd2>
 8002e00:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002e02:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	e00e      	b.n	8002e30 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	78db      	ldrb	r3, [r3, #3]
 8002e16:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	785b      	ldrb	r3, [r3, #1]
 8002e1c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e1e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002e24:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	22ca      	movs	r2, #202	; 0xca
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2253      	movs	r2, #83	; 0x53
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 facf 	bl	80033e4 <RTC_EnterInitMode>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	22ff      	movs	r2, #255	; 0xff
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2204      	movs	r2, #4
 8002e58:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e033      	b.n	8002ecc <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e6e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e72:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e82:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d111      	bne.n	8002eb6 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa7e 	bl	8003394 <HAL_RTC_WaitForSynchro>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00a      	b.n	8002ecc <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	22ff      	movs	r2, #255	; 0xff
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002eca:	2300      	movs	r3, #0
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd90      	pop	{r4, r7, pc}

08002ed4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002eee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	0c1b      	lsrs	r3, r3, #16
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	0b5b      	lsrs	r3, r3, #13
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d11a      	bne.n	8002f68 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	78db      	ldrb	r3, [r3, #3]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fa9e 	bl	8003478 <RTC_Bcd2ToByte>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	785b      	ldrb	r3, [r3, #1]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fa95 	bl	8003478 <RTC_Bcd2ToByte>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	789b      	ldrb	r3, [r3, #2]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fa8c 	bl	8003478 <RTC_Bcd2ToByte>
 8002f60:	4603      	mov	r3, r0
 8002f62:	461a      	mov	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002f88:	4b93      	ldr	r3, [pc, #588]	; (80031d8 <HAL_RTC_SetAlarm_IT+0x264>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a93      	ldr	r2, [pc, #588]	; (80031dc <HAL_RTC_SetAlarm_IT+0x268>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	0adb      	lsrs	r3, r3, #11
 8002f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f98:	fb02 f303 	mul.w	r3, r2, r3
 8002f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	7f1b      	ldrb	r3, [r3, #28]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_RTC_SetAlarm_IT+0x36>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e111      	b.n	80031ce <HAL_RTC_SetAlarm_IT+0x25a>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d137      	bne.n	800302c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fa31 	bl	800343c <RTC_ByteToBcd2>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fa2a 	bl	800343c <RTC_ByteToBcd2>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002fec:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	789b      	ldrb	r3, [r3, #2]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fa22 	bl	800343c <RTC_ByteToBcd2>
 8002ff8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002ffa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	78db      	ldrb	r3, [r3, #3]
 8003002:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003004:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fa14 	bl	800343c <RTC_ByteToBcd2>
 8003014:	4603      	mov	r3, r0
 8003016:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003018:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003020:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003026:	4313      	orrs	r3, r2
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	e023      	b.n	8003074 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2200      	movs	r2, #0
 800303e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	785b      	ldrb	r3, [r3, #1]
 800304a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800304c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003052:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	78db      	ldrb	r3, [r3, #3]
 8003058:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800305a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003062:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003064:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800306a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003070:	4313      	orrs	r3, r2
 8003072:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	22ca      	movs	r2, #202	; 0xca
 8003086:	625a      	str	r2, [r3, #36]	; 0x24
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2253      	movs	r2, #83	; 0x53
 800308e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003098:	d141      	bne.n	800311e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80030ba:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	1e5a      	subs	r2, r3, #1
 80030c0:	617a      	str	r2, [r7, #20]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10b      	bne.n	80030de <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	22ff      	movs	r2, #255	; 0xff
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2203      	movs	r2, #3
 80030d2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e077      	b.n	80031ce <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0e7      	beq.n	80030bc <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	e040      	b.n	80031a0 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800312c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800313e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	1e5a      	subs	r2, r3, #1
 8003144:	617a      	str	r2, [r7, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2203      	movs	r2, #3
 8003156:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e035      	b.n	80031ce <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0e7      	beq.n	8003140 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800319e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <HAL_RTC_SetAlarm_IT+0x26c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0e      	ldr	r2, [pc, #56]	; (80031e0 <HAL_RTC_SetAlarm_IT+0x26c>)
 80031a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031aa:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <HAL_RTC_SetAlarm_IT+0x26c>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <HAL_RTC_SetAlarm_IT+0x26c>)
 80031b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	22ff      	movs	r2, #255	; 0xff
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3724      	adds	r7, #36	; 0x24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd90      	pop	{r4, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000014 	.word	0x20000014
 80031dc:	10624dd3 	.word	0x10624dd3
 80031e0:	40013c00 	.word	0x40013c00

080031e4 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003200:	d10e      	bne.n	8003220 <HAL_RTC_GetAlarm+0x3c>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003218:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	e00d      	b.n	800323c <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003236:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800323a:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003246:	b2da      	uxtb	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003256:	b2da      	uxtb	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	0e1b      	lsrs	r3, r3, #24
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800328a:	b2da      	uxtb	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	615a      	str	r2, [r3, #20]

  if(Format == RTC_FORMAT_BIN)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d125      	bne.n	80032f8 <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f8e1 	bl	8003478 <RTC_Bcd2ToByte>
 80032b6:	4603      	mov	r3, r0
 80032b8:	461a      	mov	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	785b      	ldrb	r3, [r3, #1]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f8d8 	bl	8003478 <RTC_Bcd2ToByte>
 80032c8:	4603      	mov	r3, r0
 80032ca:	461a      	mov	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	789b      	ldrb	r3, [r3, #2]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 f8cf 	bl	8003478 <RTC_Bcd2ToByte>
 80032da:	4603      	mov	r3, r0
 80032dc:	461a      	mov	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f8c5 	bl	8003478 <RTC_Bcd2ToByte>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d013      	beq.n	8003342 <HAL_RTC_AlarmIRQHandler+0x3e>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00c      	beq.n	8003342 <HAL_RTC_AlarmIRQHandler+0x3e>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	4798      	blx	r3
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003340:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d013      	beq.n	8003378 <HAL_RTC_AlarmIRQHandler+0x74>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00c      	beq.n	8003378 <HAL_RTC_AlarmIRQHandler+0x74>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003376:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_RTC_AlarmIRQHandler+0x8c>)
 800337a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800337e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	775a      	strb	r2, [r3, #29]
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40013c00 	.word	0x40013c00

08003394 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033b0:	f7fe fa44 	bl	800183c <HAL_GetTick>
 80033b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80033b6:	e009      	b.n	80033cc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80033b8:	f7fe fa40 	bl	800183c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c6:	d901      	bls.n	80033cc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e007      	b.n	80033dc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0ee      	beq.n	80033b8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d119      	bne.n	8003432 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003406:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003408:	f7fe fa18 	bl	800183c <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800340e:	e009      	b.n	8003424 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003410:	f7fe fa14 	bl	800183c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800341e:	d901      	bls.n	8003424 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e007      	b.n	8003434 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ee      	beq.n	8003410 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800344a:	e005      	b.n	8003458 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	3b0a      	subs	r3, #10
 8003456:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2b09      	cmp	r3, #9
 800345c:	d8f6      	bhi.n	800344c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	b2da      	uxtb	r2, r3
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	4313      	orrs	r3, r2
 800346a:	b2db      	uxtb	r3, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	b2db      	uxtb	r3, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_TimeStampEventCallback could be implemented in the user file
  */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper1EventCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper2EventCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3350      	adds	r3, #80	; 0x50
 800351a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4413      	add	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	601a      	str	r2, [r3, #0]
}
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3350      	adds	r3, #80	; 0x50
 800354c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4413      	add	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e03f      	b.n	800360e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fea6 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fbf1 	bl	8003da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b088      	sub	sp, #32
 800361a:	af02      	add	r7, sp, #8
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	4613      	mov	r3, r2
 8003624:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	f040 8083 	bne.w	800373e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_UART_Transmit+0x2e>
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e07b      	b.n	8003740 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_UART_Transmit+0x40>
 8003652:	2302      	movs	r3, #2
 8003654:	e074      	b.n	8003740 <HAL_UART_Transmit+0x12a>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2221      	movs	r2, #33	; 0x21
 8003668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800366c:	f7fe f8e6 	bl	800183c <HAL_GetTick>
 8003670:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	88fa      	ldrh	r2, [r7, #6]
 8003676:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003686:	e042      	b.n	800370e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369e:	d122      	bne.n	80036e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2200      	movs	r2, #0
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fa10 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e042      	b.n	8003740 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d103      	bne.n	80036de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	3302      	adds	r3, #2
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	e017      	b.n	800370e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3301      	adds	r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	e013      	b.n	800370e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2200      	movs	r2, #0
 80036ee:	2180      	movs	r1, #128	; 0x80
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f9ed 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e01f      	b.n	8003740 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	60ba      	str	r2, [r7, #8]
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1b7      	bne.n	8003688 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2200      	movs	r2, #0
 8003720:	2140      	movs	r1, #64	; 0x40
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f9d4 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e006      	b.n	8003740 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e000      	b.n	8003740 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b20      	cmp	r3, #32
 8003766:	f040 8090 	bne.w	800388a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_UART_Receive+0x2e>
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e088      	b.n	800388c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_UART_Receive+0x40>
 8003784:	2302      	movs	r3, #2
 8003786:	e081      	b.n	800388c <HAL_UART_Receive+0x144>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2222      	movs	r2, #34	; 0x22
 800379a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800379e:	f7fe f84d 	bl	800183c <HAL_GetTick>
 80037a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	88fa      	ldrh	r2, [r7, #6]
 80037ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80037b8:	e05c      	b.n	8003874 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d0:	d12b      	bne.n	800382a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2200      	movs	r2, #0
 80037da:	2120      	movs	r1, #32
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f977 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e04f      	b.n	800388c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10c      	bne.n	8003812 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003804:	b29a      	uxth	r2, r3
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	3302      	adds	r3, #2
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	e030      	b.n	8003874 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	b29b      	uxth	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	b29a      	uxth	r2, r3
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3301      	adds	r3, #1
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	e024      	b.n	8003874 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2200      	movs	r2, #0
 8003832:	2120      	movs	r1, #32
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f94b 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e023      	b.n	800388c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d108      	bne.n	800385e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	60ba      	str	r2, [r7, #8]
 8003858:	b2ca      	uxtb	r2, r1
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e00a      	b.n	8003874 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	1c59      	adds	r1, r3, #1
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d19d      	bne.n	80037ba <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e000      	b.n	800388c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800388a:	2302      	movs	r3, #2
  }
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10d      	bne.n	80038e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_UART_IRQHandler+0x52>
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9e0 	bl	8003ca4 <UART_Receive_IT>
      return;
 80038e4:	e0d1      	b.n	8003a8a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80b0 	beq.w	8003a4e <HAL_UART_IRQHandler+0x1ba>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <HAL_UART_IRQHandler+0x70>
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80a5 	beq.w	8003a4e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_UART_IRQHandler+0x90>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	f043 0201 	orr.w	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_UART_IRQHandler+0xb0>
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	f043 0202 	orr.w	r2, r3, #2
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_UART_IRQHandler+0xd0>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	f043 0204 	orr.w	r2, r3, #4
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00f      	beq.n	800398e <HAL_UART_IRQHandler+0xfa>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <HAL_UART_IRQHandler+0xee>
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	f043 0208 	orr.w	r2, r3, #8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d078      	beq.n	8003a88 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <HAL_UART_IRQHandler+0x11c>
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f97a 	bl	8003ca4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	bf0c      	ite	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	2300      	movne	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d102      	bne.n	80039d8 <HAL_UART_IRQHandler+0x144>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d031      	beq.n	8003a3c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f8c3 	bl	8003b64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d123      	bne.n	8003a34 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a08:	4a21      	ldr	r2, [pc, #132]	; (8003a90 <HAL_UART_IRQHandler+0x1fc>)
 8003a0a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe f882 	bl	8001b1a <HAL_DMA_Abort_IT>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d016      	beq.n	8003a4a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a26:	4610      	mov	r0, r2
 8003a28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2a:	e00e      	b.n	8003a4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f845 	bl	8003abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a32:	e00a      	b.n	8003a4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f841 	bl	8003abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3a:	e006      	b.n	8003a4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f83d 	bl	8003abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a48:	e01e      	b.n	8003a88 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4a:	bf00      	nop
    return;
 8003a4c:	e01c      	b.n	8003a88 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_UART_IRQHandler+0x1d6>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f8b0 	bl	8003bc8 <UART_Transmit_IT>
    return;
 8003a68:	e00f      	b.n	8003a8a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_UART_IRQHandler+0x1f6>
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8f8 	bl	8003c74 <UART_EndTransmit_IT>
    return;
 8003a84:	bf00      	nop
 8003a86:	e000      	b.n	8003a8a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003a88:	bf00      	nop
  }
}
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	08003ba1 	.word	0x08003ba1

08003a94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae0:	e02c      	b.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae8:	d028      	beq.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003af0:	f7fd fea4 	bl	800183c <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d21d      	bcs.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b0e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e00f      	b.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4013      	ands	r3, r2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d0c3      	beq.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b7a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f7ff ff7e 	bl	8003abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b21      	cmp	r3, #33	; 0x21
 8003bda:	d144      	bne.n	8003c66 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be4:	d11a      	bne.n	8003c1c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bfa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	1c9a      	adds	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	621a      	str	r2, [r3, #32]
 8003c0e:	e00e      	b.n	8003c2e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	621a      	str	r2, [r3, #32]
 8003c1a:	e008      	b.n	8003c2e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	1c59      	adds	r1, r3, #1
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6211      	str	r1, [r2, #32]
 8003c26:	781a      	ldrb	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e000      	b.n	8003c68 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff fefd 	bl	8003a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b22      	cmp	r3, #34	; 0x22
 8003cb6:	d171      	bne.n	8003d9c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d123      	bne.n	8003d0a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10e      	bne.n	8003cee <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	1c9a      	adds	r2, r3, #2
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
 8003cec:	e029      	b.n	8003d42 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
 8003d08:	e01b      	b.n	8003d42 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6858      	ldr	r0, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	1c59      	adds	r1, r3, #1
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6291      	str	r1, [r2, #40]	; 0x28
 8003d22:	b2c2      	uxtb	r2, r0
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	e00c      	b.n	8003d42 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	1c58      	adds	r0, r3, #1
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	6288      	str	r0, [r1, #40]	; 0x28
 8003d3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d120      	bne.n	8003d98 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0220 	bic.w	r2, r2, #32
 8003d64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0201 	bic.w	r2, r2, #1
 8003d84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fe8a 	bl	8003aa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e002      	b.n	8003d9e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e000      	b.n	8003d9e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003dea:	f023 030c 	bic.w	r3, r3, #12
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	430b      	orrs	r3, r1
 8003df6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e16:	f040 818b 	bne.w	8004130 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4ac1      	ldr	r2, [pc, #772]	; (8004124 <UART_SetConfig+0x37c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d005      	beq.n	8003e30 <UART_SetConfig+0x88>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4abf      	ldr	r2, [pc, #764]	; (8004128 <UART_SetConfig+0x380>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	f040 80bd 	bne.w	8003faa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e30:	f7fe fcd6 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 8003e34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	461d      	mov	r5, r3
 8003e3a:	f04f 0600 	mov.w	r6, #0
 8003e3e:	46a8      	mov	r8, r5
 8003e40:	46b1      	mov	r9, r6
 8003e42:	eb18 0308 	adds.w	r3, r8, r8
 8003e46:	eb49 0409 	adc.w	r4, r9, r9
 8003e4a:	4698      	mov	r8, r3
 8003e4c:	46a1      	mov	r9, r4
 8003e4e:	eb18 0805 	adds.w	r8, r8, r5
 8003e52:	eb49 0906 	adc.w	r9, r9, r6
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e6a:	4688      	mov	r8, r1
 8003e6c:	4691      	mov	r9, r2
 8003e6e:	eb18 0005 	adds.w	r0, r8, r5
 8003e72:	eb49 0106 	adc.w	r1, r9, r6
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	461d      	mov	r5, r3
 8003e7c:	f04f 0600 	mov.w	r6, #0
 8003e80:	196b      	adds	r3, r5, r5
 8003e82:	eb46 0406 	adc.w	r4, r6, r6
 8003e86:	461a      	mov	r2, r3
 8003e88:	4623      	mov	r3, r4
 8003e8a:	f7fc fbd5 	bl	8000638 <__aeabi_uldivmod>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460c      	mov	r4, r1
 8003e92:	461a      	mov	r2, r3
 8003e94:	4ba5      	ldr	r3, [pc, #660]	; (800412c <UART_SetConfig+0x384>)
 8003e96:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	461d      	mov	r5, r3
 8003ea4:	f04f 0600 	mov.w	r6, #0
 8003ea8:	46a9      	mov	r9, r5
 8003eaa:	46b2      	mov	sl, r6
 8003eac:	eb19 0309 	adds.w	r3, r9, r9
 8003eb0:	eb4a 040a 	adc.w	r4, sl, sl
 8003eb4:	4699      	mov	r9, r3
 8003eb6:	46a2      	mov	sl, r4
 8003eb8:	eb19 0905 	adds.w	r9, r9, r5
 8003ebc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ec0:	f04f 0100 	mov.w	r1, #0
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ecc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ed0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ed4:	4689      	mov	r9, r1
 8003ed6:	4692      	mov	sl, r2
 8003ed8:	eb19 0005 	adds.w	r0, r9, r5
 8003edc:	eb4a 0106 	adc.w	r1, sl, r6
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	461d      	mov	r5, r3
 8003ee6:	f04f 0600 	mov.w	r6, #0
 8003eea:	196b      	adds	r3, r5, r5
 8003eec:	eb46 0406 	adc.w	r4, r6, r6
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4623      	mov	r3, r4
 8003ef4:	f7fc fba0 	bl	8000638 <__aeabi_uldivmod>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	460c      	mov	r4, r1
 8003efc:	461a      	mov	r2, r3
 8003efe:	4b8b      	ldr	r3, [pc, #556]	; (800412c <UART_SetConfig+0x384>)
 8003f00:	fba3 1302 	umull	r1, r3, r3, r2
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	2164      	movs	r1, #100	; 0x64
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	3332      	adds	r3, #50	; 0x32
 8003f12:	4a86      	ldr	r2, [pc, #536]	; (800412c <UART_SetConfig+0x384>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f20:	4498      	add	r8, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	461d      	mov	r5, r3
 8003f26:	f04f 0600 	mov.w	r6, #0
 8003f2a:	46a9      	mov	r9, r5
 8003f2c:	46b2      	mov	sl, r6
 8003f2e:	eb19 0309 	adds.w	r3, r9, r9
 8003f32:	eb4a 040a 	adc.w	r4, sl, sl
 8003f36:	4699      	mov	r9, r3
 8003f38:	46a2      	mov	sl, r4
 8003f3a:	eb19 0905 	adds.w	r9, r9, r5
 8003f3e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f56:	4689      	mov	r9, r1
 8003f58:	4692      	mov	sl, r2
 8003f5a:	eb19 0005 	adds.w	r0, r9, r5
 8003f5e:	eb4a 0106 	adc.w	r1, sl, r6
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	461d      	mov	r5, r3
 8003f68:	f04f 0600 	mov.w	r6, #0
 8003f6c:	196b      	adds	r3, r5, r5
 8003f6e:	eb46 0406 	adc.w	r4, r6, r6
 8003f72:	461a      	mov	r2, r3
 8003f74:	4623      	mov	r3, r4
 8003f76:	f7fc fb5f 	bl	8000638 <__aeabi_uldivmod>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b6a      	ldr	r3, [pc, #424]	; (800412c <UART_SetConfig+0x384>)
 8003f82:	fba3 1302 	umull	r1, r3, r3, r2
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	2164      	movs	r1, #100	; 0x64
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	3332      	adds	r3, #50	; 0x32
 8003f94:	4a65      	ldr	r2, [pc, #404]	; (800412c <UART_SetConfig+0x384>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	f003 0207 	and.w	r2, r3, #7
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4442      	add	r2, r8
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	e26f      	b.n	800448a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003faa:	f7fe fc05 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8003fae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	461d      	mov	r5, r3
 8003fb4:	f04f 0600 	mov.w	r6, #0
 8003fb8:	46a8      	mov	r8, r5
 8003fba:	46b1      	mov	r9, r6
 8003fbc:	eb18 0308 	adds.w	r3, r8, r8
 8003fc0:	eb49 0409 	adc.w	r4, r9, r9
 8003fc4:	4698      	mov	r8, r3
 8003fc6:	46a1      	mov	r9, r4
 8003fc8:	eb18 0805 	adds.w	r8, r8, r5
 8003fcc:	eb49 0906 	adc.w	r9, r9, r6
 8003fd0:	f04f 0100 	mov.w	r1, #0
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fdc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fe0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fe4:	4688      	mov	r8, r1
 8003fe6:	4691      	mov	r9, r2
 8003fe8:	eb18 0005 	adds.w	r0, r8, r5
 8003fec:	eb49 0106 	adc.w	r1, r9, r6
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	461d      	mov	r5, r3
 8003ff6:	f04f 0600 	mov.w	r6, #0
 8003ffa:	196b      	adds	r3, r5, r5
 8003ffc:	eb46 0406 	adc.w	r4, r6, r6
 8004000:	461a      	mov	r2, r3
 8004002:	4623      	mov	r3, r4
 8004004:	f7fc fb18 	bl	8000638 <__aeabi_uldivmod>
 8004008:	4603      	mov	r3, r0
 800400a:	460c      	mov	r4, r1
 800400c:	461a      	mov	r2, r3
 800400e:	4b47      	ldr	r3, [pc, #284]	; (800412c <UART_SetConfig+0x384>)
 8004010:	fba3 2302 	umull	r2, r3, r3, r2
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	461d      	mov	r5, r3
 800401e:	f04f 0600 	mov.w	r6, #0
 8004022:	46a9      	mov	r9, r5
 8004024:	46b2      	mov	sl, r6
 8004026:	eb19 0309 	adds.w	r3, r9, r9
 800402a:	eb4a 040a 	adc.w	r4, sl, sl
 800402e:	4699      	mov	r9, r3
 8004030:	46a2      	mov	sl, r4
 8004032:	eb19 0905 	adds.w	r9, r9, r5
 8004036:	eb4a 0a06 	adc.w	sl, sl, r6
 800403a:	f04f 0100 	mov.w	r1, #0
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004046:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800404a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800404e:	4689      	mov	r9, r1
 8004050:	4692      	mov	sl, r2
 8004052:	eb19 0005 	adds.w	r0, r9, r5
 8004056:	eb4a 0106 	adc.w	r1, sl, r6
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	461d      	mov	r5, r3
 8004060:	f04f 0600 	mov.w	r6, #0
 8004064:	196b      	adds	r3, r5, r5
 8004066:	eb46 0406 	adc.w	r4, r6, r6
 800406a:	461a      	mov	r2, r3
 800406c:	4623      	mov	r3, r4
 800406e:	f7fc fae3 	bl	8000638 <__aeabi_uldivmod>
 8004072:	4603      	mov	r3, r0
 8004074:	460c      	mov	r4, r1
 8004076:	461a      	mov	r2, r3
 8004078:	4b2c      	ldr	r3, [pc, #176]	; (800412c <UART_SetConfig+0x384>)
 800407a:	fba3 1302 	umull	r1, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2164      	movs	r1, #100	; 0x64
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	3332      	adds	r3, #50	; 0x32
 800408c:	4a27      	ldr	r2, [pc, #156]	; (800412c <UART_SetConfig+0x384>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800409a:	4498      	add	r8, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	461d      	mov	r5, r3
 80040a0:	f04f 0600 	mov.w	r6, #0
 80040a4:	46a9      	mov	r9, r5
 80040a6:	46b2      	mov	sl, r6
 80040a8:	eb19 0309 	adds.w	r3, r9, r9
 80040ac:	eb4a 040a 	adc.w	r4, sl, sl
 80040b0:	4699      	mov	r9, r3
 80040b2:	46a2      	mov	sl, r4
 80040b4:	eb19 0905 	adds.w	r9, r9, r5
 80040b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80040bc:	f04f 0100 	mov.w	r1, #0
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040d0:	4689      	mov	r9, r1
 80040d2:	4692      	mov	sl, r2
 80040d4:	eb19 0005 	adds.w	r0, r9, r5
 80040d8:	eb4a 0106 	adc.w	r1, sl, r6
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	461d      	mov	r5, r3
 80040e2:	f04f 0600 	mov.w	r6, #0
 80040e6:	196b      	adds	r3, r5, r5
 80040e8:	eb46 0406 	adc.w	r4, r6, r6
 80040ec:	461a      	mov	r2, r3
 80040ee:	4623      	mov	r3, r4
 80040f0:	f7fc faa2 	bl	8000638 <__aeabi_uldivmod>
 80040f4:	4603      	mov	r3, r0
 80040f6:	460c      	mov	r4, r1
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b0c      	ldr	r3, [pc, #48]	; (800412c <UART_SetConfig+0x384>)
 80040fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	2164      	movs	r1, #100	; 0x64
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	3332      	adds	r3, #50	; 0x32
 800410e:	4a07      	ldr	r2, [pc, #28]	; (800412c <UART_SetConfig+0x384>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	f003 0207 	and.w	r2, r3, #7
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4442      	add	r2, r8
 8004120:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004122:	e1b2      	b.n	800448a <UART_SetConfig+0x6e2>
 8004124:	40011000 	.word	0x40011000
 8004128:	40011400 	.word	0x40011400
 800412c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4ad7      	ldr	r2, [pc, #860]	; (8004494 <UART_SetConfig+0x6ec>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d005      	beq.n	8004146 <UART_SetConfig+0x39e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4ad6      	ldr	r2, [pc, #856]	; (8004498 <UART_SetConfig+0x6f0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	f040 80d1 	bne.w	80042e8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004146:	f7fe fb4b 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 800414a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	469a      	mov	sl, r3
 8004150:	f04f 0b00 	mov.w	fp, #0
 8004154:	46d0      	mov	r8, sl
 8004156:	46d9      	mov	r9, fp
 8004158:	eb18 0308 	adds.w	r3, r8, r8
 800415c:	eb49 0409 	adc.w	r4, r9, r9
 8004160:	4698      	mov	r8, r3
 8004162:	46a1      	mov	r9, r4
 8004164:	eb18 080a 	adds.w	r8, r8, sl
 8004168:	eb49 090b 	adc.w	r9, r9, fp
 800416c:	f04f 0100 	mov.w	r1, #0
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004178:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800417c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004180:	4688      	mov	r8, r1
 8004182:	4691      	mov	r9, r2
 8004184:	eb1a 0508 	adds.w	r5, sl, r8
 8004188:	eb4b 0609 	adc.w	r6, fp, r9
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4619      	mov	r1, r3
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	f04f 0400 	mov.w	r4, #0
 800419e:	0094      	lsls	r4, r2, #2
 80041a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041a4:	008b      	lsls	r3, r1, #2
 80041a6:	461a      	mov	r2, r3
 80041a8:	4623      	mov	r3, r4
 80041aa:	4628      	mov	r0, r5
 80041ac:	4631      	mov	r1, r6
 80041ae:	f7fc fa43 	bl	8000638 <__aeabi_uldivmod>
 80041b2:	4603      	mov	r3, r0
 80041b4:	460c      	mov	r4, r1
 80041b6:	461a      	mov	r2, r3
 80041b8:	4bb8      	ldr	r3, [pc, #736]	; (800449c <UART_SetConfig+0x6f4>)
 80041ba:	fba3 2302 	umull	r2, r3, r3, r2
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	469b      	mov	fp, r3
 80041c8:	f04f 0c00 	mov.w	ip, #0
 80041cc:	46d9      	mov	r9, fp
 80041ce:	46e2      	mov	sl, ip
 80041d0:	eb19 0309 	adds.w	r3, r9, r9
 80041d4:	eb4a 040a 	adc.w	r4, sl, sl
 80041d8:	4699      	mov	r9, r3
 80041da:	46a2      	mov	sl, r4
 80041dc:	eb19 090b 	adds.w	r9, r9, fp
 80041e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041e4:	f04f 0100 	mov.w	r1, #0
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041f8:	4689      	mov	r9, r1
 80041fa:	4692      	mov	sl, r2
 80041fc:	eb1b 0509 	adds.w	r5, fp, r9
 8004200:	eb4c 060a 	adc.w	r6, ip, sl
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4619      	mov	r1, r3
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	f04f 0400 	mov.w	r4, #0
 8004216:	0094      	lsls	r4, r2, #2
 8004218:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800421c:	008b      	lsls	r3, r1, #2
 800421e:	461a      	mov	r2, r3
 8004220:	4623      	mov	r3, r4
 8004222:	4628      	mov	r0, r5
 8004224:	4631      	mov	r1, r6
 8004226:	f7fc fa07 	bl	8000638 <__aeabi_uldivmod>
 800422a:	4603      	mov	r3, r0
 800422c:	460c      	mov	r4, r1
 800422e:	461a      	mov	r2, r3
 8004230:	4b9a      	ldr	r3, [pc, #616]	; (800449c <UART_SetConfig+0x6f4>)
 8004232:	fba3 1302 	umull	r1, r3, r3, r2
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2164      	movs	r1, #100	; 0x64
 800423a:	fb01 f303 	mul.w	r3, r1, r3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	3332      	adds	r3, #50	; 0x32
 8004244:	4a95      	ldr	r2, [pc, #596]	; (800449c <UART_SetConfig+0x6f4>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004250:	4498      	add	r8, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	469b      	mov	fp, r3
 8004256:	f04f 0c00 	mov.w	ip, #0
 800425a:	46d9      	mov	r9, fp
 800425c:	46e2      	mov	sl, ip
 800425e:	eb19 0309 	adds.w	r3, r9, r9
 8004262:	eb4a 040a 	adc.w	r4, sl, sl
 8004266:	4699      	mov	r9, r3
 8004268:	46a2      	mov	sl, r4
 800426a:	eb19 090b 	adds.w	r9, r9, fp
 800426e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800427e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004282:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004286:	4689      	mov	r9, r1
 8004288:	4692      	mov	sl, r2
 800428a:	eb1b 0509 	adds.w	r5, fp, r9
 800428e:	eb4c 060a 	adc.w	r6, ip, sl
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4619      	mov	r1, r3
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	f04f 0400 	mov.w	r4, #0
 80042a4:	0094      	lsls	r4, r2, #2
 80042a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042aa:	008b      	lsls	r3, r1, #2
 80042ac:	461a      	mov	r2, r3
 80042ae:	4623      	mov	r3, r4
 80042b0:	4628      	mov	r0, r5
 80042b2:	4631      	mov	r1, r6
 80042b4:	f7fc f9c0 	bl	8000638 <__aeabi_uldivmod>
 80042b8:	4603      	mov	r3, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	461a      	mov	r2, r3
 80042be:	4b77      	ldr	r3, [pc, #476]	; (800449c <UART_SetConfig+0x6f4>)
 80042c0:	fba3 1302 	umull	r1, r3, r3, r2
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	2164      	movs	r1, #100	; 0x64
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	3332      	adds	r3, #50	; 0x32
 80042d2:	4a72      	ldr	r2, [pc, #456]	; (800449c <UART_SetConfig+0x6f4>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	f003 020f 	and.w	r2, r3, #15
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4442      	add	r2, r8
 80042e4:	609a      	str	r2, [r3, #8]
 80042e6:	e0d0      	b.n	800448a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80042e8:	f7fe fa66 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 80042ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	469a      	mov	sl, r3
 80042f2:	f04f 0b00 	mov.w	fp, #0
 80042f6:	46d0      	mov	r8, sl
 80042f8:	46d9      	mov	r9, fp
 80042fa:	eb18 0308 	adds.w	r3, r8, r8
 80042fe:	eb49 0409 	adc.w	r4, r9, r9
 8004302:	4698      	mov	r8, r3
 8004304:	46a1      	mov	r9, r4
 8004306:	eb18 080a 	adds.w	r8, r8, sl
 800430a:	eb49 090b 	adc.w	r9, r9, fp
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800431a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800431e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004322:	4688      	mov	r8, r1
 8004324:	4691      	mov	r9, r2
 8004326:	eb1a 0508 	adds.w	r5, sl, r8
 800432a:	eb4b 0609 	adc.w	r6, fp, r9
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4619      	mov	r1, r3
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	f04f 0400 	mov.w	r4, #0
 8004340:	0094      	lsls	r4, r2, #2
 8004342:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004346:	008b      	lsls	r3, r1, #2
 8004348:	461a      	mov	r2, r3
 800434a:	4623      	mov	r3, r4
 800434c:	4628      	mov	r0, r5
 800434e:	4631      	mov	r1, r6
 8004350:	f7fc f972 	bl	8000638 <__aeabi_uldivmod>
 8004354:	4603      	mov	r3, r0
 8004356:	460c      	mov	r4, r1
 8004358:	461a      	mov	r2, r3
 800435a:	4b50      	ldr	r3, [pc, #320]	; (800449c <UART_SetConfig+0x6f4>)
 800435c:	fba3 2302 	umull	r2, r3, r3, r2
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	469b      	mov	fp, r3
 800436a:	f04f 0c00 	mov.w	ip, #0
 800436e:	46d9      	mov	r9, fp
 8004370:	46e2      	mov	sl, ip
 8004372:	eb19 0309 	adds.w	r3, r9, r9
 8004376:	eb4a 040a 	adc.w	r4, sl, sl
 800437a:	4699      	mov	r9, r3
 800437c:	46a2      	mov	sl, r4
 800437e:	eb19 090b 	adds.w	r9, r9, fp
 8004382:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004392:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004396:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800439a:	4689      	mov	r9, r1
 800439c:	4692      	mov	sl, r2
 800439e:	eb1b 0509 	adds.w	r5, fp, r9
 80043a2:	eb4c 060a 	adc.w	r6, ip, sl
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4619      	mov	r1, r3
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	f04f 0400 	mov.w	r4, #0
 80043b8:	0094      	lsls	r4, r2, #2
 80043ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043be:	008b      	lsls	r3, r1, #2
 80043c0:	461a      	mov	r2, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	4628      	mov	r0, r5
 80043c6:	4631      	mov	r1, r6
 80043c8:	f7fc f936 	bl	8000638 <__aeabi_uldivmod>
 80043cc:	4603      	mov	r3, r0
 80043ce:	460c      	mov	r4, r1
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b32      	ldr	r3, [pc, #200]	; (800449c <UART_SetConfig+0x6f4>)
 80043d4:	fba3 1302 	umull	r1, r3, r3, r2
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	2164      	movs	r1, #100	; 0x64
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	3332      	adds	r3, #50	; 0x32
 80043e6:	4a2d      	ldr	r2, [pc, #180]	; (800449c <UART_SetConfig+0x6f4>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f2:	4498      	add	r8, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	469b      	mov	fp, r3
 80043f8:	f04f 0c00 	mov.w	ip, #0
 80043fc:	46d9      	mov	r9, fp
 80043fe:	46e2      	mov	sl, ip
 8004400:	eb19 0309 	adds.w	r3, r9, r9
 8004404:	eb4a 040a 	adc.w	r4, sl, sl
 8004408:	4699      	mov	r9, r3
 800440a:	46a2      	mov	sl, r4
 800440c:	eb19 090b 	adds.w	r9, r9, fp
 8004410:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004414:	f04f 0100 	mov.w	r1, #0
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004420:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004424:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004428:	4689      	mov	r9, r1
 800442a:	4692      	mov	sl, r2
 800442c:	eb1b 0509 	adds.w	r5, fp, r9
 8004430:	eb4c 060a 	adc.w	r6, ip, sl
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4619      	mov	r1, r3
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	f04f 0400 	mov.w	r4, #0
 8004446:	0094      	lsls	r4, r2, #2
 8004448:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800444c:	008b      	lsls	r3, r1, #2
 800444e:	461a      	mov	r2, r3
 8004450:	4623      	mov	r3, r4
 8004452:	4628      	mov	r0, r5
 8004454:	4631      	mov	r1, r6
 8004456:	f7fc f8ef 	bl	8000638 <__aeabi_uldivmod>
 800445a:	4603      	mov	r3, r0
 800445c:	460c      	mov	r4, r1
 800445e:	461a      	mov	r2, r3
 8004460:	4b0e      	ldr	r3, [pc, #56]	; (800449c <UART_SetConfig+0x6f4>)
 8004462:	fba3 1302 	umull	r1, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2164      	movs	r1, #100	; 0x64
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	3332      	adds	r3, #50	; 0x32
 8004474:	4a09      	ldr	r2, [pc, #36]	; (800449c <UART_SetConfig+0x6f4>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 020f 	and.w	r2, r3, #15
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4442      	add	r2, r8
 8004486:	609a      	str	r2, [r3, #8]
}
 8004488:	e7ff      	b.n	800448a <UART_SetConfig+0x6e2>
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004494:	40011000 	.word	0x40011000
 8004498:	40011400 	.word	0x40011400
 800449c:	51eb851f 	.word	0x51eb851f

080044a0 <atoi>:
 80044a0:	220a      	movs	r2, #10
 80044a2:	2100      	movs	r1, #0
 80044a4:	f000 b8f2 	b.w	800468c <strtol>

080044a8 <__errno>:
 80044a8:	4b01      	ldr	r3, [pc, #4]	; (80044b0 <__errno+0x8>)
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000020 	.word	0x20000020

080044b4 <__libc_init_array>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	4e0d      	ldr	r6, [pc, #52]	; (80044ec <__libc_init_array+0x38>)
 80044b8:	4c0d      	ldr	r4, [pc, #52]	; (80044f0 <__libc_init_array+0x3c>)
 80044ba:	1ba4      	subs	r4, r4, r6
 80044bc:	10a4      	asrs	r4, r4, #2
 80044be:	2500      	movs	r5, #0
 80044c0:	42a5      	cmp	r5, r4
 80044c2:	d109      	bne.n	80044d8 <__libc_init_array+0x24>
 80044c4:	4e0b      	ldr	r6, [pc, #44]	; (80044f4 <__libc_init_array+0x40>)
 80044c6:	4c0c      	ldr	r4, [pc, #48]	; (80044f8 <__libc_init_array+0x44>)
 80044c8:	f000 fcea 	bl	8004ea0 <_init>
 80044cc:	1ba4      	subs	r4, r4, r6
 80044ce:	10a4      	asrs	r4, r4, #2
 80044d0:	2500      	movs	r5, #0
 80044d2:	42a5      	cmp	r5, r4
 80044d4:	d105      	bne.n	80044e2 <__libc_init_array+0x2e>
 80044d6:	bd70      	pop	{r4, r5, r6, pc}
 80044d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044dc:	4798      	blx	r3
 80044de:	3501      	adds	r5, #1
 80044e0:	e7ee      	b.n	80044c0 <__libc_init_array+0xc>
 80044e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044e6:	4798      	blx	r3
 80044e8:	3501      	adds	r5, #1
 80044ea:	e7f2      	b.n	80044d2 <__libc_init_array+0x1e>
 80044ec:	08005038 	.word	0x08005038
 80044f0:	08005038 	.word	0x08005038
 80044f4:	08005038 	.word	0x08005038
 80044f8:	0800503c 	.word	0x0800503c

080044fc <__locale_ctype_ptr_l>:
 80044fc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004500:	4770      	bx	lr
	...

08004504 <__locale_ctype_ptr>:
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <__locale_ctype_ptr+0x14>)
 8004506:	4a05      	ldr	r2, [pc, #20]	; (800451c <__locale_ctype_ptr+0x18>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	2b00      	cmp	r3, #0
 800450e:	bf08      	it	eq
 8004510:	4613      	moveq	r3, r2
 8004512:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004516:	4770      	bx	lr
 8004518:	20000020 	.word	0x20000020
 800451c:	20000084 	.word	0x20000084

08004520 <__ascii_mbtowc>:
 8004520:	b082      	sub	sp, #8
 8004522:	b901      	cbnz	r1, 8004526 <__ascii_mbtowc+0x6>
 8004524:	a901      	add	r1, sp, #4
 8004526:	b142      	cbz	r2, 800453a <__ascii_mbtowc+0x1a>
 8004528:	b14b      	cbz	r3, 800453e <__ascii_mbtowc+0x1e>
 800452a:	7813      	ldrb	r3, [r2, #0]
 800452c:	600b      	str	r3, [r1, #0]
 800452e:	7812      	ldrb	r2, [r2, #0]
 8004530:	1c10      	adds	r0, r2, #0
 8004532:	bf18      	it	ne
 8004534:	2001      	movne	r0, #1
 8004536:	b002      	add	sp, #8
 8004538:	4770      	bx	lr
 800453a:	4610      	mov	r0, r2
 800453c:	e7fb      	b.n	8004536 <__ascii_mbtowc+0x16>
 800453e:	f06f 0001 	mvn.w	r0, #1
 8004542:	e7f8      	b.n	8004536 <__ascii_mbtowc+0x16>

08004544 <memset>:
 8004544:	4402      	add	r2, r0
 8004546:	4603      	mov	r3, r0
 8004548:	4293      	cmp	r3, r2
 800454a:	d100      	bne.n	800454e <memset+0xa>
 800454c:	4770      	bx	lr
 800454e:	f803 1b01 	strb.w	r1, [r3], #1
 8004552:	e7f9      	b.n	8004548 <memset+0x4>

08004554 <siprintf>:
 8004554:	b40e      	push	{r1, r2, r3}
 8004556:	b500      	push	{lr}
 8004558:	b09c      	sub	sp, #112	; 0x70
 800455a:	ab1d      	add	r3, sp, #116	; 0x74
 800455c:	9002      	str	r0, [sp, #8]
 800455e:	9006      	str	r0, [sp, #24]
 8004560:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004564:	4809      	ldr	r0, [pc, #36]	; (800458c <siprintf+0x38>)
 8004566:	9107      	str	r1, [sp, #28]
 8004568:	9104      	str	r1, [sp, #16]
 800456a:	4909      	ldr	r1, [pc, #36]	; (8004590 <siprintf+0x3c>)
 800456c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004570:	9105      	str	r1, [sp, #20]
 8004572:	6800      	ldr	r0, [r0, #0]
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	a902      	add	r1, sp, #8
 8004578:	f000 f906 	bl	8004788 <_svfiprintf_r>
 800457c:	9b02      	ldr	r3, [sp, #8]
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	b01c      	add	sp, #112	; 0x70
 8004584:	f85d eb04 	ldr.w	lr, [sp], #4
 8004588:	b003      	add	sp, #12
 800458a:	4770      	bx	lr
 800458c:	20000020 	.word	0x20000020
 8004590:	ffff0208 	.word	0xffff0208

08004594 <_strtol_l.isra.0>:
 8004594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	4680      	mov	r8, r0
 800459a:	4689      	mov	r9, r1
 800459c:	4692      	mov	sl, r2
 800459e:	461e      	mov	r6, r3
 80045a0:	460f      	mov	r7, r1
 80045a2:	463d      	mov	r5, r7
 80045a4:	9808      	ldr	r0, [sp, #32]
 80045a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045aa:	f7ff ffa7 	bl	80044fc <__locale_ctype_ptr_l>
 80045ae:	4420      	add	r0, r4
 80045b0:	7843      	ldrb	r3, [r0, #1]
 80045b2:	f013 0308 	ands.w	r3, r3, #8
 80045b6:	d132      	bne.n	800461e <_strtol_l.isra.0+0x8a>
 80045b8:	2c2d      	cmp	r4, #45	; 0x2d
 80045ba:	d132      	bne.n	8004622 <_strtol_l.isra.0+0x8e>
 80045bc:	787c      	ldrb	r4, [r7, #1]
 80045be:	1cbd      	adds	r5, r7, #2
 80045c0:	2201      	movs	r2, #1
 80045c2:	2e00      	cmp	r6, #0
 80045c4:	d05d      	beq.n	8004682 <_strtol_l.isra.0+0xee>
 80045c6:	2e10      	cmp	r6, #16
 80045c8:	d109      	bne.n	80045de <_strtol_l.isra.0+0x4a>
 80045ca:	2c30      	cmp	r4, #48	; 0x30
 80045cc:	d107      	bne.n	80045de <_strtol_l.isra.0+0x4a>
 80045ce:	782b      	ldrb	r3, [r5, #0]
 80045d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80045d4:	2b58      	cmp	r3, #88	; 0x58
 80045d6:	d14f      	bne.n	8004678 <_strtol_l.isra.0+0xe4>
 80045d8:	786c      	ldrb	r4, [r5, #1]
 80045da:	2610      	movs	r6, #16
 80045dc:	3502      	adds	r5, #2
 80045de:	2a00      	cmp	r2, #0
 80045e0:	bf14      	ite	ne
 80045e2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80045e6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80045ea:	2700      	movs	r7, #0
 80045ec:	fbb1 fcf6 	udiv	ip, r1, r6
 80045f0:	4638      	mov	r0, r7
 80045f2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80045f6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80045fa:	2b09      	cmp	r3, #9
 80045fc:	d817      	bhi.n	800462e <_strtol_l.isra.0+0x9a>
 80045fe:	461c      	mov	r4, r3
 8004600:	42a6      	cmp	r6, r4
 8004602:	dd23      	ble.n	800464c <_strtol_l.isra.0+0xb8>
 8004604:	1c7b      	adds	r3, r7, #1
 8004606:	d007      	beq.n	8004618 <_strtol_l.isra.0+0x84>
 8004608:	4584      	cmp	ip, r0
 800460a:	d31c      	bcc.n	8004646 <_strtol_l.isra.0+0xb2>
 800460c:	d101      	bne.n	8004612 <_strtol_l.isra.0+0x7e>
 800460e:	45a6      	cmp	lr, r4
 8004610:	db19      	blt.n	8004646 <_strtol_l.isra.0+0xb2>
 8004612:	fb00 4006 	mla	r0, r0, r6, r4
 8004616:	2701      	movs	r7, #1
 8004618:	f815 4b01 	ldrb.w	r4, [r5], #1
 800461c:	e7eb      	b.n	80045f6 <_strtol_l.isra.0+0x62>
 800461e:	462f      	mov	r7, r5
 8004620:	e7bf      	b.n	80045a2 <_strtol_l.isra.0+0xe>
 8004622:	2c2b      	cmp	r4, #43	; 0x2b
 8004624:	bf04      	itt	eq
 8004626:	1cbd      	addeq	r5, r7, #2
 8004628:	787c      	ldrbeq	r4, [r7, #1]
 800462a:	461a      	mov	r2, r3
 800462c:	e7c9      	b.n	80045c2 <_strtol_l.isra.0+0x2e>
 800462e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004632:	2b19      	cmp	r3, #25
 8004634:	d801      	bhi.n	800463a <_strtol_l.isra.0+0xa6>
 8004636:	3c37      	subs	r4, #55	; 0x37
 8004638:	e7e2      	b.n	8004600 <_strtol_l.isra.0+0x6c>
 800463a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800463e:	2b19      	cmp	r3, #25
 8004640:	d804      	bhi.n	800464c <_strtol_l.isra.0+0xb8>
 8004642:	3c57      	subs	r4, #87	; 0x57
 8004644:	e7dc      	b.n	8004600 <_strtol_l.isra.0+0x6c>
 8004646:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800464a:	e7e5      	b.n	8004618 <_strtol_l.isra.0+0x84>
 800464c:	1c7b      	adds	r3, r7, #1
 800464e:	d108      	bne.n	8004662 <_strtol_l.isra.0+0xce>
 8004650:	2322      	movs	r3, #34	; 0x22
 8004652:	f8c8 3000 	str.w	r3, [r8]
 8004656:	4608      	mov	r0, r1
 8004658:	f1ba 0f00 	cmp.w	sl, #0
 800465c:	d107      	bne.n	800466e <_strtol_l.isra.0+0xda>
 800465e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004662:	b102      	cbz	r2, 8004666 <_strtol_l.isra.0+0xd2>
 8004664:	4240      	negs	r0, r0
 8004666:	f1ba 0f00 	cmp.w	sl, #0
 800466a:	d0f8      	beq.n	800465e <_strtol_l.isra.0+0xca>
 800466c:	b10f      	cbz	r7, 8004672 <_strtol_l.isra.0+0xde>
 800466e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8004672:	f8ca 9000 	str.w	r9, [sl]
 8004676:	e7f2      	b.n	800465e <_strtol_l.isra.0+0xca>
 8004678:	2430      	movs	r4, #48	; 0x30
 800467a:	2e00      	cmp	r6, #0
 800467c:	d1af      	bne.n	80045de <_strtol_l.isra.0+0x4a>
 800467e:	2608      	movs	r6, #8
 8004680:	e7ad      	b.n	80045de <_strtol_l.isra.0+0x4a>
 8004682:	2c30      	cmp	r4, #48	; 0x30
 8004684:	d0a3      	beq.n	80045ce <_strtol_l.isra.0+0x3a>
 8004686:	260a      	movs	r6, #10
 8004688:	e7a9      	b.n	80045de <_strtol_l.isra.0+0x4a>
	...

0800468c <strtol>:
 800468c:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <strtol+0x24>)
 800468e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004690:	681c      	ldr	r4, [r3, #0]
 8004692:	4d08      	ldr	r5, [pc, #32]	; (80046b4 <strtol+0x28>)
 8004694:	6a23      	ldr	r3, [r4, #32]
 8004696:	2b00      	cmp	r3, #0
 8004698:	bf08      	it	eq
 800469a:	462b      	moveq	r3, r5
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	4613      	mov	r3, r2
 80046a0:	460a      	mov	r2, r1
 80046a2:	4601      	mov	r1, r0
 80046a4:	4620      	mov	r0, r4
 80046a6:	f7ff ff75 	bl	8004594 <_strtol_l.isra.0>
 80046aa:	b003      	add	sp, #12
 80046ac:	bd30      	pop	{r4, r5, pc}
 80046ae:	bf00      	nop
 80046b0:	20000020 	.word	0x20000020
 80046b4:	20000084 	.word	0x20000084

080046b8 <__ascii_wctomb>:
 80046b8:	b149      	cbz	r1, 80046ce <__ascii_wctomb+0x16>
 80046ba:	2aff      	cmp	r2, #255	; 0xff
 80046bc:	bf85      	ittet	hi
 80046be:	238a      	movhi	r3, #138	; 0x8a
 80046c0:	6003      	strhi	r3, [r0, #0]
 80046c2:	700a      	strbls	r2, [r1, #0]
 80046c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80046c8:	bf98      	it	ls
 80046ca:	2001      	movls	r0, #1
 80046cc:	4770      	bx	lr
 80046ce:	4608      	mov	r0, r1
 80046d0:	4770      	bx	lr

080046d2 <__ssputs_r>:
 80046d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d6:	688e      	ldr	r6, [r1, #8]
 80046d8:	429e      	cmp	r6, r3
 80046da:	4682      	mov	sl, r0
 80046dc:	460c      	mov	r4, r1
 80046de:	4690      	mov	r8, r2
 80046e0:	4699      	mov	r9, r3
 80046e2:	d837      	bhi.n	8004754 <__ssputs_r+0x82>
 80046e4:	898a      	ldrh	r2, [r1, #12]
 80046e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046ea:	d031      	beq.n	8004750 <__ssputs_r+0x7e>
 80046ec:	6825      	ldr	r5, [r4, #0]
 80046ee:	6909      	ldr	r1, [r1, #16]
 80046f0:	1a6f      	subs	r7, r5, r1
 80046f2:	6965      	ldr	r5, [r4, #20]
 80046f4:	2302      	movs	r3, #2
 80046f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046fa:	fb95 f5f3 	sdiv	r5, r5, r3
 80046fe:	f109 0301 	add.w	r3, r9, #1
 8004702:	443b      	add	r3, r7
 8004704:	429d      	cmp	r5, r3
 8004706:	bf38      	it	cc
 8004708:	461d      	movcc	r5, r3
 800470a:	0553      	lsls	r3, r2, #21
 800470c:	d530      	bpl.n	8004770 <__ssputs_r+0x9e>
 800470e:	4629      	mov	r1, r5
 8004710:	f000 fb2c 	bl	8004d6c <_malloc_r>
 8004714:	4606      	mov	r6, r0
 8004716:	b950      	cbnz	r0, 800472e <__ssputs_r+0x5c>
 8004718:	230c      	movs	r3, #12
 800471a:	f8ca 3000 	str.w	r3, [sl]
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004724:	81a3      	strh	r3, [r4, #12]
 8004726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800472a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472e:	463a      	mov	r2, r7
 8004730:	6921      	ldr	r1, [r4, #16]
 8004732:	f000 faa9 	bl	8004c88 <memcpy>
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800473c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004740:	81a3      	strh	r3, [r4, #12]
 8004742:	6126      	str	r6, [r4, #16]
 8004744:	6165      	str	r5, [r4, #20]
 8004746:	443e      	add	r6, r7
 8004748:	1bed      	subs	r5, r5, r7
 800474a:	6026      	str	r6, [r4, #0]
 800474c:	60a5      	str	r5, [r4, #8]
 800474e:	464e      	mov	r6, r9
 8004750:	454e      	cmp	r6, r9
 8004752:	d900      	bls.n	8004756 <__ssputs_r+0x84>
 8004754:	464e      	mov	r6, r9
 8004756:	4632      	mov	r2, r6
 8004758:	4641      	mov	r1, r8
 800475a:	6820      	ldr	r0, [r4, #0]
 800475c:	f000 fa9f 	bl	8004c9e <memmove>
 8004760:	68a3      	ldr	r3, [r4, #8]
 8004762:	1b9b      	subs	r3, r3, r6
 8004764:	60a3      	str	r3, [r4, #8]
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	441e      	add	r6, r3
 800476a:	6026      	str	r6, [r4, #0]
 800476c:	2000      	movs	r0, #0
 800476e:	e7dc      	b.n	800472a <__ssputs_r+0x58>
 8004770:	462a      	mov	r2, r5
 8004772:	f000 fb55 	bl	8004e20 <_realloc_r>
 8004776:	4606      	mov	r6, r0
 8004778:	2800      	cmp	r0, #0
 800477a:	d1e2      	bne.n	8004742 <__ssputs_r+0x70>
 800477c:	6921      	ldr	r1, [r4, #16]
 800477e:	4650      	mov	r0, sl
 8004780:	f000 faa6 	bl	8004cd0 <_free_r>
 8004784:	e7c8      	b.n	8004718 <__ssputs_r+0x46>
	...

08004788 <_svfiprintf_r>:
 8004788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478c:	461d      	mov	r5, r3
 800478e:	898b      	ldrh	r3, [r1, #12]
 8004790:	061f      	lsls	r7, r3, #24
 8004792:	b09d      	sub	sp, #116	; 0x74
 8004794:	4680      	mov	r8, r0
 8004796:	460c      	mov	r4, r1
 8004798:	4616      	mov	r6, r2
 800479a:	d50f      	bpl.n	80047bc <_svfiprintf_r+0x34>
 800479c:	690b      	ldr	r3, [r1, #16]
 800479e:	b96b      	cbnz	r3, 80047bc <_svfiprintf_r+0x34>
 80047a0:	2140      	movs	r1, #64	; 0x40
 80047a2:	f000 fae3 	bl	8004d6c <_malloc_r>
 80047a6:	6020      	str	r0, [r4, #0]
 80047a8:	6120      	str	r0, [r4, #16]
 80047aa:	b928      	cbnz	r0, 80047b8 <_svfiprintf_r+0x30>
 80047ac:	230c      	movs	r3, #12
 80047ae:	f8c8 3000 	str.w	r3, [r8]
 80047b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047b6:	e0c8      	b.n	800494a <_svfiprintf_r+0x1c2>
 80047b8:	2340      	movs	r3, #64	; 0x40
 80047ba:	6163      	str	r3, [r4, #20]
 80047bc:	2300      	movs	r3, #0
 80047be:	9309      	str	r3, [sp, #36]	; 0x24
 80047c0:	2320      	movs	r3, #32
 80047c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047c6:	2330      	movs	r3, #48	; 0x30
 80047c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047cc:	9503      	str	r5, [sp, #12]
 80047ce:	f04f 0b01 	mov.w	fp, #1
 80047d2:	4637      	mov	r7, r6
 80047d4:	463d      	mov	r5, r7
 80047d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80047da:	b10b      	cbz	r3, 80047e0 <_svfiprintf_r+0x58>
 80047dc:	2b25      	cmp	r3, #37	; 0x25
 80047de:	d13e      	bne.n	800485e <_svfiprintf_r+0xd6>
 80047e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80047e4:	d00b      	beq.n	80047fe <_svfiprintf_r+0x76>
 80047e6:	4653      	mov	r3, sl
 80047e8:	4632      	mov	r2, r6
 80047ea:	4621      	mov	r1, r4
 80047ec:	4640      	mov	r0, r8
 80047ee:	f7ff ff70 	bl	80046d2 <__ssputs_r>
 80047f2:	3001      	adds	r0, #1
 80047f4:	f000 80a4 	beq.w	8004940 <_svfiprintf_r+0x1b8>
 80047f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fa:	4453      	add	r3, sl
 80047fc:	9309      	str	r3, [sp, #36]	; 0x24
 80047fe:	783b      	ldrb	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 809d 	beq.w	8004940 <_svfiprintf_r+0x1b8>
 8004806:	2300      	movs	r3, #0
 8004808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800480c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004810:	9304      	str	r3, [sp, #16]
 8004812:	9307      	str	r3, [sp, #28]
 8004814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004818:	931a      	str	r3, [sp, #104]	; 0x68
 800481a:	462f      	mov	r7, r5
 800481c:	2205      	movs	r2, #5
 800481e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004822:	4850      	ldr	r0, [pc, #320]	; (8004964 <_svfiprintf_r+0x1dc>)
 8004824:	f7fb fcdc 	bl	80001e0 <memchr>
 8004828:	9b04      	ldr	r3, [sp, #16]
 800482a:	b9d0      	cbnz	r0, 8004862 <_svfiprintf_r+0xda>
 800482c:	06d9      	lsls	r1, r3, #27
 800482e:	bf44      	itt	mi
 8004830:	2220      	movmi	r2, #32
 8004832:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004836:	071a      	lsls	r2, r3, #28
 8004838:	bf44      	itt	mi
 800483a:	222b      	movmi	r2, #43	; 0x2b
 800483c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004840:	782a      	ldrb	r2, [r5, #0]
 8004842:	2a2a      	cmp	r2, #42	; 0x2a
 8004844:	d015      	beq.n	8004872 <_svfiprintf_r+0xea>
 8004846:	9a07      	ldr	r2, [sp, #28]
 8004848:	462f      	mov	r7, r5
 800484a:	2000      	movs	r0, #0
 800484c:	250a      	movs	r5, #10
 800484e:	4639      	mov	r1, r7
 8004850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004854:	3b30      	subs	r3, #48	; 0x30
 8004856:	2b09      	cmp	r3, #9
 8004858:	d94d      	bls.n	80048f6 <_svfiprintf_r+0x16e>
 800485a:	b1b8      	cbz	r0, 800488c <_svfiprintf_r+0x104>
 800485c:	e00f      	b.n	800487e <_svfiprintf_r+0xf6>
 800485e:	462f      	mov	r7, r5
 8004860:	e7b8      	b.n	80047d4 <_svfiprintf_r+0x4c>
 8004862:	4a40      	ldr	r2, [pc, #256]	; (8004964 <_svfiprintf_r+0x1dc>)
 8004864:	1a80      	subs	r0, r0, r2
 8004866:	fa0b f000 	lsl.w	r0, fp, r0
 800486a:	4318      	orrs	r0, r3
 800486c:	9004      	str	r0, [sp, #16]
 800486e:	463d      	mov	r5, r7
 8004870:	e7d3      	b.n	800481a <_svfiprintf_r+0x92>
 8004872:	9a03      	ldr	r2, [sp, #12]
 8004874:	1d11      	adds	r1, r2, #4
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	9103      	str	r1, [sp, #12]
 800487a:	2a00      	cmp	r2, #0
 800487c:	db01      	blt.n	8004882 <_svfiprintf_r+0xfa>
 800487e:	9207      	str	r2, [sp, #28]
 8004880:	e004      	b.n	800488c <_svfiprintf_r+0x104>
 8004882:	4252      	negs	r2, r2
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	9207      	str	r2, [sp, #28]
 800488a:	9304      	str	r3, [sp, #16]
 800488c:	783b      	ldrb	r3, [r7, #0]
 800488e:	2b2e      	cmp	r3, #46	; 0x2e
 8004890:	d10c      	bne.n	80048ac <_svfiprintf_r+0x124>
 8004892:	787b      	ldrb	r3, [r7, #1]
 8004894:	2b2a      	cmp	r3, #42	; 0x2a
 8004896:	d133      	bne.n	8004900 <_svfiprintf_r+0x178>
 8004898:	9b03      	ldr	r3, [sp, #12]
 800489a:	1d1a      	adds	r2, r3, #4
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	9203      	str	r2, [sp, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bfb8      	it	lt
 80048a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80048a8:	3702      	adds	r7, #2
 80048aa:	9305      	str	r3, [sp, #20]
 80048ac:	4d2e      	ldr	r5, [pc, #184]	; (8004968 <_svfiprintf_r+0x1e0>)
 80048ae:	7839      	ldrb	r1, [r7, #0]
 80048b0:	2203      	movs	r2, #3
 80048b2:	4628      	mov	r0, r5
 80048b4:	f7fb fc94 	bl	80001e0 <memchr>
 80048b8:	b138      	cbz	r0, 80048ca <_svfiprintf_r+0x142>
 80048ba:	2340      	movs	r3, #64	; 0x40
 80048bc:	1b40      	subs	r0, r0, r5
 80048be:	fa03 f000 	lsl.w	r0, r3, r0
 80048c2:	9b04      	ldr	r3, [sp, #16]
 80048c4:	4303      	orrs	r3, r0
 80048c6:	3701      	adds	r7, #1
 80048c8:	9304      	str	r3, [sp, #16]
 80048ca:	7839      	ldrb	r1, [r7, #0]
 80048cc:	4827      	ldr	r0, [pc, #156]	; (800496c <_svfiprintf_r+0x1e4>)
 80048ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048d2:	2206      	movs	r2, #6
 80048d4:	1c7e      	adds	r6, r7, #1
 80048d6:	f7fb fc83 	bl	80001e0 <memchr>
 80048da:	2800      	cmp	r0, #0
 80048dc:	d038      	beq.n	8004950 <_svfiprintf_r+0x1c8>
 80048de:	4b24      	ldr	r3, [pc, #144]	; (8004970 <_svfiprintf_r+0x1e8>)
 80048e0:	bb13      	cbnz	r3, 8004928 <_svfiprintf_r+0x1a0>
 80048e2:	9b03      	ldr	r3, [sp, #12]
 80048e4:	3307      	adds	r3, #7
 80048e6:	f023 0307 	bic.w	r3, r3, #7
 80048ea:	3308      	adds	r3, #8
 80048ec:	9303      	str	r3, [sp, #12]
 80048ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f0:	444b      	add	r3, r9
 80048f2:	9309      	str	r3, [sp, #36]	; 0x24
 80048f4:	e76d      	b.n	80047d2 <_svfiprintf_r+0x4a>
 80048f6:	fb05 3202 	mla	r2, r5, r2, r3
 80048fa:	2001      	movs	r0, #1
 80048fc:	460f      	mov	r7, r1
 80048fe:	e7a6      	b.n	800484e <_svfiprintf_r+0xc6>
 8004900:	2300      	movs	r3, #0
 8004902:	3701      	adds	r7, #1
 8004904:	9305      	str	r3, [sp, #20]
 8004906:	4619      	mov	r1, r3
 8004908:	250a      	movs	r5, #10
 800490a:	4638      	mov	r0, r7
 800490c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004910:	3a30      	subs	r2, #48	; 0x30
 8004912:	2a09      	cmp	r2, #9
 8004914:	d903      	bls.n	800491e <_svfiprintf_r+0x196>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0c8      	beq.n	80048ac <_svfiprintf_r+0x124>
 800491a:	9105      	str	r1, [sp, #20]
 800491c:	e7c6      	b.n	80048ac <_svfiprintf_r+0x124>
 800491e:	fb05 2101 	mla	r1, r5, r1, r2
 8004922:	2301      	movs	r3, #1
 8004924:	4607      	mov	r7, r0
 8004926:	e7f0      	b.n	800490a <_svfiprintf_r+0x182>
 8004928:	ab03      	add	r3, sp, #12
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	4622      	mov	r2, r4
 800492e:	4b11      	ldr	r3, [pc, #68]	; (8004974 <_svfiprintf_r+0x1ec>)
 8004930:	a904      	add	r1, sp, #16
 8004932:	4640      	mov	r0, r8
 8004934:	f3af 8000 	nop.w
 8004938:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800493c:	4681      	mov	r9, r0
 800493e:	d1d6      	bne.n	80048ee <_svfiprintf_r+0x166>
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	065b      	lsls	r3, r3, #25
 8004944:	f53f af35 	bmi.w	80047b2 <_svfiprintf_r+0x2a>
 8004948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800494a:	b01d      	add	sp, #116	; 0x74
 800494c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004950:	ab03      	add	r3, sp, #12
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	4622      	mov	r2, r4
 8004956:	4b07      	ldr	r3, [pc, #28]	; (8004974 <_svfiprintf_r+0x1ec>)
 8004958:	a904      	add	r1, sp, #16
 800495a:	4640      	mov	r0, r8
 800495c:	f000 f882 	bl	8004a64 <_printf_i>
 8004960:	e7ea      	b.n	8004938 <_svfiprintf_r+0x1b0>
 8004962:	bf00      	nop
 8004964:	08004ffb 	.word	0x08004ffb
 8004968:	08005001 	.word	0x08005001
 800496c:	08005005 	.word	0x08005005
 8004970:	00000000 	.word	0x00000000
 8004974:	080046d3 	.word	0x080046d3

08004978 <_printf_common>:
 8004978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800497c:	4691      	mov	r9, r2
 800497e:	461f      	mov	r7, r3
 8004980:	688a      	ldr	r2, [r1, #8]
 8004982:	690b      	ldr	r3, [r1, #16]
 8004984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004988:	4293      	cmp	r3, r2
 800498a:	bfb8      	it	lt
 800498c:	4613      	movlt	r3, r2
 800498e:	f8c9 3000 	str.w	r3, [r9]
 8004992:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004996:	4606      	mov	r6, r0
 8004998:	460c      	mov	r4, r1
 800499a:	b112      	cbz	r2, 80049a2 <_printf_common+0x2a>
 800499c:	3301      	adds	r3, #1
 800499e:	f8c9 3000 	str.w	r3, [r9]
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	0699      	lsls	r1, r3, #26
 80049a6:	bf42      	ittt	mi
 80049a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80049ac:	3302      	addmi	r3, #2
 80049ae:	f8c9 3000 	strmi.w	r3, [r9]
 80049b2:	6825      	ldr	r5, [r4, #0]
 80049b4:	f015 0506 	ands.w	r5, r5, #6
 80049b8:	d107      	bne.n	80049ca <_printf_common+0x52>
 80049ba:	f104 0a19 	add.w	sl, r4, #25
 80049be:	68e3      	ldr	r3, [r4, #12]
 80049c0:	f8d9 2000 	ldr.w	r2, [r9]
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	42ab      	cmp	r3, r5
 80049c8:	dc28      	bgt.n	8004a1c <_printf_common+0xa4>
 80049ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	3300      	adds	r3, #0
 80049d2:	bf18      	it	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	0692      	lsls	r2, r2, #26
 80049d8:	d42d      	bmi.n	8004a36 <_printf_common+0xbe>
 80049da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049de:	4639      	mov	r1, r7
 80049e0:	4630      	mov	r0, r6
 80049e2:	47c0      	blx	r8
 80049e4:	3001      	adds	r0, #1
 80049e6:	d020      	beq.n	8004a2a <_printf_common+0xb2>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	68e5      	ldr	r5, [r4, #12]
 80049ec:	f8d9 2000 	ldr.w	r2, [r9]
 80049f0:	f003 0306 	and.w	r3, r3, #6
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	bf08      	it	eq
 80049f8:	1aad      	subeq	r5, r5, r2
 80049fa:	68a3      	ldr	r3, [r4, #8]
 80049fc:	6922      	ldr	r2, [r4, #16]
 80049fe:	bf0c      	ite	eq
 8004a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a04:	2500      	movne	r5, #0
 8004a06:	4293      	cmp	r3, r2
 8004a08:	bfc4      	itt	gt
 8004a0a:	1a9b      	subgt	r3, r3, r2
 8004a0c:	18ed      	addgt	r5, r5, r3
 8004a0e:	f04f 0900 	mov.w	r9, #0
 8004a12:	341a      	adds	r4, #26
 8004a14:	454d      	cmp	r5, r9
 8004a16:	d11a      	bne.n	8004a4e <_printf_common+0xd6>
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e008      	b.n	8004a2e <_printf_common+0xb6>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	4652      	mov	r2, sl
 8004a20:	4639      	mov	r1, r7
 8004a22:	4630      	mov	r0, r6
 8004a24:	47c0      	blx	r8
 8004a26:	3001      	adds	r0, #1
 8004a28:	d103      	bne.n	8004a32 <_printf_common+0xba>
 8004a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a32:	3501      	adds	r5, #1
 8004a34:	e7c3      	b.n	80049be <_printf_common+0x46>
 8004a36:	18e1      	adds	r1, r4, r3
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	2030      	movs	r0, #48	; 0x30
 8004a3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a40:	4422      	add	r2, r4
 8004a42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a4a:	3302      	adds	r3, #2
 8004a4c:	e7c5      	b.n	80049da <_printf_common+0x62>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4622      	mov	r2, r4
 8004a52:	4639      	mov	r1, r7
 8004a54:	4630      	mov	r0, r6
 8004a56:	47c0      	blx	r8
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d0e6      	beq.n	8004a2a <_printf_common+0xb2>
 8004a5c:	f109 0901 	add.w	r9, r9, #1
 8004a60:	e7d8      	b.n	8004a14 <_printf_common+0x9c>
	...

08004a64 <_printf_i>:
 8004a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	7e09      	ldrb	r1, [r1, #24]
 8004a70:	b085      	sub	sp, #20
 8004a72:	296e      	cmp	r1, #110	; 0x6e
 8004a74:	4617      	mov	r7, r2
 8004a76:	4606      	mov	r6, r0
 8004a78:	4698      	mov	r8, r3
 8004a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a7c:	f000 80b3 	beq.w	8004be6 <_printf_i+0x182>
 8004a80:	d822      	bhi.n	8004ac8 <_printf_i+0x64>
 8004a82:	2963      	cmp	r1, #99	; 0x63
 8004a84:	d036      	beq.n	8004af4 <_printf_i+0x90>
 8004a86:	d80a      	bhi.n	8004a9e <_printf_i+0x3a>
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	f000 80b9 	beq.w	8004c00 <_printf_i+0x19c>
 8004a8e:	2958      	cmp	r1, #88	; 0x58
 8004a90:	f000 8083 	beq.w	8004b9a <_printf_i+0x136>
 8004a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004a9c:	e032      	b.n	8004b04 <_printf_i+0xa0>
 8004a9e:	2964      	cmp	r1, #100	; 0x64
 8004aa0:	d001      	beq.n	8004aa6 <_printf_i+0x42>
 8004aa2:	2969      	cmp	r1, #105	; 0x69
 8004aa4:	d1f6      	bne.n	8004a94 <_printf_i+0x30>
 8004aa6:	6820      	ldr	r0, [r4, #0]
 8004aa8:	6813      	ldr	r3, [r2, #0]
 8004aaa:	0605      	lsls	r5, r0, #24
 8004aac:	f103 0104 	add.w	r1, r3, #4
 8004ab0:	d52a      	bpl.n	8004b08 <_printf_i+0xa4>
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6011      	str	r1, [r2, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da03      	bge.n	8004ac2 <_printf_i+0x5e>
 8004aba:	222d      	movs	r2, #45	; 0x2d
 8004abc:	425b      	negs	r3, r3
 8004abe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ac2:	486f      	ldr	r0, [pc, #444]	; (8004c80 <_printf_i+0x21c>)
 8004ac4:	220a      	movs	r2, #10
 8004ac6:	e039      	b.n	8004b3c <_printf_i+0xd8>
 8004ac8:	2973      	cmp	r1, #115	; 0x73
 8004aca:	f000 809d 	beq.w	8004c08 <_printf_i+0x1a4>
 8004ace:	d808      	bhi.n	8004ae2 <_printf_i+0x7e>
 8004ad0:	296f      	cmp	r1, #111	; 0x6f
 8004ad2:	d020      	beq.n	8004b16 <_printf_i+0xb2>
 8004ad4:	2970      	cmp	r1, #112	; 0x70
 8004ad6:	d1dd      	bne.n	8004a94 <_printf_i+0x30>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	f043 0320 	orr.w	r3, r3, #32
 8004ade:	6023      	str	r3, [r4, #0]
 8004ae0:	e003      	b.n	8004aea <_printf_i+0x86>
 8004ae2:	2975      	cmp	r1, #117	; 0x75
 8004ae4:	d017      	beq.n	8004b16 <_printf_i+0xb2>
 8004ae6:	2978      	cmp	r1, #120	; 0x78
 8004ae8:	d1d4      	bne.n	8004a94 <_printf_i+0x30>
 8004aea:	2378      	movs	r3, #120	; 0x78
 8004aec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004af0:	4864      	ldr	r0, [pc, #400]	; (8004c84 <_printf_i+0x220>)
 8004af2:	e055      	b.n	8004ba0 <_printf_i+0x13c>
 8004af4:	6813      	ldr	r3, [r2, #0]
 8004af6:	1d19      	adds	r1, r3, #4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6011      	str	r1, [r2, #0]
 8004afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b04:	2301      	movs	r3, #1
 8004b06:	e08c      	b.n	8004c22 <_printf_i+0x1be>
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6011      	str	r1, [r2, #0]
 8004b0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b10:	bf18      	it	ne
 8004b12:	b21b      	sxthne	r3, r3
 8004b14:	e7cf      	b.n	8004ab6 <_printf_i+0x52>
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	6825      	ldr	r5, [r4, #0]
 8004b1a:	1d18      	adds	r0, r3, #4
 8004b1c:	6010      	str	r0, [r2, #0]
 8004b1e:	0628      	lsls	r0, r5, #24
 8004b20:	d501      	bpl.n	8004b26 <_printf_i+0xc2>
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	e002      	b.n	8004b2c <_printf_i+0xc8>
 8004b26:	0668      	lsls	r0, r5, #25
 8004b28:	d5fb      	bpl.n	8004b22 <_printf_i+0xbe>
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	4854      	ldr	r0, [pc, #336]	; (8004c80 <_printf_i+0x21c>)
 8004b2e:	296f      	cmp	r1, #111	; 0x6f
 8004b30:	bf14      	ite	ne
 8004b32:	220a      	movne	r2, #10
 8004b34:	2208      	moveq	r2, #8
 8004b36:	2100      	movs	r1, #0
 8004b38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b3c:	6865      	ldr	r5, [r4, #4]
 8004b3e:	60a5      	str	r5, [r4, #8]
 8004b40:	2d00      	cmp	r5, #0
 8004b42:	f2c0 8095 	blt.w	8004c70 <_printf_i+0x20c>
 8004b46:	6821      	ldr	r1, [r4, #0]
 8004b48:	f021 0104 	bic.w	r1, r1, #4
 8004b4c:	6021      	str	r1, [r4, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d13d      	bne.n	8004bce <_printf_i+0x16a>
 8004b52:	2d00      	cmp	r5, #0
 8004b54:	f040 808e 	bne.w	8004c74 <_printf_i+0x210>
 8004b58:	4665      	mov	r5, ip
 8004b5a:	2a08      	cmp	r2, #8
 8004b5c:	d10b      	bne.n	8004b76 <_printf_i+0x112>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	07db      	lsls	r3, r3, #31
 8004b62:	d508      	bpl.n	8004b76 <_printf_i+0x112>
 8004b64:	6923      	ldr	r3, [r4, #16]
 8004b66:	6862      	ldr	r2, [r4, #4]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	bfde      	ittt	le
 8004b6c:	2330      	movle	r3, #48	; 0x30
 8004b6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b72:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b76:	ebac 0305 	sub.w	r3, ip, r5
 8004b7a:	6123      	str	r3, [r4, #16]
 8004b7c:	f8cd 8000 	str.w	r8, [sp]
 8004b80:	463b      	mov	r3, r7
 8004b82:	aa03      	add	r2, sp, #12
 8004b84:	4621      	mov	r1, r4
 8004b86:	4630      	mov	r0, r6
 8004b88:	f7ff fef6 	bl	8004978 <_printf_common>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d14d      	bne.n	8004c2c <_printf_i+0x1c8>
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b94:	b005      	add	sp, #20
 8004b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b9a:	4839      	ldr	r0, [pc, #228]	; (8004c80 <_printf_i+0x21c>)
 8004b9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ba0:	6813      	ldr	r3, [r2, #0]
 8004ba2:	6821      	ldr	r1, [r4, #0]
 8004ba4:	1d1d      	adds	r5, r3, #4
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6015      	str	r5, [r2, #0]
 8004baa:	060a      	lsls	r2, r1, #24
 8004bac:	d50b      	bpl.n	8004bc6 <_printf_i+0x162>
 8004bae:	07ca      	lsls	r2, r1, #31
 8004bb0:	bf44      	itt	mi
 8004bb2:	f041 0120 	orrmi.w	r1, r1, #32
 8004bb6:	6021      	strmi	r1, [r4, #0]
 8004bb8:	b91b      	cbnz	r3, 8004bc2 <_printf_i+0x15e>
 8004bba:	6822      	ldr	r2, [r4, #0]
 8004bbc:	f022 0220 	bic.w	r2, r2, #32
 8004bc0:	6022      	str	r2, [r4, #0]
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	e7b7      	b.n	8004b36 <_printf_i+0xd2>
 8004bc6:	064d      	lsls	r5, r1, #25
 8004bc8:	bf48      	it	mi
 8004bca:	b29b      	uxthmi	r3, r3
 8004bcc:	e7ef      	b.n	8004bae <_printf_i+0x14a>
 8004bce:	4665      	mov	r5, ip
 8004bd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bd4:	fb02 3311 	mls	r3, r2, r1, r3
 8004bd8:	5cc3      	ldrb	r3, [r0, r3]
 8004bda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004bde:	460b      	mov	r3, r1
 8004be0:	2900      	cmp	r1, #0
 8004be2:	d1f5      	bne.n	8004bd0 <_printf_i+0x16c>
 8004be4:	e7b9      	b.n	8004b5a <_printf_i+0xf6>
 8004be6:	6813      	ldr	r3, [r2, #0]
 8004be8:	6825      	ldr	r5, [r4, #0]
 8004bea:	6961      	ldr	r1, [r4, #20]
 8004bec:	1d18      	adds	r0, r3, #4
 8004bee:	6010      	str	r0, [r2, #0]
 8004bf0:	0628      	lsls	r0, r5, #24
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	d501      	bpl.n	8004bfa <_printf_i+0x196>
 8004bf6:	6019      	str	r1, [r3, #0]
 8004bf8:	e002      	b.n	8004c00 <_printf_i+0x19c>
 8004bfa:	066a      	lsls	r2, r5, #25
 8004bfc:	d5fb      	bpl.n	8004bf6 <_printf_i+0x192>
 8004bfe:	8019      	strh	r1, [r3, #0]
 8004c00:	2300      	movs	r3, #0
 8004c02:	6123      	str	r3, [r4, #16]
 8004c04:	4665      	mov	r5, ip
 8004c06:	e7b9      	b.n	8004b7c <_printf_i+0x118>
 8004c08:	6813      	ldr	r3, [r2, #0]
 8004c0a:	1d19      	adds	r1, r3, #4
 8004c0c:	6011      	str	r1, [r2, #0]
 8004c0e:	681d      	ldr	r5, [r3, #0]
 8004c10:	6862      	ldr	r2, [r4, #4]
 8004c12:	2100      	movs	r1, #0
 8004c14:	4628      	mov	r0, r5
 8004c16:	f7fb fae3 	bl	80001e0 <memchr>
 8004c1a:	b108      	cbz	r0, 8004c20 <_printf_i+0x1bc>
 8004c1c:	1b40      	subs	r0, r0, r5
 8004c1e:	6060      	str	r0, [r4, #4]
 8004c20:	6863      	ldr	r3, [r4, #4]
 8004c22:	6123      	str	r3, [r4, #16]
 8004c24:	2300      	movs	r3, #0
 8004c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c2a:	e7a7      	b.n	8004b7c <_printf_i+0x118>
 8004c2c:	6923      	ldr	r3, [r4, #16]
 8004c2e:	462a      	mov	r2, r5
 8004c30:	4639      	mov	r1, r7
 8004c32:	4630      	mov	r0, r6
 8004c34:	47c0      	blx	r8
 8004c36:	3001      	adds	r0, #1
 8004c38:	d0aa      	beq.n	8004b90 <_printf_i+0x12c>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	079b      	lsls	r3, r3, #30
 8004c3e:	d413      	bmi.n	8004c68 <_printf_i+0x204>
 8004c40:	68e0      	ldr	r0, [r4, #12]
 8004c42:	9b03      	ldr	r3, [sp, #12]
 8004c44:	4298      	cmp	r0, r3
 8004c46:	bfb8      	it	lt
 8004c48:	4618      	movlt	r0, r3
 8004c4a:	e7a3      	b.n	8004b94 <_printf_i+0x130>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	464a      	mov	r2, r9
 8004c50:	4639      	mov	r1, r7
 8004c52:	4630      	mov	r0, r6
 8004c54:	47c0      	blx	r8
 8004c56:	3001      	adds	r0, #1
 8004c58:	d09a      	beq.n	8004b90 <_printf_i+0x12c>
 8004c5a:	3501      	adds	r5, #1
 8004c5c:	68e3      	ldr	r3, [r4, #12]
 8004c5e:	9a03      	ldr	r2, [sp, #12]
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	42ab      	cmp	r3, r5
 8004c64:	dcf2      	bgt.n	8004c4c <_printf_i+0x1e8>
 8004c66:	e7eb      	b.n	8004c40 <_printf_i+0x1dc>
 8004c68:	2500      	movs	r5, #0
 8004c6a:	f104 0919 	add.w	r9, r4, #25
 8004c6e:	e7f5      	b.n	8004c5c <_printf_i+0x1f8>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1ac      	bne.n	8004bce <_printf_i+0x16a>
 8004c74:	7803      	ldrb	r3, [r0, #0]
 8004c76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c7e:	e76c      	b.n	8004b5a <_printf_i+0xf6>
 8004c80:	0800500c 	.word	0x0800500c
 8004c84:	0800501d 	.word	0x0800501d

08004c88 <memcpy>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	1e43      	subs	r3, r0, #1
 8004c8c:	440a      	add	r2, r1
 8004c8e:	4291      	cmp	r1, r2
 8004c90:	d100      	bne.n	8004c94 <memcpy+0xc>
 8004c92:	bd10      	pop	{r4, pc}
 8004c94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c9c:	e7f7      	b.n	8004c8e <memcpy+0x6>

08004c9e <memmove>:
 8004c9e:	4288      	cmp	r0, r1
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	eb01 0302 	add.w	r3, r1, r2
 8004ca6:	d807      	bhi.n	8004cb8 <memmove+0x1a>
 8004ca8:	1e42      	subs	r2, r0, #1
 8004caa:	4299      	cmp	r1, r3
 8004cac:	d00a      	beq.n	8004cc4 <memmove+0x26>
 8004cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cb2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004cb6:	e7f8      	b.n	8004caa <memmove+0xc>
 8004cb8:	4283      	cmp	r3, r0
 8004cba:	d9f5      	bls.n	8004ca8 <memmove+0xa>
 8004cbc:	1881      	adds	r1, r0, r2
 8004cbe:	1ad2      	subs	r2, r2, r3
 8004cc0:	42d3      	cmn	r3, r2
 8004cc2:	d100      	bne.n	8004cc6 <memmove+0x28>
 8004cc4:	bd10      	pop	{r4, pc}
 8004cc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004cce:	e7f7      	b.n	8004cc0 <memmove+0x22>

08004cd0 <_free_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	2900      	cmp	r1, #0
 8004cd6:	d045      	beq.n	8004d64 <_free_r+0x94>
 8004cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cdc:	1f0c      	subs	r4, r1, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bfb8      	it	lt
 8004ce2:	18e4      	addlt	r4, r4, r3
 8004ce4:	f000 f8d2 	bl	8004e8c <__malloc_lock>
 8004ce8:	4a1f      	ldr	r2, [pc, #124]	; (8004d68 <_free_r+0x98>)
 8004cea:	6813      	ldr	r3, [r2, #0]
 8004cec:	4610      	mov	r0, r2
 8004cee:	b933      	cbnz	r3, 8004cfe <_free_r+0x2e>
 8004cf0:	6063      	str	r3, [r4, #4]
 8004cf2:	6014      	str	r4, [r2, #0]
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cfa:	f000 b8c8 	b.w	8004e8e <__malloc_unlock>
 8004cfe:	42a3      	cmp	r3, r4
 8004d00:	d90c      	bls.n	8004d1c <_free_r+0x4c>
 8004d02:	6821      	ldr	r1, [r4, #0]
 8004d04:	1862      	adds	r2, r4, r1
 8004d06:	4293      	cmp	r3, r2
 8004d08:	bf04      	itt	eq
 8004d0a:	681a      	ldreq	r2, [r3, #0]
 8004d0c:	685b      	ldreq	r3, [r3, #4]
 8004d0e:	6063      	str	r3, [r4, #4]
 8004d10:	bf04      	itt	eq
 8004d12:	1852      	addeq	r2, r2, r1
 8004d14:	6022      	streq	r2, [r4, #0]
 8004d16:	6004      	str	r4, [r0, #0]
 8004d18:	e7ec      	b.n	8004cf4 <_free_r+0x24>
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	b10a      	cbz	r2, 8004d24 <_free_r+0x54>
 8004d20:	42a2      	cmp	r2, r4
 8004d22:	d9fa      	bls.n	8004d1a <_free_r+0x4a>
 8004d24:	6819      	ldr	r1, [r3, #0]
 8004d26:	1858      	adds	r0, r3, r1
 8004d28:	42a0      	cmp	r0, r4
 8004d2a:	d10b      	bne.n	8004d44 <_free_r+0x74>
 8004d2c:	6820      	ldr	r0, [r4, #0]
 8004d2e:	4401      	add	r1, r0
 8004d30:	1858      	adds	r0, r3, r1
 8004d32:	4282      	cmp	r2, r0
 8004d34:	6019      	str	r1, [r3, #0]
 8004d36:	d1dd      	bne.n	8004cf4 <_free_r+0x24>
 8004d38:	6810      	ldr	r0, [r2, #0]
 8004d3a:	6852      	ldr	r2, [r2, #4]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	4401      	add	r1, r0
 8004d40:	6019      	str	r1, [r3, #0]
 8004d42:	e7d7      	b.n	8004cf4 <_free_r+0x24>
 8004d44:	d902      	bls.n	8004d4c <_free_r+0x7c>
 8004d46:	230c      	movs	r3, #12
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	e7d3      	b.n	8004cf4 <_free_r+0x24>
 8004d4c:	6820      	ldr	r0, [r4, #0]
 8004d4e:	1821      	adds	r1, r4, r0
 8004d50:	428a      	cmp	r2, r1
 8004d52:	bf04      	itt	eq
 8004d54:	6811      	ldreq	r1, [r2, #0]
 8004d56:	6852      	ldreq	r2, [r2, #4]
 8004d58:	6062      	str	r2, [r4, #4]
 8004d5a:	bf04      	itt	eq
 8004d5c:	1809      	addeq	r1, r1, r0
 8004d5e:	6021      	streq	r1, [r4, #0]
 8004d60:	605c      	str	r4, [r3, #4]
 8004d62:	e7c7      	b.n	8004cf4 <_free_r+0x24>
 8004d64:	bd38      	pop	{r3, r4, r5, pc}
 8004d66:	bf00      	nop
 8004d68:	20000214 	.word	0x20000214

08004d6c <_malloc_r>:
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	1ccd      	adds	r5, r1, #3
 8004d70:	f025 0503 	bic.w	r5, r5, #3
 8004d74:	3508      	adds	r5, #8
 8004d76:	2d0c      	cmp	r5, #12
 8004d78:	bf38      	it	cc
 8004d7a:	250c      	movcc	r5, #12
 8004d7c:	2d00      	cmp	r5, #0
 8004d7e:	4606      	mov	r6, r0
 8004d80:	db01      	blt.n	8004d86 <_malloc_r+0x1a>
 8004d82:	42a9      	cmp	r1, r5
 8004d84:	d903      	bls.n	8004d8e <_malloc_r+0x22>
 8004d86:	230c      	movs	r3, #12
 8004d88:	6033      	str	r3, [r6, #0]
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	bd70      	pop	{r4, r5, r6, pc}
 8004d8e:	f000 f87d 	bl	8004e8c <__malloc_lock>
 8004d92:	4a21      	ldr	r2, [pc, #132]	; (8004e18 <_malloc_r+0xac>)
 8004d94:	6814      	ldr	r4, [r2, #0]
 8004d96:	4621      	mov	r1, r4
 8004d98:	b991      	cbnz	r1, 8004dc0 <_malloc_r+0x54>
 8004d9a:	4c20      	ldr	r4, [pc, #128]	; (8004e1c <_malloc_r+0xb0>)
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	b91b      	cbnz	r3, 8004da8 <_malloc_r+0x3c>
 8004da0:	4630      	mov	r0, r6
 8004da2:	f000 f863 	bl	8004e6c <_sbrk_r>
 8004da6:	6020      	str	r0, [r4, #0]
 8004da8:	4629      	mov	r1, r5
 8004daa:	4630      	mov	r0, r6
 8004dac:	f000 f85e 	bl	8004e6c <_sbrk_r>
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	d124      	bne.n	8004dfe <_malloc_r+0x92>
 8004db4:	230c      	movs	r3, #12
 8004db6:	6033      	str	r3, [r6, #0]
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 f868 	bl	8004e8e <__malloc_unlock>
 8004dbe:	e7e4      	b.n	8004d8a <_malloc_r+0x1e>
 8004dc0:	680b      	ldr	r3, [r1, #0]
 8004dc2:	1b5b      	subs	r3, r3, r5
 8004dc4:	d418      	bmi.n	8004df8 <_malloc_r+0x8c>
 8004dc6:	2b0b      	cmp	r3, #11
 8004dc8:	d90f      	bls.n	8004dea <_malloc_r+0x7e>
 8004dca:	600b      	str	r3, [r1, #0]
 8004dcc:	50cd      	str	r5, [r1, r3]
 8004dce:	18cc      	adds	r4, r1, r3
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	f000 f85c 	bl	8004e8e <__malloc_unlock>
 8004dd6:	f104 000b 	add.w	r0, r4, #11
 8004dda:	1d23      	adds	r3, r4, #4
 8004ddc:	f020 0007 	bic.w	r0, r0, #7
 8004de0:	1ac3      	subs	r3, r0, r3
 8004de2:	d0d3      	beq.n	8004d8c <_malloc_r+0x20>
 8004de4:	425a      	negs	r2, r3
 8004de6:	50e2      	str	r2, [r4, r3]
 8004de8:	e7d0      	b.n	8004d8c <_malloc_r+0x20>
 8004dea:	428c      	cmp	r4, r1
 8004dec:	684b      	ldr	r3, [r1, #4]
 8004dee:	bf16      	itet	ne
 8004df0:	6063      	strne	r3, [r4, #4]
 8004df2:	6013      	streq	r3, [r2, #0]
 8004df4:	460c      	movne	r4, r1
 8004df6:	e7eb      	b.n	8004dd0 <_malloc_r+0x64>
 8004df8:	460c      	mov	r4, r1
 8004dfa:	6849      	ldr	r1, [r1, #4]
 8004dfc:	e7cc      	b.n	8004d98 <_malloc_r+0x2c>
 8004dfe:	1cc4      	adds	r4, r0, #3
 8004e00:	f024 0403 	bic.w	r4, r4, #3
 8004e04:	42a0      	cmp	r0, r4
 8004e06:	d005      	beq.n	8004e14 <_malloc_r+0xa8>
 8004e08:	1a21      	subs	r1, r4, r0
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	f000 f82e 	bl	8004e6c <_sbrk_r>
 8004e10:	3001      	adds	r0, #1
 8004e12:	d0cf      	beq.n	8004db4 <_malloc_r+0x48>
 8004e14:	6025      	str	r5, [r4, #0]
 8004e16:	e7db      	b.n	8004dd0 <_malloc_r+0x64>
 8004e18:	20000214 	.word	0x20000214
 8004e1c:	20000218 	.word	0x20000218

08004e20 <_realloc_r>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	4607      	mov	r7, r0
 8004e24:	4614      	mov	r4, r2
 8004e26:	460e      	mov	r6, r1
 8004e28:	b921      	cbnz	r1, 8004e34 <_realloc_r+0x14>
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e30:	f7ff bf9c 	b.w	8004d6c <_malloc_r>
 8004e34:	b922      	cbnz	r2, 8004e40 <_realloc_r+0x20>
 8004e36:	f7ff ff4b 	bl	8004cd0 <_free_r>
 8004e3a:	4625      	mov	r5, r4
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e40:	f000 f826 	bl	8004e90 <_malloc_usable_size_r>
 8004e44:	42a0      	cmp	r0, r4
 8004e46:	d20f      	bcs.n	8004e68 <_realloc_r+0x48>
 8004e48:	4621      	mov	r1, r4
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f7ff ff8e 	bl	8004d6c <_malloc_r>
 8004e50:	4605      	mov	r5, r0
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0f2      	beq.n	8004e3c <_realloc_r+0x1c>
 8004e56:	4631      	mov	r1, r6
 8004e58:	4622      	mov	r2, r4
 8004e5a:	f7ff ff15 	bl	8004c88 <memcpy>
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4638      	mov	r0, r7
 8004e62:	f7ff ff35 	bl	8004cd0 <_free_r>
 8004e66:	e7e9      	b.n	8004e3c <_realloc_r+0x1c>
 8004e68:	4635      	mov	r5, r6
 8004e6a:	e7e7      	b.n	8004e3c <_realloc_r+0x1c>

08004e6c <_sbrk_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4c06      	ldr	r4, [pc, #24]	; (8004e88 <_sbrk_r+0x1c>)
 8004e70:	2300      	movs	r3, #0
 8004e72:	4605      	mov	r5, r0
 8004e74:	4608      	mov	r0, r1
 8004e76:	6023      	str	r3, [r4, #0]
 8004e78:	f7fc fc04 	bl	8001684 <_sbrk>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d102      	bne.n	8004e86 <_sbrk_r+0x1a>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	b103      	cbz	r3, 8004e86 <_sbrk_r+0x1a>
 8004e84:	602b      	str	r3, [r5, #0]
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	20000328 	.word	0x20000328

08004e8c <__malloc_lock>:
 8004e8c:	4770      	bx	lr

08004e8e <__malloc_unlock>:
 8004e8e:	4770      	bx	lr

08004e90 <_malloc_usable_size_r>:
 8004e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e94:	1f18      	subs	r0, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bfbc      	itt	lt
 8004e9a:	580b      	ldrlt	r3, [r1, r0]
 8004e9c:	18c0      	addlt	r0, r0, r3
 8004e9e:	4770      	bx	lr

08004ea0 <_init>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	bf00      	nop
 8004ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea6:	bc08      	pop	{r3}
 8004ea8:	469e      	mov	lr, r3
 8004eaa:	4770      	bx	lr

08004eac <_fini>:
 8004eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eae:	bf00      	nop
 8004eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb2:	bc08      	pop	{r3}
 8004eb4:	469e      	mov	lr, r3
 8004eb6:	4770      	bx	lr
