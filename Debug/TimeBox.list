
TimeBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d0  080080d0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080d8  080080d8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d8  080080d8  000180d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080080e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001968  200001e4  080082c4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b4c  080082c4  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001559d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031eb  00000000  00000000  000357b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  000389a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  00039750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f5a  00000000  00000000  0003a388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed52  00000000  00000000  0005e2e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca4f8  00000000  00000000  0006d034  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013752c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad0  00000000  00000000  001375a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800800c 	.word	0x0800800c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800800c 	.word	0x0800800c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000638:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800063c:	f000 b972 	b.w	8000924 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9e08      	ldr	r6, [sp, #32]
 800065e:	4604      	mov	r4, r0
 8000660:	4688      	mov	r8, r1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d14b      	bne.n	80006fe <__udivmoddi4+0xa6>
 8000666:	428a      	cmp	r2, r1
 8000668:	4615      	mov	r5, r2
 800066a:	d967      	bls.n	800073c <__udivmoddi4+0xe4>
 800066c:	fab2 f282 	clz	r2, r2
 8000670:	b14a      	cbz	r2, 8000686 <__udivmoddi4+0x2e>
 8000672:	f1c2 0720 	rsb	r7, r2, #32
 8000676:	fa01 f302 	lsl.w	r3, r1, r2
 800067a:	fa20 f707 	lsr.w	r7, r0, r7
 800067e:	4095      	lsls	r5, r2
 8000680:	ea47 0803 	orr.w	r8, r7, r3
 8000684:	4094      	lsls	r4, r2
 8000686:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800068a:	0c23      	lsrs	r3, r4, #16
 800068c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000690:	fa1f fc85 	uxth.w	ip, r5
 8000694:	fb0e 8817 	mls	r8, lr, r7, r8
 8000698:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800069c:	fb07 f10c 	mul.w	r1, r7, ip
 80006a0:	4299      	cmp	r1, r3
 80006a2:	d909      	bls.n	80006b8 <__udivmoddi4+0x60>
 80006a4:	18eb      	adds	r3, r5, r3
 80006a6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80006aa:	f080 811b 	bcs.w	80008e4 <__udivmoddi4+0x28c>
 80006ae:	4299      	cmp	r1, r3
 80006b0:	f240 8118 	bls.w	80008e4 <__udivmoddi4+0x28c>
 80006b4:	3f02      	subs	r7, #2
 80006b6:	442b      	add	r3, r5
 80006b8:	1a5b      	subs	r3, r3, r1
 80006ba:	b2a4      	uxth	r4, r4
 80006bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006cc:	45a4      	cmp	ip, r4
 80006ce:	d909      	bls.n	80006e4 <__udivmoddi4+0x8c>
 80006d0:	192c      	adds	r4, r5, r4
 80006d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006d6:	f080 8107 	bcs.w	80008e8 <__udivmoddi4+0x290>
 80006da:	45a4      	cmp	ip, r4
 80006dc:	f240 8104 	bls.w	80008e8 <__udivmoddi4+0x290>
 80006e0:	3802      	subs	r0, #2
 80006e2:	442c      	add	r4, r5
 80006e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006e8:	eba4 040c 	sub.w	r4, r4, ip
 80006ec:	2700      	movs	r7, #0
 80006ee:	b11e      	cbz	r6, 80006f8 <__udivmoddi4+0xa0>
 80006f0:	40d4      	lsrs	r4, r2
 80006f2:	2300      	movs	r3, #0
 80006f4:	e9c6 4300 	strd	r4, r3, [r6]
 80006f8:	4639      	mov	r1, r7
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d909      	bls.n	8000716 <__udivmoddi4+0xbe>
 8000702:	2e00      	cmp	r6, #0
 8000704:	f000 80eb 	beq.w	80008de <__udivmoddi4+0x286>
 8000708:	2700      	movs	r7, #0
 800070a:	e9c6 0100 	strd	r0, r1, [r6]
 800070e:	4638      	mov	r0, r7
 8000710:	4639      	mov	r1, r7
 8000712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000716:	fab3 f783 	clz	r7, r3
 800071a:	2f00      	cmp	r7, #0
 800071c:	d147      	bne.n	80007ae <__udivmoddi4+0x156>
 800071e:	428b      	cmp	r3, r1
 8000720:	d302      	bcc.n	8000728 <__udivmoddi4+0xd0>
 8000722:	4282      	cmp	r2, r0
 8000724:	f200 80fa 	bhi.w	800091c <__udivmoddi4+0x2c4>
 8000728:	1a84      	subs	r4, r0, r2
 800072a:	eb61 0303 	sbc.w	r3, r1, r3
 800072e:	2001      	movs	r0, #1
 8000730:	4698      	mov	r8, r3
 8000732:	2e00      	cmp	r6, #0
 8000734:	d0e0      	beq.n	80006f8 <__udivmoddi4+0xa0>
 8000736:	e9c6 4800 	strd	r4, r8, [r6]
 800073a:	e7dd      	b.n	80006f8 <__udivmoddi4+0xa0>
 800073c:	b902      	cbnz	r2, 8000740 <__udivmoddi4+0xe8>
 800073e:	deff      	udf	#255	; 0xff
 8000740:	fab2 f282 	clz	r2, r2
 8000744:	2a00      	cmp	r2, #0
 8000746:	f040 808f 	bne.w	8000868 <__udivmoddi4+0x210>
 800074a:	1b49      	subs	r1, r1, r5
 800074c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000750:	fa1f f885 	uxth.w	r8, r5
 8000754:	2701      	movs	r7, #1
 8000756:	fbb1 fcfe 	udiv	ip, r1, lr
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000760:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000764:	fb08 f10c 	mul.w	r1, r8, ip
 8000768:	4299      	cmp	r1, r3
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x124>
 800076c:	18eb      	adds	r3, r5, r3
 800076e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x122>
 8000774:	4299      	cmp	r1, r3
 8000776:	f200 80cd 	bhi.w	8000914 <__udivmoddi4+0x2bc>
 800077a:	4684      	mov	ip, r0
 800077c:	1a59      	subs	r1, r3, r1
 800077e:	b2a3      	uxth	r3, r4
 8000780:	fbb1 f0fe 	udiv	r0, r1, lr
 8000784:	fb0e 1410 	mls	r4, lr, r0, r1
 8000788:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800078c:	fb08 f800 	mul.w	r8, r8, r0
 8000790:	45a0      	cmp	r8, r4
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x14c>
 8000794:	192c      	adds	r4, r5, r4
 8000796:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x14a>
 800079c:	45a0      	cmp	r8, r4
 800079e:	f200 80b6 	bhi.w	800090e <__udivmoddi4+0x2b6>
 80007a2:	4618      	mov	r0, r3
 80007a4:	eba4 0408 	sub.w	r4, r4, r8
 80007a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007ac:	e79f      	b.n	80006ee <__udivmoddi4+0x96>
 80007ae:	f1c7 0c20 	rsb	ip, r7, #32
 80007b2:	40bb      	lsls	r3, r7
 80007b4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007b8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007bc:	fa01 f407 	lsl.w	r4, r1, r7
 80007c0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007c4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007c8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007cc:	4325      	orrs	r5, r4
 80007ce:	fbb3 f9f8 	udiv	r9, r3, r8
 80007d2:	0c2c      	lsrs	r4, r5, #16
 80007d4:	fb08 3319 	mls	r3, r8, r9, r3
 80007d8:	fa1f fa8e 	uxth.w	sl, lr
 80007dc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007e0:	fb09 f40a 	mul.w	r4, r9, sl
 80007e4:	429c      	cmp	r4, r3
 80007e6:	fa02 f207 	lsl.w	r2, r2, r7
 80007ea:	fa00 f107 	lsl.w	r1, r0, r7
 80007ee:	d90b      	bls.n	8000808 <__udivmoddi4+0x1b0>
 80007f0:	eb1e 0303 	adds.w	r3, lr, r3
 80007f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80007f8:	f080 8087 	bcs.w	800090a <__udivmoddi4+0x2b2>
 80007fc:	429c      	cmp	r4, r3
 80007fe:	f240 8084 	bls.w	800090a <__udivmoddi4+0x2b2>
 8000802:	f1a9 0902 	sub.w	r9, r9, #2
 8000806:	4473      	add	r3, lr
 8000808:	1b1b      	subs	r3, r3, r4
 800080a:	b2ad      	uxth	r5, r5
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000818:	fb00 fa0a 	mul.w	sl, r0, sl
 800081c:	45a2      	cmp	sl, r4
 800081e:	d908      	bls.n	8000832 <__udivmoddi4+0x1da>
 8000820:	eb1e 0404 	adds.w	r4, lr, r4
 8000824:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000828:	d26b      	bcs.n	8000902 <__udivmoddi4+0x2aa>
 800082a:	45a2      	cmp	sl, r4
 800082c:	d969      	bls.n	8000902 <__udivmoddi4+0x2aa>
 800082e:	3802      	subs	r0, #2
 8000830:	4474      	add	r4, lr
 8000832:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000836:	fba0 8902 	umull	r8, r9, r0, r2
 800083a:	eba4 040a 	sub.w	r4, r4, sl
 800083e:	454c      	cmp	r4, r9
 8000840:	46c2      	mov	sl, r8
 8000842:	464b      	mov	r3, r9
 8000844:	d354      	bcc.n	80008f0 <__udivmoddi4+0x298>
 8000846:	d051      	beq.n	80008ec <__udivmoddi4+0x294>
 8000848:	2e00      	cmp	r6, #0
 800084a:	d069      	beq.n	8000920 <__udivmoddi4+0x2c8>
 800084c:	ebb1 050a 	subs.w	r5, r1, sl
 8000850:	eb64 0403 	sbc.w	r4, r4, r3
 8000854:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000858:	40fd      	lsrs	r5, r7
 800085a:	40fc      	lsrs	r4, r7
 800085c:	ea4c 0505 	orr.w	r5, ip, r5
 8000860:	e9c6 5400 	strd	r5, r4, [r6]
 8000864:	2700      	movs	r7, #0
 8000866:	e747      	b.n	80006f8 <__udivmoddi4+0xa0>
 8000868:	f1c2 0320 	rsb	r3, r2, #32
 800086c:	fa20 f703 	lsr.w	r7, r0, r3
 8000870:	4095      	lsls	r5, r2
 8000872:	fa01 f002 	lsl.w	r0, r1, r2
 8000876:	fa21 f303 	lsr.w	r3, r1, r3
 800087a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800087e:	4338      	orrs	r0, r7
 8000880:	0c01      	lsrs	r1, r0, #16
 8000882:	fbb3 f7fe 	udiv	r7, r3, lr
 8000886:	fa1f f885 	uxth.w	r8, r5
 800088a:	fb0e 3317 	mls	r3, lr, r7, r3
 800088e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000892:	fb07 f308 	mul.w	r3, r7, r8
 8000896:	428b      	cmp	r3, r1
 8000898:	fa04 f402 	lsl.w	r4, r4, r2
 800089c:	d907      	bls.n	80008ae <__udivmoddi4+0x256>
 800089e:	1869      	adds	r1, r5, r1
 80008a0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80008a4:	d22f      	bcs.n	8000906 <__udivmoddi4+0x2ae>
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d92d      	bls.n	8000906 <__udivmoddi4+0x2ae>
 80008aa:	3f02      	subs	r7, #2
 80008ac:	4429      	add	r1, r5
 80008ae:	1acb      	subs	r3, r1, r3
 80008b0:	b281      	uxth	r1, r0
 80008b2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008b6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008be:	fb00 f308 	mul.w	r3, r0, r8
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d907      	bls.n	80008d6 <__udivmoddi4+0x27e>
 80008c6:	1869      	adds	r1, r5, r1
 80008c8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80008cc:	d217      	bcs.n	80008fe <__udivmoddi4+0x2a6>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d915      	bls.n	80008fe <__udivmoddi4+0x2a6>
 80008d2:	3802      	subs	r0, #2
 80008d4:	4429      	add	r1, r5
 80008d6:	1ac9      	subs	r1, r1, r3
 80008d8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008dc:	e73b      	b.n	8000756 <__udivmoddi4+0xfe>
 80008de:	4637      	mov	r7, r6
 80008e0:	4630      	mov	r0, r6
 80008e2:	e709      	b.n	80006f8 <__udivmoddi4+0xa0>
 80008e4:	4607      	mov	r7, r0
 80008e6:	e6e7      	b.n	80006b8 <__udivmoddi4+0x60>
 80008e8:	4618      	mov	r0, r3
 80008ea:	e6fb      	b.n	80006e4 <__udivmoddi4+0x8c>
 80008ec:	4541      	cmp	r1, r8
 80008ee:	d2ab      	bcs.n	8000848 <__udivmoddi4+0x1f0>
 80008f0:	ebb8 0a02 	subs.w	sl, r8, r2
 80008f4:	eb69 020e 	sbc.w	r2, r9, lr
 80008f8:	3801      	subs	r0, #1
 80008fa:	4613      	mov	r3, r2
 80008fc:	e7a4      	b.n	8000848 <__udivmoddi4+0x1f0>
 80008fe:	4660      	mov	r0, ip
 8000900:	e7e9      	b.n	80008d6 <__udivmoddi4+0x27e>
 8000902:	4618      	mov	r0, r3
 8000904:	e795      	b.n	8000832 <__udivmoddi4+0x1da>
 8000906:	4667      	mov	r7, ip
 8000908:	e7d1      	b.n	80008ae <__udivmoddi4+0x256>
 800090a:	4681      	mov	r9, r0
 800090c:	e77c      	b.n	8000808 <__udivmoddi4+0x1b0>
 800090e:	3802      	subs	r0, #2
 8000910:	442c      	add	r4, r5
 8000912:	e747      	b.n	80007a4 <__udivmoddi4+0x14c>
 8000914:	f1ac 0c02 	sub.w	ip, ip, #2
 8000918:	442b      	add	r3, r5
 800091a:	e72f      	b.n	800077c <__udivmoddi4+0x124>
 800091c:	4638      	mov	r0, r7
 800091e:	e708      	b.n	8000732 <__udivmoddi4+0xda>
 8000920:	4637      	mov	r7, r6
 8000922:	e6e9      	b.n	80006f8 <__udivmoddi4+0xa0>

08000924 <__aeabi_idiv0>:
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <TurnHexIntoDec>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t TurnHexIntoDec(uint8_t hex)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	return ((hex & 0x000F) + ((hex >> 4) & 0x000F)*10);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	f003 030f 	and.w	r3, r3, #15
 8000938:	b2da      	uxtb	r2, r3
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	091b      	lsrs	r3, r3, #4
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4619      	mov	r1, r3
 8000942:	0089      	lsls	r1, r1, #2
 8000944:	440b      	add	r3, r1
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4413      	add	r3, r2
 800094c:	b2db      	uxtb	r3, r3
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <TurnDecIntoHex>:

uint8_t TurnDecIntoHex(uint8_t dec)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
	return ((((uint8_t)(floor(dec/10))) << 4) + dec%10);
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <TurnDecIntoHex+0x54>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fdce 	bl	8000514 <__aeabi_i2d>
 8000978:	4603      	mov	r3, r0
 800097a:	460c      	mov	r4, r1
 800097c:	4618      	mov	r0, r3
 800097e:	4621      	mov	r1, r4
 8000980:	f7ff fe32 	bl	80005e8 <__aeabi_d2uiz>
 8000984:	4603      	mov	r3, r0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	b2d8      	uxtb	r0, r3
 800098c:	79fa      	ldrb	r2, [r7, #7]
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <TurnDecIntoHex+0x54>)
 8000990:	fba3 1302 	umull	r1, r3, r3, r2
 8000994:	08d9      	lsrs	r1, r3, #3
 8000996:	460b      	mov	r3, r1
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	440b      	add	r3, r1
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4403      	add	r3, r0
 80009a4:	b2db      	uxtb	r3, r3
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	bf00      	nop
 80009b0:	cccccccd 	.word	0xcccccccd

080009b4 <SetTime>:

void SetTime(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	/** Initialize RTC and set the Time and Date*/
	sTime.Hours = 0x3;
 80009ba:	2303      	movs	r3, #3
 80009bc:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x40;
 80009be:	2340      	movs	r3, #64	; 0x40
 80009c0:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x00;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2201      	movs	r2, #1
 80009d2:	4619      	mov	r1, r3
 80009d4:	4812      	ldr	r0, [pc, #72]	; (8000a20 <SetTime+0x6c>)
 80009d6:	f002 feb7 	bl	8003748 <HAL_RTC_SetTime>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SetTime+0x30>
	{
	Error_Handler();
 80009e0:	f000 fa18 	bl	8000e14 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80009e4:	2303      	movs	r3, #3
 80009e6:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_FEBRUARY;
 80009e8:	2302      	movs	r3, #2
 80009ea:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x17;
 80009ec:	2317      	movs	r3, #23
 80009ee:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x21;
 80009f0:	2321      	movs	r3, #33	; 0x21
 80009f2:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	2201      	movs	r2, #1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4809      	ldr	r0, [pc, #36]	; (8000a20 <SetTime+0x6c>)
 80009fc:	f002 ffbf 	bl	800397e <HAL_RTC_SetDate>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SetTime+0x56>
	{
	Error_Handler();
 8000a06:	f000 fa05 	bl	8000e14 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000a0a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <SetTime+0x6c>)
 8000a12:	f003 fa9b 	bl	8003f4c <HAL_RTCEx_BKUPWrite>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000214 	.word	0x20000214

08000a24 <SetAlarm>:

void SetAlarm(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef sAlarm;

	sAlarm.AlarmTime.Hours = 0x3;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x40;
 8000a2e:	2340      	movs	r3, #64	; 0x40
 8000a30:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x17;
 8000a4e:	2317      	movs	r3, #23
 8000a50:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8000a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <SetAlarm+0x54>)
 8000a62:	f003 f883 	bl	8003b6c <HAL_RTC_SetAlarm_IT>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SetAlarm+0x4c>
	{
	Error_Handler();
 8000a6c:	f000 f9d2 	bl	8000e14 <Error_Handler>
	}
}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000214 	.word	0x20000214

08000a7c <GetTimeDate>:

void GetTimeDate (void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af02      	add	r7, sp, #8
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000a82:	463b      	mov	r3, r7
 8000a84:	2201      	movs	r2, #1
 8000a86:	4619      	mov	r1, r3
 8000a88:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <GetTimeDate+0x58>)
 8000a8a:	f002 ff1a 	bl	80038c2 <HAL_RTC_GetTime>
	/* Get the RTC Curret Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	2201      	movs	r2, #1
 8000a94:	4619      	mov	r1, r3
 8000a96:	480f      	ldr	r0, [pc, #60]	; (8000ad4 <GetTimeDate+0x58>)
 8000a98:	f003 f818 	bl	8003acc <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	sprintf((char*)time,"%02x:%02x:%02x",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000a9c:	783b      	ldrb	r3, [r7, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	787b      	ldrb	r3, [r7, #1]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	78bb      	ldrb	r3, [r7, #2]
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	490b      	ldr	r1, [pc, #44]	; (8000ad8 <GetTimeDate+0x5c>)
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <GetTimeDate+0x60>)
 8000aae:	f006 ff5f 	bl	8007970 <siprintf>

	/* Display date Format: yy-mm-dd */
	sprintf((char*)date,"%02x-%02x-%02x",2000+gDate.Year, gDate.Month, gDate.Date);
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
 8000ab4:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000ab8:	7d7b      	ldrb	r3, [r7, #21]
 8000aba:	4619      	mov	r1, r3
 8000abc:	7dbb      	ldrb	r3, [r7, #22]
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	4907      	ldr	r1, [pc, #28]	; (8000ae0 <GetTimeDate+0x64>)
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <GetTimeDate+0x68>)
 8000ac6:	f006 ff53 	bl	8007970 <siprintf>

}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000214 	.word	0x20000214
 8000ad8:	08008024 	.word	0x08008024
 8000adc:	20000254 	.word	0x20000254
 8000ae0:	08008034 	.word	0x08008034
 8000ae4:	20000260 	.word	0x20000260

08000ae8 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	Alarm = 1;
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000200 	.word	0x20000200

08000b08 <ToDoOnAlarm>:

void ToDoOnAlarm (void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b12:	4802      	ldr	r0, [pc, #8]	; (8000b1c <ToDoOnAlarm+0x14>)
 8000b14:	f000 fe60 	bl	80017d8 <HAL_GPIO_WritePin>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40021400 	.word	0x40021400

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b24:	f000 fb18 	bl	8001158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b28:	f000 f83c 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2c:	f000 f8e4 	bl	8000cf8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000b30:	f000 f8bc 	bl	8000cac <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000b34:	f006 f948 	bl	8006dc8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4816      	ldr	r0, [pc, #88]	; (8000b94 <main+0x74>)
 8000b3c:	f003 fa20 	bl	8003f80 <HAL_RTCEx_BKUPRead>
 8000b40:	4602      	mov	r2, r0
 8000b42:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d001      	beq.n	8000b4e <main+0x2e>
  {
	  SetTime();
 8000b4a:	f7ff ff33 	bl	80009b4 <SetTime>
  }

  SetAlarm();
 8000b4e:	f7ff ff69 	bl	8000a24 <SetAlarm>

//	!!
//	  if I upload conf. from cubemxconfigurator I need to delete set time from MX_RTC_Init()!
//	  !!

	  GetTimeDate();
 8000b52:	f7ff ff93 	bl	8000a7c <GetTimeDate>

	  if (Alarmed)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <main+0x78>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <main+0x4c>
	  {
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <main+0x7c>)
 8000b66:	f000 fe37 	bl	80017d8 <HAL_GPIO_WritePin>
 8000b6a:	e005      	b.n	8000b78 <main+0x58>
	  } else HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b72:	480a      	ldr	r0, [pc, #40]	; (8000b9c <main+0x7c>)
 8000b74:	f000 fe30 	bl	80017d8 <HAL_GPIO_WritePin>

	  if (Alarm)
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <main+0x80>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0e8      	beq.n	8000b52 <main+0x32>
	  {
		  ToDoOnAlarm();
 8000b80:	f7ff ffc2 	bl	8000b08 <ToDoOnAlarm>
		  Alarm = 0;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <main+0x80>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
		  Alarmed = 1;
 8000b8a:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <main+0x78>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
	  GetTimeDate();
 8000b90:	e7df      	b.n	8000b52 <main+0x32>
 8000b92:	bf00      	nop
 8000b94:	20000214 	.word	0x20000214
 8000b98:	20000201 	.word	0x20000201
 8000b9c:	40021400 	.word	0x40021400
 8000ba0:	20000200 	.word	0x20000200

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b098      	sub	sp, #96	; 0x60
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bae:	2230      	movs	r2, #48	; 0x30
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f006 fe1c 	bl	80077f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <SystemClock_Config+0x100>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a31      	ldr	r2, [pc, #196]	; (8000ca4 <SystemClock_Config+0x100>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemClock_Config+0x100>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <SystemClock_Config+0x104>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ca8 <SystemClock_Config+0x104>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <SystemClock_Config+0x104>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000c0e:	2307      	movs	r3, #7
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c20:	2310      	movs	r3, #16
 8000c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c24:	2302      	movs	r3, #2
 8000c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c32:	2348      	movs	r3, #72	; 0x48
 8000c34:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 ffa2 	bl	8002b8c <HAL_RCC_OscConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c4e:	f000 f8e1 	bl	8000e14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c52:	230f      	movs	r3, #15
 8000c54:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 f9fd 	bl	800306c <HAL_RCC_ClockConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000c78:	f000 f8cc 	bl	8000e14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c84:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 fbb8 	bl	8003400 <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000c96:	f000 f8bd 	bl	8000e14 <Error_Handler>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3760      	adds	r7, #96	; 0x60
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40007000 	.word	0x40007000

08000cac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_RTC_Init+0x44>)
 8000cb2:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <MX_RTC_Init+0x48>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_RTC_Init+0x44>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_RTC_Init+0x44>)
 8000cbe:	227f      	movs	r2, #127	; 0x7f
 8000cc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_RTC_Init+0x44>)
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_RTC_Init+0x44>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_RTC_Init+0x44>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_RTC_Init+0x44>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_RTC_Init+0x44>)
 8000cdc:	f002 fc72 	bl	80035c4 <HAL_RTC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ce6:	f000 f895 	bl	8000e14 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000214 	.word	0x20000214
 8000cf4:	40002800 	.word	0x40002800

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a3b      	ldr	r2, [pc, #236]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d18:	f043 0310 	orr.w	r3, r3, #16
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a34      	ldr	r2, [pc, #208]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a2d      	ldr	r2, [pc, #180]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d50:	f043 0320 	orr.w	r3, r3, #32
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0320 	and.w	r3, r3, #32
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_GPIO_Init+0x10c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000da0:	4819      	ldr	r0, [pc, #100]	; (8000e08 <MX_GPIO_Init+0x110>)
 8000da2:	f000 fd19 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8000da6:	2318      	movs	r3, #24
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_GPIO_Init+0x114>)
 8000dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4815      	ldr	r0, [pc, #84]	; (8000e10 <MX_GPIO_Init+0x118>)
 8000dba:	f000 fb73 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000dbe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000dc4:	2311      	movs	r3, #17
 8000dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_GPIO_Init+0x110>)
 8000dd8:	f000 fb64 	bl	80014a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2102      	movs	r1, #2
 8000de0:	2009      	movs	r0, #9
 8000de2:	f000 fb28 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000de6:	2009      	movs	r0, #9
 8000de8:	f000 fb41 	bl	800146e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2102      	movs	r1, #2
 8000df0:	200a      	movs	r0, #10
 8000df2:	f000 fb20 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000df6:	200a      	movs	r0, #10
 8000df8:	f000 fb39 	bl	800146e <HAL_NVIC_EnableIRQ>

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40021400 	.word	0x40021400
 8000e0c:	10110000 	.word	0x10110000
 8000e10:	40021000 	.word	0x40021000

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <Error_Handler+0x6>

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <HAL_RTC_MspInit+0x24>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d102      	bne.n	8000e84 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_RTC_MspInit+0x28>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	40002800 	.word	0x40002800
 8000e94:	42470e3c 	.word	0x42470e3c

08000e98 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <HAL_RTC_MspDeInit+0x24>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d102      	bne.n	8000eb0 <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_RTC_MspDeInit+0x28>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40002800 	.word	0x40002800
 8000ec0:	42470e3c 	.word	0x42470e3c

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f974 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	if (HAL_GetTick() - JitterButtonK0 > 300)
 8000f1e:	f000 f981 	bl	8001224 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <EXTI3_IRQHandler+0x94>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f2e:	d935      	bls.n	8000f9c <EXTI3_IRQHandler+0x84>
	{
		JitterButtonK0 = HAL_GetTick();
 8000f30:	f000 f978 	bl	8001224 <HAL_GetTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <EXTI3_IRQHandler+0x94>)
 8000f3a:	701a      	strb	r2, [r3, #0]

//		here is our action on KEY1 button
		RTC_TimeTypeDef gTime;
		RTC_TimeTypeDef sTime;

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2201      	movs	r2, #1
 8000f42:	4619      	mov	r1, r3
 8000f44:	481a      	ldr	r0, [pc, #104]	; (8000fb0 <EXTI3_IRQHandler+0x98>)
 8000f46:	f002 fcbc 	bl	80038c2 <HAL_RTC_GetTime>
		sTime.Hours = gTime.Hours;
 8000f4a:	7d3b      	ldrb	r3, [r7, #20]
 8000f4c:	703b      	strb	r3, [r7, #0]
		sTime.Minutes = gTime.Minutes;
 8000f4e:	7d7b      	ldrb	r3, [r7, #21]
 8000f50:	707b      	strb	r3, [r7, #1]
		sTime.Seconds = TurnDecIntoHex(TurnHexIntoDec(gTime.Seconds)-7);
 8000f52:	7dbb      	ldrb	r3, [r7, #22]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fce7 	bl	8000928 <TurnHexIntoDec>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	3b07      	subs	r3, #7
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fcfb 	bl	800095c <TurnDecIntoHex>
 8000f66:	4603      	mov	r3, r0
 8000f68:	70bb      	strb	r3, [r7, #2]

		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480f      	ldr	r0, [pc, #60]	; (8000fb0 <EXTI3_IRQHandler+0x98>)
 8000f72:	f002 fbe9 	bl	8003748 <HAL_RTC_SetTime>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <EXTI3_IRQHandler+0x68>
		{
		  Error_Handler();
 8000f7c:	f7ff ff4a 	bl	8000e14 <Error_Handler>
		}

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <EXTI3_IRQHandler+0x9c>)
 8000f86:	f000 fc40 	bl	800180a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8e:	f000 f955 	bl	800123c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <EXTI3_IRQHandler+0x9c>)
 8000f98:	f000 fc37 	bl	800180a <HAL_GPIO_TogglePin>
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f9c:	2008      	movs	r0, #8
 8000f9e:	f000 fc4f 	bl	8001840 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000202 	.word	0x20000202
 8000fb0:	20000214 	.word	0x20000214
 8000fb4:	40021400 	.word	0x40021400

08000fb8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	if (HAL_GetTick() - JitterButtonK1 > 300)
 8000fbe:	f000 f931 	bl	8001224 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <EXTI4_IRQHandler+0x94>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fce:	d935      	bls.n	800103c <EXTI4_IRQHandler+0x84>
	{
		JitterButtonK1 = HAL_GetTick();
 8000fd0:	f000 f928 	bl	8001224 <HAL_GetTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <EXTI4_IRQHandler+0x94>)
 8000fda:	701a      	strb	r2, [r3, #0]

//		here is our action on KEY1 button
		RTC_TimeTypeDef gTime;
		RTC_TimeTypeDef sTime;

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481a      	ldr	r0, [pc, #104]	; (8001050 <EXTI4_IRQHandler+0x98>)
 8000fe6:	f002 fc6c 	bl	80038c2 <HAL_RTC_GetTime>
		sTime.Hours = gTime.Hours;
 8000fea:	7d3b      	ldrb	r3, [r7, #20]
 8000fec:	703b      	strb	r3, [r7, #0]
		sTime.Minutes = gTime.Minutes;
 8000fee:	7d7b      	ldrb	r3, [r7, #21]
 8000ff0:	707b      	strb	r3, [r7, #1]
		sTime.Seconds = TurnDecIntoHex(TurnHexIntoDec(gTime.Seconds)+3);
 8000ff2:	7dbb      	ldrb	r3, [r7, #22]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fc97 	bl	8000928 <TurnHexIntoDec>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	3303      	adds	r3, #3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fcab 	bl	800095c <TurnDecIntoHex>
 8001006:	4603      	mov	r3, r0
 8001008:	70bb      	strb	r3, [r7, #2]

		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	2201      	movs	r2, #1
 800100e:	4619      	mov	r1, r3
 8001010:	480f      	ldr	r0, [pc, #60]	; (8001050 <EXTI4_IRQHandler+0x98>)
 8001012:	f002 fb99 	bl	8003748 <HAL_RTC_SetTime>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <EXTI4_IRQHandler+0x68>
		{
		  Error_Handler();
 800101c:	f7ff fefa 	bl	8000e14 <Error_Handler>
		}

		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001020:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <EXTI4_IRQHandler+0x9c>)
 8001026:	f000 fbf0 	bl	800180a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800102a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102e:	f000 f905 	bl	800123c <HAL_Delay>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001032:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001036:	4807      	ldr	r0, [pc, #28]	; (8001054 <EXTI4_IRQHandler+0x9c>)
 8001038:	f000 fbe7 	bl	800180a <HAL_GPIO_TogglePin>
	}

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800103c:	2010      	movs	r0, #16
 800103e:	f000 fbff 	bl	8001840 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000203 	.word	0x20000203
 8001050:	20000214 	.word	0x20000214
 8001054:	40021400 	.word	0x40021400

08001058 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <OTG_FS_IRQHandler+0x10>)
 800105e:	f000 fd62 	bl	8001b26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20001740 	.word	0x20001740

0800106c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <_sbrk+0x5c>)
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <_sbrk+0x60>)
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <_sbrk+0x64>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <_sbrk+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	429a      	cmp	r2, r3
 800109a:	d207      	bcs.n	80010ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800109c:	f006 fb6e 	bl	800777c <__errno>
 80010a0:	4602      	mov	r2, r0
 80010a2:	230c      	movs	r3, #12
 80010a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010aa:	e009      	b.n	80010c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <_sbrk+0x64>)
 80010bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20020000 	.word	0x20020000
 80010cc:	00000400 	.word	0x00000400
 80010d0:	20000204 	.word	0x20000204
 80010d4:	20001b50 	.word	0x20001b50

080010d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <SystemInit+0x28>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <SystemInit+0x28>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SystemInit+0x28>)
 80010ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010f2:	609a      	str	r2, [r3, #8]
#endif
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800113c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001108:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800110a:	e003      	b.n	8001114 <LoopCopyDataInit>

0800110c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800110e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001110:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001112:	3104      	adds	r1, #4

08001114 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001118:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800111a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800111c:	d3f6      	bcc.n	800110c <CopyDataInit>
  ldr  r2, =_sbss
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001120:	e002      	b.n	8001128 <LoopFillZerobss>

08001122 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001122:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001124:	f842 3b04 	str.w	r3, [r2], #4

08001128 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800112a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800112c:	d3f9      	bcc.n	8001122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800112e:	f7ff ffd3 	bl	80010d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001132:	f006 fb29 	bl	8007788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff fcf3 	bl	8000b20 <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800113c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001140:	080080e0 	.word	0x080080e0
  ldr  r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001148:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800114c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001150:	20001b4c 	.word	0x20001b4c

08001154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC_IRQHandler>
	...

08001158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <HAL_Init+0x40>)
 8001162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <HAL_Init+0x40>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_Init+0x40>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f94d 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	2000      	movs	r0, #0
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fe46 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f965 	bl	800148a <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d8:	f000 f92d 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	2000026c 	.word	0x2000026c

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	2000026c 	.word	0x2000026c

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_Delay+0x40>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffde 	bl	8001224 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000008 	.word	0x20000008

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff29 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff3e 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff8e 	bl	8001374 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5d 	bl	8001320 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff31 	bl	80012e4 <__NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffa2 	bl	80013dc <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	e16b      	b.n	8001798 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	429a      	cmp	r2, r3
 80014da:	f040 815a 	bne.w	8001792 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d00b      	beq.n	80014fe <HAL_GPIO_Init+0x5a>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f2:	2b11      	cmp	r3, #17
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b12      	cmp	r3, #18
 80014fc:	d130      	bne.n	8001560 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001534:	2201      	movs	r2, #1
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	f003 0201 	and.w	r2, r3, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0xfc>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b12      	cmp	r3, #18
 800159e:	d123      	bne.n	80015e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	08da      	lsrs	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3208      	adds	r2, #8
 80015a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	69b9      	ldr	r1, [r7, #24]
 80015e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80b4 	beq.w	8001792 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b5f      	ldr	r3, [pc, #380]	; (80017ac <HAL_GPIO_Init+0x308>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a5e      	ldr	r2, [pc, #376]	; (80017ac <HAL_GPIO_Init+0x308>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b5c      	ldr	r3, [pc, #368]	; (80017ac <HAL_GPIO_Init+0x308>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001646:	4a5a      	ldr	r2, [pc, #360]	; (80017b0 <HAL_GPIO_Init+0x30c>)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a51      	ldr	r2, [pc, #324]	; (80017b4 <HAL_GPIO_Init+0x310>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d02b      	beq.n	80016ca <HAL_GPIO_Init+0x226>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a50      	ldr	r2, [pc, #320]	; (80017b8 <HAL_GPIO_Init+0x314>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d025      	beq.n	80016c6 <HAL_GPIO_Init+0x222>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4f      	ldr	r2, [pc, #316]	; (80017bc <HAL_GPIO_Init+0x318>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <HAL_GPIO_Init+0x21e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4e      	ldr	r2, [pc, #312]	; (80017c0 <HAL_GPIO_Init+0x31c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x21a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4d      	ldr	r2, [pc, #308]	; (80017c4 <HAL_GPIO_Init+0x320>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x216>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4c      	ldr	r2, [pc, #304]	; (80017c8 <HAL_GPIO_Init+0x324>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x212>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4b      	ldr	r2, [pc, #300]	; (80017cc <HAL_GPIO_Init+0x328>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x20e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <HAL_GPIO_Init+0x32c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x20a>
 80016aa:	2307      	movs	r3, #7
 80016ac:	e00e      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ae:	2308      	movs	r3, #8
 80016b0:	e00c      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016b2:	2306      	movs	r3, #6
 80016b4:	e00a      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ca:	2300      	movs	r3, #0
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016dc:	4934      	ldr	r1, [pc, #208]	; (80017b0 <HAL_GPIO_Init+0x30c>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ea:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <HAL_GPIO_Init+0x330>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800170e:	4a31      	ldr	r2, [pc, #196]	; (80017d4 <HAL_GPIO_Init+0x330>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001714:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <HAL_GPIO_Init+0x330>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001738:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <HAL_GPIO_Init+0x330>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_GPIO_Init+0x330>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001762:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <HAL_GPIO_Init+0x330>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_GPIO_Init+0x330>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800178c:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <HAL_GPIO_Init+0x330>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f ae90 	bls.w	80014c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	3724      	adds	r7, #36	; 0x24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40013800 	.word	0x40013800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40021400 	.word	0x40021400
 80017cc:	40021800 	.word	0x40021800
 80017d0:	40021c00 	.word	0x40021c00
 80017d4:	40013c00 	.word	0x40013c00

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	619a      	str	r2, [r3, #24]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	401a      	ands	r2, r3
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	429a      	cmp	r2, r3
 8001822:	d104      	bne.n	800182e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001824:	887b      	ldrh	r3, [r7, #2]
 8001826:	041a      	lsls	r2, r3, #16
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800182c:	e002      	b.n	8001834 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f806 	bl	8001870 <HAL_GPIO_EXTI_Callback>
  }
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40013c00 	.word	0x40013c00

08001870 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001886:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001888:	b08f      	sub	sp, #60	; 0x3c
 800188a:	af0a      	add	r7, sp, #40	; 0x28
 800188c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e10f      	b.n	8001ab8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d106      	bne.n	80018b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f005 fc66 	bl	8007184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2203      	movs	r2, #3
 80018bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fc89 	bl	80041ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	687e      	ldr	r6, [r7, #4]
 80018e4:	466d      	mov	r5, sp
 80018e6:	f106 0410 	add.w	r4, r6, #16
 80018ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80018fa:	1d33      	adds	r3, r6, #4
 80018fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018fe:	6838      	ldr	r0, [r7, #0]
 8001900:	f002 fb60 	bl	8003fc4 <USB_CoreInit>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0d0      	b.n	8001ab8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fc77 	bl	8004210 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	e04a      	b.n	80019be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	333d      	adds	r3, #61	; 0x3d
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	333c      	adds	r3, #60	; 0x3c
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	b298      	uxth	r0, r3
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	3342      	adds	r3, #66	; 0x42
 8001964:	4602      	mov	r2, r0
 8001966:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	333f      	adds	r3, #63	; 0x3f
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	3344      	adds	r3, #68	; 0x44
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	3348      	adds	r3, #72	; 0x48
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3350      	adds	r3, #80	; 0x50
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	3301      	adds	r3, #1
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d3af      	bcc.n	8001928 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e044      	b.n	8001a58 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	3301      	adds	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3b5      	bcc.n	80019ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	687e      	ldr	r6, [r7, #4]
 8001a6a:	466d      	mov	r5, sp
 8001a6c:	f106 0410 	add.w	r4, r6, #16
 8001a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a80:	1d33      	adds	r3, r6, #4
 8001a82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a84:	6838      	ldr	r0, [r7, #0]
 8001a86:	f002 fbed 	bl	8004264 <USB_DevInit>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e00d      	b.n	8001ab8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 fc35 	bl	8005320 <USB_DevDisconnect>

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ac0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_PCD_Start+0x1c>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e020      	b.n	8001b1e <HAL_PCD_Start+0x5e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d109      	bne.n	8001b00 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d005      	beq.n	8001b00 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fb61 	bl	80041cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fbe5 	bl	80052de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b26:	b590      	push	{r4, r7, lr}
 8001b28:	b08d      	sub	sp, #52	; 0x34
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fca3 	bl	8005488 <USB_GetMode>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f040 839d 	bne.w	8002284 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fc07 	bl	8005362 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8393 	beq.w	8002282 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 fbfe 	bl	8005362 <USB_ReadInterrupts>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d107      	bne.n	8001b80 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f002 0202 	and.w	r2, r2, #2
 8001b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 fbec 	bl	8005362 <USB_ReadInterrupts>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d161      	bne.n	8001c58 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0210 	bic.w	r2, r2, #16
 8001ba2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f003 020f 	and.w	r2, r3, #15
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	0c5b      	lsrs	r3, r3, #17
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d124      	bne.n	8001c1a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d035      	beq.n	8001c48 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	6a38      	ldr	r0, [r7, #32]
 8001bf0:	f003 fa52 	bl	8005098 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c00:	441a      	add	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	699a      	ldr	r2, [r3, #24]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c12:	441a      	add	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	619a      	str	r2, [r3, #24]
 8001c18:	e016      	b.n	8001c48 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	0c5b      	lsrs	r3, r3, #17
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d110      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6a38      	ldr	r0, [r7, #32]
 8001c32:	f003 fa31 	bl	8005098 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c42:	441a      	add	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0210 	orr.w	r2, r2, #16
 8001c56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fb80 	bl	8005362 <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c6c:	d16e      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fb86 	bl	8005388 <USB_ReadDevAllOutEpInterrupt>
 8001c7c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c7e:	e062      	b.n	8001d46 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d057      	beq.n	8001d3a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fbab 	bl	80053f0 <USB_ReadDevOutEPInterrupt>
 8001c9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00c      	beq.n	8001cc0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fdb0 	bl	8002820 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00c      	beq.n	8001ce4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2308      	movs	r3, #8
 8001cda:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 feaa 	bl	8002a38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	015a      	lsls	r2, r3, #5
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d008      	beq.n	8001d1c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d16:	461a      	mov	r2, r3
 8001d18:	2320      	movs	r3, #32
 8001d1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d32:	461a      	mov	r2, r3
 8001d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d38:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d199      	bne.n	8001c80 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 fb06 	bl	8005362 <USB_ReadInterrupts>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d60:	f040 80c0 	bne.w	8001ee4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 fb27 	bl	80053bc <USB_ReadDevAllInEpInterrupt>
 8001d6e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d74:	e0b2      	b.n	8001edc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80a7 	beq.w	8001ed0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fb4d 	bl	800542c <USB_ReadDevInEPInterrupt>
 8001d92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d057      	beq.n	8001e4e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	2201      	movs	r2, #1
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69f9      	ldr	r1, [r7, #28]
 8001dba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d132      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	3348      	adds	r3, #72	; 0x48
 8001dec:	6819      	ldr	r1, [r3, #0]
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4403      	add	r3, r0
 8001dfc:	3344      	adds	r3, #68	; 0x44
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4419      	add	r1, r3
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4403      	add	r3, r0
 8001e10:	3348      	adds	r3, #72	; 0x48
 8001e12:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d113      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x31c>
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	3350      	adds	r3, #80	; 0x50
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d108      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	f003 fb55 	bl	80054ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	4619      	mov	r1, r3
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f005 fa1c 	bl	8007286 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e64:	461a      	mov	r2, r3
 8001e66:	2308      	movs	r3, #8
 8001e68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e80:	461a      	mov	r2, r3
 8001e82:	2310      	movs	r3, #16
 8001e84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2340      	movs	r3, #64	; 0x40
 8001ea0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2302      	movs	r3, #2
 8001ebc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fc1b 	bl	8002706 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f47f af49 	bne.w	8001d76 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fa3a 	bl	8005362 <USB_ReadInterrupts>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ef8:	d122      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d108      	bne.n	8001f2a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f20:	2100      	movs	r1, #0
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fe26 	bl	8002b74 <HAL_PCDEx_LPM_Callback>
 8001f28:	e002      	b.n	8001f30 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f005 fa22 	bl	8007374 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 fa0c 	bl	8005362 <USB_ReadInterrupts>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f54:	d112      	bne.n	8001f7c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d102      	bne.n	8001f6c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f005 f9de 	bl	8007328 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f7a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 f9ee 	bl	8005362 <USB_ReadInterrupts>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f90:	f040 80c7 	bne.w	8002122 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2110      	movs	r1, #16
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 fabc 	bl	800452c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb8:	e056      	b.n	8002068 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fcc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fde:	0151      	lsls	r1, r2, #5
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	440a      	add	r2, r1
 8001fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001fe8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fec:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffe:	0151      	lsls	r1, r2, #5
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	440a      	add	r2, r1
 8002004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002008:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800200c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201a:	461a      	mov	r2, r3
 800201c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002020:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002032:	0151      	lsls	r1, r2, #5
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	440a      	add	r2, r1
 8002038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800203c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002040:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002052:	0151      	lsls	r1, r2, #5
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	440a      	add	r2, r1
 8002058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800205c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002060:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	3301      	adds	r3, #1
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800206e:	429a      	cmp	r2, r3
 8002070:	d3a3      	bcc.n	8001fba <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002080:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002084:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800209e:	f043 030b 	orr.w	r3, r3, #11
 80020a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b4:	f043 030b 	orr.w	r3, r3, #11
 80020b8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ba:	e015      	b.n	80020e8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020d2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e2:	f043 030b 	orr.w	r3, r3, #11
 80020e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800210c:	461a      	mov	r2, r3
 800210e:	f003 f9ed 	bl	80054ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f003 f91b 	bl	8005362 <USB_ReadInterrupts>
 800212c:	4603      	mov	r3, r0
 800212e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002136:	d124      	bne.n	8002182 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f003 f9b1 	bl	80054a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f002 fa51 	bl	80045ee <USB_GetDevSpeed>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681c      	ldr	r4, [r3, #0]
 8002158:	f001 f946 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 800215c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	4620      	mov	r0, r4
 8002168:	f001 ff8e 	bl	8004088 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f005 f8b2 	bl	80072d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002180:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f003 f8eb 	bl	8005362 <USB_ReadInterrupts>
 800218c:	4603      	mov	r3, r0
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b08      	cmp	r3, #8
 8002194:	d10a      	bne.n	80021ac <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f005 f88f 	bl	80072ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695a      	ldr	r2, [r3, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f002 0208 	and.w	r2, r2, #8
 80021aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 f8d6 	bl	8005362 <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021c0:	d10f      	bne.n	80021e2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f005 f8f1 	bl	80073b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 f8bb 	bl	8005362 <USB_ReadInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021f6:	d10f      	bne.n	8002218 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f005 f8c4 	bl	8007390 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002216:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f003 f8a0 	bl	8005362 <USB_ReadInterrupts>
 8002222:	4603      	mov	r3, r0
 8002224:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222c:	d10a      	bne.n	8002244 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f005 f8d2 	bl	80073d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f003 f88a 	bl	8005362 <USB_ReadInterrupts>
 800224e:	4603      	mov	r3, r0
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b04      	cmp	r3, #4
 8002256:	d115      	bne.n	8002284 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f005 f8c2 	bl	80073f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	430a      	orrs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	e000      	b.n	8002284 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002282:	bf00      	nop
    }
  }
}
 8002284:	3734      	adds	r7, #52	; 0x34
 8002286:	46bd      	mov	sp, r7
 8002288:	bd90      	pop	{r4, r7, pc}

0800228a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_PCD_SetAddress+0x1a>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e013      	b.n	80022cc <HAL_PCD_SetAddress+0x42>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 ffe8 	bl	8005292 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	4608      	mov	r0, r1
 80022de:	4611      	mov	r1, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	70fb      	strb	r3, [r7, #3]
 80022e6:	460b      	mov	r3, r1
 80022e8:	803b      	strh	r3, [r7, #0]
 80022ea:	4613      	mov	r3, r2
 80022ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	da0f      	bge.n	800231a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	f003 020f 	and.w	r2, r3, #15
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	3338      	adds	r3, #56	; 0x38
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	3304      	adds	r3, #4
 8002310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	705a      	strb	r2, [r3, #1]
 8002318:	e00f      	b.n	800233a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	f003 020f 	and.w	r2, r3, #15
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	3304      	adds	r3, #4
 8002332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	b2da      	uxtb	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002346:	883a      	ldrh	r2, [r7, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	78ba      	ldrb	r2, [r7, #2]
 8002350:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	785b      	ldrb	r3, [r3, #1]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002364:	78bb      	ldrb	r3, [r7, #2]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d102      	bne.n	8002370 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_PCD_EP_Open+0xaa>
 800237a:	2302      	movs	r3, #2
 800237c:	e00e      	b.n	800239c <HAL_PCD_EP_Open+0xc8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68f9      	ldr	r1, [r7, #12]
 800238c:	4618      	mov	r0, r3
 800238e:	f002 f953 	bl	8004638 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800239a:	7afb      	ldrb	r3, [r7, #11]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	da0f      	bge.n	80023d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	f003 020f 	and.w	r2, r3, #15
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	3338      	adds	r3, #56	; 0x38
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	4413      	add	r3, r2
 80023cc:	3304      	adds	r3, #4
 80023ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	705a      	strb	r2, [r3, #1]
 80023d6:	e00f      	b.n	80023f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	f003 020f 	and.w	r2, r3, #15
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	3304      	adds	r3, #4
 80023f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_PCD_EP_Close+0x6e>
 800240e:	2302      	movs	r3, #2
 8002410:	e00e      	b.n	8002430 <HAL_PCD_EP_Close+0x8c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68f9      	ldr	r1, [r7, #12]
 8002420:	4618      	mov	r0, r3
 8002422:	f002 f991 	bl	8004748 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	460b      	mov	r3, r1
 8002446:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002448:	7afb      	ldrb	r3, [r7, #11]
 800244a:	f003 020f 	and.w	r2, r3, #15
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4413      	add	r3, r2
 800245e:	3304      	adds	r3, #4
 8002460:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2200      	movs	r2, #0
 8002478:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800247a:	7afb      	ldrb	r3, [r7, #11]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	b2da      	uxtb	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d102      	bne.n	8002494 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002494:	7afb      	ldrb	r3, [r7, #11]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	6979      	ldr	r1, [r7, #20]
 80024ac:	f002 fc6c 	bl	8004d88 <USB_EP0StartXfer>
 80024b0:	e008      	b.n	80024c4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	6979      	ldr	r1, [r7, #20]
 80024c0:	f002 fa1e 	bl	8004900 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	f003 020f 	and.w	r2, r3, #15
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80024f0:	681b      	ldr	r3, [r3, #0]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	460b      	mov	r3, r1
 800250c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800250e:	7afb      	ldrb	r3, [r7, #11]
 8002510:	f003 020f 	and.w	r2, r3, #15
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	3338      	adds	r3, #56	; 0x38
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4413      	add	r3, r2
 8002522:	3304      	adds	r3, #4
 8002524:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2201      	movs	r2, #1
 800253c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800253e:	7afb      	ldrb	r3, [r7, #11]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	b2da      	uxtb	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002558:	7afb      	ldrb	r3, [r7, #11]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	6979      	ldr	r1, [r7, #20]
 8002570:	f002 fc0a 	bl	8004d88 <USB_EP0StartXfer>
 8002574:	e008      	b.n	8002588 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	6979      	ldr	r1, [r7, #20]
 8002584:	f002 f9bc 	bl	8004900 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	f003 020f 	and.w	r2, r3, #15
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d901      	bls.n	80025b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e050      	b.n	8002652 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	da0f      	bge.n	80025d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	f003 020f 	and.w	r2, r3, #15
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	3338      	adds	r3, #56	; 0x38
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	3304      	adds	r3, #4
 80025ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	705a      	strb	r2, [r3, #1]
 80025d6:	e00d      	b.n	80025f4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	3304      	adds	r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_PCD_EP_SetStall+0x82>
 8002610:	2302      	movs	r3, #2
 8002612:	e01e      	b.n	8002652 <HAL_PCD_EP_SetStall+0xc0>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68f9      	ldr	r1, [r7, #12]
 8002622:	4618      	mov	r0, r3
 8002624:	f002 fd61 	bl	80050ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10a      	bne.n	8002648 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	b2d9      	uxtb	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002642:	461a      	mov	r2, r3
 8002644:	f002 ff52 	bl	80054ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	f003 020f 	and.w	r2, r3, #15
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	429a      	cmp	r2, r3
 8002672:	d901      	bls.n	8002678 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e042      	b.n	80026fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800267c:	2b00      	cmp	r3, #0
 800267e:	da0f      	bge.n	80026a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 020f 	and.w	r2, r3, #15
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	3304      	adds	r3, #4
 8002696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	705a      	strb	r2, [r3, #1]
 800269e:	e00f      	b.n	80026c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	f003 020f 	and.w	r2, r3, #15
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	3304      	adds	r3, #4
 80026b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_PCD_EP_ClrStall+0x86>
 80026dc:	2302      	movs	r3, #2
 80026de:	e00e      	b.n	80026fe <HAL_PCD_EP_ClrStall+0xa4>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68f9      	ldr	r1, [r7, #12]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fd69 	bl	80051c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b08a      	sub	sp, #40	; 0x28
 800270a:	af02      	add	r7, sp, #8
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	3338      	adds	r3, #56	; 0x38
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	3304      	adds	r3, #4
 800272c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	429a      	cmp	r2, r3
 8002738:	d901      	bls.n	800273e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06c      	b.n	8002818 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	429a      	cmp	r2, r3
 8002752:	d902      	bls.n	800275a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3303      	adds	r3, #3
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002762:	e02b      	b.n	80027bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	429a      	cmp	r2, r3
 8002778:	d902      	bls.n	8002780 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	3303      	adds	r3, #3
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68d9      	ldr	r1, [r3, #12]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002798:	b2db      	uxtb	r3, r3
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	4603      	mov	r3, r0
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f002 fc45 	bl	800502e <USB_WritePacket>

    ep->xfer_buff  += len;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	441a      	add	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	441a      	add	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d809      	bhi.n	80027e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027da:	429a      	cmp	r2, r3
 80027dc:	d203      	bcs.n	80027e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1be      	bne.n	8002764 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d811      	bhi.n	8002816 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	2201      	movs	r2, #1
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	43db      	mvns	r3, r3
 800280c:	6939      	ldr	r1, [r7, #16]
 800280e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002812:	4013      	ands	r3, r2
 8002814:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	333c      	adds	r3, #60	; 0x3c
 8002838:	3304      	adds	r3, #4
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b01      	cmp	r3, #1
 8002854:	f040 80a0 	bne.w	8002998 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d015      	beq.n	800288e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4a72      	ldr	r2, [pc, #456]	; (8002a30 <PCD_EP_OutXfrComplete_int+0x210>)
 8002866:	4293      	cmp	r3, r2
 8002868:	f240 80dd 	bls.w	8002a26 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80d7 	beq.w	8002a26 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002884:	461a      	mov	r2, r3
 8002886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800288a:	6093      	str	r3, [r2, #8]
 800288c:	e0cb      	b.n	8002a26 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d009      	beq.n	80028ac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a4:	461a      	mov	r2, r3
 80028a6:	2320      	movs	r3, #32
 80028a8:	6093      	str	r3, [r2, #8]
 80028aa:	e0bc      	b.n	8002a26 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 80b7 	bne.w	8002a26 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a5d      	ldr	r2, [pc, #372]	; (8002a30 <PCD_EP_OutXfrComplete_int+0x210>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d90f      	bls.n	80028e0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d6:	461a      	mov	r2, r3
 80028d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028dc:	6093      	str	r3, [r2, #8]
 80028de:	e0a2      	b.n	8002a26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028f2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	0159      	lsls	r1, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	440b      	add	r3, r1
 80028fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002906:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4403      	add	r3, r0
 8002916:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800291a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800292e:	6819      	ldr	r1, [r3, #0]
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4403      	add	r3, r0
 800293e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4419      	add	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4403      	add	r3, r0
 8002954:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002958:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d114      	bne.n	800298a <PCD_EP_OutXfrComplete_int+0x16a>
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d108      	bne.n	800298a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002982:	461a      	mov	r2, r3
 8002984:	2101      	movs	r1, #1
 8002986:	f002 fdb1 	bl	80054ec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	4619      	mov	r1, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f004 fc5d 	bl	8007250 <HAL_PCD_DataOutStageCallback>
 8002996:	e046      	b.n	8002a26 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a26      	ldr	r2, [pc, #152]	; (8002a34 <PCD_EP_OutXfrComplete_int+0x214>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d124      	bne.n	80029ea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b6:	461a      	mov	r2, r3
 80029b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029bc:	6093      	str	r3, [r2, #8]
 80029be:	e032      	b.n	8002a26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d6:	461a      	mov	r2, r3
 80029d8:	2320      	movs	r3, #32
 80029da:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	4619      	mov	r1, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f004 fc34 	bl	8007250 <HAL_PCD_DataOutStageCallback>
 80029e8:	e01d      	b.n	8002a26 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d114      	bne.n	8002a1a <PCD_EP_OutXfrComplete_int+0x1fa>
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d108      	bne.n	8002a1a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a12:	461a      	mov	r2, r3
 8002a14:	2100      	movs	r1, #0
 8002a16:	f002 fd69 	bl	80054ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f004 fc15 	bl	8007250 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	4f54300a 	.word	0x4f54300a
 8002a34:	4f54310a 	.word	0x4f54310a

08002a38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	333c      	adds	r3, #60	; 0x3c
 8002a50:	3304      	adds	r3, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d90e      	bls.n	8002a8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d009      	beq.n	8002a8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a84:	461a      	mov	r2, r3
 8002a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f004 fbcd 	bl	800722c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d90c      	bls.n	8002ab4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d108      	bne.n	8002ab4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002aac:	461a      	mov	r2, r3
 8002aae:	2101      	movs	r1, #1
 8002ab0:	f002 fd1c 	bl	80054ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	4f54300a 	.word	0x4f54300a

08002ac4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d107      	bne.n	8002af2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ae2:	883b      	ldrh	r3, [r7, #0]
 8002ae4:	0419      	lsls	r1, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
 8002af0:	e028      	b.n	8002b44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	4413      	add	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	e00d      	b.n	8002b22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	3340      	adds	r3, #64	; 0x40
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	0c1b      	lsrs	r3, r3, #16
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	4413      	add	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d3ec      	bcc.n	8002b06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b2c:	883b      	ldrh	r3, [r7, #0]
 8002b2e:	0418      	lsls	r0, r3, #16
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6819      	ldr	r1, [r3, #0]
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	4302      	orrs	r2, r0
 8002b3c:	3340      	adds	r3, #64	; 0x40
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e25b      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d075      	beq.n	8002c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002baa:	4ba3      	ldr	r3, [pc, #652]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb6:	4ba0      	ldr	r3, [pc, #640]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d112      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc2:	4b9d      	ldr	r3, [pc, #628]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	4b99      	ldr	r3, [pc, #612]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d05b      	beq.n	8002c94 <HAL_RCC_OscConfig+0x108>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d157      	bne.n	8002c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e236      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCC_OscConfig+0x74>
 8002bf2:	4b91      	ldr	r3, [pc, #580]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a90      	ldr	r2, [pc, #576]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e01d      	b.n	8002c3c <HAL_RCC_OscConfig+0xb0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x98>
 8002c0a:	4b8b      	ldr	r3, [pc, #556]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a8a      	ldr	r2, [pc, #552]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a87      	ldr	r2, [pc, #540]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e00b      	b.n	8002c3c <HAL_RCC_OscConfig+0xb0>
 8002c24:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a83      	ldr	r2, [pc, #524]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4b81      	ldr	r3, [pc, #516]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a80      	ldr	r2, [pc, #512]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe faee 	bl	8001224 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe faea 	bl	8001224 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1fb      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0xc0>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fada 	bl	8001224 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe fad6 	bl	8001224 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1e7      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	4b6c      	ldr	r3, [pc, #432]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0xe8>
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d063      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ca2:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cae:	4b62      	ldr	r3, [pc, #392]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d11c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cba:	4b5f      	ldr	r3, [pc, #380]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d116      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc6:	4b5c      	ldr	r3, [pc, #368]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <HAL_RCC_OscConfig+0x152>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d001      	beq.n	8002cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e1bb      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cde:	4b56      	ldr	r3, [pc, #344]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4952      	ldr	r1, [pc, #328]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	e03a      	b.n	8002d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d020      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cfc:	4b4f      	ldr	r3, [pc, #316]	; (8002e3c <HAL_RCC_OscConfig+0x2b0>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7fe fa8f 	bl	8001224 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0a:	f7fe fa8b 	bl	8001224 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e19c      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1c:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4940      	ldr	r1, [pc, #256]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]
 8002d3c:	e015      	b.n	8002d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3e:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <HAL_RCC_OscConfig+0x2b0>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fa6e 	bl	8001224 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4c:	f7fe fa6a 	bl	8001224 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e17b      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d030      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d016      	beq.n	8002dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7e:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <HAL_RCC_OscConfig+0x2b4>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe fa4e 	bl	8001224 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe fa4a 	bl	8001224 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e15b      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x200>
 8002daa:	e015      	b.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <HAL_RCC_OscConfig+0x2b4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7fe fa37 	bl	8001224 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dba:	f7fe fa33 	bl	8001224 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e144      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80a0 	beq.w	8002f26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10f      	bne.n	8002e16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_OscConfig+0x2b8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d121      	bne.n	8002e66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_OscConfig+0x2b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a07      	ldr	r2, [pc, #28]	; (8002e44 <HAL_RCC_OscConfig+0x2b8>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe f9f9 	bl	8001224 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	e011      	b.n	8002e5a <HAL_RCC_OscConfig+0x2ce>
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	42470000 	.word	0x42470000
 8002e40:	42470e80 	.word	0x42470e80
 8002e44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e48:	f7fe f9ec 	bl	8001224 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0fd      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	4b81      	ldr	r3, [pc, #516]	; (8003060 <HAL_RCC_OscConfig+0x4d4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
 8002e6e:	4b7d      	ldr	r3, [pc, #500]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a7c      	ldr	r2, [pc, #496]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7a:	e01c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x32a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d10c      	bne.n	8002e9e <HAL_RCC_OscConfig+0x312>
 8002e84:	4b77      	ldr	r3, [pc, #476]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a76      	ldr	r2, [pc, #472]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	4b74      	ldr	r3, [pc, #464]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a73      	ldr	r2, [pc, #460]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	e00b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x32a>
 8002e9e:	4b71      	ldr	r3, [pc, #452]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a70      	ldr	r2, [pc, #448]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eaa:	4b6e      	ldr	r3, [pc, #440]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a6d      	ldr	r2, [pc, #436]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002eb0:	f023 0304 	bic.w	r3, r3, #4
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d015      	beq.n	8002eea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe f9b1 	bl	8001224 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fe f9ad 	bl	8001224 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0bc      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002edc:	4b61      	ldr	r3, [pc, #388]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ee      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x33a>
 8002ee8:	e014      	b.n	8002f14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7fe f99b 	bl	8001224 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7fe f997 	bl	8001224 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0a6      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f08:	4b56      	ldr	r3, [pc, #344]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ee      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d105      	bne.n	8002f26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1a:	4b52      	ldr	r3, [pc, #328]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a51      	ldr	r2, [pc, #324]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8092 	beq.w	8003054 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f30:	4b4c      	ldr	r3, [pc, #304]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d05c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d141      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f44:	4b48      	ldr	r3, [pc, #288]	; (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe f96b 	bl	8001224 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe f967 	bl	8001224 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e078      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f64:	4b3f      	ldr	r3, [pc, #252]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	019b      	lsls	r3, r3, #6
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	041b      	lsls	r3, r3, #16
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	061b      	lsls	r3, r3, #24
 8002f94:	4933      	ldr	r1, [pc, #204]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe f940 	bl	8001224 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe f93c 	bl	8001224 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e04d      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fba:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
 8002fc6:	e045      	b.n	8003054 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc8:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7fe f929 	bl	8001224 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe f925 	bl	8001224 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e036      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x44a>
 8002ff4:	e02e      	b.n	8003054 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e029      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	429a      	cmp	r2, r3
 8003014:	d11c      	bne.n	8003050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d115      	bne.n	8003050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800302a:	4013      	ands	r3, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003030:	4293      	cmp	r3, r2
 8003032:	d10d      	bne.n	8003050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40007000 	.word	0x40007000
 8003064:	40023800 	.word	0x40023800
 8003068:	42470060 	.word	0x42470060

0800306c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0cc      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003080:	4b68      	ldr	r3, [pc, #416]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d90c      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b65      	ldr	r3, [pc, #404]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b63      	ldr	r3, [pc, #396]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0b8      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c0:	4b59      	ldr	r3, [pc, #356]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d8:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a52      	ldr	r2, [pc, #328]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e4:	4b50      	ldr	r3, [pc, #320]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	494d      	ldr	r1, [pc, #308]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d044      	beq.n	800318c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d119      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e07f      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d003      	beq.n	800312a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003126:	2b03      	cmp	r3, #3
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	4b3f      	ldr	r3, [pc, #252]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e06f      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313a:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e067      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314a:	4b37      	ldr	r3, [pc, #220]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f023 0203 	bic.w	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4934      	ldr	r1, [pc, #208]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800315c:	f7fe f862 	bl	8001224 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	e00a      	b.n	800317a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003164:	f7fe f85e 	bl	8001224 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e04f      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 020c 	and.w	r2, r3, #12
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	429a      	cmp	r2, r3
 800318a:	d1eb      	bne.n	8003164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d20c      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e032      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4916      	ldr	r1, [pc, #88]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	490e      	ldr	r1, [pc, #56]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031f2:	f000 f821 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031f6:	4601      	mov	r1, r0
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	5cd3      	ldrb	r3, [r2, r3]
 8003206:	fa21 f303 	lsr.w	r3, r1, r3
 800320a:	4a09      	ldr	r2, [pc, #36]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd ffc2 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023c00 	.word	0x40023c00
 8003228:	40023800 	.word	0x40023800
 800322c:	0800808c 	.word	0x0800808c
 8003230:	20000000 	.word	0x20000000
 8003234:	20000004 	.word	0x20000004

08003238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	2300      	movs	r3, #0
 8003248:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800324e:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b04      	cmp	r3, #4
 8003258:	d007      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x32>
 800325a:	2b08      	cmp	r3, #8
 800325c:	d008      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x38>
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 80b4 	bne.w	80033cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b5e      	ldr	r3, [pc, #376]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003266:	60bb      	str	r3, [r7, #8]
       break;
 8003268:	e0b3      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800326a:	4b5e      	ldr	r3, [pc, #376]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800326c:	60bb      	str	r3, [r7, #8]
      break;
 800326e:	e0b0      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003270:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003278:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d04a      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003286:	4b55      	ldr	r3, [pc, #340]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	f04f 0400 	mov.w	r4, #0
 8003290:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	ea03 0501 	and.w	r5, r3, r1
 800329c:	ea04 0602 	and.w	r6, r4, r2
 80032a0:	4629      	mov	r1, r5
 80032a2:	4632      	mov	r2, r6
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	0154      	lsls	r4, r2, #5
 80032ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032b2:	014b      	lsls	r3, r1, #5
 80032b4:	4619      	mov	r1, r3
 80032b6:	4622      	mov	r2, r4
 80032b8:	1b49      	subs	r1, r1, r5
 80032ba:	eb62 0206 	sbc.w	r2, r2, r6
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	f04f 0400 	mov.w	r4, #0
 80032c6:	0194      	lsls	r4, r2, #6
 80032c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032cc:	018b      	lsls	r3, r1, #6
 80032ce:	1a5b      	subs	r3, r3, r1
 80032d0:	eb64 0402 	sbc.w	r4, r4, r2
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	00e2      	lsls	r2, r4, #3
 80032de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032e2:	00d9      	lsls	r1, r3, #3
 80032e4:	460b      	mov	r3, r1
 80032e6:	4614      	mov	r4, r2
 80032e8:	195b      	adds	r3, r3, r5
 80032ea:	eb44 0406 	adc.w	r4, r4, r6
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	0262      	lsls	r2, r4, #9
 80032f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032fc:	0259      	lsls	r1, r3, #9
 80032fe:	460b      	mov	r3, r1
 8003300:	4614      	mov	r4, r2
 8003302:	4618      	mov	r0, r3
 8003304:	4621      	mov	r1, r4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f04f 0400 	mov.w	r4, #0
 800330c:	461a      	mov	r2, r3
 800330e:	4623      	mov	r3, r4
 8003310:	f7fd f98a 	bl	8000628 <__aeabi_uldivmod>
 8003314:	4603      	mov	r3, r0
 8003316:	460c      	mov	r4, r1
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e049      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331c:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	f04f 0400 	mov.w	r4, #0
 8003326:	f240 11ff 	movw	r1, #511	; 0x1ff
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	ea03 0501 	and.w	r5, r3, r1
 8003332:	ea04 0602 	and.w	r6, r4, r2
 8003336:	4629      	mov	r1, r5
 8003338:	4632      	mov	r2, r6
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	f04f 0400 	mov.w	r4, #0
 8003342:	0154      	lsls	r4, r2, #5
 8003344:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003348:	014b      	lsls	r3, r1, #5
 800334a:	4619      	mov	r1, r3
 800334c:	4622      	mov	r2, r4
 800334e:	1b49      	subs	r1, r1, r5
 8003350:	eb62 0206 	sbc.w	r2, r2, r6
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	0194      	lsls	r4, r2, #6
 800335e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003362:	018b      	lsls	r3, r1, #6
 8003364:	1a5b      	subs	r3, r3, r1
 8003366:	eb64 0402 	sbc.w	r4, r4, r2
 800336a:	f04f 0100 	mov.w	r1, #0
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	00e2      	lsls	r2, r4, #3
 8003374:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003378:	00d9      	lsls	r1, r3, #3
 800337a:	460b      	mov	r3, r1
 800337c:	4614      	mov	r4, r2
 800337e:	195b      	adds	r3, r3, r5
 8003380:	eb44 0406 	adc.w	r4, r4, r6
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	02a2      	lsls	r2, r4, #10
 800338e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003392:	0299      	lsls	r1, r3, #10
 8003394:	460b      	mov	r3, r1
 8003396:	4614      	mov	r4, r2
 8003398:	4618      	mov	r0, r3
 800339a:	4621      	mov	r1, r4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f04f 0400 	mov.w	r4, #0
 80033a2:	461a      	mov	r2, r3
 80033a4:	4623      	mov	r3, r4
 80033a6:	f7fd f93f 	bl	8000628 <__aeabi_uldivmod>
 80033aa:	4603      	mov	r3, r0
 80033ac:	460c      	mov	r4, r1
 80033ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	3301      	adds	r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	60bb      	str	r3, [r7, #8]
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033ce:	60bb      	str	r3, [r7, #8]
      break;
 80033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d2:	68bb      	ldr	r3, [r7, #8]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033dc:	40023800 	.word	0x40023800
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000000 	.word	0x20000000

08003400 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003424:	2b00      	cmp	r3, #0
 8003426:	d035      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003428:	4b62      	ldr	r3, [pc, #392]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800342e:	f7fd fef9 	bl	8001224 <HAL_GetTick>
 8003432:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003436:	f7fd fef5 	bl	8001224 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e0b0      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003448:	4b5b      	ldr	r3, [pc, #364]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f0      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	019a      	lsls	r2, r3, #6
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	071b      	lsls	r3, r3, #28
 8003460:	4955      	ldr	r1, [pc, #340]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003468:	4b52      	ldr	r3, [pc, #328]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800346e:	f7fd fed9 	bl	8001224 <HAL_GetTick>
 8003472:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003476:	f7fd fed5 	bl	8001224 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e090      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003488:	4b4b      	ldr	r3, [pc, #300]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8083 	beq.w	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4a43      	ldr	r2, [pc, #268]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b0:	6413      	str	r3, [r2, #64]	; 0x40
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034be:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a3e      	ldr	r2, [pc, #248]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ca:	f7fd feab 	bl	8001224 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034d2:	f7fd fea7 	bl	8001224 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e062      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034e4:	4b35      	ldr	r3, [pc, #212]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034f0:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d02f      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	429a      	cmp	r2, r3
 800350c:	d028      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003516:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003518:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800351e:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003524:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d114      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003536:	f7fd fe75 	bl	8001224 <HAL_GetTick>
 800353a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	e00a      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fd fe71 	bl	8001224 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	; 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e02a      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ee      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356c:	d10d      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800356e:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800357e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003582:	490d      	ldr	r1, [pc, #52]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003584:	4313      	orrs	r3, r2
 8003586:	608b      	str	r3, [r1, #8]
 8003588:	e005      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003590:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003594:	6093      	str	r3, [r2, #8]
 8003596:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003598:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	4905      	ldr	r1, [pc, #20]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	42470068 	.word	0x42470068
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40007000 	.word	0x40007000
 80035c0:	42470e40 	.word	0x42470e40

080035c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0a4      	b.n	8003720 <HAL_RTC_Init+0x15c>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7f5b      	ldrb	r3, [r3, #29]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d126      	bne.n	800362e <HAL_RTC_Init+0x6a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4f      	ldr	r2, [pc, #316]	; (8003728 <HAL_RTC_Init+0x164>)
 80035ea:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a4f      	ldr	r2, [pc, #316]	; (800372c <HAL_RTC_Init+0x168>)
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4e      	ldr	r2, [pc, #312]	; (8003730 <HAL_RTC_Init+0x16c>)
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a4e      	ldr	r2, [pc, #312]	; (8003734 <HAL_RTC_Init+0x170>)
 80035fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4d      	ldr	r2, [pc, #308]	; (8003738 <HAL_RTC_Init+0x174>)
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a4d      	ldr	r2, [pc, #308]	; (800373c <HAL_RTC_Init+0x178>)
 8003608:	635a      	str	r2, [r3, #52]	; 0x34

    if(hrtc->MspInitCallback == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <HAL_RTC_Init+0x54>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4a      	ldr	r2, [pc, #296]	; (8003740 <HAL_RTC_Init+0x17c>)
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4798      	blx	r3

    if(hrtc->MspDeInitCallback == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <HAL_RTC_Init+0x6a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a46      	ldr	r2, [pc, #280]	; (8003744 <HAL_RTC_Init+0x180>)
 800362c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	22ca      	movs	r2, #202	; 0xca
 800363a:	625a      	str	r2, [r3, #36]	; 0x24
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2253      	movs	r2, #83	; 0x53
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fbf1 	bl	8003e2c <RTC_EnterInitMode>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RTC_Init+0x9e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	22ff      	movs	r2, #255	; 0xff
 8003656:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2204      	movs	r2, #4
 800365c:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e05e      	b.n	8003720 <HAL_RTC_Init+0x15c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003674:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6899      	ldr	r1, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68d2      	ldr	r2, [r2, #12]
 800369c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6919      	ldr	r1, [r3, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	041a      	lsls	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10e      	bne.n	80036ee <HAL_RTC_Init+0x12a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fb83 	bl	8003ddc <HAL_RTC_WaitForSynchro>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RTC_Init+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	22ff      	movs	r2, #255	; 0xff
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2204      	movs	r2, #4
 80036e8:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e018      	b.n	8003720 <HAL_RTC_Init+0x15c>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699a      	ldr	r2, [r3, #24]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	22ff      	movs	r2, #255	; 0xff
 8003716:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800371e:	2300      	movs	r3, #0
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	08000ae9 	.word	0x08000ae9
 800372c:	08003fb1 	.word	0x08003fb1
 8003730:	08003efd 	.word	0x08003efd
 8003734:	08003f39 	.word	0x08003f39
 8003738:	08003f11 	.word	0x08003f11
 800373c:	08003f25 	.word	0x08003f25
 8003740:	08000e6d 	.word	0x08000e6d
 8003744:	08000e99 	.word	0x08000e99

08003748 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	7f1b      	ldrb	r3, [r3, #28]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_RTC_SetTime+0x1c>
 8003760:	2302      	movs	r3, #2
 8003762:	e0aa      	b.n	80038ba <HAL_RTC_SetTime+0x172>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2202      	movs	r2, #2
 800376e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d126      	bne.n	80037c4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d102      	bne.n	800378a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2200      	movs	r2, #0
 8003788:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fb78 	bl	8003e84 <RTC_ByteToBcd2>
 8003794:	4603      	mov	r3, r0
 8003796:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	785b      	ldrb	r3, [r3, #1]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fb71 	bl	8003e84 <RTC_ByteToBcd2>
 80037a2:	4603      	mov	r3, r0
 80037a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80037a6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	789b      	ldrb	r3, [r3, #2]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fb69 	bl	8003e84 <RTC_ByteToBcd2>
 80037b2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80037b4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	78db      	ldrb	r3, [r3, #3]
 80037bc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	e018      	b.n	80037f6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2200      	movs	r2, #0
 80037d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037e4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80037ea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	78db      	ldrb	r3, [r3, #3]
 80037f0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	22ca      	movs	r2, #202	; 0xca
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2253      	movs	r2, #83	; 0x53
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fb10 	bl	8003e2c <RTC_EnterInitMode>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2204      	movs	r2, #4
 800381e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e047      	b.n	80038ba <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003834:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003838:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003848:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6899      	ldr	r1, [r3, #8]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	431a      	orrs	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003870:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d111      	bne.n	80038a4 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 faab 	bl	8003ddc <HAL_RTC_WaitForSynchro>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00b      	beq.n	80038a4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	22ff      	movs	r2, #255	; 0xff
 8003892:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2204      	movs	r2, #4
 8003898:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e00a      	b.n	80038ba <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	22ff      	movs	r2, #255	; 0xff
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80038b8:	2300      	movs	r3, #0
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd90      	pop	{r4, r7, pc}

080038c2 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b086      	sub	sp, #24
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80038f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80038f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003904:	b2da      	uxtb	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003914:	b2da      	uxtb	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	0c1b      	lsrs	r3, r3, #16
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d11a      	bne.n	8003974 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fabc 	bl	8003ec0 <RTC_Bcd2ToByte>
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	785b      	ldrb	r3, [r3, #1]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fab3 	bl	8003ec0 <RTC_Bcd2ToByte>
 800395a:	4603      	mov	r3, r0
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	789b      	ldrb	r3, [r3, #2]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 faaa 	bl	8003ec0 <RTC_Bcd2ToByte>
 800396c:	4603      	mov	r3, r0
 800396e:	461a      	mov	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800397e:	b590      	push	{r4, r7, lr}
 8003980:	b087      	sub	sp, #28
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	7f1b      	ldrb	r3, [r3, #28]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_RTC_SetDate+0x1c>
 8003996:	2302      	movs	r3, #2
 8003998:	e094      	b.n	8003ac4 <HAL_RTC_SetDate+0x146>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2202      	movs	r2, #2
 80039a4:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10e      	bne.n	80039ca <HAL_RTC_SetDate+0x4c>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	785b      	ldrb	r3, [r3, #1]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	785b      	ldrb	r3, [r3, #1]
 80039bc:	f023 0310 	bic.w	r3, r3, #16
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	330a      	adds	r3, #10
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d11c      	bne.n	8003a0a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	78db      	ldrb	r3, [r3, #3]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fa55 	bl	8003e84 <RTC_ByteToBcd2>
 80039da:	4603      	mov	r3, r0
 80039dc:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	785b      	ldrb	r3, [r3, #1]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fa4e 	bl	8003e84 <RTC_ByteToBcd2>
 80039e8:	4603      	mov	r3, r0
 80039ea:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80039ec:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	789b      	ldrb	r3, [r3, #2]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fa46 	bl	8003e84 <RTC_ByteToBcd2>
 80039f8:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80039fa:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e00e      	b.n	8003a28 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	78db      	ldrb	r3, [r3, #3]
 8003a0e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	785b      	ldrb	r3, [r3, #1]
 8003a14:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003a16:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003a1c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	22ca      	movs	r2, #202	; 0xca
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2253      	movs	r2, #83	; 0x53
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f9f7 	bl	8003e2c <RTC_EnterInitMode>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00b      	beq.n	8003a5c <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	22ff      	movs	r2, #255	; 0xff
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2204      	movs	r2, #4
 8003a50:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e033      	b.n	8003ac4 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a66:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a6a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a7a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d111      	bne.n	8003aae <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f9a6 	bl	8003ddc <HAL_RTC_WaitForSynchro>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	22ff      	movs	r2, #255	; 0xff
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e00a      	b.n	8003ac4 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	22ff      	movs	r2, #255	; 0xff
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd90      	pop	{r4, r7, pc}

08003acc <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ae6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003aea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	0c1b      	lsrs	r3, r3, #16
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	0b5b      	lsrs	r3, r3, #13
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d11a      	bne.n	8003b60 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	78db      	ldrb	r3, [r3, #3]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f9c6 	bl	8003ec0 <RTC_Bcd2ToByte>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	785b      	ldrb	r3, [r3, #1]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 f9bd 	bl	8003ec0 <RTC_Bcd2ToByte>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	789b      	ldrb	r3, [r3, #2]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f9b4 	bl	8003ec0 <RTC_Bcd2ToByte>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b089      	sub	sp, #36	; 0x24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8003b80:	4b93      	ldr	r3, [pc, #588]	; (8003dd0 <HAL_RTC_SetAlarm_IT+0x264>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a93      	ldr	r2, [pc, #588]	; (8003dd4 <HAL_RTC_SetAlarm_IT+0x268>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	0adb      	lsrs	r3, r3, #11
 8003b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b90:	fb02 f303 	mul.w	r3, r2, r3
 8003b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	7f1b      	ldrb	r3, [r3, #28]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RTC_SetAlarm_IT+0x36>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e111      	b.n	8003dc6 <HAL_RTC_SetAlarm_IT+0x25a>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2202      	movs	r2, #2
 8003bac:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d137      	bne.n	8003c24 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 f959 	bl	8003e84 <RTC_ByteToBcd2>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	785b      	ldrb	r3, [r3, #1]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f952 	bl	8003e84 <RTC_ByteToBcd2>
 8003be0:	4603      	mov	r3, r0
 8003be2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003be4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	789b      	ldrb	r3, [r3, #2]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f94a 	bl	8003e84 <RTC_ByteToBcd2>
 8003bf0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003bf2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	78db      	ldrb	r3, [r3, #3]
 8003bfa:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003bfc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f93c 	bl	8003e84 <RTC_ByteToBcd2>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003c10:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003c18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	e023      	b.n	8003c6c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2200      	movs	r2, #0
 8003c36:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003c44:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003c4a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	78db      	ldrb	r3, [r3, #3]
 8003c50:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003c52:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c5a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003c5c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003c62:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	22ca      	movs	r2, #202	; 0xca
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2253      	movs	r2, #83	; 0x53
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c90:	d141      	bne.n	8003d16 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ca0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003cb2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	1e5a      	subs	r2, r3, #1
 8003cb8:	617a      	str	r2, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10b      	bne.n	8003cd6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	22ff      	movs	r2, #255	; 0xff
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e077      	b.n	8003dc6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0e7      	beq.n	8003cb4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d02:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	e040      	b.n	8003d98 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d24:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003d36:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	1e5a      	subs	r2, r3, #1
 8003d3c:	617a      	str	r2, [r7, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	22ff      	movs	r2, #255	; 0xff
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2203      	movs	r2, #3
 8003d4e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e035      	b.n	8003dc6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0e7      	beq.n	8003d38 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d86:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d96:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da2:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a0b      	ldr	r2, [pc, #44]	; (8003dd8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dae:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	22ff      	movs	r2, #255	; 0xff
 8003db6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	10624dd3 	.word	0x10624dd3
 8003dd8:	40013c00 	.word	0x40013c00

08003ddc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003df6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003df8:	f7fd fa14 	bl	8001224 <HAL_GetTick>
 8003dfc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003dfe:	e009      	b.n	8003e14 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003e00:	f7fd fa10 	bl	8001224 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e0e:	d901      	bls.n	8003e14 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e007      	b.n	8003e24 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0ee      	beq.n	8003e00 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d119      	bne.n	8003e7a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e50:	f7fd f9e8 	bl	8001224 <HAL_GetTick>
 8003e54:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003e56:	e009      	b.n	8003e6c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003e58:	f7fd f9e4 	bl	8001224 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e66:	d901      	bls.n	8003e6c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e007      	b.n	8003e7c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ee      	beq.n	8003e58 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003e92:	e005      	b.n	8003ea0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3301      	adds	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	3b0a      	subs	r3, #10
 8003e9e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	2b09      	cmp	r3, #9
 8003ea4:	d8f6      	bhi.n	8003e94 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	b2db      	uxtb	r3, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	b2db      	uxtb	r3, r3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_TimeStampEventCallback could be implemented in the user file
  */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper1EventCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_Tamper2EventCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3350      	adds	r3, #80	; 0x50
 8003f62:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3350      	adds	r3, #80	; 0x50
 8003f94:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	f107 001c 	add.w	r0, r7, #28
 8003fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d122      	bne.n	8004022 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004006:	2b01      	cmp	r3, #1
 8004008:	d105      	bne.n	8004016 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f001 fac6 	bl	80055a8 <USB_CoreReset>
 800401c:	4603      	mov	r3, r0
 800401e:	73fb      	strb	r3, [r7, #15]
 8004020:	e01a      	b.n	8004058 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f001 faba 	bl	80055a8 <USB_CoreReset>
 8004034:	4603      	mov	r3, r0
 8004036:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
 800404a:	e005      	b.n	8004058 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	2b01      	cmp	r3, #1
 800405c:	d10b      	bne.n	8004076 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f043 0206 	orr.w	r2, r3, #6
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004082:	b004      	add	sp, #16
 8004084:	4770      	bx	lr
	...

08004088 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d165      	bne.n	8004168 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4a41      	ldr	r2, [pc, #260]	; (80041a4 <USB_SetTurnaroundTime+0x11c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d906      	bls.n	80040b2 <USB_SetTurnaroundTime+0x2a>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a40      	ldr	r2, [pc, #256]	; (80041a8 <USB_SetTurnaroundTime+0x120>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d802      	bhi.n	80040b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040ac:	230f      	movs	r3, #15
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	e062      	b.n	8004178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4a3c      	ldr	r2, [pc, #240]	; (80041a8 <USB_SetTurnaroundTime+0x120>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d906      	bls.n	80040c8 <USB_SetTurnaroundTime+0x40>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <USB_SetTurnaroundTime+0x124>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d802      	bhi.n	80040c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80040c2:	230e      	movs	r3, #14
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	e057      	b.n	8004178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4a38      	ldr	r2, [pc, #224]	; (80041ac <USB_SetTurnaroundTime+0x124>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d906      	bls.n	80040de <USB_SetTurnaroundTime+0x56>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4a37      	ldr	r2, [pc, #220]	; (80041b0 <USB_SetTurnaroundTime+0x128>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d802      	bhi.n	80040de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80040d8:	230d      	movs	r3, #13
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e04c      	b.n	8004178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4a33      	ldr	r2, [pc, #204]	; (80041b0 <USB_SetTurnaroundTime+0x128>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d906      	bls.n	80040f4 <USB_SetTurnaroundTime+0x6c>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4a32      	ldr	r2, [pc, #200]	; (80041b4 <USB_SetTurnaroundTime+0x12c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d802      	bhi.n	80040f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80040ee:	230c      	movs	r3, #12
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e041      	b.n	8004178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4a2f      	ldr	r2, [pc, #188]	; (80041b4 <USB_SetTurnaroundTime+0x12c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d906      	bls.n	800410a <USB_SetTurnaroundTime+0x82>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4a2e      	ldr	r2, [pc, #184]	; (80041b8 <USB_SetTurnaroundTime+0x130>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d802      	bhi.n	800410a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004104:	230b      	movs	r3, #11
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	e036      	b.n	8004178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4a2a      	ldr	r2, [pc, #168]	; (80041b8 <USB_SetTurnaroundTime+0x130>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d906      	bls.n	8004120 <USB_SetTurnaroundTime+0x98>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4a29      	ldr	r2, [pc, #164]	; (80041bc <USB_SetTurnaroundTime+0x134>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d802      	bhi.n	8004120 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800411a:	230a      	movs	r3, #10
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e02b      	b.n	8004178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4a26      	ldr	r2, [pc, #152]	; (80041bc <USB_SetTurnaroundTime+0x134>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d906      	bls.n	8004136 <USB_SetTurnaroundTime+0xae>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4a25      	ldr	r2, [pc, #148]	; (80041c0 <USB_SetTurnaroundTime+0x138>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d802      	bhi.n	8004136 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004130:	2309      	movs	r3, #9
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e020      	b.n	8004178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <USB_SetTurnaroundTime+0x138>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d906      	bls.n	800414c <USB_SetTurnaroundTime+0xc4>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <USB_SetTurnaroundTime+0x13c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d802      	bhi.n	800414c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004146:	2308      	movs	r3, #8
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e015      	b.n	8004178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <USB_SetTurnaroundTime+0x13c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d906      	bls.n	8004162 <USB_SetTurnaroundTime+0xda>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <USB_SetTurnaroundTime+0x140>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d802      	bhi.n	8004162 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800415c:	2307      	movs	r3, #7
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	e00a      	b.n	8004178 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004162:	2306      	movs	r3, #6
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e007      	b.n	8004178 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d102      	bne.n	8004174 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800416e:	2309      	movs	r3, #9
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	e001      	b.n	8004178 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004174:	2309      	movs	r3, #9
 8004176:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	029b      	lsls	r3, r3, #10
 800418c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004190:	431a      	orrs	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	00d8acbf 	.word	0x00d8acbf
 80041a8:	00e4e1bf 	.word	0x00e4e1bf
 80041ac:	00f423ff 	.word	0x00f423ff
 80041b0:	0106737f 	.word	0x0106737f
 80041b4:	011a499f 	.word	0x011a499f
 80041b8:	01312cff 	.word	0x01312cff
 80041bc:	014ca43f 	.word	0x014ca43f
 80041c0:	016e35ff 	.word	0x016e35ff
 80041c4:	01a6ab1f 	.word	0x01a6ab1f
 80041c8:	01e847ff 	.word	0x01e847ff

080041cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f043 0201 	orr.w	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f023 0201 	bic.w	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d106      	bne.n	800423c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	e00b      	b.n	8004254 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	e001      	b.n	8004254 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e003      	b.n	800425c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004254:	2032      	movs	r0, #50	; 0x32
 8004256:	f7fc fff1 	bl	800123c <HAL_Delay>

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004264:	b084      	sub	sp, #16
 8004266:	b580      	push	{r7, lr}
 8004268:	b086      	sub	sp, #24
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	e009      	b.n	8004298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	3340      	adds	r3, #64	; 0x40
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	2200      	movs	r2, #0
 8004290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	3301      	adds	r3, #1
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b0e      	cmp	r3, #14
 800429c:	d9f2      	bls.n	8004284 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800429e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d11c      	bne.n	80042de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b2:	f043 0302 	orr.w	r3, r3, #2
 80042b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	639a      	str	r2, [r3, #56]	; 0x38
 80042dc:	e00b      	b.n	80042f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042fc:	461a      	mov	r2, r3
 80042fe:	2300      	movs	r3, #0
 8004300:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004308:	4619      	mov	r1, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004310:	461a      	mov	r2, r3
 8004312:	680b      	ldr	r3, [r1, #0]
 8004314:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004318:	2b01      	cmp	r3, #1
 800431a:	d10c      	bne.n	8004336 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431e:	2b00      	cmp	r3, #0
 8004320:	d104      	bne.n	800432c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004322:	2100      	movs	r1, #0
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f949 	bl	80045bc <USB_SetDevSpeed>
 800432a:	e008      	b.n	800433e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800432c:	2101      	movs	r1, #1
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f944 	bl	80045bc <USB_SetDevSpeed>
 8004334:	e003      	b.n	800433e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004336:	2103      	movs	r1, #3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f93f 	bl	80045bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800433e:	2110      	movs	r1, #16
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f8f3 	bl	800452c <USB_FlushTxFifo>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f911 	bl	8004578 <USB_FlushRxFifo>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004366:	461a      	mov	r2, r3
 8004368:	2300      	movs	r3, #0
 800436a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	461a      	mov	r2, r3
 8004374:	2300      	movs	r3, #0
 8004376:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437e:	461a      	mov	r2, r3
 8004380:	2300      	movs	r3, #0
 8004382:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	e043      	b.n	8004412 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800439c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043a0:	d118      	bne.n	80043d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b4:	461a      	mov	r2, r3
 80043b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	e013      	b.n	80043e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ca:	461a      	mov	r2, r3
 80043cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e008      	b.n	80043e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e0:	461a      	mov	r2, r3
 80043e2:	2300      	movs	r3, #0
 80043e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f2:	461a      	mov	r2, r3
 80043f4:	2300      	movs	r3, #0
 80043f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	461a      	mov	r2, r3
 8004406:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800440a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	3301      	adds	r3, #1
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	429a      	cmp	r2, r3
 8004418:	d3b7      	bcc.n	800438a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800441a:	2300      	movs	r3, #0
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	e043      	b.n	80044a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004436:	d118      	bne.n	800446a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	461a      	mov	r2, r3
 800444c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e013      	b.n	800447c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	461a      	mov	r2, r3
 8004462:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	e008      	b.n	800447c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004476:	461a      	mov	r2, r3
 8004478:	2300      	movs	r3, #0
 800447a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	461a      	mov	r2, r3
 800448a:	2300      	movs	r3, #0
 800448c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449a:	461a      	mov	r2, r3
 800449c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	3301      	adds	r3, #1
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d3b7      	bcc.n	8004420 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80044d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f043 0210 	orr.w	r2, r3, #16
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <USB_DevInit+0x2c4>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f043 0208 	orr.w	r2, r3, #8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d107      	bne.n	8004518 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004510:	f043 0304 	orr.w	r3, r3, #4
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004518:	7dfb      	ldrb	r3, [r7, #23]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004524:	b004      	add	sp, #16
 8004526:	4770      	bx	lr
 8004528:	803c3800 	.word	0x803c3800

0800452c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	019b      	lsls	r3, r3, #6
 800453e:	f043 0220 	orr.w	r2, r3, #32
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3301      	adds	r3, #1
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a09      	ldr	r2, [pc, #36]	; (8004574 <USB_FlushTxFifo+0x48>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d901      	bls.n	8004558 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e006      	b.n	8004566 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b20      	cmp	r3, #32
 8004562:	d0f0      	beq.n	8004546 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	00030d40 	.word	0x00030d40

08004578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2210      	movs	r2, #16
 8004588:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3301      	adds	r3, #1
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <USB_FlushRxFifo+0x40>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e006      	b.n	80045aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d0f0      	beq.n	800458a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	00030d40 	.word	0x00030d40

080045bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	68f9      	ldr	r1, [r7, #12]
 80045d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045dc:	4313      	orrs	r3, r2
 80045de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b087      	sub	sp, #28
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0306 	and.w	r3, r3, #6
 8004606:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800460e:	2300      	movs	r3, #0
 8004610:	75fb      	strb	r3, [r7, #23]
 8004612:	e00a      	b.n	800462a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d002      	beq.n	8004620 <USB_GetDevSpeed+0x32>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b06      	cmp	r3, #6
 800461e:	d102      	bne.n	8004626 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004620:	2302      	movs	r3, #2
 8004622:	75fb      	strb	r3, [r7, #23]
 8004624:	e001      	b.n	800462a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004626:	230f      	movs	r3, #15
 8004628:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800462a:	7dfb      	ldrb	r3, [r7, #23]
}
 800462c:	4618      	mov	r0, r3
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	785b      	ldrb	r3, [r3, #1]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d13a      	bne.n	80046ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	2101      	movs	r1, #1
 8004666:	fa01 f303 	lsl.w	r3, r1, r3
 800466a:	b29b      	uxth	r3, r3
 800466c:	68f9      	ldr	r1, [r7, #12]
 800466e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004672:	4313      	orrs	r3, r2
 8004674:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d155      	bne.n	8004738 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	78db      	ldrb	r3, [r3, #3]
 80046a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	059b      	lsls	r3, r3, #22
 80046ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046b0:	4313      	orrs	r3, r2
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	0151      	lsls	r1, r2, #5
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	440a      	add	r2, r1
 80046ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e036      	b.n	8004738 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	2101      	movs	r1, #1
 80046dc:	fa01 f303 	lsl.w	r3, r1, r3
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11a      	bne.n	8004738 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	78db      	ldrb	r3, [r3, #3]
 800471c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800471e:	430b      	orrs	r3, r1
 8004720:	4313      	orrs	r3, r2
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800472e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004736:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	785b      	ldrb	r3, [r3, #1]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d161      	bne.n	8004828 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800477a:	d11f      	bne.n	80047bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	440a      	add	r2, r1
 8004792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800479a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	2101      	movs	r1, #1
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047dc:	4013      	ands	r3, r2
 80047de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	2101      	movs	r1, #1
 80047f2:	fa01 f303 	lsl.w	r3, r1, r3
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	68f9      	ldr	r1, [r7, #12]
 80047fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004800:	4013      	ands	r3, r2
 8004802:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	0159      	lsls	r1, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	440b      	add	r3, r1
 800481a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481e:	4619      	mov	r1, r3
 8004820:	4b35      	ldr	r3, [pc, #212]	; (80048f8 <USB_DeactivateEndpoint+0x1b0>)
 8004822:	4013      	ands	r3, r2
 8004824:	600b      	str	r3, [r1, #0]
 8004826:	e060      	b.n	80048ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800483a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800483e:	d11f      	bne.n	8004880 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	440a      	add	r2, r1
 8004856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800485a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800485e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	0151      	lsls	r1, r2, #5
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	440a      	add	r2, r1
 8004876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800487a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800487e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f303 	lsl.w	r3, r1, r3
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	43db      	mvns	r3, r3
 800489a:	68f9      	ldr	r1, [r7, #12]
 800489c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048a0:	4013      	ands	r3, r2
 80048a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	2101      	movs	r1, #1
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	43db      	mvns	r3, r3
 80048be:	68f9      	ldr	r1, [r7, #12]
 80048c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c4:	4013      	ands	r3, r2
 80048c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	0159      	lsls	r1, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	440b      	add	r3, r1
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	4619      	mov	r1, r3
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <USB_DeactivateEndpoint+0x1b4>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	ec337800 	.word	0xec337800
 80048fc:	eff37800 	.word	0xeff37800

08004900 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b01      	cmp	r3, #1
 800491e:	f040 815c 	bne.w	8004bda <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d132      	bne.n	8004990 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	0151      	lsls	r1, r2, #5
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	440a      	add	r2, r1
 8004940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004944:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004948:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800494c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	440a      	add	r2, r1
 8004964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800496c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	0151      	lsls	r1, r2, #5
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	440a      	add	r2, r1
 8004984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004988:	0cdb      	lsrs	r3, r3, #19
 800498a:	04db      	lsls	r3, r3, #19
 800498c:	6113      	str	r3, [r2, #16]
 800498e:	e074      	b.n	8004a7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049aa:	0cdb      	lsrs	r3, r3, #19
 80049ac:	04db      	lsls	r3, r3, #19
 80049ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6959      	ldr	r1, [r3, #20]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	440b      	add	r3, r1
 80049ec:	1e59      	subs	r1, r3, #1
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049f6:	04d9      	lsls	r1, r3, #19
 80049f8:	4b9d      	ldr	r3, [pc, #628]	; (8004c70 <USB_EPStartXfer+0x370>)
 80049fa:	400b      	ands	r3, r1
 80049fc:	69b9      	ldr	r1, [r7, #24]
 80049fe:	0148      	lsls	r0, r1, #5
 8004a00:	69f9      	ldr	r1, [r7, #28]
 8004a02:	4401      	add	r1, r0
 8004a04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a22:	69b9      	ldr	r1, [r7, #24]
 8004a24:	0148      	lsls	r0, r1, #5
 8004a26:	69f9      	ldr	r1, [r7, #28]
 8004a28:	4401      	add	r1, r0
 8004a2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	78db      	ldrb	r3, [r3, #3]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d11f      	bne.n	8004a7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	0151      	lsls	r1, r2, #5
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	440a      	add	r2, r1
 8004a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	0151      	lsls	r1, r2, #5
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	440a      	add	r2, r1
 8004a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d14b      	bne.n	8004b18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d009      	beq.n	8004a9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	461a      	mov	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	78db      	ldrb	r3, [r3, #3]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d128      	bne.n	8004af6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d110      	bne.n	8004ad6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ace:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e00f      	b.n	8004af6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	0151      	lsls	r1, r2, #5
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	440a      	add	r2, r1
 8004b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e12f      	b.n	8004d78 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	78db      	ldrb	r3, [r3, #3]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d015      	beq.n	8004b6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8117 	beq.w	8004d78 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b60:	69f9      	ldr	r1, [r7, #28]
 8004b62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b66:	4313      	orrs	r3, r2
 8004b68:	634b      	str	r3, [r1, #52]	; 0x34
 8004b6a:	e105      	b.n	8004d78 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d110      	bne.n	8004b9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e00f      	b.n	8004bbe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	68d9      	ldr	r1, [r3, #12]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	781a      	ldrb	r2, [r3, #0]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	b298      	uxth	r0, r3
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 fa2b 	bl	800502e <USB_WritePacket>
 8004bd8:	e0ce      	b.n	8004d78 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	0151      	lsls	r1, r2, #5
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	440a      	add	r2, r1
 8004bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf4:	0cdb      	lsrs	r3, r3, #19
 8004bf6:	04db      	lsls	r3, r3, #19
 8004bf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	0151      	lsls	r1, r2, #5
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	440a      	add	r2, r1
 8004c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d126      	bne.n	8004c74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3c:	69b9      	ldr	r1, [r7, #24]
 8004c3e:	0148      	lsls	r0, r1, #5
 8004c40:	69f9      	ldr	r1, [r7, #28]
 8004c42:	4401      	add	r1, r0
 8004c44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	0151      	lsls	r1, r2, #5
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	440a      	add	r2, r1
 8004c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c6a:	6113      	str	r3, [r2, #16]
 8004c6c:	e036      	b.n	8004cdc <USB_EPStartXfer+0x3dc>
 8004c6e:	bf00      	nop
 8004c70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	695a      	ldr	r2, [r3, #20]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	1e5a      	subs	r2, r3, #1
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	8afb      	ldrh	r3, [r7, #22]
 8004c9a:	04d9      	lsls	r1, r3, #19
 8004c9c:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <USB_EPStartXfer+0x484>)
 8004c9e:	400b      	ands	r3, r1
 8004ca0:	69b9      	ldr	r1, [r7, #24]
 8004ca2:	0148      	lsls	r0, r1, #5
 8004ca4:	69f9      	ldr	r1, [r7, #28]
 8004ca6:	4401      	add	r1, r0
 8004ca8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cac:	4313      	orrs	r3, r2
 8004cae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	8af9      	ldrh	r1, [r7, #22]
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	0148      	lsls	r0, r1, #5
 8004cd0:	69f9      	ldr	r1, [r7, #28]
 8004cd2:	4401      	add	r1, r0
 8004cd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d10d      	bne.n	8004cfe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	68d9      	ldr	r1, [r3, #12]
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	78db      	ldrb	r3, [r3, #3]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d128      	bne.n	8004d58 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d110      	bne.n	8004d38 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e00f      	b.n	8004d58 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	1ff80000 	.word	0x1ff80000

08004d88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	785b      	ldrb	r3, [r3, #1]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	f040 80cd 	bne.w	8004f44 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d132      	bne.n	8004e18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e10:	0cdb      	lsrs	r3, r3, #19
 8004e12:	04db      	lsls	r3, r3, #19
 8004e14:	6113      	str	r3, [r2, #16]
 8004e16:	e04e      	b.n	8004eb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e32:	0cdb      	lsrs	r3, r3, #19
 8004e34:	04db      	lsls	r3, r3, #19
 8004e36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	695a      	ldr	r2, [r3, #20]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d903      	bls.n	8004e70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	0151      	lsls	r1, r2, #5
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	440a      	add	r2, r1
 8004e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea6:	6939      	ldr	r1, [r7, #16]
 8004ea8:	0148      	lsls	r0, r1, #5
 8004eaa:	6979      	ldr	r1, [r7, #20]
 8004eac:	4401      	add	r1, r0
 8004eae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d11e      	bne.n	8004efa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	e092      	b.n	8005020 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d07e      	beq.n	8005020 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	2101      	movs	r1, #1
 8004f34:	fa01 f303 	lsl.w	r3, r1, r3
 8004f38:	6979      	ldr	r1, [r7, #20]
 8004f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	634b      	str	r3, [r1, #52]	; 0x34
 8004f42:	e06d      	b.n	8005020 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5e:	0cdb      	lsrs	r3, r3, #19
 8004f60:	04db      	lsls	r3, r3, #19
 8004f62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f86:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fce:	6939      	ldr	r1, [r7, #16]
 8004fd0:	0148      	lsls	r0, r1, #5
 8004fd2:	6979      	ldr	r1, [r7, #20]
 8004fd4:	4401      	add	r1, r0
 8004fd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d10d      	bne.n	8005000 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d009      	beq.n	8005000 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	68d9      	ldr	r1, [r3, #12]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffc:	460a      	mov	r2, r1
 8004ffe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	440a      	add	r2, r1
 8005016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800501a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800501e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800502e:	b480      	push	{r7}
 8005030:	b089      	sub	sp, #36	; 0x24
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	4611      	mov	r1, r2
 800503a:	461a      	mov	r2, r3
 800503c:	460b      	mov	r3, r1
 800503e:	71fb      	strb	r3, [r7, #7]
 8005040:	4613      	mov	r3, r2
 8005042:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800504c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005050:	2b00      	cmp	r3, #0
 8005052:	d11a      	bne.n	800508a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005054:	88bb      	ldrh	r3, [r7, #4]
 8005056:	3303      	adds	r3, #3
 8005058:	089b      	lsrs	r3, r3, #2
 800505a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800505c:	2300      	movs	r3, #0
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	e00f      	b.n	8005082 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	031a      	lsls	r2, r3, #12
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	4413      	add	r3, r2
 800506a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800506e:	461a      	mov	r2, r3
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	3304      	adds	r3, #4
 800507a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	3301      	adds	r3, #1
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	429a      	cmp	r2, r3
 8005088:	d3eb      	bcc.n	8005062 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3724      	adds	r7, #36	; 0x24
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005098:	b480      	push	{r7}
 800509a:	b089      	sub	sp, #36	; 0x24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	3303      	adds	r3, #3
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	e00b      	b.n	80050d4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3304      	adds	r3, #4
 80050cc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	3301      	adds	r3, #1
 80050d2:	61bb      	str	r3, [r7, #24]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d3ef      	bcc.n	80050bc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80050dc:	69fb      	ldr	r3, [r7, #28]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3724      	adds	r7, #36	; 0x24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d12c      	bne.n	8005160 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	db12      	blt.n	800513e <USB_EPSetStall+0x54>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00f      	beq.n	800513e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	440a      	add	r2, r1
 8005134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005138:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800513c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	440a      	add	r2, r1
 8005154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005158:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e02b      	b.n	80051b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	db12      	blt.n	8005198 <USB_EPSetStall+0xae>
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00f      	beq.n	8005198 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005192:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005196:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b085      	sub	sp, #20
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d128      	bne.n	8005234 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005200:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	78db      	ldrb	r3, [r3, #3]
 8005206:	2b03      	cmp	r3, #3
 8005208:	d003      	beq.n	8005212 <USB_EPClearStall+0x4c>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	78db      	ldrb	r3, [r3, #3]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d138      	bne.n	8005284 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	440a      	add	r2, r1
 8005228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	e027      	b.n	8005284 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005252:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	78db      	ldrb	r3, [r3, #3]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d003      	beq.n	8005264 <USB_EPClearStall+0x9e>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	78db      	ldrb	r3, [r3, #3]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d10f      	bne.n	8005284 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	440a      	add	r2, r1
 800527a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005282:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005292:	b480      	push	{r7}
 8005294:	b085      	sub	sp, #20
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052f8:	f023 0303 	bic.w	r3, r3, #3
 80052fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800530c:	f023 0302 	bic.w	r3, r3, #2
 8005310:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534e:	f043 0302 	orr.w	r3, r3, #2
 8005352:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4013      	ands	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800537a:	68fb      	ldr	r3, [r7, #12]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	4013      	ands	r3, r2
 80053aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	0c1b      	lsrs	r3, r3, #16
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4013      	ands	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	b29b      	uxth	r3, r3
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800541e:	68bb      	ldr	r3, [r7, #8]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
 800545c:	01db      	lsls	r3, r3, #7
 800545e:	b2db      	uxtb	r3, r3
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4013      	ands	r3, r2
 8005478:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800547a:	68bb      	ldr	r3, [r7, #8]
}
 800547c:	4618      	mov	r0, r3
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f003 0301 	and.w	r3, r3, #1
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054c2:	f023 0307 	bic.w	r3, r3, #7
 80054c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	460b      	mov	r3, r1
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	333c      	adds	r3, #60	; 0x3c
 8005502:	3304      	adds	r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4a26      	ldr	r2, [pc, #152]	; (80055a4 <USB_EP0_OutStart+0xb8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d90a      	bls.n	8005526 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800551c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005520:	d101      	bne.n	8005526 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	e037      	b.n	8005596 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	461a      	mov	r2, r3
 800552e:	2300      	movs	r3, #0
 8005530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005544:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005554:	f043 0318 	orr.w	r3, r3, #24
 8005558:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005568:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800556c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800556e:	7afb      	ldrb	r3, [r7, #11]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d10f      	bne.n	8005594 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	461a      	mov	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005592:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	4f54300a 	.word	0x4f54300a

080055a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3301      	adds	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <USB_CoreReset+0x64>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e01b      	b.n	80055fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	daf2      	bge.n	80055b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f043 0201 	orr.w	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a09      	ldr	r2, [pc, #36]	; (800560c <USB_CoreReset+0x64>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d901      	bls.n	80055f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e006      	b.n	80055fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d0f0      	beq.n	80055de <USB_CoreReset+0x36>

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	00030d40 	.word	0x00030d40

08005610 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800561c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005620:	f002 f8d6 	bl	80077d0 <malloc>
 8005624:	4603      	mov	r3, r0
 8005626:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005636:	2302      	movs	r3, #2
 8005638:	e066      	b.n	8005708 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	7c1b      	ldrb	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d119      	bne.n	800567e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800564a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800564e:	2202      	movs	r2, #2
 8005650:	2181      	movs	r1, #129	; 0x81
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f001 ff43 	bl	80074de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800565e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005662:	2202      	movs	r2, #2
 8005664:	2101      	movs	r1, #1
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 ff39 	bl	80074de <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2210      	movs	r2, #16
 8005678:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800567c:	e016      	b.n	80056ac <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800567e:	2340      	movs	r3, #64	; 0x40
 8005680:	2202      	movs	r2, #2
 8005682:	2181      	movs	r1, #129	; 0x81
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f001 ff2a 	bl	80074de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005690:	2340      	movs	r3, #64	; 0x40
 8005692:	2202      	movs	r2, #2
 8005694:	2101      	movs	r1, #1
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 ff21 	bl	80074de <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2210      	movs	r2, #16
 80056a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056ac:	2308      	movs	r3, #8
 80056ae:	2203      	movs	r2, #3
 80056b0:	2182      	movs	r1, #130	; 0x82
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 ff13 	bl	80074de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	7c1b      	ldrb	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ec:	2101      	movs	r1, #1
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 ffe4 	bl	80076bc <USBD_LL_PrepareReceive>
 80056f4:	e007      	b.n	8005706 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056fc:	2340      	movs	r3, #64	; 0x40
 80056fe:	2101      	movs	r1, #1
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 ffdb 	bl	80076bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005720:	2181      	movs	r1, #129	; 0x81
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f001 ff01 	bl	800752a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800572e:	2101      	movs	r1, #1
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 fefa 	bl	800752a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800573e:	2182      	movs	r1, #130	; 0x82
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 fef2 	bl	800752a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00e      	beq.n	800577e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005770:	4618      	mov	r0, r3
 8005772:	f002 f835 	bl	80077e0 <free>
    pdev->pClassData = NULL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800577e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005798:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d03a      	beq.n	8005828 <USBD_CDC_Setup+0xa0>
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	f040 8097 	bne.w	80058e6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	88db      	ldrh	r3, [r3, #6]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d029      	beq.n	8005814 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	b25b      	sxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	da11      	bge.n	80057ee <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80057d6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	88d2      	ldrh	r2, [r2, #6]
 80057dc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80057de:	6939      	ldr	r1, [r7, #16]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	88db      	ldrh	r3, [r3, #6]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f001 fa6d 	bl	8006cc6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80057ec:	e082      	b.n	80058f4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	785a      	ldrb	r2, [r3, #1]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	88db      	ldrh	r3, [r3, #6]
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005804:	6939      	ldr	r1, [r7, #16]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	88db      	ldrh	r3, [r3, #6]
 800580a:	461a      	mov	r2, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 fa86 	bl	8006d1e <USBD_CtlPrepareRx>
    break;
 8005812:	e06f      	b.n	80058f4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	7850      	ldrb	r0, [r2, #1]
 8005820:	2200      	movs	r2, #0
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	4798      	blx	r3
    break;
 8005826:	e065      	b.n	80058f4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b0b      	cmp	r3, #11
 800582e:	d84f      	bhi.n	80058d0 <USBD_CDC_Setup+0x148>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <USBD_CDC_Setup+0xb0>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	08005869 	.word	0x08005869
 800583c:	080058df 	.word	0x080058df
 8005840:	080058d1 	.word	0x080058d1
 8005844:	080058d1 	.word	0x080058d1
 8005848:	080058d1 	.word	0x080058d1
 800584c:	080058d1 	.word	0x080058d1
 8005850:	080058d1 	.word	0x080058d1
 8005854:	080058d1 	.word	0x080058d1
 8005858:	080058d1 	.word	0x080058d1
 800585c:	080058d1 	.word	0x080058d1
 8005860:	08005891 	.word	0x08005891
 8005864:	080058b9 	.word	0x080058b9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586e:	2b03      	cmp	r3, #3
 8005870:	d107      	bne.n	8005882 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005872:	f107 030c 	add.w	r3, r7, #12
 8005876:	2202      	movs	r2, #2
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fa23 	bl	8006cc6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005880:	e030      	b.n	80058e4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 f9ad 	bl	8006be4 <USBD_CtlError>
        ret = USBD_FAIL;
 800588a:	2303      	movs	r3, #3
 800588c:	75fb      	strb	r3, [r7, #23]
      break;
 800588e:	e029      	b.n	80058e4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005896:	2b03      	cmp	r3, #3
 8005898:	d107      	bne.n	80058aa <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800589a:	f107 030f 	add.w	r3, r7, #15
 800589e:	2201      	movs	r2, #1
 80058a0:	4619      	mov	r1, r3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f001 fa0f 	bl	8006cc6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80058a8:	e01c      	b.n	80058e4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 f999 	bl	8006be4 <USBD_CtlError>
        ret = USBD_FAIL;
 80058b2:	2303      	movs	r3, #3
 80058b4:	75fb      	strb	r3, [r7, #23]
      break;
 80058b6:	e015      	b.n	80058e4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d00f      	beq.n	80058e2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 f98d 	bl	8006be4 <USBD_CtlError>
        ret = USBD_FAIL;
 80058ca:	2303      	movs	r3, #3
 80058cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80058ce:	e008      	b.n	80058e2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f001 f986 	bl	8006be4 <USBD_CtlError>
      ret = USBD_FAIL;
 80058d8:	2303      	movs	r3, #3
 80058da:	75fb      	strb	r3, [r7, #23]
      break;
 80058dc:	e002      	b.n	80058e4 <USBD_CDC_Setup+0x15c>
      break;
 80058de:	bf00      	nop
 80058e0:	e008      	b.n	80058f4 <USBD_CDC_Setup+0x16c>
      break;
 80058e2:	bf00      	nop
    }
    break;
 80058e4:	e006      	b.n	80058f4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 f97b 	bl	8006be4 <USBD_CtlError>
    ret = USBD_FAIL;
 80058ee:	2303      	movs	r3, #3
 80058f0:	75fb      	strb	r3, [r7, #23]
    break;
 80058f2:	bf00      	nop
  }

  return (uint8_t)ret;
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop

08005900 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005912:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800591e:	2303      	movs	r3, #3
 8005920:	e049      	b.n	80059b6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005928:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800592a:	78fa      	ldrb	r2, [r7, #3]
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	3318      	adds	r3, #24
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d029      	beq.n	8005994 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005940:	78fa      	ldrb	r2, [r7, #3]
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	3318      	adds	r3, #24
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	78f9      	ldrb	r1, [r7, #3]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	460b      	mov	r3, r1
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	1a5b      	subs	r3, r3, r1
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4403      	add	r3, r0
 8005960:	3344      	adds	r3, #68	; 0x44
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	fbb2 f1f3 	udiv	r1, r2, r3
 8005968:	fb03 f301 	mul.w	r3, r3, r1
 800596c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800596e:	2b00      	cmp	r3, #0
 8005970:	d110      	bne.n	8005994 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	3318      	adds	r3, #24
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005986:	78f9      	ldrb	r1, [r7, #3]
 8005988:	2300      	movs	r3, #0
 800598a:	2200      	movs	r2, #0
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 fe74 	bl	800767a <USBD_LL_Transmit>
 8005992:	e00f      	b.n	80059b4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2200      	movs	r2, #0
 8005998:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80059b0:	78fa      	ldrb	r2, [r7, #3]
 80059b2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	460b      	mov	r3, r1
 80059c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059dc:	2303      	movs	r3, #3
 80059de:	e015      	b.n	8005a0c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 fe8a 	bl	80076fe <USBD_LL_GetRxDataSize>
 80059ea:	4602      	mov	r2, r0
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a06:	4611      	mov	r1, r2
 8005a08:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a22:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d015      	beq.n	8005a5a <USBD_CDC_EP0_RxReady+0x46>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a34:	2bff      	cmp	r3, #255	; 0xff
 8005a36:	d010      	beq.n	8005a5a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005a46:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a4e:	b292      	uxth	r2, r2
 8005a50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	22ff      	movs	r2, #255	; 0xff
 8005a56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2243      	movs	r2, #67	; 0x43
 8005a70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005a72:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	20000094 	.word	0x20000094

08005a84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2243      	movs	r2, #67	; 0x43
 8005a90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005a92:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	20000050 	.word	0x20000050

08005aa4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2243      	movs	r2, #67	; 0x43
 8005ab0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005ab2:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	200000d8 	.word	0x200000d8

08005ac4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	220a      	movs	r2, #10
 8005ad0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ad2:	4b03      	ldr	r3, [pc, #12]	; (8005ae0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	2000000c 	.word	0x2000000c

08005ae4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e004      	b.n	8005b02 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b087      	sub	sp, #28
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b20:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b50:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e016      	b.n	8005bb4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	7c1b      	ldrb	r3, [r3, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d109      	bne.n	8005ba2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b98:	2101      	movs	r1, #1
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f001 fd8e 	bl	80076bc <USBD_LL_PrepareReceive>
 8005ba0:	e007      	b.n	8005bb2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ba8:	2340      	movs	r3, #64	; 0x40
 8005baa:	2101      	movs	r1, #1
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 fd85 	bl	80076bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e025      	b.n	8005c20 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	79fa      	ldrb	r2, [r7, #7]
 8005c12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f001 fbfb 	bl	8007410 <USBD_LL_Init>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e010      	b.n	8005c62 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c50:	f107 020e 	add.w	r2, r7, #14
 8005c54:	4610      	mov	r0, r2
 8005c56:	4798      	blx	r3
 8005c58:	4602      	mov	r2, r0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 fc18 	bl	80074a8 <USBD_LL_Start>
 8005c78:	4603      	mov	r3, r0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	4798      	blx	r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	78fa      	ldrb	r2, [r7, #3]
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	4798      	blx	r3
  }

  return USBD_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 ff2c 	bl	8006b70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d26:	461a      	mov	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d00e      	beq.n	8005d5a <USBD_LL_SetupStage+0x5a>
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d302      	bcc.n	8005d46 <USBD_LL_SetupStage+0x46>
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d014      	beq.n	8005d6e <USBD_LL_SetupStage+0x6e>
 8005d44:	e01d      	b.n	8005d82 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa18 	bl	8006184 <USBD_StdDevReq>
 8005d54:	4603      	mov	r3, r0
 8005d56:	73fb      	strb	r3, [r7, #15]
      break;
 8005d58:	e020      	b.n	8005d9c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fa7c 	bl	8006260 <USBD_StdItfReq>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d6c:	e016      	b.n	8005d9c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fab8 	bl	80062ec <USBD_StdEPReq>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d80:	e00c      	b.n	8005d9c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f001 fbe9 	bl	8007568 <USBD_LL_StallEP>
 8005d96:	4603      	mov	r3, r0
 8005d98:	73fb      	strb	r3, [r7, #15]
      break;
 8005d9a:	bf00      	nop
  }

  return ret;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b086      	sub	sp, #24
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	460b      	mov	r3, r1
 8005db0:	607a      	str	r2, [r7, #4]
 8005db2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005db4:	7afb      	ldrb	r3, [r7, #11]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d137      	bne.n	8005e2a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005dc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d14a      	bne.n	8005e62 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d913      	bls.n	8005e00 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	1ad2      	subs	r2, r2, r3
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	4293      	cmp	r3, r2
 8005df0:	bf28      	it	cs
 8005df2:	4613      	movcs	r3, r2
 8005df4:	461a      	mov	r2, r3
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 ffad 	bl	8006d58 <USBD_CtlContinueRx>
 8005dfe:	e030      	b.n	8005e62 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d105      	bne.n	8005e22 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 ffa9 	bl	8006d7a <USBD_CtlSendStatus>
 8005e28:	e01b      	b.n	8005e62 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d013      	beq.n	8005e5e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d10e      	bne.n	8005e5e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	7afa      	ldrb	r2, [r7, #11]
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	4798      	blx	r3
 8005e50:	4603      	mov	r3, r0
 8005e52:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	e002      	b.n	8005e64 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e000      	b.n	8005e64 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	460b      	mov	r3, r1
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e7a:	7afb      	ldrb	r3, [r7, #11]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d16a      	bne.n	8005f56 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3314      	adds	r3, #20
 8005e84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d155      	bne.n	8005f3c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d914      	bls.n	8005ec6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	1ad2      	subs	r2, r2, r3
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 ff22 	bl	8006cfc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005eb8:	2300      	movs	r3, #0
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f001 fbfc 	bl	80076bc <USBD_LL_PrepareReceive>
 8005ec4:	e03a      	b.n	8005f3c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d11c      	bne.n	8005f0c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d316      	bcc.n	8005f0c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d20f      	bcs.n	8005f0c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005eec:	2200      	movs	r2, #0
 8005eee:	2100      	movs	r1, #0
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 ff03 	bl	8006cfc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005efe:	2300      	movs	r3, #0
 8005f00:	2200      	movs	r2, #0
 8005f02:	2100      	movs	r1, #0
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f001 fbd9 	bl	80076bc <USBD_LL_PrepareReceive>
 8005f0a:	e017      	b.n	8005f3c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d105      	bne.n	8005f2e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f2e:	2180      	movs	r1, #128	; 0x80
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f001 fb19 	bl	8007568 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 ff32 	bl	8006da0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d123      	bne.n	8005f8e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7ff fe9b 	bl	8005c82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005f54:	e01b      	b.n	8005f8e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d013      	beq.n	8005f8a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d10e      	bne.n	8005f8a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	7afa      	ldrb	r2, [r7, #11]
 8005f76:	4611      	mov	r1, r2
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	4798      	blx	r3
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
 8005f88:	e002      	b.n	8005f90 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e000      	b.n	8005f90 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d009      	beq.n	8005fdc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6852      	ldr	r2, [r2, #4]
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fdc:	2340      	movs	r3, #64	; 0x40
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f001 fa7b 	bl	80074de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2240      	movs	r2, #64	; 0x40
 8005ff4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ff8:	2340      	movs	r3, #64	; 0x40
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2180      	movs	r1, #128	; 0x80
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 fa6d 	bl	80074de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2240      	movs	r2, #64	; 0x40
 800600e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	78fa      	ldrb	r2, [r7, #3]
 800602a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2204      	movs	r2, #4
 8006052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006072:	2b04      	cmp	r3, #4
 8006074:	d105      	bne.n	8006082 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d10b      	bne.n	80060ba <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	460b      	mov	r3, r1
 80060e8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d009      	beq.n	800613c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6852      	ldr	r2, [r2, #4]
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	4611      	mov	r1, r2
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	4798      	blx	r3
  }

  return USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006146:	b480      	push	{r7}
 8006148:	b087      	sub	sp, #28
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	3301      	adds	r3, #1
 800615c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006164:	8a3b      	ldrh	r3, [r7, #16]
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	b21a      	sxth	r2, r3
 800616a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800616e:	4313      	orrs	r3, r2
 8006170:	b21b      	sxth	r3, r3
 8006172:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006174:	89fb      	ldrh	r3, [r7, #14]
}
 8006176:	4618      	mov	r0, r3
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
	...

08006184 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800619a:	2b20      	cmp	r3, #32
 800619c:	d004      	beq.n	80061a8 <USBD_StdDevReq+0x24>
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d002      	beq.n	80061a8 <USBD_StdDevReq+0x24>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <USBD_StdDevReq+0x38>
 80061a6:	e050      	b.n	800624a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	73fb      	strb	r3, [r7, #15]
    break;
 80061ba:	e04b      	b.n	8006254 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b09      	cmp	r3, #9
 80061c2:	d83c      	bhi.n	800623e <USBD_StdDevReq+0xba>
 80061c4:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <USBD_StdDevReq+0x48>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	08006221 	.word	0x08006221
 80061d0:	08006235 	.word	0x08006235
 80061d4:	0800623f 	.word	0x0800623f
 80061d8:	0800622b 	.word	0x0800622b
 80061dc:	0800623f 	.word	0x0800623f
 80061e0:	080061ff 	.word	0x080061ff
 80061e4:	080061f5 	.word	0x080061f5
 80061e8:	0800623f 	.word	0x0800623f
 80061ec:	08006217 	.word	0x08006217
 80061f0:	08006209 	.word	0x08006209
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f9ce 	bl	8006598 <USBD_GetDescriptor>
      break;
 80061fc:	e024      	b.n	8006248 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fb33 	bl	800686c <USBD_SetAddress>
      break;
 8006206:	e01f      	b.n	8006248 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fb70 	bl	80068f0 <USBD_SetConfig>
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]
      break;
 8006214:	e018      	b.n	8006248 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fc0d 	bl	8006a38 <USBD_GetConfig>
      break;
 800621e:	e013      	b.n	8006248 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fc3c 	bl	8006aa0 <USBD_GetStatus>
      break;
 8006228:	e00e      	b.n	8006248 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fc6a 	bl	8006b06 <USBD_SetFeature>
      break;
 8006232:	e009      	b.n	8006248 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fc79 	bl	8006b2e <USBD_ClrFeature>
      break;
 800623c:	e004      	b.n	8006248 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fccf 	bl	8006be4 <USBD_CtlError>
      break;
 8006246:	bf00      	nop
    }
    break;
 8006248:	e004      	b.n	8006254 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fcc9 	bl	8006be4 <USBD_CtlError>
    break;
 8006252:	bf00      	nop
  }

  return ret;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop

08006260 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006276:	2b20      	cmp	r3, #32
 8006278:	d003      	beq.n	8006282 <USBD_StdItfReq+0x22>
 800627a:	2b40      	cmp	r3, #64	; 0x40
 800627c:	d001      	beq.n	8006282 <USBD_StdItfReq+0x22>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d12a      	bne.n	80062d8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006288:	3b01      	subs	r3, #1
 800628a:	2b02      	cmp	r3, #2
 800628c:	d81d      	bhi.n	80062ca <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	889b      	ldrh	r3, [r3, #4]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	d813      	bhi.n	80062c0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	88db      	ldrh	r3, [r3, #6]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d110      	bne.n	80062d4 <USBD_StdItfReq+0x74>
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10d      	bne.n	80062d4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fd5e 	bl	8006d7a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80062be:	e009      	b.n	80062d4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fc8e 	bl	8006be4 <USBD_CtlError>
      break;
 80062c8:	e004      	b.n	80062d4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fc89 	bl	8006be4 <USBD_CtlError>
      break;
 80062d2:	e000      	b.n	80062d6 <USBD_StdItfReq+0x76>
      break;
 80062d4:	bf00      	nop
    }
    break;
 80062d6:	e004      	b.n	80062e2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fc82 	bl	8006be4 <USBD_CtlError>
    break;
 80062e0:	bf00      	nop
  }

  return ret;
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	889b      	ldrh	r3, [r3, #4]
 80062fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006308:	2b20      	cmp	r3, #32
 800630a:	d004      	beq.n	8006316 <USBD_StdEPReq+0x2a>
 800630c:	2b40      	cmp	r3, #64	; 0x40
 800630e:	d002      	beq.n	8006316 <USBD_StdEPReq+0x2a>
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <USBD_StdEPReq+0x3e>
 8006314:	e135      	b.n	8006582 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]
    break;
 8006328:	e130      	b.n	800658c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	785b      	ldrb	r3, [r3, #1]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d03e      	beq.n	80063b0 <USBD_StdEPReq+0xc4>
 8006332:	2b03      	cmp	r3, #3
 8006334:	d002      	beq.n	800633c <USBD_StdEPReq+0x50>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d077      	beq.n	800642a <USBD_StdEPReq+0x13e>
 800633a:	e11c      	b.n	8006576 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006342:	2b02      	cmp	r3, #2
 8006344:	d002      	beq.n	800634c <USBD_StdEPReq+0x60>
 8006346:	2b03      	cmp	r3, #3
 8006348:	d015      	beq.n	8006376 <USBD_StdEPReq+0x8a>
 800634a:	e02b      	b.n	80063a4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00c      	beq.n	800636c <USBD_StdEPReq+0x80>
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	2b80      	cmp	r3, #128	; 0x80
 8006356:	d009      	beq.n	800636c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 f903 	bl	8007568 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006362:	2180      	movs	r1, #128	; 0x80
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 f8ff 	bl	8007568 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800636a:	e020      	b.n	80063ae <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fc38 	bl	8006be4 <USBD_CtlError>
        break;
 8006374:	e01b      	b.n	80063ae <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	885b      	ldrh	r3, [r3, #2]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10e      	bne.n	800639c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <USBD_StdEPReq+0xb0>
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	2b80      	cmp	r3, #128	; 0x80
 8006388:	d008      	beq.n	800639c <USBD_StdEPReq+0xb0>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	88db      	ldrh	r3, [r3, #6]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 f8e6 	bl	8007568 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fcec 	bl	8006d7a <USBD_CtlSendStatus>

        break;
 80063a2:	e004      	b.n	80063ae <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fc1c 	bl	8006be4 <USBD_CtlError>
        break;
 80063ac:	bf00      	nop
      }
      break;
 80063ae:	e0e7      	b.n	8006580 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d002      	beq.n	80063c0 <USBD_StdEPReq+0xd4>
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d015      	beq.n	80063ea <USBD_StdEPReq+0xfe>
 80063be:	e02d      	b.n	800641c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00c      	beq.n	80063e0 <USBD_StdEPReq+0xf4>
 80063c6:	7bbb      	ldrb	r3, [r7, #14]
 80063c8:	2b80      	cmp	r3, #128	; 0x80
 80063ca:	d009      	beq.n	80063e0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80063cc:	7bbb      	ldrb	r3, [r7, #14]
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f001 f8c9 	bl	8007568 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063d6:	2180      	movs	r1, #128	; 0x80
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 f8c5 	bl	8007568 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80063de:	e023      	b.n	8006428 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fbfe 	bl	8006be4 <USBD_CtlError>
        break;
 80063e8:	e01e      	b.n	8006428 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	885b      	ldrh	r3, [r3, #2]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d119      	bne.n	8006426 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80063f2:	7bbb      	ldrb	r3, [r7, #14]
 80063f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063fc:	7bbb      	ldrb	r3, [r7, #14]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 f8d0 	bl	80075a6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fcb7 	bl	8006d7a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
        }
        break;
 800641a:	e004      	b.n	8006426 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fbe0 	bl	8006be4 <USBD_CtlError>
        break;
 8006424:	e000      	b.n	8006428 <USBD_StdEPReq+0x13c>
        break;
 8006426:	bf00      	nop
      }
      break;
 8006428:	e0aa      	b.n	8006580 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006430:	2b02      	cmp	r3, #2
 8006432:	d002      	beq.n	800643a <USBD_StdEPReq+0x14e>
 8006434:	2b03      	cmp	r3, #3
 8006436:	d032      	beq.n	800649e <USBD_StdEPReq+0x1b2>
 8006438:	e097      	b.n	800656a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <USBD_StdEPReq+0x164>
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	2b80      	cmp	r3, #128	; 0x80
 8006444:	d004      	beq.n	8006450 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fbcb 	bl	8006be4 <USBD_CtlError>
          break;
 800644e:	e091      	b.n	8006574 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006454:	2b00      	cmp	r3, #0
 8006456:	da0b      	bge.n	8006470 <USBD_StdEPReq+0x184>
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800645e:	4613      	mov	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	3310      	adds	r3, #16
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	4413      	add	r3, r2
 800646c:	3304      	adds	r3, #4
 800646e:	e00b      	b.n	8006488 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	4413      	add	r3, r2
 8006486:	3304      	adds	r3, #4
 8006488:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2202      	movs	r2, #2
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fc15 	bl	8006cc6 <USBD_CtlSendData>
        break;
 800649c:	e06a      	b.n	8006574 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800649e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	da11      	bge.n	80064ca <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	f003 020f 	and.w	r2, r3, #15
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	3324      	adds	r3, #36	; 0x24
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d117      	bne.n	80064f0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fb8e 	bl	8006be4 <USBD_CtlError>
            break;
 80064c8:	e054      	b.n	8006574 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	f003 020f 	and.w	r2, r3, #15
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fb7b 	bl	8006be4 <USBD_CtlError>
            break;
 80064ee:	e041      	b.n	8006574 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	da0b      	bge.n	8006510 <USBD_StdEPReq+0x224>
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	3310      	adds	r3, #16
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	4413      	add	r3, r2
 800650c:	3304      	adds	r3, #4
 800650e:	e00b      	b.n	8006528 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006510:	7bbb      	ldrb	r3, [r7, #14]
 8006512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	4413      	add	r3, r2
 8006526:	3304      	adds	r3, #4
 8006528:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800652a:	7bbb      	ldrb	r3, [r7, #14]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <USBD_StdEPReq+0x24a>
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	2b80      	cmp	r3, #128	; 0x80
 8006534:	d103      	bne.n	800653e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	e00e      	b.n	800655c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 f84e 	bl	80075e4 <USBD_LL_IsStallEP>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2201      	movs	r2, #1
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	e002      	b.n	800655c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2202      	movs	r2, #2
 8006560:	4619      	mov	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fbaf 	bl	8006cc6 <USBD_CtlSendData>
          break;
 8006568:	e004      	b.n	8006574 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800656a:	6839      	ldr	r1, [r7, #0]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fb39 	bl	8006be4 <USBD_CtlError>
        break;
 8006572:	bf00      	nop
      }
      break;
 8006574:	e004      	b.n	8006580 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fb33 	bl	8006be4 <USBD_CtlError>
      break;
 800657e:	bf00      	nop
    }
    break;
 8006580:	e004      	b.n	800658c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fb2d 	bl	8006be4 <USBD_CtlError>
    break;
 800658a:	bf00      	nop
  }

  return ret;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	885b      	ldrh	r3, [r3, #2]
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	2b06      	cmp	r3, #6
 80065ba:	f200 8128 	bhi.w	800680e <USBD_GetDescriptor+0x276>
 80065be:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <USBD_GetDescriptor+0x2c>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065e1 	.word	0x080065e1
 80065c8:	080065f9 	.word	0x080065f9
 80065cc:	08006639 	.word	0x08006639
 80065d0:	0800680f 	.word	0x0800680f
 80065d4:	0800680f 	.word	0x0800680f
 80065d8:	080067af 	.word	0x080067af
 80065dc:	080067db 	.word	0x080067db
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	7c12      	ldrb	r2, [r2, #16]
 80065ec:	f107 0108 	add.w	r1, r7, #8
 80065f0:	4610      	mov	r0, r2
 80065f2:	4798      	blx	r3
 80065f4:	60f8      	str	r0, [r7, #12]
    break;
 80065f6:	e112      	b.n	800681e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	7c1b      	ldrb	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10d      	bne.n	800661c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006608:	f107 0208 	add.w	r2, r7, #8
 800660c:	4610      	mov	r0, r2
 800660e:	4798      	blx	r3
 8006610:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3301      	adds	r3, #1
 8006616:	2202      	movs	r2, #2
 8006618:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800661a:	e100      	b.n	800681e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	f107 0208 	add.w	r2, r7, #8
 8006628:	4610      	mov	r0, r2
 800662a:	4798      	blx	r3
 800662c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	2202      	movs	r2, #2
 8006634:	701a      	strb	r2, [r3, #0]
    break;
 8006636:	e0f2      	b.n	800681e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	885b      	ldrh	r3, [r3, #2]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b05      	cmp	r3, #5
 8006640:	f200 80ac 	bhi.w	800679c <USBD_GetDescriptor+0x204>
 8006644:	a201      	add	r2, pc, #4	; (adr r2, 800664c <USBD_GetDescriptor+0xb4>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	08006665 	.word	0x08006665
 8006650:	08006699 	.word	0x08006699
 8006654:	080066cd 	.word	0x080066cd
 8006658:	08006701 	.word	0x08006701
 800665c:	08006735 	.word	0x08006735
 8006660:	08006769 	.word	0x08006769
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	7c12      	ldrb	r2, [r2, #16]
 800667c:	f107 0108 	add.w	r1, r7, #8
 8006680:	4610      	mov	r0, r2
 8006682:	4798      	blx	r3
 8006684:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006686:	e091      	b.n	80067ac <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 faaa 	bl	8006be4 <USBD_CtlError>
        err++;
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	3301      	adds	r3, #1
 8006694:	72fb      	strb	r3, [r7, #11]
      break;
 8006696:	e089      	b.n	80067ac <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	7c12      	ldrb	r2, [r2, #16]
 80066b0:	f107 0108 	add.w	r1, r7, #8
 80066b4:	4610      	mov	r0, r2
 80066b6:	4798      	blx	r3
 80066b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066ba:	e077      	b.n	80067ac <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa90 	bl	8006be4 <USBD_CtlError>
        err++;
 80066c4:	7afb      	ldrb	r3, [r7, #11]
 80066c6:	3301      	adds	r3, #1
 80066c8:	72fb      	strb	r3, [r7, #11]
      break;
 80066ca:	e06f      	b.n	80067ac <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00b      	beq.n	80066f0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	7c12      	ldrb	r2, [r2, #16]
 80066e4:	f107 0108 	add.w	r1, r7, #8
 80066e8:	4610      	mov	r0, r2
 80066ea:	4798      	blx	r3
 80066ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066ee:	e05d      	b.n	80067ac <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fa76 	bl	8006be4 <USBD_CtlError>
        err++;
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	3301      	adds	r3, #1
 80066fc:	72fb      	strb	r3, [r7, #11]
      break;
 80066fe:	e055      	b.n	80067ac <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	7c12      	ldrb	r2, [r2, #16]
 8006718:	f107 0108 	add.w	r1, r7, #8
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
 8006720:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006722:	e043      	b.n	80067ac <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa5c 	bl	8006be4 <USBD_CtlError>
        err++;
 800672c:	7afb      	ldrb	r3, [r7, #11]
 800672e:	3301      	adds	r3, #1
 8006730:	72fb      	strb	r3, [r7, #11]
      break;
 8006732:	e03b      	b.n	80067ac <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	7c12      	ldrb	r2, [r2, #16]
 800674c:	f107 0108 	add.w	r1, r7, #8
 8006750:	4610      	mov	r0, r2
 8006752:	4798      	blx	r3
 8006754:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006756:	e029      	b.n	80067ac <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fa42 	bl	8006be4 <USBD_CtlError>
        err++;
 8006760:	7afb      	ldrb	r3, [r7, #11]
 8006762:	3301      	adds	r3, #1
 8006764:	72fb      	strb	r3, [r7, #11]
      break;
 8006766:	e021      	b.n	80067ac <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	7c12      	ldrb	r2, [r2, #16]
 8006780:	f107 0108 	add.w	r1, r7, #8
 8006784:	4610      	mov	r0, r2
 8006786:	4798      	blx	r3
 8006788:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800678a:	e00f      	b.n	80067ac <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fa28 	bl	8006be4 <USBD_CtlError>
        err++;
 8006794:	7afb      	ldrb	r3, [r7, #11]
 8006796:	3301      	adds	r3, #1
 8006798:	72fb      	strb	r3, [r7, #11]
      break;
 800679a:	e007      	b.n	80067ac <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fa20 	bl	8006be4 <USBD_CtlError>
      err++;
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	3301      	adds	r3, #1
 80067a8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80067aa:	bf00      	nop
    }
    break;
 80067ac:	e037      	b.n	800681e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	7c1b      	ldrb	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067be:	f107 0208 	add.w	r2, r7, #8
 80067c2:	4610      	mov	r0, r2
 80067c4:	4798      	blx	r3
 80067c6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80067c8:	e029      	b.n	800681e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fa09 	bl	8006be4 <USBD_CtlError>
      err++;
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	3301      	adds	r3, #1
 80067d6:	72fb      	strb	r3, [r7, #11]
    break;
 80067d8:	e021      	b.n	800681e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	7c1b      	ldrb	r3, [r3, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10d      	bne.n	80067fe <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	f107 0208 	add.w	r2, r7, #8
 80067ee:	4610      	mov	r0, r2
 80067f0:	4798      	blx	r3
 80067f2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3301      	adds	r3, #1
 80067f8:	2207      	movs	r2, #7
 80067fa:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80067fc:	e00f      	b.n	800681e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f9ef 	bl	8006be4 <USBD_CtlError>
      err++;
 8006806:	7afb      	ldrb	r3, [r7, #11]
 8006808:	3301      	adds	r3, #1
 800680a:	72fb      	strb	r3, [r7, #11]
    break;
 800680c:	e007      	b.n	800681e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f9e7 	bl	8006be4 <USBD_CtlError>
    err++;
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	3301      	adds	r3, #1
 800681a:	72fb      	strb	r3, [r7, #11]
    break;
 800681c:	bf00      	nop
  }

  if (err != 0U)
 800681e:	7afb      	ldrb	r3, [r7, #11]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d11e      	bne.n	8006862 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	88db      	ldrh	r3, [r3, #6]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d016      	beq.n	800685a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800682c:	893b      	ldrh	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00e      	beq.n	8006850 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	88da      	ldrh	r2, [r3, #6]
 8006836:	893b      	ldrh	r3, [r7, #8]
 8006838:	4293      	cmp	r3, r2
 800683a:	bf28      	it	cs
 800683c:	4613      	movcs	r3, r2
 800683e:	b29b      	uxth	r3, r3
 8006840:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006842:	893b      	ldrh	r3, [r7, #8]
 8006844:	461a      	mov	r2, r3
 8006846:	68f9      	ldr	r1, [r7, #12]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fa3c 	bl	8006cc6 <USBD_CtlSendData>
 800684e:	e009      	b.n	8006864 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f9c6 	bl	8006be4 <USBD_CtlError>
 8006858:	e004      	b.n	8006864 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa8d 	bl	8006d7a <USBD_CtlSendStatus>
 8006860:	e000      	b.n	8006864 <USBD_GetDescriptor+0x2cc>
    return;
 8006862:	bf00      	nop
    }
  }
}
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop

0800686c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	889b      	ldrh	r3, [r3, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d130      	bne.n	80068e0 <USBD_SetAddress+0x74>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	88db      	ldrh	r3, [r3, #6]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d12c      	bne.n	80068e0 <USBD_SetAddress+0x74>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	885b      	ldrh	r3, [r3, #2]
 800688a:	2b7f      	cmp	r3, #127	; 0x7f
 800688c:	d828      	bhi.n	80068e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	885b      	ldrh	r3, [r3, #2]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d104      	bne.n	80068ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f99c 	bl	8006be4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ac:	e01c      	b.n	80068e8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7bfa      	ldrb	r2, [r7, #15]
 80068b2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 febe 	bl	800763c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fa5a 	bl	8006d7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d4:	e008      	b.n	80068e8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068de:	e003      	b.n	80068e8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f97e 	bl	8006be4 <USBD_CtlError>
  }
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	885b      	ldrh	r3, [r3, #2]
 8006902:	b2da      	uxtb	r2, r3
 8006904:	4b4b      	ldr	r3, [pc, #300]	; (8006a34 <USBD_SetConfig+0x144>)
 8006906:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006908:	4b4a      	ldr	r3, [pc, #296]	; (8006a34 <USBD_SetConfig+0x144>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d905      	bls.n	800691c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f966 	bl	8006be4 <USBD_CtlError>
    return USBD_FAIL;
 8006918:	2303      	movs	r3, #3
 800691a:	e087      	b.n	8006a2c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006922:	2b02      	cmp	r3, #2
 8006924:	d002      	beq.n	800692c <USBD_SetConfig+0x3c>
 8006926:	2b03      	cmp	r3, #3
 8006928:	d025      	beq.n	8006976 <USBD_SetConfig+0x86>
 800692a:	e071      	b.n	8006a10 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800692c:	4b41      	ldr	r3, [pc, #260]	; (8006a34 <USBD_SetConfig+0x144>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01c      	beq.n	800696e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006934:	4b3f      	ldr	r3, [pc, #252]	; (8006a34 <USBD_SetConfig+0x144>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800693e:	4b3d      	ldr	r3, [pc, #244]	; (8006a34 <USBD_SetConfig+0x144>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	4619      	mov	r1, r3
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff f9a7 	bl	8005c98 <USBD_SetClassConfig>
 800694a:	4603      	mov	r3, r0
 800694c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d004      	beq.n	800695e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f944 	bl	8006be4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800695c:	e065      	b.n	8006a2a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa0b 	bl	8006d7a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2203      	movs	r2, #3
 8006968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800696c:	e05d      	b.n	8006a2a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa03 	bl	8006d7a <USBD_CtlSendStatus>
    break;
 8006974:	e059      	b.n	8006a2a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006976:	4b2f      	ldr	r3, [pc, #188]	; (8006a34 <USBD_SetConfig+0x144>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d112      	bne.n	80069a4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2202      	movs	r2, #2
 8006982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006986:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <USBD_SetConfig+0x144>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006990:	4b28      	ldr	r3, [pc, #160]	; (8006a34 <USBD_SetConfig+0x144>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff f99a 	bl	8005cd0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f9ec 	bl	8006d7a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80069a2:	e042      	b.n	8006a2a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80069a4:	4b23      	ldr	r3, [pc, #140]	; (8006a34 <USBD_SetConfig+0x144>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d02a      	beq.n	8006a08 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff f988 	bl	8005cd0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80069c0:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <USBD_SetConfig+0x144>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80069ca:	4b1a      	ldr	r3, [pc, #104]	; (8006a34 <USBD_SetConfig+0x144>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff f961 	bl	8005c98 <USBD_SetClassConfig>
 80069d6:	4603      	mov	r3, r0
 80069d8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00f      	beq.n	8006a00 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f8fe 	bl	8006be4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff f96d 	bl	8005cd0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2202      	movs	r2, #2
 80069fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80069fe:	e014      	b.n	8006a2a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f9ba 	bl	8006d7a <USBD_CtlSendStatus>
    break;
 8006a06:	e010      	b.n	8006a2a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f9b6 	bl	8006d7a <USBD_CtlSendStatus>
    break;
 8006a0e:	e00c      	b.n	8006a2a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f8e6 	bl	8006be4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <USBD_SetConfig+0x144>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff f956 	bl	8005cd0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006a24:	2303      	movs	r3, #3
 8006a26:	73fb      	strb	r3, [r7, #15]
    break;
 8006a28:	bf00      	nop
  }

  return ret;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20000208 	.word	0x20000208

08006a38 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	88db      	ldrh	r3, [r3, #6]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d004      	beq.n	8006a54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f8c9 	bl	8006be4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006a52:	e021      	b.n	8006a98 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	db17      	blt.n	8006a8e <USBD_GetConfig+0x56>
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	dd02      	ble.n	8006a68 <USBD_GetConfig+0x30>
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d00b      	beq.n	8006a7e <USBD_GetConfig+0x46>
 8006a66:	e012      	b.n	8006a8e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3308      	adds	r3, #8
 8006a72:	2201      	movs	r2, #1
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f925 	bl	8006cc6 <USBD_CtlSendData>
      break;
 8006a7c:	e00c      	b.n	8006a98 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3304      	adds	r3, #4
 8006a82:	2201      	movs	r2, #1
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f91d 	bl	8006cc6 <USBD_CtlSendData>
      break;
 8006a8c:	e004      	b.n	8006a98 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f8a7 	bl	8006be4 <USBD_CtlError>
      break;
 8006a96:	bf00      	nop
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d81e      	bhi.n	8006af4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	88db      	ldrh	r3, [r3, #6]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d004      	beq.n	8006ac8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f88f 	bl	8006be4 <USBD_CtlError>
      break;
 8006ac6:	e01a      	b.n	8006afe <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f043 0202 	orr.w	r2, r3, #2
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	330c      	adds	r3, #12
 8006ae8:	2202      	movs	r2, #2
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f8ea 	bl	8006cc6 <USBD_CtlSendData>
    break;
 8006af2:	e004      	b.n	8006afe <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f874 	bl	8006be4 <USBD_CtlError>
    break;
 8006afc:	bf00      	nop
  }
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	885b      	ldrh	r3, [r3, #2]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d106      	bne.n	8006b26 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f92a 	bl	8006d7a <USBD_CtlSendStatus>
  }
}
 8006b26:	bf00      	nop
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d80b      	bhi.n	8006b5c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	885b      	ldrh	r3, [r3, #2]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d10c      	bne.n	8006b66 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f910 	bl	8006d7a <USBD_CtlSendStatus>
      }
      break;
 8006b5a:	e004      	b.n	8006b66 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f840 	bl	8006be4 <USBD_CtlError>
      break;
 8006b64:	e000      	b.n	8006b68 <USBD_ClrFeature+0x3a>
      break;
 8006b66:	bf00      	nop
  }
}
 8006b68:	bf00      	nop
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	781a      	ldrb	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	781a      	ldrb	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3301      	adds	r3, #1
 8006b98:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff fad3 	bl	8006146 <SWAPBYTE>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3301      	adds	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7ff fac6 	bl	8006146 <SWAPBYTE>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff fab9 	bl	8006146 <SWAPBYTE>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	80da      	strh	r2, [r3, #6]
}
 8006bdc:	bf00      	nop
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bee:	2180      	movs	r1, #128	; 0x80
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fcb9 	bl	8007568 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fcb5 	bl	8007568 <USBD_LL_StallEP>
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b086      	sub	sp, #24
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d036      	beq.n	8006c8a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c20:	6938      	ldr	r0, [r7, #16]
 8006c22:	f000 f836 	bl	8006c92 <USBD_GetLen>
 8006c26:	4603      	mov	r3, r0
 8006c28:	3301      	adds	r3, #1
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	4413      	add	r3, r2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	7812      	ldrb	r2, [r2, #0]
 8006c3e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	3301      	adds	r3, #1
 8006c44:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c46:	7dfb      	ldrb	r3, [r7, #23]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	3301      	adds	r3, #1
 8006c54:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c56:	e013      	b.n	8006c80 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	7812      	ldrb	r2, [r2, #0]
 8006c62:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	3301      	adds	r3, #1
 8006c68:	613b      	str	r3, [r7, #16]
    idx++;
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	4413      	add	r3, r2
 8006c76:	2200      	movs	r2, #0
 8006c78:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e7      	bne.n	8006c58 <USBD_GetString+0x52>
 8006c88:	e000      	b.n	8006c8c <USBD_GetString+0x86>
    return;
 8006c8a:	bf00      	nop
  }
}
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ca2:	e005      	b.n	8006cb0 <USBD_GetLen+0x1e>
  {
    len++;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	3301      	adds	r3, #1
 8006cae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1f5      	bne.n	8006ca4 <USBD_GetLen+0x12>
  }

  return len;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	2100      	movs	r1, #0
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 fcc4 	bl	800767a <USBD_LL_Transmit>

  return USBD_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 fcb3 	bl	800767a <USBD_LL_Transmit>

  return USBD_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2203      	movs	r2, #3
 8006d2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	2100      	movs	r1, #0
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 fcb7 	bl	80076bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	2100      	movs	r1, #0
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 fca6 	bl	80076bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b082      	sub	sp, #8
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2204      	movs	r2, #4
 8006d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2100      	movs	r1, #0
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fc72 	bl	800767a <USBD_LL_Transmit>

  return USBD_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2205      	movs	r2, #5
 8006dac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006db0:	2300      	movs	r3, #0
 8006db2:	2200      	movs	r2, #0
 8006db4:	2100      	movs	r1, #0
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fc80 	bl	80076bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4912      	ldr	r1, [pc, #72]	; (8006e18 <MX_USB_DEVICE_Init+0x50>)
 8006dd0:	4812      	ldr	r0, [pc, #72]	; (8006e1c <MX_USB_DEVICE_Init+0x54>)
 8006dd2:	f7fe fef3 	bl	8005bbc <USBD_Init>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ddc:	f7fa f81a 	bl	8000e14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006de0:	490f      	ldr	r1, [pc, #60]	; (8006e20 <MX_USB_DEVICE_Init+0x58>)
 8006de2:	480e      	ldr	r0, [pc, #56]	; (8006e1c <MX_USB_DEVICE_Init+0x54>)
 8006de4:	f7fe ff20 	bl	8005c28 <USBD_RegisterClass>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006dee:	f7fa f811 	bl	8000e14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006df2:	490c      	ldr	r1, [pc, #48]	; (8006e24 <MX_USB_DEVICE_Init+0x5c>)
 8006df4:	4809      	ldr	r0, [pc, #36]	; (8006e1c <MX_USB_DEVICE_Init+0x54>)
 8006df6:	f7fe fe75 	bl	8005ae4 <USBD_CDC_RegisterInterface>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e00:	f7fa f808 	bl	8000e14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e04:	4805      	ldr	r0, [pc, #20]	; (8006e1c <MX_USB_DEVICE_Init+0x54>)
 8006e06:	f7fe ff30 	bl	8005c6a <USBD_Start>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e10:	f7fa f800 	bl	8000e14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e14:	bf00      	nop
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	20000130 	.word	0x20000130
 8006e1c:	20000270 	.word	0x20000270
 8006e20:	20000018 	.word	0x20000018
 8006e24:	2000011c 	.word	0x2000011c

08006e28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4905      	ldr	r1, [pc, #20]	; (8006e44 <CDC_Init_FS+0x1c>)
 8006e30:	4805      	ldr	r0, [pc, #20]	; (8006e48 <CDC_Init_FS+0x20>)
 8006e32:	f7fe fe6c 	bl	8005b0e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e36:	4905      	ldr	r1, [pc, #20]	; (8006e4c <CDC_Init_FS+0x24>)
 8006e38:	4803      	ldr	r0, [pc, #12]	; (8006e48 <CDC_Init_FS+0x20>)
 8006e3a:	f7fe fe81 	bl	8005b40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000d40 	.word	0x20000d40
 8006e48:	20000270 	.word	0x20000270
 8006e4c:	20000540 	.word	0x20000540

08006e50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e50:	b480      	push	{r7}
 8006e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	6039      	str	r1, [r7, #0]
 8006e6a:	71fb      	strb	r3, [r7, #7]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e70:	79fb      	ldrb	r3, [r7, #7]
 8006e72:	2b23      	cmp	r3, #35	; 0x23
 8006e74:	d84a      	bhi.n	8006f0c <CDC_Control_FS+0xac>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <CDC_Control_FS+0x1c>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006f0d 	.word	0x08006f0d
 8006e80:	08006f0d 	.word	0x08006f0d
 8006e84:	08006f0d 	.word	0x08006f0d
 8006e88:	08006f0d 	.word	0x08006f0d
 8006e8c:	08006f0d 	.word	0x08006f0d
 8006e90:	08006f0d 	.word	0x08006f0d
 8006e94:	08006f0d 	.word	0x08006f0d
 8006e98:	08006f0d 	.word	0x08006f0d
 8006e9c:	08006f0d 	.word	0x08006f0d
 8006ea0:	08006f0d 	.word	0x08006f0d
 8006ea4:	08006f0d 	.word	0x08006f0d
 8006ea8:	08006f0d 	.word	0x08006f0d
 8006eac:	08006f0d 	.word	0x08006f0d
 8006eb0:	08006f0d 	.word	0x08006f0d
 8006eb4:	08006f0d 	.word	0x08006f0d
 8006eb8:	08006f0d 	.word	0x08006f0d
 8006ebc:	08006f0d 	.word	0x08006f0d
 8006ec0:	08006f0d 	.word	0x08006f0d
 8006ec4:	08006f0d 	.word	0x08006f0d
 8006ec8:	08006f0d 	.word	0x08006f0d
 8006ecc:	08006f0d 	.word	0x08006f0d
 8006ed0:	08006f0d 	.word	0x08006f0d
 8006ed4:	08006f0d 	.word	0x08006f0d
 8006ed8:	08006f0d 	.word	0x08006f0d
 8006edc:	08006f0d 	.word	0x08006f0d
 8006ee0:	08006f0d 	.word	0x08006f0d
 8006ee4:	08006f0d 	.word	0x08006f0d
 8006ee8:	08006f0d 	.word	0x08006f0d
 8006eec:	08006f0d 	.word	0x08006f0d
 8006ef0:	08006f0d 	.word	0x08006f0d
 8006ef4:	08006f0d 	.word	0x08006f0d
 8006ef8:	08006f0d 	.word	0x08006f0d
 8006efc:	08006f0d 	.word	0x08006f0d
 8006f00:	08006f0d 	.word	0x08006f0d
 8006f04:	08006f0d 	.word	0x08006f0d
 8006f08:	08006f0d 	.word	0x08006f0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f0c:	bf00      	nop
  }

  return (USBD_OK);
 8006f0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	4805      	ldr	r0, [pc, #20]	; (8006f40 <CDC_Receive_FS+0x24>)
 8006f2a:	f7fe fe09 	bl	8005b40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f2e:	4804      	ldr	r0, [pc, #16]	; (8006f40 <CDC_Receive_FS+0x24>)
 8006f30:	f7fe fe1a 	bl	8005b68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000270 	.word	0x20000270

08006f44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2212      	movs	r2, #18
 8006f78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f7a:	4b03      	ldr	r3, [pc, #12]	; (8006f88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	2000014c 	.word	0x2000014c

08006f8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	6039      	str	r1, [r7, #0]
 8006f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f9e:	4b03      	ldr	r3, [pc, #12]	; (8006fac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	20000160 	.word	0x20000160

08006fb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6039      	str	r1, [r7, #0]
 8006fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d105      	bne.n	8006fce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4907      	ldr	r1, [pc, #28]	; (8006fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fc6:	4808      	ldr	r0, [pc, #32]	; (8006fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fc8:	f7ff fe1d 	bl	8006c06 <USBD_GetString>
 8006fcc:	e004      	b.n	8006fd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	4904      	ldr	r1, [pc, #16]	; (8006fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fd2:	4805      	ldr	r0, [pc, #20]	; (8006fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fd4:	f7ff fe17 	bl	8006c06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20001540 	.word	0x20001540
 8006fe8:	08008044 	.word	0x08008044

08006fec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	4904      	ldr	r1, [pc, #16]	; (800700c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ffc:	4804      	ldr	r0, [pc, #16]	; (8007010 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ffe:	f7ff fe02 	bl	8006c06 <USBD_GetString>
  return USBD_StrDesc;
 8007002:	4b02      	ldr	r3, [pc, #8]	; (800700c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20001540 	.word	0x20001540
 8007010:	0800805c 	.word	0x0800805c

08007014 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	6039      	str	r1, [r7, #0]
 800701e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	221a      	movs	r2, #26
 8007024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007026:	f000 f843 	bl	80070b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800702a:	4b02      	ldr	r3, [pc, #8]	; (8007034 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	20000164 	.word	0x20000164

08007038 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	6039      	str	r1, [r7, #0]
 8007042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d105      	bne.n	8007056 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	4907      	ldr	r1, [pc, #28]	; (800706c <USBD_FS_ConfigStrDescriptor+0x34>)
 800704e:	4808      	ldr	r0, [pc, #32]	; (8007070 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007050:	f7ff fdd9 	bl	8006c06 <USBD_GetString>
 8007054:	e004      	b.n	8007060 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	4904      	ldr	r1, [pc, #16]	; (800706c <USBD_FS_ConfigStrDescriptor+0x34>)
 800705a:	4805      	ldr	r0, [pc, #20]	; (8007070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800705c:	f7ff fdd3 	bl	8006c06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007060:	4b02      	ldr	r3, [pc, #8]	; (800706c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20001540 	.word	0x20001540
 8007070:	08008070 	.word	0x08008070

08007074 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	6039      	str	r1, [r7, #0]
 800707e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d105      	bne.n	8007092 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	4907      	ldr	r1, [pc, #28]	; (80070a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800708a:	4808      	ldr	r0, [pc, #32]	; (80070ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800708c:	f7ff fdbb 	bl	8006c06 <USBD_GetString>
 8007090:	e004      	b.n	800709c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4904      	ldr	r1, [pc, #16]	; (80070a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007096:	4805      	ldr	r0, [pc, #20]	; (80070ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007098:	f7ff fdb5 	bl	8006c06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20001540 	.word	0x20001540
 80070ac:	0800807c 	.word	0x0800807c

080070b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070b6:	4b0f      	ldr	r3, [pc, #60]	; (80070f4 <Get_SerialNum+0x44>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070bc:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <Get_SerialNum+0x48>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070c2:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <Get_SerialNum+0x4c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070d6:	2208      	movs	r2, #8
 80070d8:	4909      	ldr	r1, [pc, #36]	; (8007100 <Get_SerialNum+0x50>)
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f814 	bl	8007108 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070e0:	2204      	movs	r2, #4
 80070e2:	4908      	ldr	r1, [pc, #32]	; (8007104 <Get_SerialNum+0x54>)
 80070e4:	68b8      	ldr	r0, [r7, #8]
 80070e6:	f000 f80f 	bl	8007108 <IntToUnicode>
  }
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	1fff7a10 	.word	0x1fff7a10
 80070f8:	1fff7a14 	.word	0x1fff7a14
 80070fc:	1fff7a18 	.word	0x1fff7a18
 8007100:	20000166 	.word	0x20000166
 8007104:	20000176 	.word	0x20000176

08007108 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	4613      	mov	r3, r2
 8007114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800711a:	2300      	movs	r3, #0
 800711c:	75fb      	strb	r3, [r7, #23]
 800711e:	e027      	b.n	8007170 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	0f1b      	lsrs	r3, r3, #28
 8007124:	2b09      	cmp	r3, #9
 8007126:	d80b      	bhi.n	8007140 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	0f1b      	lsrs	r3, r3, #28
 800712c:	b2da      	uxtb	r2, r3
 800712e:	7dfb      	ldrb	r3, [r7, #23]
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	4619      	mov	r1, r3
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	440b      	add	r3, r1
 8007138:	3230      	adds	r2, #48	; 0x30
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	e00a      	b.n	8007156 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	0f1b      	lsrs	r3, r3, #28
 8007144:	b2da      	uxtb	r2, r3
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	4619      	mov	r1, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	440b      	add	r3, r1
 8007150:	3237      	adds	r2, #55	; 0x37
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	3301      	adds	r3, #1
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	4413      	add	r3, r2
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	3301      	adds	r3, #1
 800716e:	75fb      	strb	r3, [r7, #23]
 8007170:	7dfa      	ldrb	r2, [r7, #23]
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	429a      	cmp	r2, r3
 8007176:	d3d3      	bcc.n	8007120 <IntToUnicode+0x18>
  }
}
 8007178:	bf00      	nop
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08a      	sub	sp, #40	; 0x28
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800718c:	f107 0314 	add.w	r3, r7, #20
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	609a      	str	r2, [r3, #8]
 8007198:	60da      	str	r2, [r3, #12]
 800719a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071a4:	d13a      	bne.n	800721c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071a6:	2300      	movs	r3, #0
 80071a8:	613b      	str	r3, [r7, #16]
 80071aa:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <HAL_PCD_MspInit+0xa0>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <HAL_PCD_MspInit+0xa0>)
 80071b0:	f043 0301 	orr.w	r3, r3, #1
 80071b4:	6313      	str	r3, [r2, #48]	; 0x30
 80071b6:	4b1b      	ldr	r3, [pc, #108]	; (8007224 <HAL_PCD_MspInit+0xa0>)
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80071c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80071c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071c8:	2302      	movs	r3, #2
 80071ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071d0:	2303      	movs	r3, #3
 80071d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071d4:	230a      	movs	r3, #10
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071d8:	f107 0314 	add.w	r3, r7, #20
 80071dc:	4619      	mov	r1, r3
 80071de:	4812      	ldr	r0, [pc, #72]	; (8007228 <HAL_PCD_MspInit+0xa4>)
 80071e0:	f7fa f960 	bl	80014a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071e4:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <HAL_PCD_MspInit+0xa0>)
 80071e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e8:	4a0e      	ldr	r2, [pc, #56]	; (8007224 <HAL_PCD_MspInit+0xa0>)
 80071ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ee:	6353      	str	r3, [r2, #52]	; 0x34
 80071f0:	2300      	movs	r3, #0
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	4b0b      	ldr	r3, [pc, #44]	; (8007224 <HAL_PCD_MspInit+0xa0>)
 80071f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f8:	4a0a      	ldr	r2, [pc, #40]	; (8007224 <HAL_PCD_MspInit+0xa0>)
 80071fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071fe:	6453      	str	r3, [r2, #68]	; 0x44
 8007200:	4b08      	ldr	r3, [pc, #32]	; (8007224 <HAL_PCD_MspInit+0xa0>)
 8007202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800720c:	2200      	movs	r2, #0
 800720e:	2100      	movs	r1, #0
 8007210:	2043      	movs	r0, #67	; 0x43
 8007212:	f7fa f910 	bl	8001436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007216:	2043      	movs	r0, #67	; 0x43
 8007218:	f7fa f929 	bl	800146e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800721c:	bf00      	nop
 800721e:	3728      	adds	r7, #40	; 0x28
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40023800 	.word	0x40023800
 8007228:	40020000 	.word	0x40020000

0800722c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007240:	4619      	mov	r1, r3
 8007242:	4610      	mov	r0, r2
 8007244:	f7fe fd5c 	bl	8005d00 <USBD_LL_SetupStage>
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007262:	78fa      	ldrb	r2, [r7, #3]
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	1a9b      	subs	r3, r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	4619      	mov	r1, r3
 800727a:	f7fe fd94 	bl	8005da6 <USBD_LL_DataOutStage>
}
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	460b      	mov	r3, r1
 8007290:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007298:	78fa      	ldrb	r2, [r7, #3]
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	4613      	mov	r3, r2
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	1a9b      	subs	r3, r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	3348      	adds	r3, #72	; 0x48
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	78fb      	ldrb	r3, [r7, #3]
 80072ac:	4619      	mov	r1, r3
 80072ae:	f7fe fddd 	bl	8005e6c <USBD_LL_DataInStage>
}
 80072b2:	bf00      	nop
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b082      	sub	sp, #8
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fe fee1 	bl	8006090 <USBD_LL_SOF>
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072de:	2301      	movs	r3, #1
 80072e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d102      	bne.n	80072f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]
 80072ee:	e008      	b.n	8007302 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d102      	bne.n	80072fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
 80072fc:	e001      	b.n	8007302 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80072fe:	f7f9 fd89 	bl	8000e14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007308:	7bfa      	ldrb	r2, [r7, #15]
 800730a:	4611      	mov	r1, r2
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe fe84 	bl	800601a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe fe3d 	bl	8005f98 <USBD_LL_Reset>
}
 800731e:	bf00      	nop
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe fe7f 	bl	800603a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6812      	ldr	r2, [r2, #0]
 800734a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800734e:	f043 0301 	orr.w	r3, r3, #1
 8007352:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800735c:	4b04      	ldr	r3, [pc, #16]	; (8007370 <HAL_PCD_SuspendCallback+0x48>)
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	4a03      	ldr	r2, [pc, #12]	; (8007370 <HAL_PCD_SuspendCallback+0x48>)
 8007362:	f043 0306 	orr.w	r3, r3, #6
 8007366:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	e000ed00 	.word	0xe000ed00

08007374 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe fe6e 	bl	8006064 <USBD_LL_Resume>
}
 8007388:	bf00      	nop
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073a2:	78fa      	ldrb	r2, [r7, #3]
 80073a4:	4611      	mov	r1, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fe99 	bl	80060de <USBD_LL_IsoOUTIncomplete>
}
 80073ac:	bf00      	nop
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073c6:	78fa      	ldrb	r2, [r7, #3]
 80073c8:	4611      	mov	r1, r2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe fe7a 	bl	80060c4 <USBD_LL_IsoINIncomplete>
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe fe86 	bl	80060f8 <USBD_LL_DevConnected>
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fe83 	bl	800610e <USBD_LL_DevDisconnected>
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d13c      	bne.n	800749a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007420:	4a20      	ldr	r2, [pc, #128]	; (80074a4 <USBD_LL_Init+0x94>)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a1e      	ldr	r2, [pc, #120]	; (80074a4 <USBD_LL_Init+0x94>)
 800742c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007430:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <USBD_LL_Init+0x94>)
 8007432:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007436:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007438:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <USBD_LL_Init+0x94>)
 800743a:	2204      	movs	r2, #4
 800743c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800743e:	4b19      	ldr	r3, [pc, #100]	; (80074a4 <USBD_LL_Init+0x94>)
 8007440:	2202      	movs	r2, #2
 8007442:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007444:	4b17      	ldr	r3, [pc, #92]	; (80074a4 <USBD_LL_Init+0x94>)
 8007446:	2200      	movs	r2, #0
 8007448:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800744a:	4b16      	ldr	r3, [pc, #88]	; (80074a4 <USBD_LL_Init+0x94>)
 800744c:	2202      	movs	r2, #2
 800744e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007450:	4b14      	ldr	r3, [pc, #80]	; (80074a4 <USBD_LL_Init+0x94>)
 8007452:	2200      	movs	r2, #0
 8007454:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007456:	4b13      	ldr	r3, [pc, #76]	; (80074a4 <USBD_LL_Init+0x94>)
 8007458:	2200      	movs	r2, #0
 800745a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800745c:	4b11      	ldr	r3, [pc, #68]	; (80074a4 <USBD_LL_Init+0x94>)
 800745e:	2200      	movs	r2, #0
 8007460:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007462:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <USBD_LL_Init+0x94>)
 8007464:	2200      	movs	r2, #0
 8007466:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007468:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <USBD_LL_Init+0x94>)
 800746a:	2200      	movs	r2, #0
 800746c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800746e:	480d      	ldr	r0, [pc, #52]	; (80074a4 <USBD_LL_Init+0x94>)
 8007470:	f7fa fa09 	bl	8001886 <HAL_PCD_Init>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800747a:	f7f9 fccb 	bl	8000e14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800747e:	2180      	movs	r1, #128	; 0x80
 8007480:	4808      	ldr	r0, [pc, #32]	; (80074a4 <USBD_LL_Init+0x94>)
 8007482:	f7fb fb66 	bl	8002b52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007486:	2240      	movs	r2, #64	; 0x40
 8007488:	2100      	movs	r1, #0
 800748a:	4806      	ldr	r0, [pc, #24]	; (80074a4 <USBD_LL_Init+0x94>)
 800748c:	f7fb fb1a 	bl	8002ac4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007490:	2280      	movs	r2, #128	; 0x80
 8007492:	2101      	movs	r1, #1
 8007494:	4803      	ldr	r0, [pc, #12]	; (80074a4 <USBD_LL_Init+0x94>)
 8007496:	f7fb fb15 	bl	8002ac4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	20001740 	.word	0x20001740

080074a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fa fafe 	bl	8001ac0 <HAL_PCD_Start>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 f92a 	bl	8007724 <USBD_Get_USB_Status>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	4608      	mov	r0, r1
 80074e8:	4611      	mov	r1, r2
 80074ea:	461a      	mov	r2, r3
 80074ec:	4603      	mov	r3, r0
 80074ee:	70fb      	strb	r3, [r7, #3]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70bb      	strb	r3, [r7, #2]
 80074f4:	4613      	mov	r3, r2
 80074f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007506:	78bb      	ldrb	r3, [r7, #2]
 8007508:	883a      	ldrh	r2, [r7, #0]
 800750a:	78f9      	ldrb	r1, [r7, #3]
 800750c:	f7fa fee2 	bl	80022d4 <HAL_PCD_EP_Open>
 8007510:	4603      	mov	r3, r0
 8007512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	4618      	mov	r0, r3
 8007518:	f000 f904 	bl	8007724 <USBD_Get_USB_Status>
 800751c:	4603      	mov	r3, r0
 800751e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007520:	7bbb      	ldrb	r3, [r7, #14]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	460b      	mov	r3, r1
 8007534:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007544:	78fa      	ldrb	r2, [r7, #3]
 8007546:	4611      	mov	r1, r2
 8007548:	4618      	mov	r0, r3
 800754a:	f7fa ff2b 	bl	80023a4 <HAL_PCD_EP_Close>
 800754e:	4603      	mov	r3, r0
 8007550:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	4618      	mov	r0, r3
 8007556:	f000 f8e5 	bl	8007724 <USBD_Get_USB_Status>
 800755a:	4603      	mov	r3, r0
 800755c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800755e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007582:	78fa      	ldrb	r2, [r7, #3]
 8007584:	4611      	mov	r1, r2
 8007586:	4618      	mov	r0, r3
 8007588:	f7fb f803 	bl	8002592 <HAL_PCD_EP_SetStall>
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f8c6 	bl	8007724 <USBD_Get_USB_Status>
 8007598:	4603      	mov	r3, r0
 800759a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800759c:	7bbb      	ldrb	r3, [r7, #14]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075c0:	78fa      	ldrb	r2, [r7, #3]
 80075c2:	4611      	mov	r1, r2
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fb f848 	bl	800265a <HAL_PCD_EP_ClrStall>
 80075ca:	4603      	mov	r3, r0
 80075cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 f8a7 	bl	8007724 <USBD_Get_USB_Status>
 80075d6:	4603      	mov	r3, r0
 80075d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075da:	7bbb      	ldrb	r3, [r7, #14]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80075f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	da0b      	bge.n	8007618 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007606:	68f9      	ldr	r1, [r7, #12]
 8007608:	4613      	mov	r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	1a9b      	subs	r3, r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	333e      	adds	r3, #62	; 0x3e
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	e00b      	b.n	8007630 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007618:	78fb      	ldrb	r3, [r7, #3]
 800761a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800761e:	68f9      	ldr	r1, [r7, #12]
 8007620:	4613      	mov	r3, r2
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800762e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007656:	78fa      	ldrb	r2, [r7, #3]
 8007658:	4611      	mov	r1, r2
 800765a:	4618      	mov	r0, r3
 800765c:	f7fa fe15 	bl	800228a <HAL_PCD_SetAddress>
 8007660:	4603      	mov	r3, r0
 8007662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 f85c 	bl	8007724 <USBD_Get_USB_Status>
 800766c:	4603      	mov	r3, r0
 800766e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007670:	7bbb      	ldrb	r3, [r7, #14]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b086      	sub	sp, #24
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	603b      	str	r3, [r7, #0]
 8007686:	460b      	mov	r3, r1
 8007688:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007698:	7af9      	ldrb	r1, [r7, #11]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	f7fa ff2e 	bl	80024fe <HAL_PCD_EP_Transmit>
 80076a2:	4603      	mov	r3, r0
 80076a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 f83b 	bl	8007724 <USBD_Get_USB_Status>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	460b      	mov	r3, r1
 80076ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076da:	7af9      	ldrb	r1, [r7, #11]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	f7fa feaa 	bl	8002438 <HAL_PCD_EP_Receive>
 80076e4:	4603      	mov	r3, r0
 80076e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 f81a 	bl	8007724 <USBD_Get_USB_Status>
 80076f0:	4603      	mov	r3, r0
 80076f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007710:	78fa      	ldrb	r2, [r7, #3]
 8007712:	4611      	mov	r1, r2
 8007714:	4618      	mov	r0, r3
 8007716:	f7fa feda 	bl	80024ce <HAL_PCD_EP_GetRxCount>
 800771a:	4603      	mov	r3, r0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	2b03      	cmp	r3, #3
 8007736:	d817      	bhi.n	8007768 <USBD_Get_USB_Status+0x44>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <USBD_Get_USB_Status+0x1c>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007751 	.word	0x08007751
 8007744:	08007757 	.word	0x08007757
 8007748:	0800775d 	.word	0x0800775d
 800774c:	08007763 	.word	0x08007763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73fb      	strb	r3, [r7, #15]
    break;
 8007754:	e00b      	b.n	800776e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007756:	2303      	movs	r3, #3
 8007758:	73fb      	strb	r3, [r7, #15]
    break;
 800775a:	e008      	b.n	800776e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800775c:	2301      	movs	r3, #1
 800775e:	73fb      	strb	r3, [r7, #15]
    break;
 8007760:	e005      	b.n	800776e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007762:	2303      	movs	r3, #3
 8007764:	73fb      	strb	r3, [r7, #15]
    break;
 8007766:	e002      	b.n	800776e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007768:	2303      	movs	r3, #3
 800776a:	73fb      	strb	r3, [r7, #15]
    break;
 800776c:	bf00      	nop
  }
  return usb_status;
 800776e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <__errno>:
 800777c:	4b01      	ldr	r3, [pc, #4]	; (8007784 <__errno+0x8>)
 800777e:	6818      	ldr	r0, [r3, #0]
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000180 	.word	0x20000180

08007788 <__libc_init_array>:
 8007788:	b570      	push	{r4, r5, r6, lr}
 800778a:	4e0d      	ldr	r6, [pc, #52]	; (80077c0 <__libc_init_array+0x38>)
 800778c:	4c0d      	ldr	r4, [pc, #52]	; (80077c4 <__libc_init_array+0x3c>)
 800778e:	1ba4      	subs	r4, r4, r6
 8007790:	10a4      	asrs	r4, r4, #2
 8007792:	2500      	movs	r5, #0
 8007794:	42a5      	cmp	r5, r4
 8007796:	d109      	bne.n	80077ac <__libc_init_array+0x24>
 8007798:	4e0b      	ldr	r6, [pc, #44]	; (80077c8 <__libc_init_array+0x40>)
 800779a:	4c0c      	ldr	r4, [pc, #48]	; (80077cc <__libc_init_array+0x44>)
 800779c:	f000 fc36 	bl	800800c <_init>
 80077a0:	1ba4      	subs	r4, r4, r6
 80077a2:	10a4      	asrs	r4, r4, #2
 80077a4:	2500      	movs	r5, #0
 80077a6:	42a5      	cmp	r5, r4
 80077a8:	d105      	bne.n	80077b6 <__libc_init_array+0x2e>
 80077aa:	bd70      	pop	{r4, r5, r6, pc}
 80077ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077b0:	4798      	blx	r3
 80077b2:	3501      	adds	r5, #1
 80077b4:	e7ee      	b.n	8007794 <__libc_init_array+0xc>
 80077b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077ba:	4798      	blx	r3
 80077bc:	3501      	adds	r5, #1
 80077be:	e7f2      	b.n	80077a6 <__libc_init_array+0x1e>
 80077c0:	080080d8 	.word	0x080080d8
 80077c4:	080080d8 	.word	0x080080d8
 80077c8:	080080d8 	.word	0x080080d8
 80077cc:	080080dc 	.word	0x080080dc

080077d0 <malloc>:
 80077d0:	4b02      	ldr	r3, [pc, #8]	; (80077dc <malloc+0xc>)
 80077d2:	4601      	mov	r1, r0
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	f000 b861 	b.w	800789c <_malloc_r>
 80077da:	bf00      	nop
 80077dc:	20000180 	.word	0x20000180

080077e0 <free>:
 80077e0:	4b02      	ldr	r3, [pc, #8]	; (80077ec <free+0xc>)
 80077e2:	4601      	mov	r1, r0
 80077e4:	6818      	ldr	r0, [r3, #0]
 80077e6:	f000 b80b 	b.w	8007800 <_free_r>
 80077ea:	bf00      	nop
 80077ec:	20000180 	.word	0x20000180

080077f0 <memset>:
 80077f0:	4402      	add	r2, r0
 80077f2:	4603      	mov	r3, r0
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d100      	bne.n	80077fa <memset+0xa>
 80077f8:	4770      	bx	lr
 80077fa:	f803 1b01 	strb.w	r1, [r3], #1
 80077fe:	e7f9      	b.n	80077f4 <memset+0x4>

08007800 <_free_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4605      	mov	r5, r0
 8007804:	2900      	cmp	r1, #0
 8007806:	d045      	beq.n	8007894 <_free_r+0x94>
 8007808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800780c:	1f0c      	subs	r4, r1, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	bfb8      	it	lt
 8007812:	18e4      	addlt	r4, r4, r3
 8007814:	f000 f8cc 	bl	80079b0 <__malloc_lock>
 8007818:	4a1f      	ldr	r2, [pc, #124]	; (8007898 <_free_r+0x98>)
 800781a:	6813      	ldr	r3, [r2, #0]
 800781c:	4610      	mov	r0, r2
 800781e:	b933      	cbnz	r3, 800782e <_free_r+0x2e>
 8007820:	6063      	str	r3, [r4, #4]
 8007822:	6014      	str	r4, [r2, #0]
 8007824:	4628      	mov	r0, r5
 8007826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800782a:	f000 b8c2 	b.w	80079b2 <__malloc_unlock>
 800782e:	42a3      	cmp	r3, r4
 8007830:	d90c      	bls.n	800784c <_free_r+0x4c>
 8007832:	6821      	ldr	r1, [r4, #0]
 8007834:	1862      	adds	r2, r4, r1
 8007836:	4293      	cmp	r3, r2
 8007838:	bf04      	itt	eq
 800783a:	681a      	ldreq	r2, [r3, #0]
 800783c:	685b      	ldreq	r3, [r3, #4]
 800783e:	6063      	str	r3, [r4, #4]
 8007840:	bf04      	itt	eq
 8007842:	1852      	addeq	r2, r2, r1
 8007844:	6022      	streq	r2, [r4, #0]
 8007846:	6004      	str	r4, [r0, #0]
 8007848:	e7ec      	b.n	8007824 <_free_r+0x24>
 800784a:	4613      	mov	r3, r2
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	b10a      	cbz	r2, 8007854 <_free_r+0x54>
 8007850:	42a2      	cmp	r2, r4
 8007852:	d9fa      	bls.n	800784a <_free_r+0x4a>
 8007854:	6819      	ldr	r1, [r3, #0]
 8007856:	1858      	adds	r0, r3, r1
 8007858:	42a0      	cmp	r0, r4
 800785a:	d10b      	bne.n	8007874 <_free_r+0x74>
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	4401      	add	r1, r0
 8007860:	1858      	adds	r0, r3, r1
 8007862:	4282      	cmp	r2, r0
 8007864:	6019      	str	r1, [r3, #0]
 8007866:	d1dd      	bne.n	8007824 <_free_r+0x24>
 8007868:	6810      	ldr	r0, [r2, #0]
 800786a:	6852      	ldr	r2, [r2, #4]
 800786c:	605a      	str	r2, [r3, #4]
 800786e:	4401      	add	r1, r0
 8007870:	6019      	str	r1, [r3, #0]
 8007872:	e7d7      	b.n	8007824 <_free_r+0x24>
 8007874:	d902      	bls.n	800787c <_free_r+0x7c>
 8007876:	230c      	movs	r3, #12
 8007878:	602b      	str	r3, [r5, #0]
 800787a:	e7d3      	b.n	8007824 <_free_r+0x24>
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	1821      	adds	r1, r4, r0
 8007880:	428a      	cmp	r2, r1
 8007882:	bf04      	itt	eq
 8007884:	6811      	ldreq	r1, [r2, #0]
 8007886:	6852      	ldreq	r2, [r2, #4]
 8007888:	6062      	str	r2, [r4, #4]
 800788a:	bf04      	itt	eq
 800788c:	1809      	addeq	r1, r1, r0
 800788e:	6021      	streq	r1, [r4, #0]
 8007890:	605c      	str	r4, [r3, #4]
 8007892:	e7c7      	b.n	8007824 <_free_r+0x24>
 8007894:	bd38      	pop	{r3, r4, r5, pc}
 8007896:	bf00      	nop
 8007898:	2000020c 	.word	0x2000020c

0800789c <_malloc_r>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	1ccd      	adds	r5, r1, #3
 80078a0:	f025 0503 	bic.w	r5, r5, #3
 80078a4:	3508      	adds	r5, #8
 80078a6:	2d0c      	cmp	r5, #12
 80078a8:	bf38      	it	cc
 80078aa:	250c      	movcc	r5, #12
 80078ac:	2d00      	cmp	r5, #0
 80078ae:	4606      	mov	r6, r0
 80078b0:	db01      	blt.n	80078b6 <_malloc_r+0x1a>
 80078b2:	42a9      	cmp	r1, r5
 80078b4:	d903      	bls.n	80078be <_malloc_r+0x22>
 80078b6:	230c      	movs	r3, #12
 80078b8:	6033      	str	r3, [r6, #0]
 80078ba:	2000      	movs	r0, #0
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	f000 f877 	bl	80079b0 <__malloc_lock>
 80078c2:	4a21      	ldr	r2, [pc, #132]	; (8007948 <_malloc_r+0xac>)
 80078c4:	6814      	ldr	r4, [r2, #0]
 80078c6:	4621      	mov	r1, r4
 80078c8:	b991      	cbnz	r1, 80078f0 <_malloc_r+0x54>
 80078ca:	4c20      	ldr	r4, [pc, #128]	; (800794c <_malloc_r+0xb0>)
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	b91b      	cbnz	r3, 80078d8 <_malloc_r+0x3c>
 80078d0:	4630      	mov	r0, r6
 80078d2:	f000 f83d 	bl	8007950 <_sbrk_r>
 80078d6:	6020      	str	r0, [r4, #0]
 80078d8:	4629      	mov	r1, r5
 80078da:	4630      	mov	r0, r6
 80078dc:	f000 f838 	bl	8007950 <_sbrk_r>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d124      	bne.n	800792e <_malloc_r+0x92>
 80078e4:	230c      	movs	r3, #12
 80078e6:	6033      	str	r3, [r6, #0]
 80078e8:	4630      	mov	r0, r6
 80078ea:	f000 f862 	bl	80079b2 <__malloc_unlock>
 80078ee:	e7e4      	b.n	80078ba <_malloc_r+0x1e>
 80078f0:	680b      	ldr	r3, [r1, #0]
 80078f2:	1b5b      	subs	r3, r3, r5
 80078f4:	d418      	bmi.n	8007928 <_malloc_r+0x8c>
 80078f6:	2b0b      	cmp	r3, #11
 80078f8:	d90f      	bls.n	800791a <_malloc_r+0x7e>
 80078fa:	600b      	str	r3, [r1, #0]
 80078fc:	50cd      	str	r5, [r1, r3]
 80078fe:	18cc      	adds	r4, r1, r3
 8007900:	4630      	mov	r0, r6
 8007902:	f000 f856 	bl	80079b2 <__malloc_unlock>
 8007906:	f104 000b 	add.w	r0, r4, #11
 800790a:	1d23      	adds	r3, r4, #4
 800790c:	f020 0007 	bic.w	r0, r0, #7
 8007910:	1ac3      	subs	r3, r0, r3
 8007912:	d0d3      	beq.n	80078bc <_malloc_r+0x20>
 8007914:	425a      	negs	r2, r3
 8007916:	50e2      	str	r2, [r4, r3]
 8007918:	e7d0      	b.n	80078bc <_malloc_r+0x20>
 800791a:	428c      	cmp	r4, r1
 800791c:	684b      	ldr	r3, [r1, #4]
 800791e:	bf16      	itet	ne
 8007920:	6063      	strne	r3, [r4, #4]
 8007922:	6013      	streq	r3, [r2, #0]
 8007924:	460c      	movne	r4, r1
 8007926:	e7eb      	b.n	8007900 <_malloc_r+0x64>
 8007928:	460c      	mov	r4, r1
 800792a:	6849      	ldr	r1, [r1, #4]
 800792c:	e7cc      	b.n	80078c8 <_malloc_r+0x2c>
 800792e:	1cc4      	adds	r4, r0, #3
 8007930:	f024 0403 	bic.w	r4, r4, #3
 8007934:	42a0      	cmp	r0, r4
 8007936:	d005      	beq.n	8007944 <_malloc_r+0xa8>
 8007938:	1a21      	subs	r1, r4, r0
 800793a:	4630      	mov	r0, r6
 800793c:	f000 f808 	bl	8007950 <_sbrk_r>
 8007940:	3001      	adds	r0, #1
 8007942:	d0cf      	beq.n	80078e4 <_malloc_r+0x48>
 8007944:	6025      	str	r5, [r4, #0]
 8007946:	e7db      	b.n	8007900 <_malloc_r+0x64>
 8007948:	2000020c 	.word	0x2000020c
 800794c:	20000210 	.word	0x20000210

08007950 <_sbrk_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4c06      	ldr	r4, [pc, #24]	; (800796c <_sbrk_r+0x1c>)
 8007954:	2300      	movs	r3, #0
 8007956:	4605      	mov	r5, r0
 8007958:	4608      	mov	r0, r1
 800795a:	6023      	str	r3, [r4, #0]
 800795c:	f7f9 fb86 	bl	800106c <_sbrk>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_sbrk_r+0x1a>
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	b103      	cbz	r3, 800796a <_sbrk_r+0x1a>
 8007968:	602b      	str	r3, [r5, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	20001b48 	.word	0x20001b48

08007970 <siprintf>:
 8007970:	b40e      	push	{r1, r2, r3}
 8007972:	b500      	push	{lr}
 8007974:	b09c      	sub	sp, #112	; 0x70
 8007976:	ab1d      	add	r3, sp, #116	; 0x74
 8007978:	9002      	str	r0, [sp, #8]
 800797a:	9006      	str	r0, [sp, #24]
 800797c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007980:	4809      	ldr	r0, [pc, #36]	; (80079a8 <siprintf+0x38>)
 8007982:	9107      	str	r1, [sp, #28]
 8007984:	9104      	str	r1, [sp, #16]
 8007986:	4909      	ldr	r1, [pc, #36]	; (80079ac <siprintf+0x3c>)
 8007988:	f853 2b04 	ldr.w	r2, [r3], #4
 800798c:	9105      	str	r1, [sp, #20]
 800798e:	6800      	ldr	r0, [r0, #0]
 8007990:	9301      	str	r3, [sp, #4]
 8007992:	a902      	add	r1, sp, #8
 8007994:	f000 f868 	bl	8007a68 <_svfiprintf_r>
 8007998:	9b02      	ldr	r3, [sp, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	b01c      	add	sp, #112	; 0x70
 80079a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079a4:	b003      	add	sp, #12
 80079a6:	4770      	bx	lr
 80079a8:	20000180 	.word	0x20000180
 80079ac:	ffff0208 	.word	0xffff0208

080079b0 <__malloc_lock>:
 80079b0:	4770      	bx	lr

080079b2 <__malloc_unlock>:
 80079b2:	4770      	bx	lr

080079b4 <__ssputs_r>:
 80079b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b8:	688e      	ldr	r6, [r1, #8]
 80079ba:	429e      	cmp	r6, r3
 80079bc:	4682      	mov	sl, r0
 80079be:	460c      	mov	r4, r1
 80079c0:	4690      	mov	r8, r2
 80079c2:	4699      	mov	r9, r3
 80079c4:	d837      	bhi.n	8007a36 <__ssputs_r+0x82>
 80079c6:	898a      	ldrh	r2, [r1, #12]
 80079c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079cc:	d031      	beq.n	8007a32 <__ssputs_r+0x7e>
 80079ce:	6825      	ldr	r5, [r4, #0]
 80079d0:	6909      	ldr	r1, [r1, #16]
 80079d2:	1a6f      	subs	r7, r5, r1
 80079d4:	6965      	ldr	r5, [r4, #20]
 80079d6:	2302      	movs	r3, #2
 80079d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80079e0:	f109 0301 	add.w	r3, r9, #1
 80079e4:	443b      	add	r3, r7
 80079e6:	429d      	cmp	r5, r3
 80079e8:	bf38      	it	cc
 80079ea:	461d      	movcc	r5, r3
 80079ec:	0553      	lsls	r3, r2, #21
 80079ee:	d530      	bpl.n	8007a52 <__ssputs_r+0x9e>
 80079f0:	4629      	mov	r1, r5
 80079f2:	f7ff ff53 	bl	800789c <_malloc_r>
 80079f6:	4606      	mov	r6, r0
 80079f8:	b950      	cbnz	r0, 8007a10 <__ssputs_r+0x5c>
 80079fa:	230c      	movs	r3, #12
 80079fc:	f8ca 3000 	str.w	r3, [sl]
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a10:	463a      	mov	r2, r7
 8007a12:	6921      	ldr	r1, [r4, #16]
 8007a14:	f000 faa8 	bl	8007f68 <memcpy>
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a22:	81a3      	strh	r3, [r4, #12]
 8007a24:	6126      	str	r6, [r4, #16]
 8007a26:	6165      	str	r5, [r4, #20]
 8007a28:	443e      	add	r6, r7
 8007a2a:	1bed      	subs	r5, r5, r7
 8007a2c:	6026      	str	r6, [r4, #0]
 8007a2e:	60a5      	str	r5, [r4, #8]
 8007a30:	464e      	mov	r6, r9
 8007a32:	454e      	cmp	r6, r9
 8007a34:	d900      	bls.n	8007a38 <__ssputs_r+0x84>
 8007a36:	464e      	mov	r6, r9
 8007a38:	4632      	mov	r2, r6
 8007a3a:	4641      	mov	r1, r8
 8007a3c:	6820      	ldr	r0, [r4, #0]
 8007a3e:	f000 fa9e 	bl	8007f7e <memmove>
 8007a42:	68a3      	ldr	r3, [r4, #8]
 8007a44:	1b9b      	subs	r3, r3, r6
 8007a46:	60a3      	str	r3, [r4, #8]
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	441e      	add	r6, r3
 8007a4c:	6026      	str	r6, [r4, #0]
 8007a4e:	2000      	movs	r0, #0
 8007a50:	e7dc      	b.n	8007a0c <__ssputs_r+0x58>
 8007a52:	462a      	mov	r2, r5
 8007a54:	f000 faac 	bl	8007fb0 <_realloc_r>
 8007a58:	4606      	mov	r6, r0
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d1e2      	bne.n	8007a24 <__ssputs_r+0x70>
 8007a5e:	6921      	ldr	r1, [r4, #16]
 8007a60:	4650      	mov	r0, sl
 8007a62:	f7ff fecd 	bl	8007800 <_free_r>
 8007a66:	e7c8      	b.n	80079fa <__ssputs_r+0x46>

08007a68 <_svfiprintf_r>:
 8007a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6c:	461d      	mov	r5, r3
 8007a6e:	898b      	ldrh	r3, [r1, #12]
 8007a70:	061f      	lsls	r7, r3, #24
 8007a72:	b09d      	sub	sp, #116	; 0x74
 8007a74:	4680      	mov	r8, r0
 8007a76:	460c      	mov	r4, r1
 8007a78:	4616      	mov	r6, r2
 8007a7a:	d50f      	bpl.n	8007a9c <_svfiprintf_r+0x34>
 8007a7c:	690b      	ldr	r3, [r1, #16]
 8007a7e:	b96b      	cbnz	r3, 8007a9c <_svfiprintf_r+0x34>
 8007a80:	2140      	movs	r1, #64	; 0x40
 8007a82:	f7ff ff0b 	bl	800789c <_malloc_r>
 8007a86:	6020      	str	r0, [r4, #0]
 8007a88:	6120      	str	r0, [r4, #16]
 8007a8a:	b928      	cbnz	r0, 8007a98 <_svfiprintf_r+0x30>
 8007a8c:	230c      	movs	r3, #12
 8007a8e:	f8c8 3000 	str.w	r3, [r8]
 8007a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a96:	e0c8      	b.n	8007c2a <_svfiprintf_r+0x1c2>
 8007a98:	2340      	movs	r3, #64	; 0x40
 8007a9a:	6163      	str	r3, [r4, #20]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa0:	2320      	movs	r3, #32
 8007aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aa6:	2330      	movs	r3, #48	; 0x30
 8007aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aac:	9503      	str	r5, [sp, #12]
 8007aae:	f04f 0b01 	mov.w	fp, #1
 8007ab2:	4637      	mov	r7, r6
 8007ab4:	463d      	mov	r5, r7
 8007ab6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007aba:	b10b      	cbz	r3, 8007ac0 <_svfiprintf_r+0x58>
 8007abc:	2b25      	cmp	r3, #37	; 0x25
 8007abe:	d13e      	bne.n	8007b3e <_svfiprintf_r+0xd6>
 8007ac0:	ebb7 0a06 	subs.w	sl, r7, r6
 8007ac4:	d00b      	beq.n	8007ade <_svfiprintf_r+0x76>
 8007ac6:	4653      	mov	r3, sl
 8007ac8:	4632      	mov	r2, r6
 8007aca:	4621      	mov	r1, r4
 8007acc:	4640      	mov	r0, r8
 8007ace:	f7ff ff71 	bl	80079b4 <__ssputs_r>
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	f000 80a4 	beq.w	8007c20 <_svfiprintf_r+0x1b8>
 8007ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ada:	4453      	add	r3, sl
 8007adc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ade:	783b      	ldrb	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 809d 	beq.w	8007c20 <_svfiprintf_r+0x1b8>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007af0:	9304      	str	r3, [sp, #16]
 8007af2:	9307      	str	r3, [sp, #28]
 8007af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007af8:	931a      	str	r3, [sp, #104]	; 0x68
 8007afa:	462f      	mov	r7, r5
 8007afc:	2205      	movs	r2, #5
 8007afe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b02:	4850      	ldr	r0, [pc, #320]	; (8007c44 <_svfiprintf_r+0x1dc>)
 8007b04:	f7f8 fb64 	bl	80001d0 <memchr>
 8007b08:	9b04      	ldr	r3, [sp, #16]
 8007b0a:	b9d0      	cbnz	r0, 8007b42 <_svfiprintf_r+0xda>
 8007b0c:	06d9      	lsls	r1, r3, #27
 8007b0e:	bf44      	itt	mi
 8007b10:	2220      	movmi	r2, #32
 8007b12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b16:	071a      	lsls	r2, r3, #28
 8007b18:	bf44      	itt	mi
 8007b1a:	222b      	movmi	r2, #43	; 0x2b
 8007b1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b20:	782a      	ldrb	r2, [r5, #0]
 8007b22:	2a2a      	cmp	r2, #42	; 0x2a
 8007b24:	d015      	beq.n	8007b52 <_svfiprintf_r+0xea>
 8007b26:	9a07      	ldr	r2, [sp, #28]
 8007b28:	462f      	mov	r7, r5
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	250a      	movs	r5, #10
 8007b2e:	4639      	mov	r1, r7
 8007b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b34:	3b30      	subs	r3, #48	; 0x30
 8007b36:	2b09      	cmp	r3, #9
 8007b38:	d94d      	bls.n	8007bd6 <_svfiprintf_r+0x16e>
 8007b3a:	b1b8      	cbz	r0, 8007b6c <_svfiprintf_r+0x104>
 8007b3c:	e00f      	b.n	8007b5e <_svfiprintf_r+0xf6>
 8007b3e:	462f      	mov	r7, r5
 8007b40:	e7b8      	b.n	8007ab4 <_svfiprintf_r+0x4c>
 8007b42:	4a40      	ldr	r2, [pc, #256]	; (8007c44 <_svfiprintf_r+0x1dc>)
 8007b44:	1a80      	subs	r0, r0, r2
 8007b46:	fa0b f000 	lsl.w	r0, fp, r0
 8007b4a:	4318      	orrs	r0, r3
 8007b4c:	9004      	str	r0, [sp, #16]
 8007b4e:	463d      	mov	r5, r7
 8007b50:	e7d3      	b.n	8007afa <_svfiprintf_r+0x92>
 8007b52:	9a03      	ldr	r2, [sp, #12]
 8007b54:	1d11      	adds	r1, r2, #4
 8007b56:	6812      	ldr	r2, [r2, #0]
 8007b58:	9103      	str	r1, [sp, #12]
 8007b5a:	2a00      	cmp	r2, #0
 8007b5c:	db01      	blt.n	8007b62 <_svfiprintf_r+0xfa>
 8007b5e:	9207      	str	r2, [sp, #28]
 8007b60:	e004      	b.n	8007b6c <_svfiprintf_r+0x104>
 8007b62:	4252      	negs	r2, r2
 8007b64:	f043 0302 	orr.w	r3, r3, #2
 8007b68:	9207      	str	r2, [sp, #28]
 8007b6a:	9304      	str	r3, [sp, #16]
 8007b6c:	783b      	ldrb	r3, [r7, #0]
 8007b6e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b70:	d10c      	bne.n	8007b8c <_svfiprintf_r+0x124>
 8007b72:	787b      	ldrb	r3, [r7, #1]
 8007b74:	2b2a      	cmp	r3, #42	; 0x2a
 8007b76:	d133      	bne.n	8007be0 <_svfiprintf_r+0x178>
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	1d1a      	adds	r2, r3, #4
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	9203      	str	r2, [sp, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	bfb8      	it	lt
 8007b84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b88:	3702      	adds	r7, #2
 8007b8a:	9305      	str	r3, [sp, #20]
 8007b8c:	4d2e      	ldr	r5, [pc, #184]	; (8007c48 <_svfiprintf_r+0x1e0>)
 8007b8e:	7839      	ldrb	r1, [r7, #0]
 8007b90:	2203      	movs	r2, #3
 8007b92:	4628      	mov	r0, r5
 8007b94:	f7f8 fb1c 	bl	80001d0 <memchr>
 8007b98:	b138      	cbz	r0, 8007baa <_svfiprintf_r+0x142>
 8007b9a:	2340      	movs	r3, #64	; 0x40
 8007b9c:	1b40      	subs	r0, r0, r5
 8007b9e:	fa03 f000 	lsl.w	r0, r3, r0
 8007ba2:	9b04      	ldr	r3, [sp, #16]
 8007ba4:	4303      	orrs	r3, r0
 8007ba6:	3701      	adds	r7, #1
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	7839      	ldrb	r1, [r7, #0]
 8007bac:	4827      	ldr	r0, [pc, #156]	; (8007c4c <_svfiprintf_r+0x1e4>)
 8007bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bb2:	2206      	movs	r2, #6
 8007bb4:	1c7e      	adds	r6, r7, #1
 8007bb6:	f7f8 fb0b 	bl	80001d0 <memchr>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d038      	beq.n	8007c30 <_svfiprintf_r+0x1c8>
 8007bbe:	4b24      	ldr	r3, [pc, #144]	; (8007c50 <_svfiprintf_r+0x1e8>)
 8007bc0:	bb13      	cbnz	r3, 8007c08 <_svfiprintf_r+0x1a0>
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	3307      	adds	r3, #7
 8007bc6:	f023 0307 	bic.w	r3, r3, #7
 8007bca:	3308      	adds	r3, #8
 8007bcc:	9303      	str	r3, [sp, #12]
 8007bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd0:	444b      	add	r3, r9
 8007bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd4:	e76d      	b.n	8007ab2 <_svfiprintf_r+0x4a>
 8007bd6:	fb05 3202 	mla	r2, r5, r2, r3
 8007bda:	2001      	movs	r0, #1
 8007bdc:	460f      	mov	r7, r1
 8007bde:	e7a6      	b.n	8007b2e <_svfiprintf_r+0xc6>
 8007be0:	2300      	movs	r3, #0
 8007be2:	3701      	adds	r7, #1
 8007be4:	9305      	str	r3, [sp, #20]
 8007be6:	4619      	mov	r1, r3
 8007be8:	250a      	movs	r5, #10
 8007bea:	4638      	mov	r0, r7
 8007bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bf0:	3a30      	subs	r2, #48	; 0x30
 8007bf2:	2a09      	cmp	r2, #9
 8007bf4:	d903      	bls.n	8007bfe <_svfiprintf_r+0x196>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d0c8      	beq.n	8007b8c <_svfiprintf_r+0x124>
 8007bfa:	9105      	str	r1, [sp, #20]
 8007bfc:	e7c6      	b.n	8007b8c <_svfiprintf_r+0x124>
 8007bfe:	fb05 2101 	mla	r1, r5, r1, r2
 8007c02:	2301      	movs	r3, #1
 8007c04:	4607      	mov	r7, r0
 8007c06:	e7f0      	b.n	8007bea <_svfiprintf_r+0x182>
 8007c08:	ab03      	add	r3, sp, #12
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	4b11      	ldr	r3, [pc, #68]	; (8007c54 <_svfiprintf_r+0x1ec>)
 8007c10:	a904      	add	r1, sp, #16
 8007c12:	4640      	mov	r0, r8
 8007c14:	f3af 8000 	nop.w
 8007c18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007c1c:	4681      	mov	r9, r0
 8007c1e:	d1d6      	bne.n	8007bce <_svfiprintf_r+0x166>
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	065b      	lsls	r3, r3, #25
 8007c24:	f53f af35 	bmi.w	8007a92 <_svfiprintf_r+0x2a>
 8007c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c2a:	b01d      	add	sp, #116	; 0x74
 8007c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c30:	ab03      	add	r3, sp, #12
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	4622      	mov	r2, r4
 8007c36:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <_svfiprintf_r+0x1ec>)
 8007c38:	a904      	add	r1, sp, #16
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	f000 f882 	bl	8007d44 <_printf_i>
 8007c40:	e7ea      	b.n	8007c18 <_svfiprintf_r+0x1b0>
 8007c42:	bf00      	nop
 8007c44:	0800809c 	.word	0x0800809c
 8007c48:	080080a2 	.word	0x080080a2
 8007c4c:	080080a6 	.word	0x080080a6
 8007c50:	00000000 	.word	0x00000000
 8007c54:	080079b5 	.word	0x080079b5

08007c58 <_printf_common>:
 8007c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c5c:	4691      	mov	r9, r2
 8007c5e:	461f      	mov	r7, r3
 8007c60:	688a      	ldr	r2, [r1, #8]
 8007c62:	690b      	ldr	r3, [r1, #16]
 8007c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	bfb8      	it	lt
 8007c6c:	4613      	movlt	r3, r2
 8007c6e:	f8c9 3000 	str.w	r3, [r9]
 8007c72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c76:	4606      	mov	r6, r0
 8007c78:	460c      	mov	r4, r1
 8007c7a:	b112      	cbz	r2, 8007c82 <_printf_common+0x2a>
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	f8c9 3000 	str.w	r3, [r9]
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	0699      	lsls	r1, r3, #26
 8007c86:	bf42      	ittt	mi
 8007c88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007c8c:	3302      	addmi	r3, #2
 8007c8e:	f8c9 3000 	strmi.w	r3, [r9]
 8007c92:	6825      	ldr	r5, [r4, #0]
 8007c94:	f015 0506 	ands.w	r5, r5, #6
 8007c98:	d107      	bne.n	8007caa <_printf_common+0x52>
 8007c9a:	f104 0a19 	add.w	sl, r4, #25
 8007c9e:	68e3      	ldr	r3, [r4, #12]
 8007ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8007ca4:	1a9b      	subs	r3, r3, r2
 8007ca6:	42ab      	cmp	r3, r5
 8007ca8:	dc28      	bgt.n	8007cfc <_printf_common+0xa4>
 8007caa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007cae:	6822      	ldr	r2, [r4, #0]
 8007cb0:	3300      	adds	r3, #0
 8007cb2:	bf18      	it	ne
 8007cb4:	2301      	movne	r3, #1
 8007cb6:	0692      	lsls	r2, r2, #26
 8007cb8:	d42d      	bmi.n	8007d16 <_printf_common+0xbe>
 8007cba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	47c0      	blx	r8
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	d020      	beq.n	8007d0a <_printf_common+0xb2>
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	68e5      	ldr	r5, [r4, #12]
 8007ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8007cd0:	f003 0306 	and.w	r3, r3, #6
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	bf08      	it	eq
 8007cd8:	1aad      	subeq	r5, r5, r2
 8007cda:	68a3      	ldr	r3, [r4, #8]
 8007cdc:	6922      	ldr	r2, [r4, #16]
 8007cde:	bf0c      	ite	eq
 8007ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ce4:	2500      	movne	r5, #0
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	bfc4      	itt	gt
 8007cea:	1a9b      	subgt	r3, r3, r2
 8007cec:	18ed      	addgt	r5, r5, r3
 8007cee:	f04f 0900 	mov.w	r9, #0
 8007cf2:	341a      	adds	r4, #26
 8007cf4:	454d      	cmp	r5, r9
 8007cf6:	d11a      	bne.n	8007d2e <_printf_common+0xd6>
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	e008      	b.n	8007d0e <_printf_common+0xb6>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4652      	mov	r2, sl
 8007d00:	4639      	mov	r1, r7
 8007d02:	4630      	mov	r0, r6
 8007d04:	47c0      	blx	r8
 8007d06:	3001      	adds	r0, #1
 8007d08:	d103      	bne.n	8007d12 <_printf_common+0xba>
 8007d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d12:	3501      	adds	r5, #1
 8007d14:	e7c3      	b.n	8007c9e <_printf_common+0x46>
 8007d16:	18e1      	adds	r1, r4, r3
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	2030      	movs	r0, #48	; 0x30
 8007d1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d20:	4422      	add	r2, r4
 8007d22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d2a:	3302      	adds	r3, #2
 8007d2c:	e7c5      	b.n	8007cba <_printf_common+0x62>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4622      	mov	r2, r4
 8007d32:	4639      	mov	r1, r7
 8007d34:	4630      	mov	r0, r6
 8007d36:	47c0      	blx	r8
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d0e6      	beq.n	8007d0a <_printf_common+0xb2>
 8007d3c:	f109 0901 	add.w	r9, r9, #1
 8007d40:	e7d8      	b.n	8007cf4 <_printf_common+0x9c>
	...

08007d44 <_printf_i>:
 8007d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	7e09      	ldrb	r1, [r1, #24]
 8007d50:	b085      	sub	sp, #20
 8007d52:	296e      	cmp	r1, #110	; 0x6e
 8007d54:	4617      	mov	r7, r2
 8007d56:	4606      	mov	r6, r0
 8007d58:	4698      	mov	r8, r3
 8007d5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d5c:	f000 80b3 	beq.w	8007ec6 <_printf_i+0x182>
 8007d60:	d822      	bhi.n	8007da8 <_printf_i+0x64>
 8007d62:	2963      	cmp	r1, #99	; 0x63
 8007d64:	d036      	beq.n	8007dd4 <_printf_i+0x90>
 8007d66:	d80a      	bhi.n	8007d7e <_printf_i+0x3a>
 8007d68:	2900      	cmp	r1, #0
 8007d6a:	f000 80b9 	beq.w	8007ee0 <_printf_i+0x19c>
 8007d6e:	2958      	cmp	r1, #88	; 0x58
 8007d70:	f000 8083 	beq.w	8007e7a <_printf_i+0x136>
 8007d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007d7c:	e032      	b.n	8007de4 <_printf_i+0xa0>
 8007d7e:	2964      	cmp	r1, #100	; 0x64
 8007d80:	d001      	beq.n	8007d86 <_printf_i+0x42>
 8007d82:	2969      	cmp	r1, #105	; 0x69
 8007d84:	d1f6      	bne.n	8007d74 <_printf_i+0x30>
 8007d86:	6820      	ldr	r0, [r4, #0]
 8007d88:	6813      	ldr	r3, [r2, #0]
 8007d8a:	0605      	lsls	r5, r0, #24
 8007d8c:	f103 0104 	add.w	r1, r3, #4
 8007d90:	d52a      	bpl.n	8007de8 <_printf_i+0xa4>
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6011      	str	r1, [r2, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	da03      	bge.n	8007da2 <_printf_i+0x5e>
 8007d9a:	222d      	movs	r2, #45	; 0x2d
 8007d9c:	425b      	negs	r3, r3
 8007d9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007da2:	486f      	ldr	r0, [pc, #444]	; (8007f60 <_printf_i+0x21c>)
 8007da4:	220a      	movs	r2, #10
 8007da6:	e039      	b.n	8007e1c <_printf_i+0xd8>
 8007da8:	2973      	cmp	r1, #115	; 0x73
 8007daa:	f000 809d 	beq.w	8007ee8 <_printf_i+0x1a4>
 8007dae:	d808      	bhi.n	8007dc2 <_printf_i+0x7e>
 8007db0:	296f      	cmp	r1, #111	; 0x6f
 8007db2:	d020      	beq.n	8007df6 <_printf_i+0xb2>
 8007db4:	2970      	cmp	r1, #112	; 0x70
 8007db6:	d1dd      	bne.n	8007d74 <_printf_i+0x30>
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	f043 0320 	orr.w	r3, r3, #32
 8007dbe:	6023      	str	r3, [r4, #0]
 8007dc0:	e003      	b.n	8007dca <_printf_i+0x86>
 8007dc2:	2975      	cmp	r1, #117	; 0x75
 8007dc4:	d017      	beq.n	8007df6 <_printf_i+0xb2>
 8007dc6:	2978      	cmp	r1, #120	; 0x78
 8007dc8:	d1d4      	bne.n	8007d74 <_printf_i+0x30>
 8007dca:	2378      	movs	r3, #120	; 0x78
 8007dcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dd0:	4864      	ldr	r0, [pc, #400]	; (8007f64 <_printf_i+0x220>)
 8007dd2:	e055      	b.n	8007e80 <_printf_i+0x13c>
 8007dd4:	6813      	ldr	r3, [r2, #0]
 8007dd6:	1d19      	adds	r1, r3, #4
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6011      	str	r1, [r2, #0]
 8007ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007de0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007de4:	2301      	movs	r3, #1
 8007de6:	e08c      	b.n	8007f02 <_printf_i+0x1be>
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6011      	str	r1, [r2, #0]
 8007dec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007df0:	bf18      	it	ne
 8007df2:	b21b      	sxthne	r3, r3
 8007df4:	e7cf      	b.n	8007d96 <_printf_i+0x52>
 8007df6:	6813      	ldr	r3, [r2, #0]
 8007df8:	6825      	ldr	r5, [r4, #0]
 8007dfa:	1d18      	adds	r0, r3, #4
 8007dfc:	6010      	str	r0, [r2, #0]
 8007dfe:	0628      	lsls	r0, r5, #24
 8007e00:	d501      	bpl.n	8007e06 <_printf_i+0xc2>
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	e002      	b.n	8007e0c <_printf_i+0xc8>
 8007e06:	0668      	lsls	r0, r5, #25
 8007e08:	d5fb      	bpl.n	8007e02 <_printf_i+0xbe>
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	4854      	ldr	r0, [pc, #336]	; (8007f60 <_printf_i+0x21c>)
 8007e0e:	296f      	cmp	r1, #111	; 0x6f
 8007e10:	bf14      	ite	ne
 8007e12:	220a      	movne	r2, #10
 8007e14:	2208      	moveq	r2, #8
 8007e16:	2100      	movs	r1, #0
 8007e18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e1c:	6865      	ldr	r5, [r4, #4]
 8007e1e:	60a5      	str	r5, [r4, #8]
 8007e20:	2d00      	cmp	r5, #0
 8007e22:	f2c0 8095 	blt.w	8007f50 <_printf_i+0x20c>
 8007e26:	6821      	ldr	r1, [r4, #0]
 8007e28:	f021 0104 	bic.w	r1, r1, #4
 8007e2c:	6021      	str	r1, [r4, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d13d      	bne.n	8007eae <_printf_i+0x16a>
 8007e32:	2d00      	cmp	r5, #0
 8007e34:	f040 808e 	bne.w	8007f54 <_printf_i+0x210>
 8007e38:	4665      	mov	r5, ip
 8007e3a:	2a08      	cmp	r2, #8
 8007e3c:	d10b      	bne.n	8007e56 <_printf_i+0x112>
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	07db      	lsls	r3, r3, #31
 8007e42:	d508      	bpl.n	8007e56 <_printf_i+0x112>
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	6862      	ldr	r2, [r4, #4]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	bfde      	ittt	le
 8007e4c:	2330      	movle	r3, #48	; 0x30
 8007e4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e52:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007e56:	ebac 0305 	sub.w	r3, ip, r5
 8007e5a:	6123      	str	r3, [r4, #16]
 8007e5c:	f8cd 8000 	str.w	r8, [sp]
 8007e60:	463b      	mov	r3, r7
 8007e62:	aa03      	add	r2, sp, #12
 8007e64:	4621      	mov	r1, r4
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7ff fef6 	bl	8007c58 <_printf_common>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d14d      	bne.n	8007f0c <_printf_i+0x1c8>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e74:	b005      	add	sp, #20
 8007e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e7a:	4839      	ldr	r0, [pc, #228]	; (8007f60 <_printf_i+0x21c>)
 8007e7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007e80:	6813      	ldr	r3, [r2, #0]
 8007e82:	6821      	ldr	r1, [r4, #0]
 8007e84:	1d1d      	adds	r5, r3, #4
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6015      	str	r5, [r2, #0]
 8007e8a:	060a      	lsls	r2, r1, #24
 8007e8c:	d50b      	bpl.n	8007ea6 <_printf_i+0x162>
 8007e8e:	07ca      	lsls	r2, r1, #31
 8007e90:	bf44      	itt	mi
 8007e92:	f041 0120 	orrmi.w	r1, r1, #32
 8007e96:	6021      	strmi	r1, [r4, #0]
 8007e98:	b91b      	cbnz	r3, 8007ea2 <_printf_i+0x15e>
 8007e9a:	6822      	ldr	r2, [r4, #0]
 8007e9c:	f022 0220 	bic.w	r2, r2, #32
 8007ea0:	6022      	str	r2, [r4, #0]
 8007ea2:	2210      	movs	r2, #16
 8007ea4:	e7b7      	b.n	8007e16 <_printf_i+0xd2>
 8007ea6:	064d      	lsls	r5, r1, #25
 8007ea8:	bf48      	it	mi
 8007eaa:	b29b      	uxthmi	r3, r3
 8007eac:	e7ef      	b.n	8007e8e <_printf_i+0x14a>
 8007eae:	4665      	mov	r5, ip
 8007eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eb4:	fb02 3311 	mls	r3, r2, r1, r3
 8007eb8:	5cc3      	ldrb	r3, [r0, r3]
 8007eba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	2900      	cmp	r1, #0
 8007ec2:	d1f5      	bne.n	8007eb0 <_printf_i+0x16c>
 8007ec4:	e7b9      	b.n	8007e3a <_printf_i+0xf6>
 8007ec6:	6813      	ldr	r3, [r2, #0]
 8007ec8:	6825      	ldr	r5, [r4, #0]
 8007eca:	6961      	ldr	r1, [r4, #20]
 8007ecc:	1d18      	adds	r0, r3, #4
 8007ece:	6010      	str	r0, [r2, #0]
 8007ed0:	0628      	lsls	r0, r5, #24
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	d501      	bpl.n	8007eda <_printf_i+0x196>
 8007ed6:	6019      	str	r1, [r3, #0]
 8007ed8:	e002      	b.n	8007ee0 <_printf_i+0x19c>
 8007eda:	066a      	lsls	r2, r5, #25
 8007edc:	d5fb      	bpl.n	8007ed6 <_printf_i+0x192>
 8007ede:	8019      	strh	r1, [r3, #0]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	6123      	str	r3, [r4, #16]
 8007ee4:	4665      	mov	r5, ip
 8007ee6:	e7b9      	b.n	8007e5c <_printf_i+0x118>
 8007ee8:	6813      	ldr	r3, [r2, #0]
 8007eea:	1d19      	adds	r1, r3, #4
 8007eec:	6011      	str	r1, [r2, #0]
 8007eee:	681d      	ldr	r5, [r3, #0]
 8007ef0:	6862      	ldr	r2, [r4, #4]
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	f7f8 f96b 	bl	80001d0 <memchr>
 8007efa:	b108      	cbz	r0, 8007f00 <_printf_i+0x1bc>
 8007efc:	1b40      	subs	r0, r0, r5
 8007efe:	6060      	str	r0, [r4, #4]
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	6123      	str	r3, [r4, #16]
 8007f04:	2300      	movs	r3, #0
 8007f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f0a:	e7a7      	b.n	8007e5c <_printf_i+0x118>
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	462a      	mov	r2, r5
 8007f10:	4639      	mov	r1, r7
 8007f12:	4630      	mov	r0, r6
 8007f14:	47c0      	blx	r8
 8007f16:	3001      	adds	r0, #1
 8007f18:	d0aa      	beq.n	8007e70 <_printf_i+0x12c>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	079b      	lsls	r3, r3, #30
 8007f1e:	d413      	bmi.n	8007f48 <_printf_i+0x204>
 8007f20:	68e0      	ldr	r0, [r4, #12]
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	4298      	cmp	r0, r3
 8007f26:	bfb8      	it	lt
 8007f28:	4618      	movlt	r0, r3
 8007f2a:	e7a3      	b.n	8007e74 <_printf_i+0x130>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	464a      	mov	r2, r9
 8007f30:	4639      	mov	r1, r7
 8007f32:	4630      	mov	r0, r6
 8007f34:	47c0      	blx	r8
 8007f36:	3001      	adds	r0, #1
 8007f38:	d09a      	beq.n	8007e70 <_printf_i+0x12c>
 8007f3a:	3501      	adds	r5, #1
 8007f3c:	68e3      	ldr	r3, [r4, #12]
 8007f3e:	9a03      	ldr	r2, [sp, #12]
 8007f40:	1a9b      	subs	r3, r3, r2
 8007f42:	42ab      	cmp	r3, r5
 8007f44:	dcf2      	bgt.n	8007f2c <_printf_i+0x1e8>
 8007f46:	e7eb      	b.n	8007f20 <_printf_i+0x1dc>
 8007f48:	2500      	movs	r5, #0
 8007f4a:	f104 0919 	add.w	r9, r4, #25
 8007f4e:	e7f5      	b.n	8007f3c <_printf_i+0x1f8>
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1ac      	bne.n	8007eae <_printf_i+0x16a>
 8007f54:	7803      	ldrb	r3, [r0, #0]
 8007f56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f5e:	e76c      	b.n	8007e3a <_printf_i+0xf6>
 8007f60:	080080ad 	.word	0x080080ad
 8007f64:	080080be 	.word	0x080080be

08007f68 <memcpy>:
 8007f68:	b510      	push	{r4, lr}
 8007f6a:	1e43      	subs	r3, r0, #1
 8007f6c:	440a      	add	r2, r1
 8007f6e:	4291      	cmp	r1, r2
 8007f70:	d100      	bne.n	8007f74 <memcpy+0xc>
 8007f72:	bd10      	pop	{r4, pc}
 8007f74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f7c:	e7f7      	b.n	8007f6e <memcpy+0x6>

08007f7e <memmove>:
 8007f7e:	4288      	cmp	r0, r1
 8007f80:	b510      	push	{r4, lr}
 8007f82:	eb01 0302 	add.w	r3, r1, r2
 8007f86:	d807      	bhi.n	8007f98 <memmove+0x1a>
 8007f88:	1e42      	subs	r2, r0, #1
 8007f8a:	4299      	cmp	r1, r3
 8007f8c:	d00a      	beq.n	8007fa4 <memmove+0x26>
 8007f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f92:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f96:	e7f8      	b.n	8007f8a <memmove+0xc>
 8007f98:	4283      	cmp	r3, r0
 8007f9a:	d9f5      	bls.n	8007f88 <memmove+0xa>
 8007f9c:	1881      	adds	r1, r0, r2
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	42d3      	cmn	r3, r2
 8007fa2:	d100      	bne.n	8007fa6 <memmove+0x28>
 8007fa4:	bd10      	pop	{r4, pc}
 8007fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007faa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007fae:	e7f7      	b.n	8007fa0 <memmove+0x22>

08007fb0 <_realloc_r>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	4607      	mov	r7, r0
 8007fb4:	4614      	mov	r4, r2
 8007fb6:	460e      	mov	r6, r1
 8007fb8:	b921      	cbnz	r1, 8007fc4 <_realloc_r+0x14>
 8007fba:	4611      	mov	r1, r2
 8007fbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007fc0:	f7ff bc6c 	b.w	800789c <_malloc_r>
 8007fc4:	b922      	cbnz	r2, 8007fd0 <_realloc_r+0x20>
 8007fc6:	f7ff fc1b 	bl	8007800 <_free_r>
 8007fca:	4625      	mov	r5, r4
 8007fcc:	4628      	mov	r0, r5
 8007fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fd0:	f000 f814 	bl	8007ffc <_malloc_usable_size_r>
 8007fd4:	42a0      	cmp	r0, r4
 8007fd6:	d20f      	bcs.n	8007ff8 <_realloc_r+0x48>
 8007fd8:	4621      	mov	r1, r4
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f7ff fc5e 	bl	800789c <_malloc_r>
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d0f2      	beq.n	8007fcc <_realloc_r+0x1c>
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	4622      	mov	r2, r4
 8007fea:	f7ff ffbd 	bl	8007f68 <memcpy>
 8007fee:	4631      	mov	r1, r6
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7ff fc05 	bl	8007800 <_free_r>
 8007ff6:	e7e9      	b.n	8007fcc <_realloc_r+0x1c>
 8007ff8:	4635      	mov	r5, r6
 8007ffa:	e7e7      	b.n	8007fcc <_realloc_r+0x1c>

08007ffc <_malloc_usable_size_r>:
 8007ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008000:	1f18      	subs	r0, r3, #4
 8008002:	2b00      	cmp	r3, #0
 8008004:	bfbc      	itt	lt
 8008006:	580b      	ldrlt	r3, [r1, r0]
 8008008:	18c0      	addlt	r0, r0, r3
 800800a:	4770      	bx	lr

0800800c <_init>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	bf00      	nop
 8008010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008012:	bc08      	pop	{r3}
 8008014:	469e      	mov	lr, r3
 8008016:	4770      	bx	lr

08008018 <_fini>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	bf00      	nop
 800801c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801e:	bc08      	pop	{r3}
 8008020:	469e      	mov	lr, r3
 8008022:	4770      	bx	lr
